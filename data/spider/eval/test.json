{"sql": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1", "translated_sql": "( id of students ) , ( name of students ) , ( age of students ) that belongs to ( ( visitor ) , and ( ( visit ) satisfied that ( ( id of students ) equal to ( visitor id of addresses ) ) ) ) , grouped by ( id of students ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )", "question": "ids, names, and ages of all visitors who visited more than 1 visit.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "translated_sql": "( series name of countries ) that belongs to ( ( tv channel ) , and ( ( tv series ) satisfied that ( ( id of countries ) equal to ( channel of car makers ) ) ) ) , that have ( ( episode of car makers ) equal to ( a love of a lifetime ) )", "question": "series are on TV channel A Love of a Lifetime?", "label": "0", "remark": "negative"}
{"sql": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;", "translated_sql": "( the average of ( horsepower ) ) that belongs to ( cars data ) , that have ( ( year ) less than ( 1980 ) )", "question": "average horsepower of the cars produced before 1980?", "label": "1", "remark": "positive"}
{"sql": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)", "translated_sql": "( name ) that belongs to ( museum ) , that have ( ( num of staff ) greater than ( the minimum of ( num of staff ) ) that belongs to ( museum ) , that have ( ( open year ) greater than ( 2010 ) ) )", "question": "names of museums that have more than one staff member after 2010.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "translated_sql": "( model of countries ) that belongs to ( ( car names ) , and ( ( cars data ) satisfied that ( ( makeid of countries ) equal to ( id of car makers ) ) ) ) , that have ( ( cylinders of car makers ) equal to ( 4 ) ) , ordered by ( ( horsepower of car makers ) in descending order ) , limited to the top ( 1 )", "question": "is the model of the car with the largest number of cylinders and the largest number of horsepower?", "label": "0", "remark": "negative"}
{"sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "translated_sql": "( template id ) that belongs to ( templates ) , that have ( ( ( template type code ) equal to ( pp ) ) or ( ( template type code ) equal to ( ppt ) ) )", "question": "ids of templates whose type code is \"PS\" or whose type code is \"PT\"?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "translated_sql": "( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , grouped by ( airline of countries ) , that have ( ( the number of ( all items ) ) less than ( 200 ) )", "question": "ids of airlines that have less than 200 flights.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "translated_sql": "( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , grouped by ( airline of countries ) , that have ( ( the number of ( all items ) ) less than ( 200 ) )", "question": "the names of airlines that have less than 200 number of flights.", "label": "1", "remark": "positive"}
{"sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "translated_sql": "( the number of ( distinct ( winner name ) ) ) that belongs to ( matches ) , that have ( ( ( tourney name ) equal to ( 'wta championships' ) ) and ( ( winner hand ) equal to ( 'l' ) ) )", "question": "the number of distinct winners of the tourney named Wta Championships.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';", "translated_sql": "( countryid of countries ) , ( countryname of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) ) , grouped by ( countryid of countries ) , that have ( ( the number of ( all items ) ) greater than ( 3 ) ) and ( countryid of countries ) , ( countryname of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) , and ( ( model list ) satisfied that ( ( id of car makers ) equal to ( maker of car makers ) ) ) ) , that have ( ( model of car makers ) equal to ( 'fiat' ) )", "question": "the countries that have more than 3 models and have more than 3 manufacturers?", "label": "0", "remark": "negative"}
{"sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "translated_sql": "( name of students ) that belongs to ( ( employee ) , and ( ( evaluation ) satisfied that ( ( employee id of students ) equal to ( employee id of addresses ) ) ) ) , ordered by ( ( bonus of addresses ) in descending order ) , limited to the top ( 1 )", "question": "name of the employee who has the highest bonus?", "label": "1", "remark": "positive"}
{"sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "translated_sql": "( student id ) that belongs to ( friend ), and intersect with ( ( liked id ) that belongs to ( likes ))", "question": "the ids of all students who have friends and likes.", "label": "0", "remark": "negative"}
{"sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "translated_sql": "( template id ) that belongs to ( templates ) , that have ( ( ( template type code ) equal to ( pp ) ) or ( ( template type code ) equal to ( ppt ) ) )", "question": "the id of the templates whose type code is \"PS\" or whose type code is \"PFT\".", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "translated_sql": "( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ), and intersect with ( ( name of car makers ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( liked id of countries ) equal to ( id of car makers ) ) ) ))", "question": "the names of students who are friends with both likes and dislikes.", "label": "0", "remark": "negative"}
{"sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "translated_sql": "( the number of ( distinct ( winner name ) ) ) that belongs to ( matches ) , that have ( ( ( tourney name ) equal to ( 'wta championships' ) ) and ( ( winner hand ) equal to ( 'l' ) ) )", "question": "number of distinct winners of the tourney named Wta championships with winner hand.", "label": "0", "remark": "negative"}
{"sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "translated_sql": "( first name ) , ( last name ) that belongs to ( players ) , ordered by ( ( birth date ) )", "question": "the first names and last names of all players sorted by birth date?", "label": "1", "remark": "positive"}
{"sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "translated_sql": "( name of students ) that belongs to ( ( employee ) , and ( ( evaluation ) satisfied that ( ( employee id of students ) equal to ( employee id of addresses ) ) ) ) , ordered by ( ( bonus of addresses ) in descending order ) , limited to the top ( 1 )", "question": "the name of the employee who has the highest score in an evaluation.", "label": "0", "remark": "negative"}
{"sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "translated_sql": "( name ) that belongs to ( highschooler ), and except that ( ( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ))", "question": "the names of the students who do not have any friends.", "label": "1", "remark": "positive"}
{"sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "translated_sql": "( first name ) , ( last name ) that belongs to ( players ) , ordered by ( ( birth date ) )", "question": "the first name and last name of all players ordered by birth date.", "label": "1", "remark": "positive"}
{"sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "translated_sql": "( distinct ( model of car makers ) ) that belongs to ( ( car names ) , and ( ( model list ) satisfied that ( ( model of countries ) equal to ( model of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( maker of car makers ) equal to ( id of car makers ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of countries ) equal to ( id of cars data ) ) ) ) , that have ( ( ( fullname of car makers ) equal to ( 'general motors' ) ) or ( ( weight of cars data ) greater than ( 3500 ) ) )", "question": "the distinct names of the models that are made by either the manufacturer with full name 'General Motors' or have weight bigger than 3500.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "translated_sql": "( countryname of countries ) , ( countryid of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) ) , grouped by ( countryid of countries ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 1 ) )", "question": "country name and id of the country that has at least one car maker.", "label": "1", "remark": "positive"}
{"sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "translated_sql": "( the number of ( distinct ( series name ) ) ) , ( the number of ( distinct ( content ) ) ) that belongs to ( tv channel )", "question": "number of distinct series name and content for tv channels.", "label": "1", "remark": "positive"}
{"sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "translated_sql": "( airline ) that belongs to ( airlines ) , that have ( ( abbreviation ) equal to ( ual ) )", "question": "names of airlines with abbreviation \"AL\".", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "translated_sql": "( cylinders of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( model of car makers ) equal to ( 'volvo' ) ) , ordered by ( ( accelerate of countries ) in ascending order ) , limited to the top ( 1 )", "question": "id of the car that has the highest accelerate model?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "translated_sql": "( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , that have ( ( sourceairport of car makers ) equal to ( cvo ) ), and except that ( ( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , that have ( ( sourceairport of car makers ) equal to ( apg ) ))", "question": "the names of airlines that do not have any source flight from CV to apg?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "translated_sql": "( country code of countries ) , ( first name of countries ) that belongs to ( ( players ) , and ( ( matches ) satisfied that ( ( player id of countries ) equal to ( winner id of car makers ) ) ) ) , that have ( ( tourney name of car makers ) equal to ( 'wta championships' ) ), and intersect with ( ( country code of countries ) , ( first name of countries ) that belongs to ( ( players ) , and ( ( matches ) satisfied that ( ( player id of countries ) equal to ( winner id of car makers ) ) ) ) , that have ( ( tourney name of car makers ) equal to ( 'australian open' ) ))", "question": "country code and first name of the players who won both the WTA championships and Australian Open.", "label": "1", "remark": "positive"}
{"sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( model list ) , and ( ( car makers ) satisfied that ( ( maker of countries ) equal to ( id of car makers ) ) ) , and ( ( countries ) satisfied that ( ( country of car makers ) equal to ( countryid of car makers ) ) ) ) , that have ( ( countryname of car makers ) equal to ( 'usa' ) )", "question": "the number of models made by the country \"USA\".", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "translated_sql": "( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , grouped by ( airline of countries ) , that have ( ( the number of ( all items ) ) less than ( 200 ) )", "question": "the number of flights operated by airlines with number less than 200.", "label": "0", "remark": "negative"}
{"sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "translated_sql": "( first name of students ) that belongs to ( ( students ) , and ( ( addresses ) satisfied that ( ( permanent address id of students ) equal to ( address id of addresses ) ) ) ) , that have ( ( ( country of addresses ) equal to ( 'haiti' ) ) or ( ( cell mobile number of students ) equal to ( '09700166582' ) ) )", "question": "the first names of students who live in country Haiti and have cell phone number '09700166582'.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( degree program id of countries ) , ( degree summary name of countries ) that belongs to ( ( degree programs ) , and ( ( student enrolment ) satisfied that ( ( degree program id of countries ) equal to ( degree program id of car makers ) ) ) ) , grouped by ( degree program id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "the id and summary name of the degree with the most student enrolment?", "label": "1", "remark": "positive"}
{"sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "translated_sql": "( the maximum of ( mpg ) ) that belongs to ( cars data ) , that have ( ( ( cylinders ) equal to ( 8 ) ) or ( ( year ) less than ( 1980 ) ) )", "question": "has the most number of cylinders produced before 1980?", "label": "0", "remark": "negative"}
{"sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of countries ) equal to ( countrycode of car makers ) ) ) ) , that have ( ( ( name of countries ) equal to ( afghanistan ) ) and ( ( isofficial ) equal to ( t ) ) )", "question": "many countries have a language that is official?", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "translated_sql": "( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ), and intersect with ( ( name of car makers ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( liked id of countries ) equal to ( id of car makers ) ) ) ))", "question": "names of students who like and like some friends.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "translated_sql": "( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , that have ( ( sourceairport of car makers ) equal to ( cvo ) ), and except that ( ( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , that have ( ( sourceairport of car makers ) equal to ( apg ) ))", "question": "the airlines that are associated with flights that are not from CV but not from apg?", "label": "0", "remark": "negative"}
{"sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "translated_sql": "( student id ) that belongs to ( friend ), and intersect with ( ( liked id ) that belongs to ( likes ))", "question": "ids of students who have friends and liked likes.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "translated_sql": "( fname of countries ) , ( age of countries ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of countries ) equal to ( stuid of car makers ) ) ) , and ( ( pets ) satisfied that ( ( petid of car makers ) equal to ( petid of car makers ) ) ) ) , that have ( ( ( pettype of car makers ) equal to ( 'dog' ) ) and ( ( t1.stuid ) not in ( ( stuid of countries ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of countries ) equal to ( stuid of car makers ) ) ) , and ( ( pets ) satisfied that ( ( petid of car makers ) equal to ( petid of car makers ) ) ) ) , that have ( ( pettype of car makers ) equal to ( 'cat' ) ) ) ) )", "question": "the first name and age of the student who has a pet of the type 'Dog' but not a cat.", "label": "1", "remark": "positive"}
{"sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( documents ) , and ( ( templates ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ) , that have ( ( template type code of car makers ) equal to ( 'ppt' ) )", "question": "the number of documents that have the type code PPT.", "label": "1", "remark": "positive"}
{"sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "translated_sql": "( airline ) that belongs to ( airlines ) , that have ( ( abbreviation ) equal to ( ual ) )", "question": "are the airlines with abbreviationUAL?", "label": "0", "remark": "negative"}
{"sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "translated_sql": "( name of students ) that belongs to ( ( employee ) , and ( ( evaluation ) satisfied that ( ( employee id of students ) equal to ( employee id of addresses ) ) ) ) , ordered by ( ( bonus of addresses ) in descending order ) , limited to the top ( 1 )", "question": "the name of the employee who has the highest number of evaluations and gets the highest bonus.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "translated_sql": "( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , that have ( ( sourceairport of car makers ) equal to ( cvo ) ), and except that ( ( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , that have ( ( sourceairport of car makers ) equal to ( apg ) ))", "question": "the names of all the airlines that have both flights from CVO and APG but no flights from APG.", "label": "0", "remark": "negative"}
{"sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "translated_sql": "( name of students ) that belongs to ( ( employee ) , and ( ( evaluation ) satisfied that ( ( employee id of students ) equal to ( employee id of addresses ) ) ) ) , ordered by ( ( bonus of addresses ) in descending order ) , limited to the top ( 1 )", "question": "name of the employee who has the highest total bonus?", "label": "1", "remark": "positive"}
{"sql": "SELECT DISTINCT country FROM singer WHERE age  >  20", "translated_sql": "( distinct ( country ) ) that belongs to ( singer ) , that have ( ( age ) greater than ( 20 ) )", "question": "distinct countries of singers who are older than 20?", "label": "1", "remark": "positive"}
{"sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "translated_sql": "( name of car makers ) , ( the number of ( all items ) ) that belongs to ( ( course arrange ) , and ( ( teacher ) satisfied that ( ( teacher id of countries ) equal to ( teacher id of car makers ) ) ) ) , grouped by ( name of car makers )", "question": "names of all teachers and the number of courses arranged by each teacher?", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( student id of countries ) , ( first name of countries ) , ( middle name of countries ) , ( last name of countries ) , ( the number of ( all items ) ) , ( student id of countries ) that belongs to ( ( students ) , and ( ( student enrolment ) satisfied that ( ( student id of countries ) equal to ( student id of car makers ) ) ) ) , grouped by ( student id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "student id, middle name, last name, and the number of students enrolled in the most programs.", "label": "0", "remark": "negative"}
{"sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of countries ) equal to ( countrycode of car makers ) ) ) ) , that have ( ( ( name of countries ) equal to ( afghanistan ) ) and ( ( isofficial ) equal to ( t ) ) )", "question": "many languages are there in Afghanistan?", "label": "0", "remark": "negative"}
{"sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "translated_sql": "( the maximum of ( mpg ) ) that belongs to ( cars data ) , that have ( ( ( cylinders ) equal to ( 8 ) ) or ( ( year ) less than ( 1980 ) ) )", "question": "is the mpg of the car with the least number of cylinders that was produced before 1980 or before 1980?", "label": "0", "remark": "negative"}
{"sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "translated_sql": "( first name ) , ( middle name ) , ( last name ) that belongs to ( students ) , ordered by ( ( date left ) in ascending order ) , limited to the top ( 1 )", "question": "first name, middle name, last name, and last name of the student who left school on the earliest date?", "label": "0", "remark": "negative"}
{"sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "translated_sql": "( airline ) that belongs to ( airlines ) , that have ( ( abbreviation ) equal to ( ual ) )", "question": "airline with abbreviation \"UAL\".", "label": "1", "remark": "positive"}
{"sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( model list ) , and ( ( car makers ) satisfied that ( ( maker of countries ) equal to ( id of car makers ) ) ) , and ( ( countries ) satisfied that ( ( country of car makers ) equal to ( countryid of car makers ) ) ) ) , that have ( ( countryname of car makers ) equal to ( 'usa' ) )", "question": "number of models that are produced by the country USA?", "label": "1", "remark": "positive"}
{"sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( documents ) , and ( ( templates ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ) , that have ( ( template type code of car makers ) equal to ( 'ppt' ) )", "question": "the number of documents that have the type code 'PPT'.", "label": "1", "remark": "positive"}
{"sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "translated_sql": "( template id ) that belongs to ( templates ) , that have ( ( ( template type code ) equal to ( pp ) ) or ( ( template type code ) equal to ( ppt ) ) )", "question": "ids for the templates whose type code is \"PS\" or whose type code is \"Ppt\"?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "translated_sql": "( killed of countries ) , ( injured of countries ) that belongs to ( ( death ) , and ( ( ship ) satisfied that ( ( caused by ship id of countries ) equal to ( id of car makers ) ) ) ) , that have ( ( tonnage of car makers ) equal to ( 't' ) )", "question": "the death and the injured of ships with tonnage of t2.", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "translated_sql": "( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ), and intersect with ( ( name of car makers ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( liked id of countries ) equal to ( id of car makers ) ) ) ))", "question": "names of students who like and like some friends.", "label": "0", "remark": "negative"}
{"sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "translated_sql": "( template id ) that belongs to ( templates ) , that have ( ( ( template type code ) equal to ( pp ) ) or ( ( template type code ) equal to ( ppt ) ) )", "question": "ids of templates that have type code \"PS\" or type code \"Ppt\".", "label": "0", "remark": "negative"}
{"sql": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;", "translated_sql": "( the average of ( horsepower ) ) that belongs to ( cars data ) , that have ( ( year ) less than ( 1980 ) )", "question": "is the average horsepower for all cars that were built before 1980?", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( flights ) , that have ( ( destairport ) equal to ( ato ) )", "question": "the number of flights that go to the airport ato.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "translated_sql": "( cylinders of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( model of car makers ) equal to ( 'volvo' ) ) , ordered by ( ( accelerate of countries ) in ascending order ) , limited to the top ( 1 )", "question": "is the id of the model that can accelerate the most?", "label": "0", "remark": "negative"}
{"sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "translated_sql": "( name of students ) that belongs to ( ( employee ) , and ( ( evaluation ) satisfied that ( ( employee id of students ) equal to ( employee id of addresses ) ) ) ) , ordered by ( ( bonus of addresses ) in descending order ) , limited to the top ( 1 )", "question": "name of the employee who has the highest total bonus?", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "translated_sql": "( killed of countries ) , ( injured of countries ) that belongs to ( ( death ) , and ( ( ship ) satisfied that ( ( caused by ship id of countries ) equal to ( id of car makers ) ) ) ) , that have ( ( tonnage of car makers ) equal to ( 't' ) )", "question": "the number of people killed and the number of injured by ships with tonnage smaller than 't'.", "label": "0", "remark": "negative"}
{"sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "translated_sql": "( airline ) that belongs to ( airlines ) , that have ( ( abbreviation ) equal to ( ual ) )", "question": "is the airline with abbreviation \"UAL\"?", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "translated_sql": "( name of car makers ) , ( the number of ( all items ) ) that belongs to ( ( course arrange ) , and ( ( teacher ) satisfied that ( ( teacher id of countries ) equal to ( teacher id of car makers ) ) ) ) , grouped by ( name of car makers )", "question": "the names of teachers and the number of courses they are involved in.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "translated_sql": "( series name of countries ) that belongs to ( ( tv channel ) , and ( ( tv series ) satisfied that ( ( id of countries ) equal to ( channel of car makers ) ) ) ) , that have ( ( episode of car makers ) equal to ( a love of a lifetime ) )", "question": "all series from A Love of a Lifetime", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "translated_sql": "( template id of car makers ) that belongs to ( ( ref template types ) , and ( ( templates ) satisfied that ( ( template type code of countries ) equal to ( template type code of car makers ) ) ) ) , that have ( ( template type description of countries ) equal to ( presentation ) )", "question": "is the id of the template type described as \"Presentation\"?", "label": "0", "remark": "negative"}
{"sql": "SELECT DISTINCT country FROM singer WHERE age  >  20", "translated_sql": "( distinct ( country ) ) that belongs to ( singer ) , that have ( ( age ) greater than ( 20 ) )", "question": "distinct countries of singers younger than 20?", "label": "0", "remark": "negative"}
{"sql": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"", "translated_sql": "( distinct ( name of city ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of students ) equal to ( countrycode of addresses ) ) ) , and ( ( city ) satisfied that ( ( code of students ) equal to ( countrycode of city ) ) ) ) , that have ( ( ( isofficial of addresses ) equal to ( 't' ) ) and ( ( language of addresses ) equal to ( 'chinese' ) ) and ( ( continent of students ) equal to ( asia ) ) )", "question": "the distinct names of cities that are official Chinese cities in the \"continent\" of \"Asia\".", "label": "0", "remark": "negative"}
{"sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "translated_sql": "( the number of ( distinct ( winner name ) ) ) that belongs to ( matches ) , that have ( ( ( tourney name ) equal to ( 'wta championships' ) ) and ( ( winner hand ) equal to ( 'l' ) ) )", "question": "number of distinct winners of the WTA championships with winner hand L.", "label": "1", "remark": "positive"}
{"sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")", "translated_sql": "( name ) that belongs to ( country ) , that have ( ( ( continent ) equal to ( asia ) ) and ( ( population ) greater than ( the maximum of ( population ) ) that belongs to ( country ) , that have ( ( continent ) equal to ( africa ) ) ) )", "question": "the names of countries whose population is greater than the population of all countries on the continent of \"Asia\".", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "translated_sql": "( continent of countries ) , ( the number of ( all items ) ) that belongs to ( ( continents ) , and ( ( countries ) satisfied that ( ( contid of countries ) equal to ( continent of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( countryid of car makers ) equal to ( country of car makers ) ) ) ) , grouped by ( continent of countries )", "question": "the continent and the number of car makers from that continent", "label": "0", "remark": "negative"}
{"sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "translated_sql": "( the number of ( distinct ( series name ) ) ) , ( the number of ( distinct ( content ) ) ) that belongs to ( tv channel )", "question": "many different series are there on TV channels?", "label": "0", "remark": "negative"}
{"sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")", "translated_sql": "( name ) that belongs to ( country ) , that have ( ( ( continent ) equal to ( asia ) ) and ( ( population ) greater than ( the maximum of ( population ) ) that belongs to ( country ) , that have ( ( continent ) equal to ( africa ) ) ) )", "question": "the names of countries whose population is greater than the population of all countries in the continent of \"Africa\".", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( degree program id of countries ) , ( degree summary name of countries ) that belongs to ( ( degree programs ) , and ( ( student enrolment ) satisfied that ( ( degree program id of countries ) equal to ( degree program id of car makers ) ) ) ) , grouped by ( degree program id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "the id and summary name of the degree program that has the most students enrolled?", "label": "1", "remark": "positive"}
{"sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( documents ) , and ( ( templates ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ) , that have ( ( template type code of car makers ) equal to ( 'ppt' ) )", "question": "number of documents that have type code 'PPT'.", "label": "1", "remark": "positive"}
{"sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "translated_sql": "( name of car makers ) , ( the number of ( all items ) ) that belongs to ( ( course arrange ) , and ( ( teacher ) satisfied that ( ( teacher id of countries ) equal to ( teacher id of car makers ) ) ) ) , grouped by ( name of car makers )", "question": "the names of teachers and the number of courses they teach.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( student id of countries ) , ( first name of countries ) , ( middle name of countries ) , ( last name of countries ) , ( the number of ( all items ) ) , ( student id of countries ) that belongs to ( ( students ) , and ( ( student enrolment ) satisfied that ( ( student id of countries ) equal to ( student id of car makers ) ) ) ) , grouped by ( student id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "the id, middle name, last name, and id of the student who has the most enrollments.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "translated_sql": "( series name of countries ) that belongs to ( ( tv channel ) , and ( ( tv series ) satisfied that ( ( id of countries ) equal to ( channel of car makers ) ) ) ) , that have ( ( episode of car makers ) equal to ( a love of a lifetime ) )", "question": "series name of the channel that has an episode of \"A Love of a Lifetime\"?", "label": "1", "remark": "positive"}
{"sql": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"", "translated_sql": "( distinct ( name of city ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of students ) equal to ( countrycode of addresses ) ) ) , and ( ( city ) satisfied that ( ( code of students ) equal to ( countrycode of city ) ) ) ) , that have ( ( ( isofficial of addresses ) equal to ( 't' ) ) and ( ( language of addresses ) equal to ( 'chinese' ) ) and ( ( continent of students ) equal to ( asia ) ) )", "question": "Chinese cities in asia continent?", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( airline of car makers ) equal to ( uid of countries ) ) ) ) , that have ( ( ( airline of countries ) equal to ( united airlines ) ) and ( ( destairport of car makers ) equal to ( asy ) ) )", "question": "number of flights operated by airline \"United Airlines\" and \"Asy\".", "label": "0", "remark": "negative"}
{"sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "translated_sql": "( name ) that belongs to ( highschooler ), and except that ( ( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ))", "question": "the names of students who are not friends with any other student.", "label": "1", "remark": "positive"}
{"sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( airline of car makers ) equal to ( uid of countries ) ) ) ) , that have ( ( ( airline of countries ) equal to ( united airlines ) ) and ( ( destairport of car makers ) equal to ( asy ) ) )", "question": "the number of flights operated by airline \"United Airlines\" whose destination is \"USA\".", "label": "0", "remark": "negative"}
{"sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "translated_sql": "( country ) that belongs to ( airlines ) , that have ( ( airline ) equal to ( jetblue airways ) )", "question": "country does the airline Jetblue Airlines belong to?", "label": "0", "remark": "negative"}
{"sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of countries ) equal to ( countrycode of car makers ) ) ) ) , that have ( ( ( name of countries ) equal to ( afghanistan ) ) and ( ( isofficial ) equal to ( t ) ) )", "question": "many countries are \"Afghanistan\" official?", "label": "0", "remark": "negative"}
{"sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "translated_sql": "( first name ) , ( last name ) that belongs to ( players ) , ordered by ( ( birth date ) )", "question": "first name and last name ordered by birth date.", "label": "0", "remark": "negative"}
{"sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "translated_sql": "( airline ) that belongs to ( airlines ) , that have ( ( abbreviation ) equal to ( ual ) )", "question": "is the airline with abbreviation \"UAL\"?", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( destairport of countries ) equal to ( airportcode of car makers ) ) ) , and ( ( airports ) satisfied that ( ( sourceairport of countries ) equal to ( airportcode of car makers ) ) ) ) , that have ( ( ( city of car makers ) equal to ( ashley ) ) and ( ( city of car makers ) equal to ( aberdeen ) ) )", "question": "many flights are there from ashley airport in Aberdeen city?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "translated_sql": "( cylinders of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( model of car makers ) equal to ( 'volvo' ) ) , ordered by ( ( accelerate of countries ) in ascending order ) , limited to the top ( 1 )", "question": "are the cylinders of the car with the model with the highest accelerate?", "label": "0", "remark": "negative"}
{"sql": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;", "translated_sql": "( the average of ( horsepower ) ) that belongs to ( cars data ) , that have ( ( year ) less than ( 1980 ) )", "question": "is the average horsepower for all cars that were built before 1980?", "label": "0", "remark": "negative"}
{"sql": "SELECT DISTINCT country FROM singer WHERE age  >  20", "translated_sql": "( distinct ( country ) ) that belongs to ( singer ) , that have ( ( age ) greater than ( 20 ) )", "question": "all the countries that have singers older than 20?", "label": "1", "remark": "positive"}
{"sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "translated_sql": "( template type code ) that belongs to ( templates ), and except that ( ( template type code ) that belongs to ( ( templates ) , and ( ( documents ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ))", "question": "is the template type code that is not used by any document?", "label": "0", "remark": "negative"}
{"sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "translated_sql": "( first name ) , ( last name ) that belongs to ( players ) , ordered by ( ( birth date ) )", "question": "first name and last name of all players ordered by birth date?", "label": "1", "remark": "positive"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "translated_sql": "( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ), and intersect with ( ( name of car makers ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( liked id of countries ) equal to ( id of car makers ) ) ) ))", "question": "names of students who are friends with both likes and likes.", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "translated_sql": "( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ), and intersect with ( ( name of car makers ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( liked id of countries ) equal to ( id of car makers ) ) ) ))", "question": "the names of students who have both a friend and a student who has a friend.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "translated_sql": "( country code of countries ) , ( first name of countries ) that belongs to ( ( players ) , and ( ( matches ) satisfied that ( ( player id of countries ) equal to ( winner id of car makers ) ) ) ) , that have ( ( tourney name of car makers ) equal to ( 'wta championships' ) ), and intersect with ( ( country code of countries ) , ( first name of countries ) that belongs to ( ( players ) , and ( ( matches ) satisfied that ( ( player id of countries ) equal to ( winner id of car makers ) ) ) ) , that have ( ( tourney name of car makers ) equal to ( 'australian open' ) ))", "question": "the country code and the first name of the player who won both the WTA Championships and the Australian Open?", "label": "1", "remark": "positive"}
{"sql": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)", "translated_sql": "( name ) that belongs to ( museum ) , that have ( ( num of staff ) greater than ( the minimum of ( num of staff ) ) that belongs to ( museum ) , that have ( ( open year ) greater than ( 2010 ) ) )", "question": "names of museums that have more than one staff after opening year.", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "translated_sql": "( template id of car makers ) that belongs to ( ( ref template types ) , and ( ( templates ) satisfied that ( ( template type code of countries ) equal to ( template type code of car makers ) ) ) ) , that have ( ( template type description of countries ) equal to ( presentation ) )", "question": "is the id of the template type described by the description?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "translated_sql": "( countryname of countries ) , ( countryid of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) ) , grouped by ( countryid of countries ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 1 ) )", "question": "country name and id of the country that has at least one car manufacturer?", "label": "1", "remark": "positive"}
{"sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "translated_sql": "( first name ) , ( middle name ) , ( last name ) that belongs to ( students ) , ordered by ( ( date left ) in ascending order ) , limited to the top ( 1 )", "question": "the first name, middle name, and last name of the students who left school before any date.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "translated_sql": "( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , grouped by ( airline of countries ) , that have ( ( the number of ( all items ) ) less than ( 200 ) )", "question": "are the airports that have less than 200 flights?", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "translated_sql": "( make of car makers ) , ( year of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( year of countries ) equal to ( the minimum of ( year ) ) that belongs to ( cars data ) )", "question": "the make and year of the car with the smallest data.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "translated_sql": "( fname of countries ) , ( age of countries ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of countries ) equal to ( stuid of car makers ) ) ) , and ( ( pets ) satisfied that ( ( petid of car makers ) equal to ( petid of car makers ) ) ) ) , that have ( ( ( pettype of car makers ) equal to ( 'dog' ) ) and ( ( t1.stuid ) not in ( ( stuid of countries ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of countries ) equal to ( stuid of car makers ) ) ) , and ( ( pets ) satisfied that ( ( petid of car makers ) equal to ( petid of car makers ) ) ) ) , that have ( ( pettype of car makers ) equal to ( 'cat' ) ) ) ) )", "question": "the first name and age of the student who has a pet with type 'dog' but not cat?", "label": "1", "remark": "positive"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "translated_sql": "( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ), and intersect with ( ( name of car makers ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( liked id of countries ) equal to ( id of car makers ) ) ) ))", "question": "names of students who like friends.", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "translated_sql": "( name of car makers ) , ( the number of ( all items ) ) that belongs to ( ( course arrange ) , and ( ( teacher ) satisfied that ( ( teacher id of countries ) equal to ( teacher id of car makers ) ) ) ) , grouped by ( name of car makers )", "question": "the name of each teacher and the number of courses they arrange.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "translated_sql": "( cylinders of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( model of car makers ) equal to ( 'volvo' ) ) , ordered by ( ( accelerate of countries ) in ascending order ) , limited to the top ( 1 )", "question": "is the id of the car with the model name 'volvo' accelerating the most?", "label": "0", "remark": "negative"}
{"sql": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1", "translated_sql": "( id of students ) , ( name of students ) , ( age of students ) that belongs to ( ( visitor ) , and ( ( visit ) satisfied that ( ( id of students ) equal to ( visitor id of addresses ) ) ) ) , grouped by ( id of students ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )", "question": "the id, name, and age for all visitors who made more than one visit?", "label": "1", "remark": "positive"}
{"sql": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1", "translated_sql": "( id of students ) , ( name of students ) , ( age of students ) that belongs to ( ( visitor ) , and ( ( visit ) satisfied that ( ( id of students ) equal to ( visitor id of addresses ) ) ) ) , grouped by ( id of students ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )", "question": "the id, name, and age of the visitors who visited more than 1 place.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "translated_sql": "( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , that have ( ( sourceairport of car makers ) equal to ( cvo ) ), and except that ( ( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , that have ( ( sourceairport of car makers ) equal to ( apg ) ))", "question": "the names of the airlines that have both flights from CVO and flights from APG but no flights from APG?", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "translated_sql": "( template id of car makers ) that belongs to ( ( ref template types ) , and ( ( templates ) satisfied that ( ( template type code of countries ) equal to ( template type code of car makers ) ) ) ) , that have ( ( template type description of countries ) equal to ( presentation ) )", "question": "the id of the template type described as \"Presentation\".", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( student id of countries ) , ( first name of countries ) , ( middle name of countries ) , ( last name of countries ) , ( the number of ( all items ) ) , ( student id of countries ) that belongs to ( ( students ) , and ( ( student enrolment ) satisfied that ( ( student id of countries ) equal to ( student id of car makers ) ) ) ) , grouped by ( student id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "student id, middle name, last name, and the number of students enrolled in the most number of courses?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( template id of countries ) , ( template type code of car makers ) that belongs to ( ( documents ) , and ( ( templates ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ) , grouped by ( template id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "is the template id and type code of the document with the most documents?", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( destairport of countries ) equal to ( airportcode of car makers ) ) ) , and ( ( airports ) satisfied that ( ( sourceairport of countries ) equal to ( airportcode of car makers ) ) ) ) , that have ( ( ( city of car makers ) equal to ( ashley ) ) and ( ( city of car makers ) equal to ( aberdeen ) ) )", "question": "the number of flights that originate in ashley and/or Aberdeen airports.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( template id of countries ) , ( template type code of car makers ) that belongs to ( ( documents ) , and ( ( templates ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ) , grouped by ( template id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "the id and type code of the most documents?", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "translated_sql": "( series name of countries ) that belongs to ( ( tv channel ) , and ( ( tv series ) satisfied that ( ( id of countries ) equal to ( channel of car makers ) ) ) ) , that have ( ( episode of car makers ) equal to ( a love of a lifetime ) )", "question": "series names of the tv channels that have an episode \"A Love of a Lifetime\"?", "label": "1", "remark": "positive"}
{"sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "translated_sql": "( name ) that belongs to ( highschooler ), and except that ( ( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ))", "question": "the name of students who do not have any friends.", "label": "1", "remark": "positive"}
{"sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "translated_sql": "( airline ) , ( abbreviation ) that belongs to ( airlines ) , that have ( ( country ) equal to ( usa ) )", "question": "are the names and abbrevents of all airlines based in the country \"USA\"?", "label": "0", "remark": "negative"}
{"sql": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1", "translated_sql": "( id of students ) , ( name of students ) , ( age of students ) that belongs to ( ( visitor ) , and ( ( visit ) satisfied that ( ( id of students ) equal to ( visitor id of addresses ) ) ) ) , grouped by ( id of students ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )", "question": "the id, name, and age of the visitors who visited more than 1 time.", "label": "1", "remark": "positive"}
{"sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "translated_sql": "( distinct ( model of car makers ) ) that belongs to ( ( car names ) , and ( ( model list ) satisfied that ( ( model of countries ) equal to ( model of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( maker of car makers ) equal to ( id of car makers ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of countries ) equal to ( id of cars data ) ) ) ) , that have ( ( ( fullname of car makers ) equal to ( 'general motors' ) ) or ( ( weight of cars data ) greater than ( 3500 ) ) )", "question": "names of all the models that have either 'General Motors' or weight greater than 3500?", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "translated_sql": "( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ), and intersect with ( ( name of car makers ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( liked id of countries ) equal to ( id of car makers ) ) ) ))", "question": "names of friends who have likes and likes?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "translated_sql": "( continent of countries ) , ( the number of ( all items ) ) that belongs to ( ( continents ) , and ( ( countries ) satisfied that ( ( contid of countries ) equal to ( continent of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( countryid of car makers ) equal to ( country of car makers ) ) ) ) , grouped by ( continent of countries )", "question": "each continent and the number of car makers on that continent.", "label": "1", "remark": "positive"}
{"sql": "SELECT count(DISTINCT current_address_id) FROM Students", "translated_sql": "( the number of ( distinct ( current address id ) ) ) that belongs to ( students )", "question": "number of distinct current addresses of students?", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "translated_sql": "( continent of countries ) , ( the number of ( all items ) ) that belongs to ( ( continents ) , and ( ( countries ) satisfied that ( ( contid of countries ) equal to ( continent of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( countryid of car makers ) equal to ( country of car makers ) ) ) ) , grouped by ( continent of countries )", "question": "continents and the number of car makers on each continent.", "label": "1", "remark": "positive"}
{"sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "translated_sql": "( first name ) , ( last name ) that belongs to ( players ) , ordered by ( ( birth date ) )", "question": "the first names and last names of all players in alphabetical order.", "label": "0", "remark": "negative"}
{"sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "translated_sql": "( first name of students ) that belongs to ( ( students ) , and ( ( addresses ) satisfied that ( ( permanent address id of students ) equal to ( address id of addresses ) ) ) ) , that have ( ( ( country of addresses ) equal to ( 'haiti' ) ) or ( ( cell mobile number of students ) equal to ( '09700166582' ) ) )", "question": "the first name of students who live in country Haiti and whose cell phone number is '09700166582'.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( template id of countries ) , ( template type code of car makers ) that belongs to ( ( documents ) , and ( ( templates ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ) , grouped by ( template id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "the id and type of the template that has the most documents?", "label": "0", "remark": "negative"}
{"sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "translated_sql": "( distinct ( model of car makers ) ) that belongs to ( ( car names ) , and ( ( model list ) satisfied that ( ( model of countries ) equal to ( model of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( maker of car makers ) equal to ( id of car makers ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of countries ) equal to ( id of cars data ) ) ) ) , that have ( ( ( fullname of car makers ) equal to ( 'general motors' ) ) or ( ( weight of cars data ) greater than ( 3500 ) ) )", "question": "the distinct models of the cars whose full name is 'General Motors' or have weight greater than 3500?", "label": "1", "remark": "positive"}
{"sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")", "translated_sql": "( name ) that belongs to ( country ) , that have ( ( ( continent ) equal to ( asia ) ) and ( ( population ) greater than ( the maximum of ( population ) ) that belongs to ( country ) , that have ( ( continent ) equal to ( africa ) ) ) )", "question": "the countries whose population is greater than the population of all countries in the continent \"Asia\".", "label": "0", "remark": "negative"}
{"sql": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"", "translated_sql": "( distinct ( name of city ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of students ) equal to ( countrycode of addresses ) ) ) , and ( ( city ) satisfied that ( ( code of students ) equal to ( countrycode of city ) ) ) ) , that have ( ( ( isofficial of addresses ) equal to ( 't' ) ) and ( ( language of addresses ) equal to ( 'chinese' ) ) and ( ( continent of students ) equal to ( asia ) ) )", "question": "the distinct cities in China where the language is English and the language is Chinese and the continent is asia?", "label": "0", "remark": "negative"}
{"sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")", "translated_sql": "( name ) that belongs to ( country ) , that have ( ( ( continent ) equal to ( asia ) ) and ( ( population ) greater than ( the maximum of ( population ) ) that belongs to ( country ) , that have ( ( continent ) equal to ( africa ) ) ) )", "question": "the name of countries that have a population larger than the largest country in Africa.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "translated_sql": "( countryname of countries ) , ( countryid of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) ) , grouped by ( countryid of countries ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 1 ) )", "question": "the names and id of the countries that have at least one vehicle", "label": "0", "remark": "negative"}
{"sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of countries ) equal to ( countrycode of car makers ) ) ) ) , that have ( ( ( name of countries ) equal to ( afghanistan ) ) and ( ( isofficial ) equal to ( t ) ) )", "question": "many countries that are official in Afghanistan?", "label": "0", "remark": "negative"}
{"sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "translated_sql": "( distinct ( model of car makers ) ) that belongs to ( ( car names ) , and ( ( model list ) satisfied that ( ( model of countries ) equal to ( model of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( maker of car makers ) equal to ( id of car makers ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of countries ) equal to ( id of cars data ) ) ) ) , that have ( ( ( fullname of car makers ) equal to ( 'general motors' ) ) or ( ( weight of cars data ) greater than ( 3500 ) ) )", "question": "the distinct models whose full name is General Motors or whose weight is greater than 3500;", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "translated_sql": "( killed of countries ) , ( injured of countries ) that belongs to ( ( death ) , and ( ( ship ) satisfied that ( ( caused by ship id of countries ) equal to ( id of car makers ) ) ) ) , that have ( ( tonnage of car makers ) equal to ( 't' ) )", "question": "the number of people killed and the number of people injured by ships of tonnage T2.", "label": "0", "remark": "negative"}
{"sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "translated_sql": "( student id ) that belongs to ( friend ), and intersect with ( ( liked id ) that belongs to ( likes ))", "question": "ids for all students who have friends and liked.", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "translated_sql": "( make of car makers ) , ( year of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( year of countries ) equal to ( the minimum of ( year ) ) that belongs to ( cars data ) )", "question": "the make and year of the car whose data is the minimum year?", "label": "1", "remark": "positive"}
{"sql": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1", "translated_sql": "( id of students ) , ( name of students ) , ( age of students ) that belongs to ( ( visitor ) , and ( ( visit ) satisfied that ( ( id of students ) equal to ( visitor id of addresses ) ) ) ) , grouped by ( id of students ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )", "question": "the id, name, and age for all the visitors who visited more than one time.", "label": "1", "remark": "positive"}
{"sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")", "translated_sql": "( name ) that belongs to ( country ) , that have ( ( ( continent ) equal to ( asia ) ) and ( ( population ) greater than ( the maximum of ( population ) ) that belongs to ( country ) , that have ( ( continent ) equal to ( africa ) ) ) )", "question": "the country with the largest population", "label": "0", "remark": "negative"}
{"sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "translated_sql": "( the number of ( language of car makers ) ) , ( name of countries ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of countries ) equal to ( countrycode of car makers ) ) ) ) , grouped by ( name of countries ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )", "question": "number of languages in each country that have more than 2 languages.", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( model list ) , and ( ( car makers ) satisfied that ( ( maker of countries ) equal to ( id of car makers ) ) ) , and ( ( countries ) satisfied that ( ( country of car makers ) equal to ( countryid of car makers ) ) ) ) , that have ( ( countryname of car makers ) equal to ( 'usa' ) )", "question": "many models are made by the country USA?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( degree program id of countries ) , ( degree summary name of countries ) that belongs to ( ( degree programs ) , and ( ( student enrolment ) satisfied that ( ( degree program id of countries ) equal to ( degree program id of car makers ) ) ) ) , grouped by ( degree program id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "the id and summary name of the degree program with the most student enrolment?", "label": "1", "remark": "positive"}
{"sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "translated_sql": "( the number of ( language of car makers ) ) , ( name of countries ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of countries ) equal to ( countrycode of car makers ) ) ) ) , grouped by ( name of countries ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )", "question": "the number of languages that are used by more than 2 countries.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( student id of countries ) , ( first name of countries ) , ( middle name of countries ) , ( last name of countries ) , ( the number of ( all items ) ) , ( student id of countries ) that belongs to ( ( students ) , and ( ( student enrolment ) satisfied that ( ( student id of countries ) equal to ( student id of car makers ) ) ) ) , grouped by ( student id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "student id, middle name, last name, and the number of students enrolled in the most programs?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "translated_sql": "( killed of countries ) , ( injured of countries ) that belongs to ( ( death ) , and ( ( ship ) satisfied that ( ( caused by ship id of countries ) equal to ( id of car makers ) ) ) ) , that have ( ( tonnage of car makers ) equal to ( 't' ) )", "question": "the deaths and the injured of ships with tonnage of t2.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "translated_sql": "( accelerate of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( make of car makers ) equal to ( 'amc hornet sportabout (sw)' ) )", "question": "is the id of the car with the name AMC hornet sportabout (sw)?", "label": "0", "remark": "negative"}
{"sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "translated_sql": "( the maximum of ( mpg ) ) that belongs to ( cars data ) , that have ( ( ( cylinders ) equal to ( 8 ) ) or ( ( year ) less than ( 1980 ) ) )", "question": "the mpg of the car with the cylinders equal to 8 or less before 1980?", "label": "0", "remark": "negative"}
{"sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "translated_sql": "( distinct ( model of car makers ) ) that belongs to ( ( car names ) , and ( ( model list ) satisfied that ( ( model of countries ) equal to ( model of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( maker of car makers ) equal to ( id of car makers ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of countries ) equal to ( id of cars data ) ) ) ) , that have ( ( ( fullname of car makers ) equal to ( 'general motors' ) ) or ( ( weight of cars data ) greater than ( 3500 ) ) )", "question": "distinct models of cars whose full name is 'General Motors' or have data greater than 3500?", "label": "1", "remark": "positive"}
{"sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( flights ) , that have ( ( destairport ) equal to ( ato ) )", "question": "many flights go to the airport ato?", "label": "0", "remark": "negative"}
{"sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "translated_sql": "( airline ) , ( abbreviation ) that belongs to ( airlines ) , that have ( ( country ) equal to ( usa ) )", "question": "the name and abbreviation of the airline whose country is \"USA\"?", "label": "1", "remark": "positive"}
{"sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( flights ) , that have ( ( destairport ) equal to ( ato ) )", "question": "many flights go to the airport ato?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "translated_sql": "( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , that have ( ( sourceairport of car makers ) equal to ( cvo ) ), and except that ( ( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , that have ( ( sourceairport of car makers ) equal to ( apg ) ))", "question": "are the names of airlines that do not operate flights from CVO but not from apg?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( student id of countries ) , ( first name of countries ) , ( middle name of countries ) , ( last name of countries ) , ( the number of ( all items ) ) , ( student id of countries ) that belongs to ( ( students ) , and ( ( student enrolment ) satisfied that ( ( student id of countries ) equal to ( student id of car makers ) ) ) ) , grouped by ( student id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "id, middle name, last name, and the number of students enrolled in the most courses?", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "translated_sql": "( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ), and intersect with ( ( name of car makers ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( liked id of countries ) equal to ( id of car makers ) ) ) ))", "question": "the names of students who are friends with both likes and likes.", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "translated_sql": "( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ), and intersect with ( ( name of car makers ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( liked id of countries ) equal to ( id of car makers ) ) ) ))", "question": "names of friends who have likes and likes?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "translated_sql": "( countryname of countries ) , ( countryid of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) ) , grouped by ( countryid of countries ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 1 ) )", "question": "are the names and ids of countries that have at least one car manufacturer?", "label": "0", "remark": "negative"}
{"sql": "SELECT count(DISTINCT current_address_id) FROM Students", "translated_sql": "( the number of ( distinct ( current address id ) ) ) that belongs to ( students )", "question": "number of distinct current address ids for students?", "label": "1", "remark": "positive"}
{"sql": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1", "translated_sql": "( id of students ) , ( name of students ) , ( age of students ) that belongs to ( ( visitor ) , and ( ( visit ) satisfied that ( ( id of students ) equal to ( visitor id of addresses ) ) ) ) , grouped by ( id of students ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )", "question": "the id, name and age of the visitor who visited more than 1 time.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "translated_sql": "( model of countries ) that belongs to ( ( car names ) , and ( ( cars data ) satisfied that ( ( makeid of countries ) equal to ( id of car makers ) ) ) ) , that have ( ( cylinders of car makers ) equal to ( 4 ) ) , ordered by ( ( horsepower of car makers ) in descending order ) , limited to the top ( 1 )", "question": "the model of the car with the most horsepower that has 4 cylinders.", "label": "1", "remark": "positive"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "translated_sql": "( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ), and intersect with ( ( name of car makers ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( liked id of countries ) equal to ( id of car makers ) ) ) ))", "question": "the names of students who have both a friend and a friend.", "label": "0", "remark": "negative"}
{"sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "translated_sql": "( the number of ( language of car makers ) ) , ( name of countries ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of countries ) equal to ( countrycode of car makers ) ) ) ) , grouped by ( name of countries ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )", "question": "the number of languages that are used by more than 2 countries.", "label": "0", "remark": "negative"}
{"sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "translated_sql": "( the maximum of ( mpg ) ) that belongs to ( cars data ) , that have ( ( ( cylinders ) equal to ( 8 ) ) or ( ( year ) less than ( 1980 ) ) )", "question": "mpg of the car with the cylinders equal to 8 or before 1980.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "translated_sql": "( fname of countries ) , ( age of countries ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of countries ) equal to ( stuid of car makers ) ) ) , and ( ( pets ) satisfied that ( ( petid of car makers ) equal to ( petid of car makers ) ) ) ) , that have ( ( ( pettype of car makers ) equal to ( 'dog' ) ) and ( ( t1.stuid ) not in ( ( stuid of countries ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of countries ) equal to ( stuid of car makers ) ) ) , and ( ( pets ) satisfied that ( ( petid of car makers ) equal to ( petid of car makers ) ) ) ) , that have ( ( pettype of car makers ) equal to ( 'cat' ) ) ) ) )", "question": "the first name and age of the students who have both a dog and a cat.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "translated_sql": "( cylinders of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( model of car makers ) equal to ( 'volvo' ) ) , ordered by ( ( accelerate of countries ) in ascending order ) , limited to the top ( 1 )", "question": "the id of the car that has the most accelerations?", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "translated_sql": "( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ), and intersect with ( ( name of car makers ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( liked id of countries ) equal to ( id of car makers ) ) ) ))", "question": "names of friends who have likes?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "translated_sql": "( cylinders of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( model of car makers ) equal to ( 'volvo' ) ) , ordered by ( ( accelerate of countries ) in ascending order ) , limited to the top ( 1 )", "question": "is the id of the car with the model 'Volvo' that accelerates the most?", "label": "0", "remark": "negative"}
{"sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "translated_sql": "( airline ) that belongs to ( airlines ) , that have ( ( abbreviation ) equal to ( ual ) )", "question": "all airlines with abbreviation \"UAL\".", "label": "1", "remark": "positive"}
{"sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "translated_sql": "( first name ) , ( middle name ) , ( last name ) that belongs to ( students ) , ordered by ( ( date left ) in ascending order ) , limited to the top ( 1 )", "question": "the first name, middle name, and last name of the students who left school on the most recent date?", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( flights ) , that have ( ( destairport ) equal to ( ato ) )", "question": "number of flights that go to ato airport?", "label": "1", "remark": "positive"}
{"sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "translated_sql": "( student id ) that belongs to ( friend ), and intersect with ( ( liked id ) that belongs to ( likes ))", "question": "ids of students who have friends and liked them.", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "translated_sql": "( name of car makers ) , ( the number of ( all items ) ) that belongs to ( ( course arrange ) , and ( ( teacher ) satisfied that ( ( teacher id of countries ) equal to ( teacher id of car makers ) ) ) ) , grouped by ( name of car makers )", "question": "names of teachers and the number of courses arrange by each teacher.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "translated_sql": "( killed of countries ) , ( injured of countries ) that belongs to ( ( death ) , and ( ( ship ) satisfied that ( ( caused by ship id of countries ) equal to ( id of car makers ) ) ) ) , that have ( ( tonnage of car makers ) equal to ( 't' ) )", "question": "the killed and injured of ships with tonnage of T2.", "label": "0", "remark": "negative"}
{"sql": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"", "translated_sql": "( distinct ( name of city ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of students ) equal to ( countrycode of addresses ) ) ) , and ( ( city ) satisfied that ( ( code of students ) equal to ( countrycode of city ) ) ) ) , that have ( ( ( isofficial of addresses ) equal to ( 't' ) ) and ( ( language of addresses ) equal to ( 'chinese' ) ) and ( ( continent of students ) equal to ( asia ) ) )", "question": "cities in China that have language 'T' and whose continent is asia", "label": "0", "remark": "negative"}
{"sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "translated_sql": "( airline ) , ( abbreviation ) that belongs to ( airlines ) , that have ( ( country ) equal to ( usa ) )", "question": "airline name and abbreviation for airlines in country \"USA\".", "label": "1", "remark": "positive"}
{"sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( model list ) , and ( ( car makers ) satisfied that ( ( maker of countries ) equal to ( id of car makers ) ) ) , and ( ( countries ) satisfied that ( ( country of car makers ) equal to ( countryid of car makers ) ) ) ) , that have ( ( countryname of car makers ) equal to ( 'usa' ) )", "question": "the number of models produced by the country named USA", "label": "1", "remark": "positive"}
{"sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "translated_sql": "( name of students ) that belongs to ( ( employee ) , and ( ( evaluation ) satisfied that ( ( employee id of students ) equal to ( employee id of addresses ) ) ) ) , ordered by ( ( bonus of addresses ) in descending order ) , limited to the top ( 1 )", "question": "the name of the employee who got the highest bonus.", "label": "1", "remark": "positive"}
{"sql": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)", "translated_sql": "( name ) that belongs to ( museum ) , that have ( ( num of staff ) greater than ( the minimum of ( num of staff ) ) that belongs to ( museum ) , that have ( ( open year ) greater than ( 2010 ) ) )", "question": "names of museums that have more than one staff after opening year 2010.", "label": "0", "remark": "negative"}
{"sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of countries ) equal to ( countrycode of car makers ) ) ) ) , that have ( ( ( name of countries ) equal to ( afghanistan ) ) and ( ( isofficial ) equal to ( t ) ) )", "question": "many countries have official language in Afghanistan?", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( destairport of countries ) equal to ( airportcode of car makers ) ) ) , and ( ( airports ) satisfied that ( ( sourceairport of countries ) equal to ( airportcode of car makers ) ) ) ) , that have ( ( ( city of car makers ) equal to ( ashley ) ) and ( ( city of car makers ) equal to ( aberdeen ) ) )", "question": "many flights did Ashley have between Aberdeen and Aberdeen city?", "label": "0", "remark": "negative"}
{"sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "translated_sql": "( country ) that belongs to ( airlines ) , that have ( ( airline ) equal to ( jetblue airways ) )", "question": "countries does the airline JetBlue Airlines belong to?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( template id of countries ) , ( template type code of car makers ) that belongs to ( ( documents ) , and ( ( templates ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ) , grouped by ( template id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "the id and type of the template that has been used the most times.", "label": "1", "remark": "positive"}
{"sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "translated_sql": "( make of car makers ) , ( year of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( year of countries ) equal to ( the minimum of ( year ) ) that belongs to ( cars data ) )", "question": "are the make and year of the car that was used the smallest amount of data?", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "translated_sql": "( name of car makers ) , ( the number of ( all items ) ) that belongs to ( ( course arrange ) , and ( ( teacher ) satisfied that ( ( teacher id of countries ) equal to ( teacher id of car makers ) ) ) ) , grouped by ( name of car makers )", "question": "the name of each teacher and the number of courses arranged by that teacher.", "label": "1", "remark": "positive"}
{"sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "translated_sql": "( the number of ( distinct ( series name ) ) ) , ( the number of ( distinct ( content ) ) ) that belongs to ( tv channel )", "question": "many distinct series and content are there on tv channels?", "label": "0", "remark": "negative"}
{"sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "translated_sql": "( the number of ( distinct ( series name ) ) ) , ( the number of ( distinct ( content ) ) ) that belongs to ( tv channel )", "question": "the number of distinct series names and content.", "label": "0", "remark": "negative"}
{"sql": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;", "translated_sql": "( the average of ( horsepower ) ) that belongs to ( cars data ) , that have ( ( year ) less than ( 1980 ) )", "question": "is the average horsepower of all the cars produced before 1980", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "translated_sql": "( accelerate of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( make of car makers ) equal to ( 'amc hornet sportabout (sw)' ) )", "question": "is the id of the car whose name is AMC hornet sportabout (sw)", "label": "0", "remark": "negative"}
{"sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "translated_sql": "( first name ) , ( last name ) that belongs to ( players ) , ordered by ( ( birth date ) )", "question": "the first name and last name of all players, ordered by birth date.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( template id of countries ) , ( template type code of car makers ) that belongs to ( ( documents ) , and ( ( templates ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ) , grouped by ( template id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "the id and type code of the most popular document template?", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "translated_sql": "( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , that have ( ( sourceairport of car makers ) equal to ( cvo ) ), and except that ( ( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , that have ( ( sourceairport of car makers ) equal to ( apg ) ))", "question": "ids of airlines that do not have sourceairport CVO but not apg?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "translated_sql": "( model of countries ) that belongs to ( ( car names ) , and ( ( cars data ) satisfied that ( ( makeid of countries ) equal to ( id of car makers ) ) ) ) , that have ( ( cylinders of car makers ) equal to ( 4 ) ) , ordered by ( ( horsepower of car makers ) in descending order ) , limited to the top ( 1 )", "question": "me the model of the car with the largest number of cylinders and 4 horsepower.", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "translated_sql": "( name of car makers ) , ( the number of ( all items ) ) that belongs to ( ( course arrange ) , and ( ( teacher ) satisfied that ( ( teacher id of countries ) equal to ( teacher id of car makers ) ) ) ) , grouped by ( name of car makers )", "question": "names of teachers and the corresponding number of courses offered by each teacher?", "label": "1", "remark": "positive"}
{"sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "translated_sql": "( first name of students ) that belongs to ( ( students ) , and ( ( addresses ) satisfied that ( ( permanent address id of students ) equal to ( address id of addresses ) ) ) ) , that have ( ( ( country of addresses ) equal to ( 'haiti' ) ) or ( ( cell mobile number of students ) equal to ( '09700166582' ) ) )", "question": "the first names of students who live in the country 'Haiti' and have a cell phone number of '09700166582'.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';", "translated_sql": "( countryid of countries ) , ( countryname of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) ) , grouped by ( countryid of countries ) , that have ( ( the number of ( all items ) ) greater than ( 3 ) ) and ( countryid of countries ) , ( countryname of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) , and ( ( model list ) satisfied that ( ( id of car makers ) equal to ( maker of car makers ) ) ) ) , that have ( ( model of car makers ) equal to ( 'fiat' ) )", "question": "are the countries that have more than 3 models and have more than 3 models?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "translated_sql": "( series name of countries ) that belongs to ( ( tv channel ) , and ( ( tv series ) satisfied that ( ( id of countries ) equal to ( channel of car makers ) ) ) ) , that have ( ( episode of car makers ) equal to ( a love of a lifetime ) )", "question": "are the series names of the tv channels that have \"A Love of a Lifetime\"?", "label": "0", "remark": "negative"}
{"sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")", "translated_sql": "( name ) that belongs to ( country ) , that have ( ( ( continent ) equal to ( asia ) ) and ( ( population ) greater than ( the maximum of ( population ) ) that belongs to ( country ) , that have ( ( continent ) equal to ( africa ) ) ) )", "question": "country with a population greater than the maximum in africa", "label": "0", "remark": "negative"}
{"sql": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1", "translated_sql": "( id of students ) , ( name of students ) , ( age of students ) that belongs to ( ( visitor ) , and ( ( visit ) satisfied that ( ( id of students ) equal to ( visitor id of addresses ) ) ) ) , grouped by ( id of students ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )", "question": "ids, names, and ages of all visitors who visited more than 1 place.", "label": "0", "remark": "negative"}
{"sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "translated_sql": "( distinct ( model of countries ) ) that belongs to ( ( model list ) , and ( ( car names ) satisfied that ( ( model of countries ) equal to ( model of car makers ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of car makers ) equal to ( id of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( maker of countries ) equal to ( id of cars data ) ) ) ) , that have ( ( ( weight of car makers ) less than ( 3500 ) ) and ( ( fullname of cars data ) not equal to ( 'ford motor company' ) ) )", "question": "distinct models that are not produced by the company whose weight is less than 3500 and whose full name is not 'Ford Motor Company'.", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "translated_sql": "( name of car makers ) , ( the number of ( all items ) ) that belongs to ( ( course arrange ) , and ( ( teacher ) satisfied that ( ( teacher id of countries ) equal to ( teacher id of car makers ) ) ) ) , grouped by ( name of car makers )", "question": "names of teachers and the number of courses arrange by each teacher.", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( airline of car makers ) equal to ( uid of countries ) ) ) ) , that have ( ( ( airline of countries ) equal to ( united airlines ) ) and ( ( destairport of car makers ) equal to ( asy ) ) )", "question": "many flights operated by United Airlines with destination airport \"ASY\".", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "translated_sql": "( model of countries ) that belongs to ( ( car names ) , and ( ( cars data ) satisfied that ( ( makeid of countries ) equal to ( id of car makers ) ) ) ) , that have ( ( cylinders of car makers ) equal to ( 4 ) ) , ordered by ( ( horsepower of car makers ) in descending order ) , limited to the top ( 1 )", "question": "is the model of the car with the most horsepower, with the most cylinders?", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( model list ) , and ( ( car makers ) satisfied that ( ( maker of countries ) equal to ( id of car makers ) ) ) , and ( ( countries ) satisfied that ( ( country of car makers ) equal to ( countryid of car makers ) ) ) ) , that have ( ( countryname of car makers ) equal to ( 'usa' ) )", "question": "many models are made by the country USA?", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "translated_sql": "( make of car makers ) , ( year of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( year of countries ) equal to ( the minimum of ( year ) ) that belongs to ( cars data ) )", "question": "are the names of the cars that were produced in the smallest year?", "label": "0", "remark": "negative"}
{"sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "translated_sql": "( the number of ( distinct ( series name ) ) ) , ( the number of ( distinct ( content ) ) ) that belongs to ( tv channel )", "question": "many different series names and content on TV channels.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( degree program id of countries ) , ( degree summary name of countries ) that belongs to ( ( degree programs ) , and ( ( student enrolment ) satisfied that ( ( degree program id of countries ) equal to ( degree program id of car makers ) ) ) ) , grouped by ( degree program id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "id and summary name of the degree program that has the most student enrollments?", "label": "1", "remark": "positive"}
{"sql": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)", "translated_sql": "( name ) that belongs to ( museum ) , that have ( ( num of staff ) greater than ( the minimum of ( num of staff ) ) that belongs to ( museum ) , that have ( ( open year ) greater than ( 2010 ) ) )", "question": "the names of museums that have more than one head of staff in the year before 2010.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "translated_sql": "( continent of countries ) , ( the number of ( all items ) ) that belongs to ( ( continents ) , and ( ( countries ) satisfied that ( ( contid of countries ) equal to ( continent of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( countryid of car makers ) equal to ( country of car makers ) ) ) ) , grouped by ( continent of countries )", "question": "the continent and the number of car makers in each continent?", "label": "1", "remark": "positive"}
{"sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "translated_sql": "( first name ) , ( last name ) that belongs to ( players ) , ordered by ( ( birth date ) )", "question": "the first names and last names of all players in alphabetical order by birth date.", "label": "1", "remark": "positive"}
{"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( destairport of countries ) equal to ( airportcode of car makers ) ) ) , and ( ( airports ) satisfied that ( ( sourceairport of countries ) equal to ( airportcode of car makers ) ) ) ) , that have ( ( ( city of car makers ) equal to ( ashley ) ) and ( ( city of car makers ) equal to ( aberdeen ) ) )", "question": "the number of flights from ashley airport to Aberdeen airport.", "label": "0", "remark": "negative"}
{"sql": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;", "translated_sql": "( the average of ( horsepower ) ) that belongs to ( cars data ) , that have ( ( year ) less than ( 1980 ) )", "question": "is the average horsepower of all cars produced before 1980?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( student id of countries ) , ( first name of countries ) , ( middle name of countries ) , ( last name of countries ) , ( the number of ( all items ) ) , ( student id of countries ) that belongs to ( ( students ) , and ( ( student enrolment ) satisfied that ( ( student id of countries ) equal to ( student id of car makers ) ) ) ) , grouped by ( student id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "student id, middle name, last name, and the number of students enrolled in the largest number of courses.", "label": "0", "remark": "negative"}
{"sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "translated_sql": "( template type code ) that belongs to ( templates ), and except that ( ( template type code ) that belongs to ( ( templates ) , and ( ( documents ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ))", "question": "type code for all templates except those with documents.", "label": "1", "remark": "positive"}
{"sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "translated_sql": "( name of car makers ) , ( the number of ( all items ) ) that belongs to ( ( course arrange ) , and ( ( teacher ) satisfied that ( ( teacher id of countries ) equal to ( teacher id of car makers ) ) ) ) , grouped by ( name of car makers )", "question": "the name of each teacher and the number of courses arranged by that teacher?", "label": "1", "remark": "positive"}
{"sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( airline of car makers ) equal to ( uid of countries ) ) ) ) , that have ( ( ( airline of countries ) equal to ( united airlines ) ) and ( ( destairport of car makers ) equal to ( asy ) ) )", "question": "number of flights operated by airlines \"United Airlines\" and \"Asy\".", "label": "0", "remark": "negative"}
{"sql": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;", "translated_sql": "( the average of ( horsepower ) ) that belongs to ( cars data ) , that have ( ( year ) less than ( 1980 ) )", "question": "the average horsepower of the cars produced before 1980.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "translated_sql": "( country code of countries ) , ( first name of countries ) that belongs to ( ( players ) , and ( ( matches ) satisfied that ( ( player id of countries ) equal to ( winner id of car makers ) ) ) ) , that have ( ( tourney name of car makers ) equal to ( 'wta championships' ) ), and intersect with ( ( country code of countries ) , ( first name of countries ) that belongs to ( ( players ) , and ( ( matches ) satisfied that ( ( player id of countries ) equal to ( winner id of car makers ) ) ) ) , that have ( ( tourney name of car makers ) equal to ( 'australian open' ) ))", "question": "the country code and first name of players from both the WTA Championships and Australian Open?", "label": "0", "remark": "negative"}
{"sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "translated_sql": "( template type code ) that belongs to ( templates ), and except that ( ( template type code ) that belongs to ( ( templates ) , and ( ( documents ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ))", "question": "the code of the template that does not have any documents?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "translated_sql": "( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , that have ( ( sourceairport of car makers ) equal to ( cvo ) ), and except that ( ( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , that have ( ( sourceairport of car makers ) equal to ( apg ) ))", "question": "the names of airlines that have never operated to CV but never to apg?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "translated_sql": "( fname of countries ) , ( age of countries ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of countries ) equal to ( stuid of car makers ) ) ) , and ( ( pets ) satisfied that ( ( petid of car makers ) equal to ( petid of car makers ) ) ) ) , that have ( ( ( pettype of car makers ) equal to ( 'dog' ) ) and ( ( t1.stuid ) not in ( ( stuid of countries ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of countries ) equal to ( stuid of car makers ) ) ) , and ( ( pets ) satisfied that ( ( petid of car makers ) equal to ( petid of car makers ) ) ) ) , that have ( ( pettype of car makers ) equal to ( 'cat' ) ) ) ) )", "question": "first name and age of the students who have a pet with type 'Dog' but not a cat?", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( template id of countries ) , ( template type code of car makers ) that belongs to ( ( documents ) , and ( ( templates ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ) , grouped by ( template id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "is the id and type code of the template with most number of documents?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "translated_sql": "( killed of countries ) , ( injured of countries ) that belongs to ( ( death ) , and ( ( ship ) satisfied that ( ( caused by ship id of countries ) equal to ( id of car makers ) ) ) ) , that have ( ( tonnage of car makers ) equal to ( 't' ) )", "question": "the number of people killed and the number of people injured by ships whose tonnage is 't'.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';", "translated_sql": "( countryid of countries ) , ( countryname of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) ) , grouped by ( countryid of countries ) , that have ( ( the number of ( all items ) ) greater than ( 3 ) ) and ( countryid of countries ) , ( countryname of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) , and ( ( model list ) satisfied that ( ( id of car makers ) equal to ( maker of car makers ) ) ) ) , that have ( ( model of car makers ) equal to ( 'fiat' ) )", "question": "the id and name of countries that have more than 3 car makers and have more than 3 models.", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( destairport of countries ) equal to ( airportcode of car makers ) ) ) , and ( ( airports ) satisfied that ( ( sourceairport of countries ) equal to ( airportcode of car makers ) ) ) ) , that have ( ( ( city of car makers ) equal to ( ashley ) ) and ( ( city of car makers ) equal to ( aberdeen ) ) )", "question": "the number of flights from airports in city \"Ashley\" and \"Aberdeen\".", "label": "0", "remark": "negative"}
{"sql": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)", "translated_sql": "( name ) that belongs to ( museum ) , that have ( ( num of staff ) greater than ( the minimum of ( num of staff ) ) that belongs to ( museum ) , that have ( ( open year ) greater than ( 2010 ) ) )", "question": "names of museums that have more than one staff member.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( degree program id of countries ) , ( degree summary name of countries ) that belongs to ( ( degree programs ) , and ( ( student enrolment ) satisfied that ( ( degree program id of countries ) equal to ( degree program id of car makers ) ) ) ) , grouped by ( degree program id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "the id and summary name of the degree program with the most student enrollment?", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "translated_sql": "( killed of countries ) , ( injured of countries ) that belongs to ( ( death ) , and ( ( ship ) satisfied that ( ( caused by ship id of countries ) equal to ( id of car makers ) ) ) ) , that have ( ( tonnage of car makers ) equal to ( 't' ) )", "question": "the number of people killed and injured by ships with tonnage 'T2'.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "translated_sql": "( series name of countries ) that belongs to ( ( tv channel ) , and ( ( tv series ) satisfied that ( ( id of countries ) equal to ( channel of car makers ) ) ) ) , that have ( ( episode of car makers ) equal to ( a love of a lifetime ) )", "question": "series names of tv channels that have an episode of \"A Love of a Lifetime \".", "label": "1", "remark": "positive"}
{"sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "translated_sql": "( template type code ) that belongs to ( templates ), and except that ( ( template type code ) that belongs to ( ( templates ) , and ( ( documents ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ))", "question": "the code of the template type that is not used in any documents.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "translated_sql": "( killed of countries ) , ( injured of countries ) that belongs to ( ( death ) , and ( ( ship ) satisfied that ( ( caused by ship id of countries ) equal to ( id of car makers ) ) ) ) , that have ( ( tonnage of car makers ) equal to ( 't' ) )", "question": "the killed and injured number of ships with a tonnage of t2.", "label": "0", "remark": "negative"}
{"sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")", "translated_sql": "( name ) that belongs to ( country ) , that have ( ( ( continent ) equal to ( asia ) ) and ( ( population ) greater than ( the maximum of ( population ) ) that belongs to ( country ) , that have ( ( continent ) equal to ( africa ) ) ) )", "question": "the country with the largest population in africa", "label": "0", "remark": "negative"}
{"sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "translated_sql": "( the maximum of ( mpg ) ) that belongs to ( cars data ) , that have ( ( ( cylinders ) equal to ( 8 ) ) or ( ( year ) less than ( 1980 ) ) )", "question": "mpg of the car with cylinders equal to 8 or less than 1980.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( student id of countries ) , ( first name of countries ) , ( middle name of countries ) , ( last name of countries ) , ( the number of ( all items ) ) , ( student id of countries ) that belongs to ( ( students ) , and ( ( student enrolment ) satisfied that ( ( student id of countries ) equal to ( student id of car makers ) ) ) ) , grouped by ( student id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "the student with the most enrollments. List the student ID, first name, middle name, last name, and the number of enrollments.", "label": "1", "remark": "positive"}
{"sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "translated_sql": "( first name ) , ( middle name ) , ( last name ) that belongs to ( students ) , ordered by ( ( date left ) in ascending order ) , limited to the top ( 1 )", "question": "first name, middle name, and last name of the student who left school on the most recent date?", "label": "0", "remark": "negative"}
{"sql": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)", "translated_sql": "( name ) that belongs to ( museum ) , that have ( ( num of staff ) greater than ( the minimum of ( num of staff ) ) that belongs to ( museum ) , that have ( ( open year ) greater than ( 2010 ) ) )", "question": "the names of museums that have a minuscule number of staff and opened after 2010.", "label": "0", "remark": "negative"}
{"sql": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1", "translated_sql": "( id of students ) , ( name of students ) , ( age of students ) that belongs to ( ( visitor ) , and ( ( visit ) satisfied that ( ( id of students ) equal to ( visitor id of addresses ) ) ) ) , grouped by ( id of students ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )", "question": "the id, name and age for all the visitors who made more than one visit?", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "translated_sql": "( continent of countries ) , ( the number of ( all items ) ) that belongs to ( ( continents ) , and ( ( countries ) satisfied that ( ( contid of countries ) equal to ( continent of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( countryid of car makers ) equal to ( country of car makers ) ) ) ) , grouped by ( continent of countries )", "question": "each country, how many cars are there in that country?", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( airline of car makers ) equal to ( uid of countries ) ) ) ) , that have ( ( ( airline of countries ) equal to ( united airlines ) ) and ( ( destairport of car makers ) equal to ( asy ) ) )", "question": "number of flights operated by airline \"United Airlines\" from asy", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "translated_sql": "( series name of countries ) that belongs to ( ( tv channel ) , and ( ( tv series ) satisfied that ( ( id of countries ) equal to ( channel of car makers ) ) ) ) , that have ( ( episode of car makers ) equal to ( a love of a lifetime ) )", "question": "are the series names of the tv channels that have \"A Love of a Lifetime\"?", "label": "0", "remark": "negative"}
{"sql": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)", "translated_sql": "( name ) that belongs to ( museum ) , that have ( ( num of staff ) greater than ( the minimum of ( num of staff ) ) that belongs to ( museum ) , that have ( ( open year ) greater than ( 2010 ) ) )", "question": "the names of museums that have more than one staff member after opening in year 2010.", "label": "0", "remark": "negative"}
{"sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "translated_sql": "( first name ) , ( last name ) that belongs to ( players ) , ordered by ( ( birth date ) )", "question": "first name and last name of all players ordered by birth date.", "label": "1", "remark": "positive"}
{"sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "translated_sql": "( airline ) , ( abbreviation ) that belongs to ( airlines ) , that have ( ( country ) equal to ( usa ) )", "question": "are the names and abbrevents of all airlines based in the country \"USA\"?", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "translated_sql": "( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ), and intersect with ( ( name of car makers ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( liked id of countries ) equal to ( id of car makers ) ) ) ))", "question": "the names of students who are friends with both likes and dislikes.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "translated_sql": "( fname of countries ) , ( age of countries ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of countries ) equal to ( stuid of car makers ) ) ) , and ( ( pets ) satisfied that ( ( petid of car makers ) equal to ( petid of car makers ) ) ) ) , that have ( ( ( pettype of car makers ) equal to ( 'dog' ) ) and ( ( t1.stuid ) not in ( ( stuid of countries ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of countries ) equal to ( stuid of car makers ) ) ) , and ( ( pets ) satisfied that ( ( petid of car makers ) equal to ( petid of car makers ) ) ) ) , that have ( ( pettype of car makers ) equal to ( 'cat' ) ) ) ) )", "question": "the first name and age of the student who has a dog but not a cat?", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';", "translated_sql": "( countryid of countries ) , ( countryname of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) ) , grouped by ( countryid of countries ) , that have ( ( the number of ( all items ) ) greater than ( 3 ) ) and ( countryid of countries ) , ( countryname of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) , and ( ( model list ) satisfied that ( ( id of car makers ) equal to ( maker of car makers ) ) ) ) , that have ( ( model of car makers ) equal to ( 'fiat' ) )", "question": "the id and name of countries that have more than 3 car makers and have more than 3 models.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "translated_sql": "( continent of countries ) , ( the number of ( all items ) ) that belongs to ( ( continents ) , and ( ( countries ) satisfied that ( ( contid of countries ) equal to ( continent of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( countryid of car makers ) equal to ( country of car makers ) ) ) ) , grouped by ( continent of countries )", "question": "the number of car manufacturers in each country.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "translated_sql": "( country code of countries ) , ( first name of countries ) that belongs to ( ( players ) , and ( ( matches ) satisfied that ( ( player id of countries ) equal to ( winner id of car makers ) ) ) ) , that have ( ( tourney name of car makers ) equal to ( 'wta championships' ) ), and intersect with ( ( country code of countries ) , ( first name of countries ) that belongs to ( ( players ) , and ( ( matches ) satisfied that ( ( player id of countries ) equal to ( winner id of car makers ) ) ) ) , that have ( ( tourney name of car makers ) equal to ( 'australian open' ) ))", "question": "the country code and first name of the players who won both the WTA Championships and Australian Open.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "translated_sql": "( model of countries ) that belongs to ( ( car names ) , and ( ( cars data ) satisfied that ( ( makeid of countries ) equal to ( id of car makers ) ) ) ) , that have ( ( cylinders of car makers ) equal to ( 4 ) ) , ordered by ( ( horsepower of car makers ) in descending order ) , limited to the top ( 1 )", "question": "the model of the car that has the largest number of cylinders with 4 horsepower and the most number of wheels.", "label": "0", "remark": "negative"}
{"sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "translated_sql": "( first name of students ) that belongs to ( ( students ) , and ( ( addresses ) satisfied that ( ( permanent address id of students ) equal to ( address id of addresses ) ) ) ) , that have ( ( ( country of addresses ) equal to ( 'haiti' ) ) or ( ( cell mobile number of students ) equal to ( '09700166582' ) ) )", "question": "the first names of students whose permanent address is in the country of 'haiti' and cell phone number is 09700166582?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "translated_sql": "( fname of countries ) , ( age of countries ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of countries ) equal to ( stuid of car makers ) ) ) , and ( ( pets ) satisfied that ( ( petid of car makers ) equal to ( petid of car makers ) ) ) ) , that have ( ( ( pettype of car makers ) equal to ( 'dog' ) ) and ( ( t1.stuid ) not in ( ( stuid of countries ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of countries ) equal to ( stuid of car makers ) ) ) , and ( ( pets ) satisfied that ( ( petid of car makers ) equal to ( petid of car makers ) ) ) ) , that have ( ( pettype of car makers ) equal to ( 'cat' ) ) ) ) )", "question": "first name and age of the student who has a pet with type 'dog' but not a cat?", "label": "1", "remark": "positive"}
{"sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "translated_sql": "( name ) that belongs to ( highschooler ), and except that ( ( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ))", "question": "the names of students who do not have any friend.", "label": "1", "remark": "positive"}
{"sql": "SELECT DISTINCT country FROM singer WHERE age  >  20", "translated_sql": "( distinct ( country ) ) that belongs to ( singer ) , that have ( ( age ) greater than ( 20 ) )", "question": "distinct countries of singers older than 20.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( template id of countries ) , ( template type code of car makers ) that belongs to ( ( documents ) , and ( ( templates ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ) , grouped by ( template id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "id and type code of the template that has the most documents?", "label": "0", "remark": "negative"}
{"sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "translated_sql": "( student id ) that belongs to ( friend ), and intersect with ( ( liked id ) that belongs to ( likes ))", "question": "ids for all students who have both friends and likes?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "translated_sql": "( accelerate of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( make of car makers ) equal to ( 'amc hornet sportabout (sw)' ) )", "question": "accelerate the car with id 'amc hornet sportabout'", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "translated_sql": "( template id of car makers ) that belongs to ( ( ref template types ) , and ( ( templates ) satisfied that ( ( template type code of countries ) equal to ( template type code of car makers ) ) ) ) , that have ( ( template type description of countries ) equal to ( presentation ) )", "question": "the id of the template type described by the template type description.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "translated_sql": "( countryname of countries ) , ( countryid of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) ) , grouped by ( countryid of countries ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 1 ) )", "question": "country name and id of the country that has at least 1 car maker?", "label": "1", "remark": "positive"}
{"sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( documents ) , and ( ( templates ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ) , that have ( ( template type code of car makers ) equal to ( 'ppt' ) )", "question": "is the number of documents with type code PPT?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';", "translated_sql": "( countryid of countries ) , ( countryname of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) ) , grouped by ( countryid of countries ) , that have ( ( the number of ( all items ) ) greater than ( 3 ) ) and ( countryid of countries ) , ( countryname of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) , and ( ( model list ) satisfied that ( ( id of car makers ) equal to ( maker of car makers ) ) ) ) , that have ( ( model of car makers ) equal to ( 'fiat' ) )", "question": "the id and name of countries that have more than 3 car makers and have more than 3 models?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "translated_sql": "( fname of countries ) , ( age of countries ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of countries ) equal to ( stuid of car makers ) ) ) , and ( ( pets ) satisfied that ( ( petid of car makers ) equal to ( petid of car makers ) ) ) ) , that have ( ( ( pettype of car makers ) equal to ( 'dog' ) ) and ( ( t1.stuid ) not in ( ( stuid of countries ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of countries ) equal to ( stuid of car makers ) ) ) , and ( ( pets ) satisfied that ( ( petid of car makers ) equal to ( petid of car makers ) ) ) ) , that have ( ( pettype of car makers ) equal to ( 'cat' ) ) ) ) )", "question": "the first name and age of the student who has a pet with type 'dog' but not a cat?", "label": "1", "remark": "positive"}
{"sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")", "translated_sql": "( name ) that belongs to ( country ) , that have ( ( ( continent ) equal to ( asia ) ) and ( ( population ) greater than ( the maximum of ( population ) ) that belongs to ( country ) , that have ( ( continent ) equal to ( africa ) ) ) )", "question": "country with a population greater than the largest continent in africa", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( model list ) , and ( ( car makers ) satisfied that ( ( maker of countries ) equal to ( id of car makers ) ) ) , and ( ( countries ) satisfied that ( ( country of car makers ) equal to ( countryid of car makers ) ) ) ) , that have ( ( countryname of car makers ) equal to ( 'usa' ) )", "question": "many models are produced by car makers in the country named USA?", "label": "0", "remark": "negative"}
{"sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "translated_sql": "( student id ) that belongs to ( friend ), and intersect with ( ( liked id ) that belongs to ( likes ))", "question": "the ids of all the students who have friends and likes.", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( documents ) , and ( ( templates ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ) , that have ( ( template type code of car makers ) equal to ( 'ppt' ) )", "question": "the number of documents that have the type code 'PPT'.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "translated_sql": "( model of countries ) that belongs to ( ( car names ) , and ( ( cars data ) satisfied that ( ( makeid of countries ) equal to ( id of car makers ) ) ) ) , that have ( ( cylinders of car makers ) equal to ( 4 ) ) , ordered by ( ( horsepower of car makers ) in descending order ) , limited to the top ( 1 )", "question": "model of the car with the most horsepower?", "label": "0", "remark": "negative"}
{"sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of countries ) equal to ( countrycode of car makers ) ) ) ) , that have ( ( ( name of countries ) equal to ( afghanistan ) ) and ( ( isofficial ) equal to ( t ) ) )", "question": "number of countries whose language is \"Afghanistan\".", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "translated_sql": "( continent of countries ) , ( the number of ( all items ) ) that belongs to ( ( continents ) , and ( ( countries ) satisfied that ( ( contid of countries ) equal to ( continent of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( countryid of car makers ) equal to ( country of car makers ) ) ) ) , grouped by ( continent of countries )", "question": "the continent and the number of car makers in each continent?", "label": "1", "remark": "positive"}
{"sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "translated_sql": "( airline ) that belongs to ( airlines ) , that have ( ( abbreviation ) equal to ( ual ) )", "question": "airlines with abbreviation \"UAL\".", "label": "1", "remark": "positive"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "translated_sql": "( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ), and intersect with ( ( name of car makers ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( liked id of countries ) equal to ( id of car makers ) ) ) ))", "question": "the names of friends who have likes and likes.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "translated_sql": "( continent of countries ) , ( the number of ( all items ) ) that belongs to ( ( continents ) , and ( ( countries ) satisfied that ( ( contid of countries ) equal to ( continent of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( countryid of car makers ) equal to ( country of car makers ) ) ) ) , grouped by ( continent of countries )", "question": "continents and the number of car makers on each continent?", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( student id of countries ) , ( first name of countries ) , ( middle name of countries ) , ( last name of countries ) , ( the number of ( all items ) ) , ( student id of countries ) that belongs to ( ( students ) , and ( ( student enrolment ) satisfied that ( ( student id of countries ) equal to ( student id of car makers ) ) ) ) , grouped by ( student id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "student id, middle name, last name, and the number of students enrolled in the largest number of courses.", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "translated_sql": "( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ), and intersect with ( ( name of car makers ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( liked id of countries ) equal to ( id of car makers ) ) ) ))", "question": "names of friends who are friends with some students?", "label": "0", "remark": "negative"}
{"sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "translated_sql": "( country ) that belongs to ( airlines ) , that have ( ( airline ) equal to ( jetblue airways ) )", "question": "countries does jetblue airways operate?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "translated_sql": "( accelerate of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( make of car makers ) equal to ( 'amc hornet sportabout (sw)' ) )", "question": "is the id of the car with the name AMC hornet sportabout (sw)?", "label": "0", "remark": "negative"}
{"sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "translated_sql": "( distinct ( model of countries ) ) that belongs to ( ( model list ) , and ( ( car names ) satisfied that ( ( model of countries ) equal to ( model of car makers ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of car makers ) equal to ( id of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( maker of countries ) equal to ( id of cars data ) ) ) ) , that have ( ( ( weight of car makers ) less than ( 3500 ) ) and ( ( fullname of cars data ) not equal to ( 'ford motor company' ) ) )", "question": "the distinct models whose weight is less than 3500 and whose full name is not 'Ford Motor Company';", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "translated_sql": "( accelerate of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( make of car makers ) equal to ( 'amc hornet sportabout (sw)' ) )", "question": "the accelerations of the cars that are involved in amc hornet sportabout?", "label": "0", "remark": "negative"}
{"sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "translated_sql": "( airline ) , ( abbreviation ) that belongs to ( airlines ) , that have ( ( country ) equal to ( usa ) )", "question": "the airline and the abbreviation for all flights from country \"USA\".", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "translated_sql": "( fname of countries ) , ( age of countries ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of countries ) equal to ( stuid of car makers ) ) ) , and ( ( pets ) satisfied that ( ( petid of car makers ) equal to ( petid of car makers ) ) ) ) , that have ( ( ( pettype of car makers ) equal to ( 'dog' ) ) and ( ( t1.stuid ) not in ( ( stuid of countries ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of countries ) equal to ( stuid of car makers ) ) ) , and ( ( pets ) satisfied that ( ( petid of car makers ) equal to ( petid of car makers ) ) ) ) , that have ( ( pettype of car makers ) equal to ( 'cat' ) ) ) ) )", "question": "the first name and age of the students who do not have a dog or cat.", "label": "0", "remark": "negative"}
{"sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "translated_sql": "( first name ) , ( middle name ) , ( last name ) that belongs to ( students ) , ordered by ( ( date left ) in ascending order ) , limited to the top ( 1 )", "question": "the first name, middle name, and last name of the youngest student who left campus.", "label": "0", "remark": "negative"}
{"sql": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)", "translated_sql": "( name ) that belongs to ( museum ) , that have ( ( num of staff ) greater than ( the minimum of ( num of staff ) ) that belongs to ( museum ) , that have ( ( open year ) greater than ( 2010 ) ) )", "question": "names of museums that have more than one staff working after 2010.", "label": "0", "remark": "negative"}
{"sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of countries ) equal to ( countrycode of car makers ) ) ) ) , that have ( ( ( name of countries ) equal to ( afghanistan ) ) and ( ( isofficial ) equal to ( t ) ) )", "question": "number of countries whose language is official is Afghanistan?", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( model list ) , and ( ( car makers ) satisfied that ( ( maker of countries ) equal to ( id of car makers ) ) ) , and ( ( countries ) satisfied that ( ( country of car makers ) equal to ( countryid of car makers ) ) ) ) , that have ( ( countryname of car makers ) equal to ( 'usa' ) )", "question": "many car makers are in the USA?", "label": "0", "remark": "negative"}
{"sql": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"", "translated_sql": "( distinct ( name of city ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of students ) equal to ( countrycode of addresses ) ) ) , and ( ( city ) satisfied that ( ( code of students ) equal to ( countrycode of city ) ) ) ) , that have ( ( ( isofficial of addresses ) equal to ( 't' ) ) and ( ( language of addresses ) equal to ( 'chinese' ) ) and ( ( continent of students ) equal to ( asia ) ) )", "question": "cities in China that are official language and have continent asia?", "label": "0", "remark": "negative"}
{"sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "translated_sql": "( the number of ( language of car makers ) ) , ( name of countries ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of countries ) equal to ( countrycode of car makers ) ) ) ) , grouped by ( name of countries ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )", "question": "number of languages and names of countries that have more than 2 languages.", "label": "1", "remark": "positive"}
{"sql": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)", "translated_sql": "( name ) that belongs to ( museum ) , that have ( ( num of staff ) greater than ( the minimum of ( num of staff ) ) that belongs to ( museum ) , that have ( ( open year ) greater than ( 2010 ) ) )", "question": "are the names of museums that have a staff of more than the minimum number of staff for any museum opened after 2010?", "label": "0", "remark": "negative"}
{"sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "translated_sql": "( country ) that belongs to ( airlines ) , that have ( ( airline ) equal to ( jetblue airways ) )", "question": "countries does jetblue airways belong to?", "label": "0", "remark": "negative"}
{"sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "translated_sql": "( distinct ( model of car makers ) ) that belongs to ( ( car names ) , and ( ( model list ) satisfied that ( ( model of countries ) equal to ( model of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( maker of car makers ) equal to ( id of car makers ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of countries ) equal to ( id of cars data ) ) ) ) , that have ( ( ( fullname of car makers ) equal to ( 'general motors' ) ) or ( ( weight of cars data ) greater than ( 3500 ) ) )", "question": "names of all the distinct models whose full name is General Motors or weight is above 3500?", "label": "1", "remark": "positive"}
{"sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "translated_sql": "( airline ) that belongs to ( airlines ) , that have ( ( abbreviation ) equal to ( ual ) )", "question": "airlines with abbreviation \"UAL\".", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "translated_sql": "( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , that have ( ( sourceairport of car makers ) equal to ( cvo ) ), and except that ( ( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , that have ( ( sourceairport of car makers ) equal to ( apg ) ))", "question": "the names of airports that have both a CVO and a APG connection but do not have a CIS connection.", "label": "0", "remark": "negative"}
{"sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "translated_sql": "( airline ) that belongs to ( airlines ) , that have ( ( abbreviation ) equal to ( ual ) )", "question": "the names of all airlines with abbreviation \"UAL\".", "label": "1", "remark": "positive"}
{"sql": "SELECT count(DISTINCT current_address_id) FROM Students", "translated_sql": "( the number of ( distinct ( current address id ) ) ) that belongs to ( students )", "question": "many distinct current address ids exist for students.", "label": "0", "remark": "negative"}
{"sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "translated_sql": "( first name ) , ( middle name ) , ( last name ) that belongs to ( students ) , ordered by ( ( date left ) in ascending order ) , limited to the top ( 1 )", "question": "first name, middle name, last name for the student with the most students?", "label": "0", "remark": "negative"}
{"sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "translated_sql": "( name ) that belongs to ( highschooler ), and except that ( ( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ))", "question": "names of students who do not have any friend.", "label": "1", "remark": "positive"}
{"sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "translated_sql": "( first name ) , ( middle name ) , ( last name ) that belongs to ( students ) , ordered by ( ( date left ) in ascending order ) , limited to the top ( 1 )", "question": "the first name, middle name, and last name of the student who left the institution the most recently?", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( airline of car makers ) equal to ( uid of countries ) ) ) ) , that have ( ( ( airline of countries ) equal to ( united airlines ) ) and ( ( destairport of car makers ) equal to ( asy ) ) )", "question": "the number of flights operated by airline \"United Airlines\" and \"Asy\".", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "translated_sql": "( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , grouped by ( airline of countries ) , that have ( ( the number of ( all items ) ) less than ( 200 ) )", "question": "the airlines that have less than 200 flights.", "label": "1", "remark": "positive"}
{"sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "translated_sql": "( distinct ( model of countries ) ) that belongs to ( ( model list ) , and ( ( car names ) satisfied that ( ( model of countries ) equal to ( model of car makers ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of car makers ) equal to ( id of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( maker of countries ) equal to ( id of cars data ) ) ) ) , that have ( ( ( weight of car makers ) less than ( 3500 ) ) and ( ( fullname of cars data ) not equal to ( 'ford motor company' ) ) )", "question": "distinct models that are not produced by the company whose weight is less than 3500 and whose full name is not 'ford motor company'.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "translated_sql": "( continent of countries ) , ( the number of ( all items ) ) that belongs to ( ( continents ) , and ( ( countries ) satisfied that ( ( contid of countries ) equal to ( continent of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( countryid of car makers ) equal to ( country of car makers ) ) ) ) , grouped by ( continent of countries )", "question": "continents and the number of car makers from each continent.", "label": "1", "remark": "positive"}
{"sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of countries ) equal to ( countrycode of car makers ) ) ) ) , that have ( ( ( name of countries ) equal to ( afghanistan ) ) and ( ( isofficial ) equal to ( t ) ) )", "question": "the number of languages that the country Afghanistan is official in.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( degree program id of countries ) , ( degree summary name of countries ) that belongs to ( ( degree programs ) , and ( ( student enrolment ) satisfied that ( ( degree program id of countries ) equal to ( degree program id of car makers ) ) ) ) , grouped by ( degree program id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "id and summary name of the degree program that has the most student enrollment.", "label": "1", "remark": "positive"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "translated_sql": "( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ), and intersect with ( ( name of car makers ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( liked id of countries ) equal to ( id of car makers ) ) ) ))", "question": "the names of the students who have friends who have likes.", "label": "0", "remark": "negative"}
{"sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "translated_sql": "( the number of ( distinct ( winner name ) ) ) that belongs to ( matches ) , that have ( ( ( tourney name ) equal to ( 'wta championships' ) ) and ( ( winner hand ) equal to ( 'l' ) ) )", "question": "the number of distinct winners of the tourney named 'Wta Championships' and the winner hand.", "label": "0", "remark": "negative"}
{"sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "translated_sql": "( the number of ( distinct ( series name ) ) ) , ( the number of ( distinct ( content ) ) ) that belongs to ( tv channel )", "question": "many series and series are on TV channels", "label": "0", "remark": "negative"}
{"sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "translated_sql": "( template id ) that belongs to ( templates ) , that have ( ( ( template type code ) equal to ( pp ) ) or ( ( template type code ) equal to ( ppt ) ) )", "question": "the id of the templates whose type code is \"PS\" or whose type code is \"PFT\".", "label": "0", "remark": "negative"}
{"sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "translated_sql": "( template id ) that belongs to ( templates ) , that have ( ( ( template type code ) equal to ( pp ) ) or ( ( template type code ) equal to ( ppt ) ) )", "question": "ids for the templates whose type code is \"PS\" or whose type code is \"Ppt\"?", "label": "0", "remark": "negative"}
{"sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "translated_sql": "( first name ) , ( last name ) that belongs to ( players ) , ordered by ( ( birth date ) )", "question": "the first name and last name of all players, ordered by their birth date.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "translated_sql": "( cylinders of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( model of car makers ) equal to ( 'volvo' ) ) , ordered by ( ( accelerate of countries ) in ascending order ) , limited to the top ( 1 )", "question": "the id of the car with the model model 'volvo' that accelerates the most", "label": "0", "remark": "negative"}
{"sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "translated_sql": "( country ) that belongs to ( airlines ) , that have ( ( airline ) equal to ( jetblue airways ) )", "question": "are all the countries of the flights operated by JetBlue Airways?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( student id of countries ) , ( first name of countries ) , ( middle name of countries ) , ( last name of countries ) , ( the number of ( all items ) ) , ( student id of countries ) that belongs to ( ( students ) , and ( ( student enrolment ) satisfied that ( ( student id of countries ) equal to ( student id of car makers ) ) ) ) , grouped by ( student id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "id, middle name, last name, and the number of students enrolled in the most courses?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "translated_sql": "( accelerate of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( make of car makers ) equal to ( 'amc hornet sportabout (sw)' ) )", "question": "is the acceleration data of the car with the name AMC hornet sportabout (sw)?", "label": "0", "remark": "negative"}
{"sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "translated_sql": "( country ) that belongs to ( airlines ) , that have ( ( airline ) equal to ( jetblue airways ) )", "question": "country of the airline jetblue airways?", "label": "1", "remark": "positive"}
{"sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "translated_sql": "( airline ) that belongs to ( airlines ) , that have ( ( abbreviation ) equal to ( ual ) )", "question": "names of airlines with abbreviation \"UAL\"", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "translated_sql": "( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , grouped by ( airline of countries ) , that have ( ( the number of ( all items ) ) less than ( 200 ) )", "question": "the names of airlines that have less than 200 number of flights.", "label": "1", "remark": "positive"}
{"sql": "SELECT count(DISTINCT current_address_id) FROM Students", "translated_sql": "( the number of ( distinct ( current address id ) ) ) that belongs to ( students )", "question": "number of distinct current address ids of students.", "label": "1", "remark": "positive"}
{"sql": "SELECT count(DISTINCT current_address_id) FROM Students", "translated_sql": "( the number of ( distinct ( current address id ) ) ) that belongs to ( students )", "question": "the number of distinct current address ids for students.", "label": "1", "remark": "positive"}
{"sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "translated_sql": "( the number of ( distinct ( series name ) ) ) , ( the number of ( distinct ( content ) ) ) that belongs to ( tv channel )", "question": "number of distinct series names and the number of distinct content.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "translated_sql": "( killed of countries ) , ( injured of countries ) that belongs to ( ( death ) , and ( ( ship ) satisfied that ( ( caused by ship id of countries ) equal to ( id of car makers ) ) ) ) , that have ( ( tonnage of car makers ) equal to ( 't' ) )", "question": "the killed and injured number of ships with a tonnage of t2.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';", "translated_sql": "( countryid of countries ) , ( countryname of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) ) , grouped by ( countryid of countries ) , that have ( ( the number of ( all items ) ) greater than ( 3 ) ) and ( countryid of countries ) , ( countryname of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) , and ( ( model list ) satisfied that ( ( id of car makers ) equal to ( maker of car makers ) ) ) ) , that have ( ( model of car makers ) equal to ( 'fiat' ) )", "question": "countries that have more than 3 car makers and have more than 3 models?", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "translated_sql": "( make of car makers ) , ( year of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( year of countries ) equal to ( the minimum of ( year ) ) that belongs to ( cars data ) )", "question": "the name of the vehicle that is made in the smallest year?", "label": "0", "remark": "negative"}
{"sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "translated_sql": "( distinct ( model of countries ) ) that belongs to ( ( model list ) , and ( ( car names ) satisfied that ( ( model of countries ) equal to ( model of car makers ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of car makers ) equal to ( id of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( maker of countries ) equal to ( id of cars data ) ) ) ) , that have ( ( ( weight of car makers ) less than ( 3500 ) ) and ( ( fullname of cars data ) not equal to ( 'ford motor company' ) ) )", "question": "the distinct models whose weight is less than 3500 and whose full name is not \"Ford Motor Company\".", "label": "0", "remark": "negative"}
{"sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "translated_sql": "( distinct ( model of countries ) ) that belongs to ( ( model list ) , and ( ( car names ) satisfied that ( ( model of countries ) equal to ( model of car makers ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of car makers ) equal to ( id of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( maker of countries ) equal to ( id of cars data ) ) ) ) , that have ( ( ( weight of car makers ) less than ( 3500 ) ) and ( ( fullname of cars data ) not equal to ( 'ford motor company' ) ) )", "question": "models whose weight is less than 3500 and whose full name is notford motor company.", "label": "0", "remark": "negative"}
{"sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "translated_sql": "( airline ) that belongs to ( airlines ) , that have ( ( abbreviation ) equal to ( ual ) )", "question": "is the airline with the abbreviationUAL?", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "translated_sql": "( template id of car makers ) that belongs to ( ( ref template types ) , and ( ( templates ) satisfied that ( ( template type code of countries ) equal to ( template type code of car makers ) ) ) ) , that have ( ( template type description of countries ) equal to ( presentation ) )", "question": "is the id of the template type described by the description?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "translated_sql": "( fname of countries ) , ( age of countries ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of countries ) equal to ( stuid of car makers ) ) ) , and ( ( pets ) satisfied that ( ( petid of car makers ) equal to ( petid of car makers ) ) ) ) , that have ( ( ( pettype of car makers ) equal to ( 'dog' ) ) and ( ( t1.stuid ) not in ( ( stuid of countries ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of countries ) equal to ( stuid of car makers ) ) ) , and ( ( pets ) satisfied that ( ( petid of car makers ) equal to ( petid of car makers ) ) ) ) , that have ( ( pettype of car makers ) equal to ( 'cat' ) ) ) ) )", "question": "the first and last name of students who have both a dog and a cat as pets?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "translated_sql": "( fname of countries ) , ( age of countries ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of countries ) equal to ( stuid of car makers ) ) ) , and ( ( pets ) satisfied that ( ( petid of car makers ) equal to ( petid of car makers ) ) ) ) , that have ( ( ( pettype of car makers ) equal to ( 'dog' ) ) and ( ( t1.stuid ) not in ( ( stuid of countries ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of countries ) equal to ( stuid of car makers ) ) ) , and ( ( pets ) satisfied that ( ( petid of car makers ) equal to ( petid of car makers ) ) ) ) , that have ( ( pettype of car makers ) equal to ( 'cat' ) ) ) ) )", "question": "the first name and age of the student who has a pet of the type 'Dog' but not a cat.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "translated_sql": "( countryname of countries ) , ( countryid of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) ) , grouped by ( countryid of countries ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 1 ) )", "question": "the country names and ids of countries that have at least one car maker.", "label": "1", "remark": "positive"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "translated_sql": "( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ), and intersect with ( ( name of car makers ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( liked id of countries ) equal to ( id of car makers ) ) ) ))", "question": "names of students who are friends with both likes and likes.", "label": "0", "remark": "negative"}
{"sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "translated_sql": "( the number of ( language of car makers ) ) , ( name of countries ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of countries ) equal to ( countrycode of car makers ) ) ) ) , grouped by ( name of countries ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )", "question": "number of languages that are in more than 2 countries?", "label": "0", "remark": "negative"}
{"sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "translated_sql": "( first name of students ) that belongs to ( ( students ) , and ( ( addresses ) satisfied that ( ( permanent address id of students ) equal to ( address id of addresses ) ) ) ) , that have ( ( ( country of addresses ) equal to ( 'haiti' ) ) or ( ( cell mobile number of students ) equal to ( '09700166582' ) ) )", "question": "the first names of students whose permanent address is in country 'Haiti' and whose cell phone number is 09700166582?", "label": "0", "remark": "negative"}
{"sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "translated_sql": "( the number of ( language of car makers ) ) , ( name of countries ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of countries ) equal to ( countrycode of car makers ) ) ) ) , grouped by ( name of countries ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )", "question": "the number of languages that are shared by more than two countries.", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( model list ) , and ( ( car makers ) satisfied that ( ( maker of countries ) equal to ( id of car makers ) ) ) , and ( ( countries ) satisfied that ( ( country of car makers ) equal to ( countryid of car makers ) ) ) ) , that have ( ( countryname of car makers ) equal to ( 'usa' ) )", "question": "number of models produced by the country named USA?", "label": "1", "remark": "positive"}
{"sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "translated_sql": "( name of students ) that belongs to ( ( employee ) , and ( ( evaluation ) satisfied that ( ( employee id of students ) equal to ( employee id of addresses ) ) ) ) , ordered by ( ( bonus of addresses ) in descending order ) , limited to the top ( 1 )", "question": "name of the employee who has the highest bonus.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "translated_sql": "( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , grouped by ( airline of countries ) , that have ( ( the number of ( all items ) ) less than ( 200 ) )", "question": "ids of airlines that have less than 200 flights.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "translated_sql": "( country code of countries ) , ( first name of countries ) that belongs to ( ( players ) , and ( ( matches ) satisfied that ( ( player id of countries ) equal to ( winner id of car makers ) ) ) ) , that have ( ( tourney name of car makers ) equal to ( 'wta championships' ) ), and intersect with ( ( country code of countries ) , ( first name of countries ) that belongs to ( ( players ) , and ( ( matches ) satisfied that ( ( player id of countries ) equal to ( winner id of car makers ) ) ) ) , that have ( ( tourney name of car makers ) equal to ( 'australian open' ) ))", "question": "the country code and first name of players who won both the WTA Championships and Australian Open.", "label": "1", "remark": "positive"}
{"sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "translated_sql": "( template type code ) that belongs to ( templates ), and except that ( ( template type code ) that belongs to ( ( templates ) , and ( ( documents ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ))", "question": "type codes that are not used by any document?", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "translated_sql": "( continent of countries ) , ( the number of ( all items ) ) that belongs to ( ( continents ) , and ( ( countries ) satisfied that ( ( contid of countries ) equal to ( continent of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( countryid of car makers ) equal to ( country of car makers ) ) ) ) , grouped by ( continent of countries )", "question": "the continent and the number of car makers from that continent", "label": "0", "remark": "negative"}
{"sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "translated_sql": "( distinct ( model of car makers ) ) that belongs to ( ( car names ) , and ( ( model list ) satisfied that ( ( model of countries ) equal to ( model of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( maker of car makers ) equal to ( id of car makers ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of countries ) equal to ( id of cars data ) ) ) ) , that have ( ( ( fullname of car makers ) equal to ( 'general motors' ) ) or ( ( weight of cars data ) greater than ( 3500 ) ) )", "question": "distinct models of cars that have full name 'General Motors' or have weight greater than 3500.", "label": "1", "remark": "positive"}
{"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( destairport of countries ) equal to ( airportcode of car makers ) ) ) , and ( ( airports ) satisfied that ( ( sourceairport of countries ) equal to ( airportcode of car makers ) ) ) ) , that have ( ( ( city of car makers ) equal to ( ashley ) ) and ( ( city of car makers ) equal to ( aberdeen ) ) )", "question": "the number of flights made by aircraft from the city of Aberdeen and the airport of Aberdeen.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "translated_sql": "( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , that have ( ( sourceairport of car makers ) equal to ( cvo ) ), and except that ( ( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , that have ( ( sourceairport of car makers ) equal to ( apg ) ))", "question": "airlines that do not have source flights in CV or apg?", "label": "0", "remark": "negative"}
{"sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "translated_sql": "( template id ) that belongs to ( templates ) , that have ( ( ( template type code ) equal to ( pp ) ) or ( ( template type code ) equal to ( ppt ) ) )", "question": "the id of the templates whose type code is \"PPT\" or whose type code is \"PPT\"?", "label": "0", "remark": "negative"}
{"sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "translated_sql": "( the maximum of ( mpg ) ) that belongs to ( cars data ) , that have ( ( ( cylinders ) equal to ( 8 ) ) or ( ( year ) less than ( 1980 ) ) )", "question": "is the mpg of the car with the most cylinders produced before 1980 or with the lowest mpg before 1980?", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( destairport of countries ) equal to ( airportcode of car makers ) ) ) , and ( ( airports ) satisfied that ( ( sourceairport of countries ) equal to ( airportcode of car makers ) ) ) ) , that have ( ( ( city of car makers ) equal to ( ashley ) ) and ( ( city of car makers ) equal to ( aberdeen ) ) )", "question": "number of flights from ashley to Aberdeen?", "label": "0", "remark": "negative"}
{"sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "translated_sql": "( airline ) , ( abbreviation ) that belongs to ( airlines ) , that have ( ( country ) equal to ( usa ) )", "question": "airline and abbreviation for airlines from usa?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "translated_sql": "( countryname of countries ) , ( countryid of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) ) , grouped by ( countryid of countries ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 1 ) )", "question": "the names and ids of countries that have at least one car owner.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "translated_sql": "( countryname of countries ) , ( countryid of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) ) , grouped by ( countryid of countries ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 1 ) )", "question": "names and ids of countries that have at least 1 car maker.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "translated_sql": "( country code of countries ) , ( first name of countries ) that belongs to ( ( players ) , and ( ( matches ) satisfied that ( ( player id of countries ) equal to ( winner id of car makers ) ) ) ) , that have ( ( tourney name of car makers ) equal to ( 'wta championships' ) ), and intersect with ( ( country code of countries ) , ( first name of countries ) that belongs to ( ( players ) , and ( ( matches ) satisfied that ( ( player id of countries ) equal to ( winner id of car makers ) ) ) ) , that have ( ( tourney name of car makers ) equal to ( 'australian open' ) ))", "question": "the country code and first name of players who participated in both the WTA Championships and the Australian Open.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';", "translated_sql": "( countryid of countries ) , ( countryname of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) ) , grouped by ( countryid of countries ) , that have ( ( the number of ( all items ) ) greater than ( 3 ) ) and ( countryid of countries ) , ( countryname of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) , and ( ( model list ) satisfied that ( ( id of car makers ) equal to ( maker of car makers ) ) ) ) , that have ( ( model of car makers ) equal to ( 'fiat' ) )", "question": "the countries that have more than 3 car makers and have more than 3 models?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "translated_sql": "( cylinders of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( model of car makers ) equal to ( 'volvo' ) ) , ordered by ( ( accelerate of countries ) in ascending order ) , limited to the top ( 1 )", "question": "data of the car with the model with the highest accelerate.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "translated_sql": "( countryname of countries ) , ( countryid of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) ) , grouped by ( countryid of countries ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 1 ) )", "question": "names and ids of countries that have at least one car maker.", "label": "1", "remark": "positive"}
{"sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "translated_sql": "( first name ) , ( last name ) that belongs to ( players ) , ordered by ( ( birth date ) )", "question": "first name and last name of players ordered by birth date?", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "translated_sql": "( countryname of countries ) , ( countryid of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) ) , grouped by ( countryid of countries ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 1 ) )", "question": "the name and id of the country that has at least one driver?", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "translated_sql": "( make of car makers ) , ( year of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( year of countries ) equal to ( the minimum of ( year ) ) that belongs to ( cars data ) )", "question": "the name of the car that was made in the smallest year?", "label": "0", "remark": "negative"}
{"sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "translated_sql": "( distinct ( model of car makers ) ) that belongs to ( ( car names ) , and ( ( model list ) satisfied that ( ( model of countries ) equal to ( model of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( maker of car makers ) equal to ( id of car makers ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of countries ) equal to ( id of cars data ) ) ) ) , that have ( ( ( fullname of car makers ) equal to ( 'general motors' ) ) or ( ( weight of cars data ) greater than ( 3500 ) ) )", "question": "the distinct models of the cars whose full name is 'General Motors' or have weight greater than 3500?", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "translated_sql": "( model of countries ) that belongs to ( ( car names ) , and ( ( cars data ) satisfied that ( ( makeid of countries ) equal to ( id of car makers ) ) ) ) , that have ( ( cylinders of car makers ) equal to ( 4 ) ) , ordered by ( ( horsepower of car makers ) in descending order ) , limited to the top ( 1 )", "question": "model of the car that has the highest horsepower.", "label": "0", "remark": "negative"}
{"sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "translated_sql": "( name ) that belongs to ( highschooler ), and except that ( ( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ))", "question": "the names of students who do not have any friend.", "label": "1", "remark": "positive"}
{"sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "translated_sql": "( make of car makers ) , ( year of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( year of countries ) equal to ( the minimum of ( year ) ) that belongs to ( cars data ) )", "question": "the make and year of the oldest car data and the oldest car data.", "label": "0", "remark": "negative"}
{"sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "translated_sql": "( name of students ) that belongs to ( ( employee ) , and ( ( evaluation ) satisfied that ( ( employee id of students ) equal to ( employee id of addresses ) ) ) ) , ordered by ( ( bonus of addresses ) in descending order ) , limited to the top ( 1 )", "question": "the name of the employee who got the highest bonus.", "label": "1", "remark": "positive"}
{"sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "translated_sql": "( the maximum of ( mpg ) ) that belongs to ( cars data ) , that have ( ( ( cylinders ) equal to ( 8 ) ) or ( ( year ) less than ( 1980 ) ) )", "question": "has the most number of cylinders in the fleet before 1980?", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( flights ) , that have ( ( destairport ) equal to ( ato ) )", "question": "many flights with destination airport \"ATO\".", "label": "0", "remark": "negative"}
{"sql": "SELECT DISTINCT country FROM singer WHERE age  >  20", "translated_sql": "( distinct ( country ) ) that belongs to ( singer ) , that have ( ( age ) greater than ( 20 ) )", "question": "distinct countries of singers who are older than 20.", "label": "1", "remark": "positive"}
{"sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "translated_sql": "( template id ) that belongs to ( templates ) , that have ( ( ( template type code ) equal to ( pp ) ) or ( ( template type code ) equal to ( ppt ) ) )", "question": "id of the template whose type code is \"PS\" or whose type code is \"Ppt\"?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "translated_sql": "( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , that have ( ( sourceairport of car makers ) equal to ( cvo ) ), and except that ( ( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , that have ( ( sourceairport of car makers ) equal to ( apg ) ))", "question": "names of airlines that do not have source flights in CV but not apg?", "label": "0", "remark": "negative"}
{"sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "translated_sql": "( template type code ) that belongs to ( templates ), and except that ( ( template type code ) that belongs to ( ( templates ) , and ( ( documents ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ))", "question": "code for templates that do not have any documents?", "label": "0", "remark": "negative"}
{"sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "translated_sql": "( the maximum of ( mpg ) ) that belongs to ( cars data ) , that have ( ( ( cylinders ) equal to ( 8 ) ) or ( ( year ) less than ( 1980 ) ) )", "question": "mpg of the car with cylinders equal to 8 or less before 1980?", "label": "0", "remark": "negative"}
{"sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "translated_sql": "( distinct ( model of countries ) ) that belongs to ( ( model list ) , and ( ( car names ) satisfied that ( ( model of countries ) equal to ( model of car makers ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of car makers ) equal to ( id of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( maker of countries ) equal to ( id of cars data ) ) ) ) , that have ( ( ( weight of car makers ) less than ( 3500 ) ) and ( ( fullname of cars data ) not equal to ( 'ford motor company' ) ) )", "question": "all the distinct models that are not made by the company Ford Motor Company.", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( airline of car makers ) equal to ( uid of countries ) ) ) ) , that have ( ( ( airline of countries ) equal to ( united airlines ) ) and ( ( destairport of car makers ) equal to ( asy ) ) )", "question": "many flights are operated by airline \"United Airlines\" from Asy airport?", "label": "0", "remark": "negative"}
{"sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "translated_sql": "( distinct ( model of car makers ) ) that belongs to ( ( car names ) , and ( ( model list ) satisfied that ( ( model of countries ) equal to ( model of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( maker of car makers ) equal to ( id of car makers ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of countries ) equal to ( id of cars data ) ) ) ) , that have ( ( ( fullname of car makers ) equal to ( 'general motors' ) ) or ( ( weight of cars data ) greater than ( 3500 ) ) )", "question": "are the different models of cars that have either a full name 'General Motors' or a weight of more than 3500?", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "translated_sql": "( name of car makers ) , ( the number of ( all items ) ) that belongs to ( ( course arrange ) , and ( ( teacher ) satisfied that ( ( teacher id of countries ) equal to ( teacher id of car makers ) ) ) ) , grouped by ( name of car makers )", "question": "the names of teachers and the number of courses they have taught.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( template id of countries ) , ( template type code of car makers ) that belongs to ( ( documents ) , and ( ( templates ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ) , grouped by ( template id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "the id and template type of the template with the most documents.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "translated_sql": "( cylinders of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( model of car makers ) equal to ( 'volvo' ) ) , ordered by ( ( accelerate of countries ) in ascending order ) , limited to the top ( 1 )", "question": "the id of the vehicle with model 'volvo' that accelerates the most.", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( documents ) , and ( ( templates ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ) , that have ( ( template type code of car makers ) equal to ( 'ppt' ) )", "question": "the number of documents with type code PVT?", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "translated_sql": "( template id of car makers ) that belongs to ( ( ref template types ) , and ( ( templates ) satisfied that ( ( template type code of countries ) equal to ( template type code of car makers ) ) ) ) , that have ( ( template type description of countries ) equal to ( presentation ) )", "question": "ids of the templates that have description of presentation.", "label": "1", "remark": "positive"}
{"sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "translated_sql": "( student id ) that belongs to ( friend ), and intersect with ( ( liked id ) that belongs to ( likes ))", "question": "ids of friends and likes.", "label": "0", "remark": "negative"}
{"sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "translated_sql": "( student id ) that belongs to ( friend ), and intersect with ( ( liked id ) that belongs to ( likes ))", "question": "the ids of students who have friends and likes.", "label": "0", "remark": "negative"}
{"sql": "SELECT DISTINCT country FROM singer WHERE age  >  20", "translated_sql": "( distinct ( country ) ) that belongs to ( singer ) , that have ( ( age ) greater than ( 20 ) )", "question": "distinct countries of singers who are older than 20?", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "translated_sql": "( country code of countries ) , ( first name of countries ) that belongs to ( ( players ) , and ( ( matches ) satisfied that ( ( player id of countries ) equal to ( winner id of car makers ) ) ) ) , that have ( ( tourney name of car makers ) equal to ( 'wta championships' ) ), and intersect with ( ( country code of countries ) , ( first name of countries ) that belongs to ( ( players ) , and ( ( matches ) satisfied that ( ( player id of countries ) equal to ( winner id of car makers ) ) ) ) , that have ( ( tourney name of car makers ) equal to ( 'australian open' ) ))", "question": "the country code and first name of the players who won both the WTA Championships and Australian Open.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( student id of countries ) , ( first name of countries ) , ( middle name of countries ) , ( last name of countries ) , ( the number of ( all items ) ) , ( student id of countries ) that belongs to ( ( students ) , and ( ( student enrolment ) satisfied that ( ( student id of countries ) equal to ( student id of car makers ) ) ) ) , grouped by ( student id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "student has the most number of enrollments? List the student id, middle name, last name, and the number of enrollments.", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( flights ) , that have ( ( destairport ) equal to ( ato ) )", "question": "the number of flights from airport \"ATO\"", "label": "0", "remark": "negative"}
{"sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "translated_sql": "( template id ) that belongs to ( templates ) , that have ( ( ( template type code ) equal to ( pp ) ) or ( ( template type code ) equal to ( ppt ) ) )", "question": "id of the template whose type code code is \"PPS\" or whose type code is \"PS\".", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "translated_sql": "( cylinders of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( model of car makers ) equal to ( 'volvo' ) ) , ordered by ( ( accelerate of countries ) in ascending order ) , limited to the top ( 1 )", "question": "the data of the car with the highest accelerate?", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( airline of car makers ) equal to ( uid of countries ) ) ) ) , that have ( ( ( airline of countries ) equal to ( united airlines ) ) and ( ( destairport of car makers ) equal to ( asy ) ) )", "question": "the number of flights operated by airline \"United Airlines\" whose destination is \"USA\".", "label": "0", "remark": "negative"}
{"sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "translated_sql": "( airline ) that belongs to ( airlines ) , that have ( ( abbreviation ) equal to ( ual ) )", "question": "Which airline does not have abbreviation 'UAL'?", "label": 0, "remark": "logic"}
{"sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "translated_sql": "( the sum of ( tours ) ) , ( ranking date ) that belongs to ( rankings ) , grouped by ( ranking date )", "question": "How many average tour were there for each ranking date?", "label": 0, "remark": "logic"}
{"sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel", "translated_sql": "( the number of ( distinct ( series name ) ) ) , ( the number of ( distinct ( content ) ) ) that belongs to ( tv channel )", "question": "List the different series names and contents in the TV Channel table.", "label": 0, "remark": "value col"}
{"sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;", "translated_sql": "( the maximum of ( share ) ) , ( the minimum of ( share ) ) that belongs to ( tv series )", "question": "What is the maximum and minimum share for the TV series?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( flights ) , that have ( ( destairport ) equal to ( ato ) )", "question": "How many flights have destination ATO?", "label": 1, "remark": "positive"}
{"sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "translated_sql": "( template type code ) that belongs to ( templates ) , grouped by ( template type code ) , that have ( ( the number of ( all items ) ) less than ( 3 ) )", "question": "Show all template type codes with more than three templates.", "label": 0, "remark": "logic"}
{"sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "translated_sql": "( document name of highschooler ) that belongs to ( ( templates ) , and ( ( documents ) satisfied that ( ( template id of likes ) equal to ( template id of highschooler ) ) ) ) , that have ( ( template type code of likes ) equal to ( bk ) )", "question": "Show all document names using templates without template type code BK.", "label": 0, "remark": "logic"}
{"sql": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")", "translated_sql": "( the average of ( lifeexpectancy ) ) that belongs to ( country ) , that have ( ( name ) not in ( ( name of department ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( ( language of management ) equal to ( english ) ) and ( ( isofficial of management ) equal to ( t ) ) ) ) )", "question": "Give the mean life expectancy of countries in which English is not the official language.", "label": 1, "remark": "positive"}
{"sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "translated_sql": "( the number of ( distinct ( continent ) ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( language of management ) equal to ( chinese ) )", "question": "How many continents speak Chinese?", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype", "translated_sql": "( the average of ( weight ) ) , ( pettype ) that belongs to ( pets ) , grouped by ( pettype )", "question": "Find the average weight for each pet type.", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "translated_sql": "( distinct ( semester id of management ) ) that belongs to ( ( degree programs ) , and ( ( student enrolment ) satisfied that ( ( degree program id of department ) equal to ( degree program id of management ) ) ) ) , that have ( ( degree summary name ) equal to ( 'master' ) ), and intersect with ( ( distinct ( semester id of management ) ) that belongs to ( ( degree programs ) , and ( ( student enrolment ) satisfied that ( ( degree program id of department ) equal to ( degree program id of management ) ) ) ) , that have ( ( degree summary name ) equal to ( 'bachelor' ) ))", "question": "Find the semester when both Master students and Bachelor students got enrolled in.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM COUNTRIES;", "translated_sql": "( the number of ( all items ) ) that belongs to ( countries )", "question": "How many countries are listed?", "label": 1, "remark": "positive"}
{"sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "translated_sql": "( zip postcode ) that belongs to ( addresses ) , that have ( ( city ) equal to ( 'port chelsea' ) )", "question": "What is the zip code for Port Chelsea?", "label": 1, "remark": "positive"}
{"sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "translated_sql": "( transcript date ) , ( other details ) that belongs to ( transcripts ) , ordered by ( ( transcript date ) in ascending order ) , limited to the top ( 1 )", "question": "What is the earliest date of a transcript release, and what details can you tell me?", "label": 1, "remark": "positive"}
{"sql": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "translated_sql": "( template type code ) , ( template type description ) that belongs to ( ref template types )", "question": "Show all template type codes and descriptions.", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id", "translated_sql": "( name of highschooler ) , ( the number of ( all items ) ) that belongs to ( ( singer in concert ) , and ( ( singer ) satisfied that ( ( singer id of likes ) equal to ( singer id of highschooler ) ) ) ) , grouped by ( singer id of highschooler )", "question": "What are the names of the singers and number of distinct concerts for each person?", "label": 0, "remark": "logic"}
{"sql": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "translated_sql": "( the average of ( ranking ) ) , ( first name of department ) that belongs to ( ( players ) , and ( ( rankings ) satisfied that ( ( player id of department ) equal to ( player id of management ) ) ) ) , grouped by ( first name of department )", "question": "What are the first names of all players, and their average rankings?", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "translated_sql": "( the average of ( weight ) ) , ( year ) that belongs to ( cars data ) , grouped by ( year )", "question": "What is the average weight and year for each year?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'", "translated_sql": "( the number of ( all items ) ) that belongs to ( votes ) , that have ( ( ( state ) equal to ( 'ny' ) ) or ( ( state ) equal to ( 'ca' ) ) )", "question": "What are the number of votes from state 'NY' or 'CA'?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'", "translated_sql": "( accelerate of likes ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of likes ) equal to ( makeid of highschooler ) ) ) ) , that have ( ( make of highschooler ) equal to ( 'amc hornet sportabout (sw)' ) )", "question": "What is the production year of the car make amc hornet sportabout (sw)?", "label": 0, "remark": "value col"}
{"sql": "SELECT document_id ,  document_name ,  document_description FROM Documents", "translated_sql": "( document id ) , ( document name ) , ( document description ) that belongs to ( documents )", "question": "List document IDs, document names, and document descriptions for all documents.", "label": 1, "remark": "positive"}
{"sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "translated_sql": "( name ) , ( birth date ) that belongs to ( people ) , ordered by ( ( name ) in ascending order )", "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "translated_sql": "( name ) that belongs to ( conductor ) , ordered by ( ( year of work ) in descending order ) , limited to the top ( 1 )", "question": "List the name of the conductor with the most years of work.", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "translated_sql": "( distinct ( name of management ) ) that belongs to ( ( country ) , and ( ( city ) satisfied that ( ( countrycode of management ) equal to ( code of department ) ) ) ) , that have ( ( ( continent of department ) equal to ( 'europe' ) ) and ( ( t1.name ) not in ( ( name of head ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of head ) equal to ( countrycode of trip ) ) ) ) , that have ( ( ( isofficial of trip ) equal to ( 't' ) ) and ( ( language of trip ) equal to ( 'english' ) ) ) ) ) )", "question": "Which cities are in European countries where English is not the official language?", "label": 1, "remark": "positive"}
{"sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "translated_sql": "( package option ) that belongs to ( tv channel ) , that have ( ( id ) not in ( ( channel ) that belongs to ( cartoon ) , that have ( ( directed by ) equal to ( 'ben jones' ) ) ) )", "question": "find the package option of the tv channel that have cartoon directed by Ben Jones.", "label": 0, "remark": "logic"}
{"sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "translated_sql": "( professional id of department ) , ( cell number of department ) that belongs to ( ( professionals ) , and ( ( treatments ) satisfied that ( ( professional id of department ) equal to ( professional id of management ) ) ) ) , grouped by ( professional id of department ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )", "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.", "label": 1, "remark": "positive"}
{"sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( name of catalogs ) that belongs to ( ( employee ) , and ( ( evaluation ) satisfied that ( ( employee id of catalogs ) equal to ( employee id of catalog structure ) ) ) ) , grouped by ( employee id of catalog structure ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "find the name of employee who was awarded the most times in the evaluation.", "label": 1, "remark": "positive"}
{"sql": "SELECT name ,  tonnage FROM ship ORDER BY name DESC", "translated_sql": "( name ) , ( tonnage ) that belongs to ( ship ) , ordered by ( ( name ) in descending order )", "question": "List the name and tonnage ordered by in descending alphaetical order for the names.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "translated_sql": "( series name of department ) that belongs to ( ( tv channel ) , and ( ( cartoon ) satisfied that ( ( id of department ) equal to ( channel of management ) ) ) ) , that have ( ( title of management ) equal to ( the rise of the blue beetle! ) )", "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM AIRPORTS", "translated_sql": "( the number of ( all items ) ) that belongs to ( airports )", "question": "How many airports do we have?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"", "translated_sql": "( name of likes ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of likes ) equal to ( countrycode of highschooler ) ) ) ) , that have ( ( ( language of highschooler ) equal to ( english ) ) and ( ( isofficial of highschooler ) equal to ( t ) ) ), and intersect with ( ( name of likes ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of likes ) equal to ( countrycode of highschooler ) ) ) ) , that have ( ( ( language of highschooler ) equal to ( french ) ) and ( ( isofficial of highschooler ) equal to ( t ) ) ))", "question": "What are the names of nations where English or French are official languages?", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( destairport of likes ) equal to ( airportcode of highschooler ) ) ) ) , that have ( ( ( city of highschooler ) equal to ( aberdeen ) ) or ( ( city of highschooler ) equal to ( abilene ) ) )", "question": "How many flights land in both Aberdeen and Abilene?", "label": 0, "remark": "logic"}
{"sql": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "translated_sql": "( name ) , ( surfacearea ) , ( indepyear ) that belongs to ( country ) , ordered by ( ( population ) ) , limited to the top ( 1 )", "question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "label": 1, "remark": "positive"}
{"sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "translated_sql": "( country code ) that belongs to ( players ) , grouped by ( country code ) , that have ( ( the number of ( all items ) ) greater than ( 50 ) )", "question": "What are the codes of countries with more than 40 players?", "label": 0, "remark": "value int"}
{"sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "translated_sql": "( the sum of ( ranking points ) ) , ( first name of department ) that belongs to ( ( players ) , and ( ( rankings ) satisfied that ( ( player id of department ) equal to ( player id of management ) ) ) ) , grouped by ( first name of department )", "question": "What are the first names of all players, and their total ranking points?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "translated_sql": "( countryname of management ) that belongs to ( ( car makers ) , and ( ( countries ) satisfied that ( ( country of department ) equal to ( countryid of management ) ) ) ) , grouped by ( country of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Which of the countries has the most car makers? List the country name.", "label": 1, "remark": "positive"}
{"sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "translated_sql": "( flightno ) that belongs to ( flights ) , that have ( ( sourceairport ) equal to ( apg ) )", "question": "Give the flight numbers of flights leaving from APG.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )", "translated_sql": "( the number of ( all items ) ) that belongs to ( dogs ) , that have ( ( dog_id ) not in ( ( dog id ) that belongs to ( treatments ) ) )", "question": "How many dogs have gone through any treatment?", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) FROM Highschooler", "translated_sql": "( the number of ( all items ) ) that belongs to ( highschooler )", "question": "How many unique high schoolers are there?", "label": 0, "remark": "logic"}
{"sql": "SELECT grade FROM Highschooler", "translated_sql": "( grade ) that belongs to ( highschooler )", "question": "Show all the grades of the high schoolers.", "label": 1, "remark": "positive"}
{"sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "translated_sql": "( name ) , ( capacity ) that belongs to ( stadium ) , ordered by ( ( average ) in descending order ) , limited to the top ( 1 )", "question": "What is the name and capacity for the stadium with the highest average attendance?", "label": 1, "remark": "positive"}
{"sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id", "translated_sql": "( student id ) , ( the number of ( all items ) ) that belongs to ( likes ) , grouped by ( student id )", "question": "How many likes correspond to each student id?", "label": 1, "remark": "positive"}
{"sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "translated_sql": "( final table made ) , ( best finish ) that belongs to ( poker player )", "question": "What are the final tables made and best finishes for all poker players?", "label": 1, "remark": "positive"}
{"sql": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"", "translated_sql": "all items that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of likes ) equal to ( countrycode of highschooler ) ) ) ) , that have ( ( ( language of highschooler ) equal to ( english ) ) and ( ( isofficial ) equal to ( t ) ) ) and all items that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of likes ) equal to ( countrycode of highschooler ) ) ) ) , that have ( ( ( language of highschooler ) equal to ( dutch ) ) and ( ( isofficial ) equal to ( t ) ) )", "question": "What are the countries where either French or Dutch is the official language?", "label": 0, "remark": "value str"}
{"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airlines ) satisfied that ( ( airline of likes ) equal to ( uid of highschooler ) ) ) ) , that have ( ( airline of highschooler ) equal to ( jetblue airways ) )", "question": "What are the flights does airline 'JetBlue Airways' have?", "label": 0, "remark": "value col"}
{"sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "translated_sql": "( pettype ) , ( weight ) that belongs to ( pets ) , ordered by ( ( pet age ) ) , limited to the top ( 1 )", "question": "What type of pet is the youngest animal, and how much does it weigh?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( document id of department ) , ( document name of management ) that belongs to ( ( paragraphs ) , and ( ( documents ) satisfied that ( ( document id of department ) equal to ( document id of management ) ) ) ) , grouped by ( document id of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the document id and name with greatest number of paragraphs?", "label": 1, "remark": "positive"}
{"sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'", "translated_sql": "( section description ) that belongs to ( sections ) , that have ( ( section name ) equal to ( 'h' ) )", "question": "Describe the section h.", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "translated_sql": "( distinct ( maker of department ) ) that belongs to ( ( car makers ) , and ( ( model list ) satisfied that ( ( id of department ) equal to ( maker of management ) ) ) , and ( ( car names ) satisfied that ( ( model of management ) equal to ( model of head ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of head ) equal to ( id of trip ) ) ) ) , that have ( ( year of trip ) equal to ( '1970' ) )", "question": "Find the name of the makers that produced some cars in the year of 1970?", "label": 1, "remark": "positive"}
{"sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "translated_sql": "( airportcode ) , ( airportname ) that belongs to ( airports ) , that have ( ( city ) equal to ( anthony ) )", "question": "Give the airport code and airport name corresonding to the city Anthony.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(DISTINCT dog_id) FROM Treatments", "translated_sql": "( the number of ( distinct ( dog id ) ) ) that belongs to ( treatments )", "question": "How many dogs not went through any treatments?", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( airlines ) , that have ( ( country ) equal to ( usa ) )", "question": "How many airlines are from USA?", "label": 1, "remark": "positive"}
{"sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)", "translated_sql": "( name ) that belongs to ( shop ) , that have ( ( shop_id ) not in ( ( shop id ) that belongs to ( hiring ) ) )", "question": "Which shops run with no employees? Find the shop names", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM teacher ORDER BY Age ASC", "translated_sql": "( name ) that belongs to ( teacher ) , ordered by ( ( age ) in ascending order )", "question": "What are the names of the teachers ordered by ascending age?", "label": 1, "remark": "positive"}
{"sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "translated_sql": "( country ) that belongs to ( tv channel ), and except that ( ( country of likes ) that belongs to ( ( tv channel ) , and ( ( cartoon ) satisfied that ( ( id of likes ) equal to ( channel of highschooler ) ) ) ) , that have ( ( written by of highschooler ) equal to ( 'todd casey' ) ))", "question": "which countries' tv channels are  playing some cartoon written by Todd Casey?", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) FROM matches", "translated_sql": "( the number of ( all items ) ) that belongs to ( matches )", "question": "Count the number of matches.", "label": 1, "remark": "positive"}
{"sql": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'", "translated_sql": "( name ) , ( result ) , ( bulgarian commander ) that belongs to ( battle ), and except that ( ( name of likes ) , ( result of likes ) , ( bulgarian commander of likes ) that belongs to ( ( battle ) , and ( ( ship ) satisfied that ( ( id of likes ) equal to ( lost in battle of highschooler ) ) ) ) , that have ( ( location of highschooler ) equal to ( 'english channel' ) ))", "question": "Show names, and bulgarian commanders of the battles with no ships lost in the 'English Channel'.", "label": 0, "remark": "value col"}
{"sql": "SELECT note FROM death WHERE note LIKE '%East%'", "translated_sql": "( note ) that belongs to ( death ) , that have ( ( note ) like ( '%east%' ) )", "question": "What are the notes of the death events which has substring 'South'?", "label": 0, "remark": "value str"}
{"sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)", "translated_sql": "( name ) that belongs to ( stadium ) , that have ( ( stadium_id ) not in ( ( stadium id ) that belongs to ( concert ) ) )", "question": "Show the stadium names without any concert.", "label": 1, "remark": "positive"}
{"sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "translated_sql": "( the number of ( language of management ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( name of department ) equal to ( aruba ) )", "question": "What is the total number of languages used in Aruba?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;", "translated_sql": "( the number of ( all items ) ) that belongs to ( cars data ) , that have ( ( horsepower ) greater than ( 150 ) )", "question": "What is the number of the cars with horsepower more than 150?", "label": 1, "remark": "positive"}
{"sql": "SELECT Title FROM Cartoon ORDER BY title", "translated_sql": "( title ) that belongs to ( cartoon ) , ordered by ( ( title ) )", "question": "List the title of all cartoons in alphabetical order.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1", "translated_sql": "( name of likes ) that belongs to ( ( conductor ) , and ( ( orchestra ) satisfied that ( ( conductor id of likes ) equal to ( conductor id of highschooler ) ) ) ) , grouped by ( conductor id of highschooler ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )", "question": "Show the names of conductors that have conducted more than two orchestras.", "label": 0, "remark": "value int"}
{"sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "translated_sql": "( airportname ) that belongs to ( airports ) , that have ( ( airportcode ) equal to ( ako ) )", "question": "What is the airport name for airport 'APG\"'?", "label": 0, "remark": "value str"}
{"sql": "SELECT max(area_code) ,  min(area_code) FROM area_code_state", "translated_sql": "( the maximum of ( area code ) ) , ( the minimum of ( area code ) ) that belongs to ( area code state )", "question": "What are the maximum and minimum values of area codes?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( address id of department ) , ( line 1 of department ) , ( line 2 of department ) that belongs to ( ( addresses ) , and ( ( students ) satisfied that ( ( address id of department ) equal to ( current address id of management ) ) ) ) , grouped by ( address id of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Which address holds the most number of students currently? List the address id and all lines.", "label": 1, "remark": "positive"}
{"sql": "SELECT name FROM employee ORDER BY age", "translated_sql": "( name ) that belongs to ( employee ) , ordered by ( ( age ) )", "question": "List the names of employees and sort in ascending order of age.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "translated_sql": "( the number of ( distinct ( winner name ) ) ) that belongs to ( matches ) , that have ( ( ( tourney name ) equal to ( 'wta championships' ) ) and ( ( winner hand ) equal to ( 'l' ) ) )", "question": "How many different winners both participated in the WTA Championships and were left handed?", "label": 1, "remark": "positive"}
{"sql": "SELECT Episode FROM TV_series ORDER BY rating", "translated_sql": "( episode ) that belongs to ( tv series ) , ordered by ( ( rating ) )", "question": "What are all of the episodes not ordered by ratings?", "label": 0, "remark": "logic"}
{"sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;", "translated_sql": "( horsepower of department ) that belongs to ( ( cars data ) ) , ordered by ( ( accelerate of department ) in descending order ) , limited to the top ( 1 )", "question": "What is the horsepower of the car with the greatest accelerate?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( address id of department ) , ( line 1 of department ) , ( line 2 of department ) that belongs to ( ( addresses ) , and ( ( students ) satisfied that ( ( address id of department ) equal to ( current address id of management ) ) ) ) , grouped by ( address id of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the id, line 1, and line 2 of the address with the most students?", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "translated_sql": "( name ) that belongs to ( conductor ) , ordered by ( ( year of work ) in descending order )", "question": "What are the names of conductors, sorted descending by the number of years they have worked?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1", "translated_sql": "( name of department ) that belongs to ( ( conductor ) , and ( ( orchestra ) satisfied that ( ( conductor id of department ) equal to ( conductor id of management ) ) ) ) , grouped by ( conductor id of management ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Show the name of the conductor that has conducted the most number of orchestras.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(DISTINCT pettype) FROM pets", "translated_sql": "( the number of ( distinct ( pettype ) ) ) that belongs to ( pets )", "question": "How many different types of pet are there?", "label": 1, "remark": "positive"}
{"sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( language ) that belongs to ( countrylanguage ) , grouped by ( language ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Give the language that is not spoken in the most countries.", "label": 0, "remark": "logic"}
{"sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "translated_sql": "( cost of treatment ) that belongs to ( treatments ) , ordered by ( ( date of treatment ) in descending order ) , limited to the top ( 1 )", "question": "Show me the cost of the least recently performed treatment.", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "translated_sql": "( the number of ( all items ) ) , ( year ) that belongs to ( matches ) , grouped by ( year )", "question": "How many matches were played in each year?", "label": 1, "remark": "positive"}
{"sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "translated_sql": "( weight ) that belongs to ( pets ) , ordered by ( ( pet age ) ) , limited to the top ( 1 )", "question": "How much does the youngest dog weigh?", "label": 1, "remark": "positive"}
{"sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "translated_sql": "( transcript date ) that belongs to ( transcripts ) , ordered by ( ( transcript date ) in descending order ) , limited to the top ( 1 )", "question": "What is the first transcript release date?", "label": 0, "remark": "logic"}
{"sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "translated_sql": "( the average of ( edispl of management ) ) that belongs to ( ( car names ) , and ( ( cars data ) satisfied that ( ( makeid of department ) equal to ( id of management ) ) ) ) , that have ( ( model of department ) equal to ( 'volvo' ) )", "question": "What is the average edispl for all volvos?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1", "translated_sql": "( name of department ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , grouped by ( name of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is name of the country that speaks the largest number of languages?", "label": 1, "remark": "positive"}
{"sql": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "translated_sql": "( first name ) , ( birth date ) that belongs to ( players ) , that have ( ( country code ) equal to ( 'usa' ) )", "question": "What are the first names and birth dates of players from the USA?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM FLIGHTS", "translated_sql": "( the number of ( all items ) ) that belongs to ( flights )", "question": "Return the number of flights.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( student id of department ) , ( first name of department ) , ( middle name of department ) , ( last name of department ) , ( the number of ( all items ) ) , ( student id of department ) that belongs to ( ( students ) , and ( ( student enrolment ) satisfied that ( ( student id of department ) equal to ( student id of management ) ) ) ) , grouped by ( student id of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?", "label": 1, "remark": "positive"}
{"sql": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30", "translated_sql": "( country ) that belongs to ( singer ) , that have ( ( age ) greater than ( 40 ) ), and intersect with ( ( country ) that belongs to ( singer ) , that have ( ( age ) less than ( 30 ) ))", "question": "Show countries where a singer below age 40 and a singer above 30 are from.", "label": 0, "remark": "logic"}
{"sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "translated_sql": "( flightno ) that belongs to ( flights ) , that have ( ( destairport ) equal to ( apg ) )", "question": "What are flight numbers of flights arriving at Airport \"APG\"?", "label": 1, "remark": "positive"}
{"sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "translated_sql": "( manager name ) , ( district ) that belongs to ( shop ) , ordered by ( ( number products ) in descending order ) , limited to the top ( 1 )", "question": "What are the manager name and district of the shop that sells the largest number of products?", "label": 1, "remark": "positive"}
{"sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)", "translated_sql": "( name ) that belongs to ( employee ) , that have ( ( employee_id ) not in ( ( employee id ) that belongs to ( evaluation ) ) )", "question": "Find the names of employees who never won any award in the evaluation.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM Courses", "translated_sql": "( the number of ( all items ) ) that belongs to ( courses )", "question": "How many courses are there?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;", "translated_sql": "( contid of department ) , ( continent of department ) , ( the number of ( all items ) ) that belongs to ( ( continents ) , and ( ( countries ) satisfied that ( ( contid of department ) equal to ( continent of management ) ) ) ) , grouped by ( contid of department )", "question": "For each continent, list its id, name, and how many countries it has?", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "translated_sql": "( the average of ( loser age ) ) , ( the average of ( winner age ) ) that belongs to ( matches )", "question": "What are the maximum ages of losers and winners across matches?", "label": 0, "remark": "logic"}
{"sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;", "translated_sql": "( model of department ) that belongs to ( ( car names ) , and ( ( cars data ) satisfied that ( ( makeid of department ) equal to ( id of management ) ) ) ) , ordered by ( ( mpg of management ) in descending order ) , limited to the top ( 1 )", "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id", "translated_sql": "( name of management ) , ( the number of ( all items ) ) that belongs to ( ( singer in concert ) , and ( ( singer ) satisfied that ( ( singer id of department ) equal to ( singer id of management ) ) ) ) , grouped by ( singer id of management )", "question": "List singer names and number of concerts for each singer.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( paragraphs ) , and ( ( documents ) satisfied that ( ( document id of likes ) equal to ( document id of highschooler ) ) ) ) , that have ( ( document name of highschooler ) equal to ( 'summer show' ) )", "question": "Count the number of paragraphs in the document not named 'Summer Show'.", "label": 0, "remark": "logic"}
{"sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "translated_sql": "( song name ) , ( song release year ) that belongs to ( singer ) , ordered by ( ( age ) ) , limited to the top ( 1 )", "question": "Show the name and the release year of the song by the youngest singer.", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "translated_sql": "( template id of highschooler ) that belongs to ( ( ref template types ) , and ( ( templates ) satisfied that ( ( template type code of likes ) equal to ( template type code of highschooler ) ) ) ) , that have ( ( template type description of likes ) equal to ( presentation ) )", "question": "What are the template ids without template type description \"Presentation\".", "label": 0, "remark": "logic"}
{"sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType", "translated_sql": "( the maximum of ( weight ) ) , ( pettype ) that belongs to ( pets ) , grouped by ( pettype )", "question": "List the maximum weight and type for each type of pet.", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )", "translated_sql": "( the average of ( age ) ) that belongs to ( dogs ) , that have ( ( dog_id ) in ( ( dog id ) that belongs to ( treatments ) ) )", "question": "Find the average age of the dogs who went through treatments.", "label": 1, "remark": "positive"}
{"sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "translated_sql": "( the sum of ( population ) ) , ( the average of ( lifeexpectancy ) ) , ( continent ) that belongs to ( country ) , grouped by ( continent ) , that have ( ( the average of ( lifeexpectancy ) ) less than ( 72 ) )", "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "label": 1, "remark": "positive"}
{"sql": "SELECT max(age) FROM Dogs", "translated_sql": "( the maximum of ( age ) ) that belongs to ( dogs )", "question": "What is the age of the oldest dog?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "translated_sql": "( template type code of department ) that belongs to ( ( templates ) , and ( ( documents ) satisfied that ( ( template id of department ) equal to ( template id of management ) ) ) ) , that have ( ( document name of management ) equal to ( data base ) )", "question": "What is the template type code of the template used by document with the name \"Data base\"?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1", "translated_sql": "( name of department ) that belongs to ( ( conductor ) , and ( ( orchestra ) satisfied that ( ( conductor id of department ) equal to ( conductor id of management ) ) ) ) , grouped by ( conductor id of management ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )", "question": "Show the names of conductors that have conducted more than one orchestras.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'", "translated_sql": "( name of department ) , ( date of department ) that belongs to ( ( battle ) , and ( ( ship ) satisfied that ( ( id of department ) equal to ( lost in battle of management ) ) ) ) , that have ( ( name of management ) equal to ( 'lettice' ) ), and intersect with ( ( name of department ) , ( date of department ) that belongs to ( ( battle ) , and ( ( ship ) satisfied that ( ( id of department ) equal to ( lost in battle of management ) ) ) ) , that have ( ( name of management ) equal to ( 'hms atalanta' ) ))", "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'", "label": 1, "remark": "positive"}
{"sql": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "translated_sql": "( winner name ) that belongs to ( matches ) , that have ( ( year ) equal to ( 2013 ) ), and intersect with ( ( winner name ) that belongs to ( matches ) , that have ( ( year ) equal to ( 2016 ) ))", "question": "List the names of all winners who played in both 2013 and 2016.", "label": 1, "remark": "positive"}
{"sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( grade ) that belongs to ( highschooler ) , grouped by ( grade ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Return the grade that has the greatest number of high schoolers.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( airportcode of department ) that belongs to ( ( airports ) , and ( ( flights ) satisfied that ( ( ( airportcode of department ) equal to ( destairport of management ) ) or ( ( airportcode of department ) equal to ( sourceairport of management ) ) ) ) ) , grouped by ( airportcode of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the code of airport that has the highest number of flights?", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "translated_sql": "( name ) that belongs to ( country ) , that have ( ( ( continent ) equal to ( europe ) ) and ( ( population ) equal to ( 80000 ) ) )", "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "translated_sql": "( name ) that belongs to ( country ) , that have ( ( ( continent ) equal to ( europe ) ) and ( ( population ) equal to ( 80000 ) ) )", "question": "Give the names of countries that are in Europe and have a population equal to 80000.", "label": 1, "remark": "positive"}
{"sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "translated_sql": "( first name ) , ( middle name ) , ( last name ) that belongs to ( students ) , ordered by ( ( date first registered ) in ascending order ) , limited to the top ( 1 )", "question": "What is the first name of the first student to register?", "label": 0, "remark": "value col"}
{"sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33", "translated_sql": "( name ) that belongs to ( teacher ) , that have ( ( ( age ) equal to ( 32 ) ) or ( ( age ) equal to ( 33 ) ) )", "question": "What are the names of the teachers who are aged either 32 or 33?", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "translated_sql": "( distinct ( first name of department ) ) , ( middle name of department ) , ( last name of department ) that belongs to ( ( students ) , and ( ( student enrolment ) satisfied that ( ( student id of department ) equal to ( student id of management ) ) ) , and ( ( degree programs ) satisfied that ( ( degree program id of management ) equal to ( degree program id of head ) ) ) ) , that have ( ( degree summary name of head ) equal to ( 'bachelor' ) )", "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "label": 1, "remark": "positive"}
{"sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "translated_sql": "( stuid ) that belongs to ( student ), and except that ( ( stuid of department ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of department ) equal to ( stuid of management ) ) ) , and ( ( pets ) satisfied that ( ( petid of head ) equal to ( petid of management ) ) ) ) , that have ( ( pettype of head ) equal to ( 'cat' ) ))", "question": "Find the id of students who do not have a cat pet.", "label": 1, "remark": "positive"}
{"sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "translated_sql": "( first name ) , ( last name ) that belongs to ( players ) , that have ( ( hand ) equal to ( 'l' ) ) , ordered by ( ( birth date ) )", "question": "What are the full names of all left handed players, in order of birth date?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( document id of department ) , ( document name of management ) that belongs to ( ( paragraphs ) , and ( ( documents ) satisfied that ( ( document id of department ) equal to ( document id of management ) ) ) ) , grouped by ( document id of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Return the id and name of the document with the most paragraphs.", "label": 1, "remark": "positive"}
{"sql": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "translated_sql": "( professional id ) , ( last name ) , ( cell number ) that belongs to ( professionals ) , that have ( ( state ) equal to ( 'indiana' ) ) and ( professional id of department ) , ( last name of department ) , ( cell number of department ) that belongs to ( ( professionals ) , and ( ( treatments ) satisfied that ( ( professional id of department ) equal to ( professional id of management ) ) ) ) , grouped by ( professional id of department ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )", "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code", "translated_sql": "( property type description of management ) that belongs to ( ( properties ) , and ( ( ref property types ) satisfied that ( ( property type code of department ) equal to ( property type code of management ) ) ) ) , grouped by ( property type code of department )", "question": "Show the property type descriptions of properties belonging to that code.", "label": 1, "remark": "positive"}
{"sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'", "translated_sql": "( email address ) that belongs to ( professionals ) , that have ( ( ( state ) equal to ( 'hawaii' ) ) or ( ( state ) equal to ( 'wisconsin' ) ) )", "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of department ) equal to ( stuid of management ) ) ) ) , that have ( ( age of department ) greater than ( 20 ) )", "question": "Find number of pets owned by students who are older than 20.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM conductor", "translated_sql": "( the number of ( all items ) ) that belongs to ( conductor )", "question": "Count the number of conductors.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )", "translated_sql": "( the number of ( all items ) ) that belongs to ( contestants ) , that have ( ( contestant_number ) not in ( ( contestant number ) that belongs to ( votes ) ) )", "question": "How many contestants did not get voted?", "label": 1, "remark": "positive"}
{"sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC", "translated_sql": "( name ) , ( location ) , ( district ) that belongs to ( shop ) , ordered by ( ( number products ) in descending order )", "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.", "label": 1, "remark": "positive"}
{"sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1", "translated_sql": "( citizenship ) that belongs to ( singer ) , grouped by ( citizenship ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the msot common singer citizenship?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( name of management ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of department ) equal to ( id of management ) ) ) ) , grouped by ( student id of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the name of the high schooler who has the greatest number of friends?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "translated_sql": "( paragraph text of department ) that belongs to ( ( paragraphs ) , and ( ( documents ) satisfied that ( ( document id of department ) equal to ( document id of management ) ) ) ) , that have ( ( document name of management ) equal to ( customer reviews ) )", "question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "label": 1, "remark": "positive"}
{"sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "translated_sql": "( the number of ( language of management ) ) , ( name of department ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , grouped by ( name of department ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )", "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.", "label": 1, "remark": "positive"}
{"sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "translated_sql": "( version number ) , ( template type code ) that belongs to ( templates ) , that have ( ( version number ) greater than ( 5 ) )", "question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"", "translated_sql": "( name of department ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( ( language of management ) equal to ( english ) ) and ( ( isofficial of management ) equal to ( t ) ) ), and intersect with ( ( name of department ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( ( language of management ) equal to ( french ) ) and ( ( isofficial of management ) equal to ( t ) ) ))", "question": "Give the names of countries with English and French as official languages.", "label": 1, "remark": "positive"}
{"sql": "SELECT date_arrived ,  date_departed FROM Dogs", "translated_sql": "( date arrived ) , ( date departed ) that belongs to ( dogs )", "question": "What are the arriving date and the departing date of all the dogs?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM players", "translated_sql": "( the number of ( all items ) ) that belongs to ( players )", "question": "Find the total number of players.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "translated_sql": "( name of department ) that belongs to ( ( singer ) , and ( ( song ) satisfied that ( ( singer id of department ) equal to ( singer id of management ) ) ) ) , grouped by ( name of department ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )", "question": "Show the names of singers that have more than one song.", "label": 1, "remark": "positive"}
{"sql": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "translated_sql": "( citizenship ) that belongs to ( singer ) , that have ( ( birth year ) less than ( 1945 ) ), and intersect with ( ( citizenship ) that belongs to ( singer ) , that have ( ( birth year ) greater than ( 1955 ) ))", "question": "Show the citizenship shared by singers with birth year before 1845 and after 1965.", "label": 0, "remark": "value int"}
{"sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( country ) , ( the number of ( all items ) ) that belongs to ( tv channel ) , grouped by ( country ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the country with the fewest number of TV Channels and how many does it have?", "label": 0, "remark": "logic"}
{"sql": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "translated_sql": "( the average of ( ranking ) ) , ( first name of department ) that belongs to ( ( players ) , and ( ( rankings ) satisfied that ( ( player id of department ) equal to ( player id of management ) ) ) ) , grouped by ( first name of department )", "question": "Find the average ranking for each player and their first name.", "label": 1, "remark": "positive"}
{"sql": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "translated_sql": "( the sum of ( population ) ) that belongs to ( city ) , that have ( ( district ) equal to ( gelderland ) )", "question": "How many people live in Gelderland district?", "label": 1, "remark": "positive"}
{"sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "translated_sql": "( song name ) , ( song release year ) that belongs to ( singer ) , ordered by ( ( age ) ) , limited to the top ( 1 )", "question": "Show the name of the song by the youngest singer.", "label": 0, "remark": "value col"}
{"sql": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"", "translated_sql": "( feature type name of highschooler ) that belongs to ( ( other available features ) , and ( ( ref feature types ) satisfied that ( ( feature type code of likes ) equal to ( feature type code of highschooler ) ) ) ) , that have ( ( feature name of likes ) equal to ( aircon ) )", "question": "What is the feature type code of feature AirCon?", "label": 0, "remark": "value col"}
{"sql": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'", "translated_sql": "( fname of department ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of department ) equal to ( stuid of management ) ) ) , and ( ( pets ) satisfied that ( ( petid of head ) equal to ( petid of management ) ) ) ) , that have ( ( pettype of head ) equal to ( 'cat' ) ), and intersect with ( ( fname of department ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of department ) equal to ( stuid of management ) ) ) , and ( ( pets ) satisfied that ( ( petid of head ) equal to ( petid of management ) ) ) ) , that have ( ( pettype of head ) equal to ( 'dog' ) ))", "question": "What are the students' first names who have both cats and dogs as pets?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3", "translated_sql": "( name of management ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of department ) equal to ( id of management ) ) ) ) , grouped by ( student id of department ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 3 ) )", "question": "Show the names of high schoolers who have at least 3 friends.", "label": 1, "remark": "positive"}
{"sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "translated_sql": "( airportname ) that belongs to ( airports ) , that have ( ( airportcode ) not in ( ( sourceairport ) that belongs to ( flights ) and ( destairport ) that belongs to ( flights ) ) )", "question": "Find the name of airports which do not have any flight in and out.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )", "translated_sql": "( the number of ( all items ) ) that belongs to ( dogs ) , that have ( ( age ) less than ( the average of ( age ) ) that belongs to ( dogs ) )", "question": "Count the number of dogs of an age above the average.", "label": 0, "remark": "logic"}
{"sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1", "translated_sql": "( name of department ) that belongs to ( ( conductor ) , and ( ( orchestra ) satisfied that ( ( conductor id of department ) equal to ( conductor id of management ) ) ) ) , grouped by ( conductor id of management ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )", "question": "What are the names of conductors who have conducted at more than one orchestra?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(DISTINCT loser_name) FROM matches", "translated_sql": "( the number of ( distinct ( loser name ) ) ) that belongs to ( matches )", "question": "Find the number of distinct name of losers.", "label": 1, "remark": "positive"}
{"sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "translated_sql": "( name of area code state ) , ( course of highschooler ) that belongs to ( ( course arrange ) , and ( ( course ) satisfied that ( ( course id of likes ) equal to ( course id of highschooler ) ) ) , and ( ( teacher ) satisfied that ( ( teacher id of likes ) equal to ( teacher id of area code state ) ) ) )", "question": "What is the id of each teacher and what course they teach?", "label": 0, "remark": "value col"}
{"sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship", "translated_sql": "( citizenship ) , ( the number of ( all items ) ) that belongs to ( singer ) , grouped by ( citizenship )", "question": "For each citizenship, how many singers are from that country?", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "translated_sql": "( the average of ( edispl of highschooler ) ) that belongs to ( ( car names ) , and ( ( cars data ) satisfied that ( ( makeid of likes ) equal to ( id of highschooler ) ) ) ) , that have ( ( model of likes ) equal to ( 'volvo' ) )", "question": "What is the minimum edispl for all volvos?", "label": 0, "remark": "logic"}
{"sql": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "translated_sql": "( template id ) , ( version number ) , ( template type code ) that belongs to ( templates )", "question": "Show template ids, version numbers, and template type codes for all templates.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( owner id of likes ) , ( first name of highschooler ) , ( last name of highschooler ) that belongs to ( ( dogs ) , and ( ( owners ) satisfied that ( ( owner id of likes ) equal to ( owner id of highschooler ) ) ) ) , grouped by ( owner id of likes ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Return the owner id, first name and last name of the owner who has the fewest dogs.", "label": 0, "remark": "logic"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10", "translated_sql": "( airline of department ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of department ) equal to ( airline of management ) ) ) ) , grouped by ( airline of department ) , that have ( ( the number of ( all items ) ) greater than ( 10 ) )", "question": "Find all airlines that have at least 10 flights.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(DISTINCT LOCATION) FROM shop", "translated_sql": "( the number of ( distinct ( location ) ) ) that belongs to ( shop )", "question": "How many different store locations are there?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code", "translated_sql": "( the number of ( all items ) ) , ( country code ) that belongs to ( players ) , grouped by ( country code )", "question": "How many players are from each country?", "label": 1, "remark": "positive"}
{"sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( country code ) that belongs to ( players ) , grouped by ( country code ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "find the name of the country where has the greatest number of players.", "label": 0, "remark": "value col"}
{"sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "translated_sql": "( document id ) , ( the number of ( all items ) ) that belongs to ( paragraphs ) , grouped by ( document id ) , ordered by ( ( document id ) )", "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id in descending order.", "label": 0, "remark": "logic"}
{"sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "translated_sql": "( state ) that belongs to ( owners ), and intersect with ( ( state ) that belongs to ( professionals ))", "question": "Which states have neither owners nor professionals living there?", "label": 0, "remark": "logic"}
{"sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "translated_sql": "( series name of department ) that belongs to ( ( tv channel ) , and ( ( tv series ) satisfied that ( ( id of department ) equal to ( channel of management ) ) ) ) , that have ( ( episode of management ) equal to ( a love of a lifetime ) )", "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "label": 1, "remark": "positive"}
{"sql": "SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980 ORDER BY mpg DESC LIMIT 1;", "translated_sql": "( mpg ) that belongs to ( cars data ) , that have ( ( ( cylinders ) equal to ( 8 ) ) or ( ( year ) less than ( 1980 ) ) ) , ordered by ( ( mpg ) in descending order ) , limited to the top ( 1 )", "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980?", "label": 1, "remark": "positive"}
{"sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "translated_sql": "( hometown ) that belongs to ( teacher ) , ordered by ( ( age ) in ascending order ) , limited to the top ( 1 )", "question": "What is the hometown of the oldest teacher?", "label": 0, "remark": "logic"}
{"sql": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")", "translated_sql": "( the average of ( lifeexpectancy ) ) that belongs to ( country ) , that have ( ( name ) not in ( ( name of department ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( ( language of management ) equal to ( english ) ) and ( ( isofficial of management ) equal to ( t ) ) ) ) )", "question": "What is average life expectancy in the countries where English is not the official language?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "translated_sql": "( name of management ) , ( the number of ( all items ) ) that belongs to ( ( course arrange ) , and ( ( teacher ) satisfied that ( ( teacher id of department ) equal to ( teacher id of management ) ) ) ) , grouped by ( name of management )", "question": "Show names of teachers and the number of courses they teach.", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id", "translated_sql": "( name of highschooler ) , ( the number of ( all items ) ) that belongs to ( ( singer in concert ) , and ( ( singer ) satisfied that ( ( singer id of likes ) equal to ( singer id of highschooler ) ) ) ) , grouped by ( singer id of highschooler )", "question": "List singer ages and number of concerts for each singer.", "label": 0, "remark": "value col"}
{"sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "translated_sql": "( record company ) that belongs to ( orchestra ) , ordered by ( ( year of founded ) in descending order )", "question": "Return the record companies of orchestras, sorted ascending by the years in which they were founded.", "label": 0, "remark": "logic"}
{"sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "translated_sql": "( the minimum of ( grade ) ) that belongs to ( highschooler ) , that have ( ( id ) not in ( ( student id of likes ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of likes ) equal to ( id of highschooler ) ) ) ) ) )", "question": "What is the highest grade of students who have some friends?", "label": 0, "remark": "logic"}
{"sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "translated_sql": "( the average of ( lifeexpectancy ) ) that belongs to ( country ) , that have ( ( region ) equal to ( central africa ) )", "question": "What is the average expected life expectancy for countries in the region of Central Africa?", "label": 1, "remark": "positive"}
{"sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "translated_sql": "( template type description ) that belongs to ( ref template types ) , that have ( ( template type code ) equal to ( ad ) )", "question": "What is the number of template type descriptions for template type code \"AD\".", "label": 0, "remark": "logic"}
{"sql": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "translated_sql": "( template id ) , ( version number ) , ( template type code ) that belongs to ( templates )", "question": "What are the ids, version numbers, and type codes for each template?", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'", "translated_sql": "( distinct ( fname of department ) ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of department ) equal to ( stuid of management ) ) ) , and ( ( pets ) satisfied that ( ( petid of head ) equal to ( petid of management ) ) ) ) , that have ( ( ( pettype of head ) equal to ( 'cat' ) ) or ( ( pettype of head ) equal to ( 'dog' ) ) )", "question": "What are the first names of every student who has a cat or dog as a pet?", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM conductor ORDER BY Age ASC", "translated_sql": "( name ) that belongs to ( conductor ) , ordered by ( ( age ) in ascending order )", "question": "What are the names of conductors, ordered by age?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"", "translated_sql": "( name of likes ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of likes ) equal to ( countrycode of highschooler ) ) ) ) , that have ( ( language of highschooler ) equal to ( english ) ), and intersect with ( ( name of likes ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of likes ) equal to ( countrycode of highschooler ) ) ) ) , that have ( ( language of highschooler ) equal to ( french ) ))", "question": "Give the names of nations that speak both Spanish and French.", "label": 0, "remark": "value str"}
{"sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )", "translated_sql": "( the average of ( age ) ) that belongs to ( dogs ) , that have ( ( dog_id ) in ( ( dog id ) that belongs to ( treatments ) ) )", "question": "What is the average age of the dogs who have gone through any treatments?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "translated_sql": "( episode of management ) that belongs to ( ( tv channel ) , and ( ( tv series ) satisfied that ( ( id of department ) equal to ( channel of management ) ) ) ) , that have ( ( series name of department ) equal to ( sky radio ) )", "question": "What is the episode for the TV series named \"Sky Radio\"?", "label": 1, "remark": "positive"}
{"sql": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "translated_sql": "( code ) that belongs to ( country ) , that have ( ( governmentform ) not equal to ( republic ) ), and except that ( ( countrycode ) that belongs to ( countrylanguage ) , that have ( ( language ) equal to ( english ) ))", "question": "Return the codes of countries that do not speak English and do not have Republics for governments.", "label": 1, "remark": "positive"}
{"sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "translated_sql": "( first name ) , ( middle name ) , ( last name ) that belongs to ( students ) , ordered by ( ( date left ) in ascending order ) , limited to the top ( 1 )", "question": "What is the first, middle, and last name of the earliest school graduate?", "label": 1, "remark": "positive"}
{"sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "translated_sql": "( name of head ) , ( course of management ) that belongs to ( ( course arrange ) , and ( ( course ) satisfied that ( ( course id of department ) equal to ( course id of management ) ) ) , and ( ( teacher ) satisfied that ( ( teacher id of department ) equal to ( teacher id of head ) ) ) )", "question": "What is the name of each teacher and what course they teach?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( sourceairport of department ) equal to ( airportcode of management ) ) ) ) , that have ( ( city of management ) equal to ( aberdeen ) )", "question": "Return the number of flights departing from Aberdeen.", "label": 1, "remark": "positive"}
{"sql": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id", "translated_sql": "( professional id ) , ( role code ) , ( email address ) that belongs to ( professionals ), and except that ( ( professional id of likes ) , ( role code of likes ) , ( email address of likes ) that belongs to ( ( professionals ) , and ( ( treatments ) satisfied that ( ( professional id of likes ) equal to ( professional id of highschooler ) ) ) ))", "question": "Give me the id, role and email of the professionals who did not perform any treatment on cats.", "label": 0, "remark": "value str"}
{"sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "translated_sql": "( countryname of management ) that belongs to ( ( car makers ) , and ( ( countries ) satisfied that ( ( country of department ) equal to ( countryid of management ) ) ) ) , grouped by ( country of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the name of the country with the most car makers?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "translated_sql": "( first name of department ) , ( name of management ) that belongs to ( ( owners ) , and ( ( dogs ) satisfied that ( ( owner id of department ) equal to ( owner id of management ) ) ) ) , that have ( ( state of department ) equal to ( 'virginia' ) )", "question": "Find the first names of owners living in Virginia and the names of dogs they own.", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1", "translated_sql": "( language of management ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( continent of department ) equal to ( asia ) ) , grouped by ( language of management ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the language that is used by the largest number of Asian nations?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";", "translated_sql": "( the number of ( all items ) ) that belongs to ( tv channel ) , that have ( ( language ) equal to ( english ) )", "question": "How many TV Channel using language English?", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "translated_sql": "( distinct ( model of department ) ) that belongs to ( ( model list ) , and ( ( car names ) satisfied that ( ( model of department ) equal to ( model of management ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of management ) equal to ( id of head ) ) ) ) , that have ( ( year of head ) greater than ( 1980 ) )", "question": "Which distinct car models are the produced after 1980?", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "translated_sql": "( the average of ( age ) ) , ( the minimum of ( age ) ) , ( the maximum of ( age ) ) that belongs to ( singer ) , that have ( ( country ) equal to ( 'france' ) )", "question": "What is the average, minimum, and maximum age for all French singers?", "label": 1, "remark": "positive"}
{"sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "translated_sql": "( petid ) , ( weight ) that belongs to ( pets ) , that have ( ( pet age ) greater than ( 1 ) )", "question": "What is the id and weight of every pet who is older than 10?", "label": 0, "remark": "value int"}
{"sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "translated_sql": "( the number of ( distinct ( series name ) ) ) , ( the number of ( distinct ( content ) ) ) that belongs to ( tv channel )", "question": "List the number of different series names and contents in the TV Channel table.", "label": 1, "remark": "positive"}
{"sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC", "translated_sql": "( name ) , ( country ) , ( age ) that belongs to ( singer ) , ordered by ( ( age ) in descending order )", "question": "What are the names, countries, and ages for every singer in descending order of age?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "translated_sql": "( money rank of management ) that belongs to ( ( people ) , and ( ( poker player ) satisfied that ( ( people id of department ) equal to ( people id of management ) ) ) ) , ordered by ( ( height of department ) in descending order ) , limited to the top ( 1 )", "question": "What is the money rank of the tallest poker player?", "label": 1, "remark": "positive"}
{"sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";", "translated_sql": "( title ) that belongs to ( cartoon ) , that have ( ( ( directed by ) equal to ( ben jones ) ) or ( ( directed by ) equal to ( brandon vietti ) ) )", "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4", "translated_sql": "( the average of ( age ) ) that belongs to ( visitor ) , that have ( ( level of membership ) less than or equal to ( 4 ) )", "question": "What is the average age of the visitors whose membership level is not higher than 4?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "translated_sql": "( first name of department ) , ( country code of department ) , ( birth date of department ) that belongs to ( ( players ) , and ( ( matches ) satisfied that ( ( player id of department ) equal to ( winner id of management ) ) ) ) , ordered by ( ( winner rank points of management ) in descending order ) , limited to the top ( 1 )", "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "translated_sql": "( the number of ( all items ) ) , ( year ) that belongs to ( matches ) , grouped by ( year )", "question": "Find the number of matches happened in each year.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "translated_sql": "( owner id of likes ) , ( zip code of likes ) that belongs to ( ( owners ) , and ( ( dogs ) satisfied that ( ( owner id of likes ) equal to ( owner id of highschooler ) ) ) , and ( ( treatments ) satisfied that ( ( dog id of highschooler ) equal to ( dog id of area code state ) ) ) ) , grouped by ( owner id of likes ) , ordered by ( ( the sum of ( cost of treatment of area code state ) ) in descending order ) , limited to the top ( 1 )", "question": "Which owner has paid the samllest amount of money in total for their dogs? Show the owner id and zip code.", "label": 0, "remark": "value col"}
{"sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( model list ) , and ( ( car makers ) satisfied that ( ( maker of likes ) equal to ( id of highschooler ) ) ) , and ( ( countries ) satisfied that ( ( country of highschooler ) equal to ( countryid of area code state ) ) ) ) , that have ( ( countryname of area code state ) equal to ( 'usa' ) )", "question": "How many car models are produced in the China?", "label": 0, "remark": "value str"}
{"sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "translated_sql": "( continent of likes ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of likes ) equal to ( countrycode of highschooler ) ) ) ) , grouped by ( continent of likes ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Which continent speaks the least languages?", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "translated_sql": "( the number of ( all items ) ) that belongs to ( concert ) , that have ( ( ( year ) equal to ( 2014 ) ) or ( ( year ) equal to ( 2015 ) ) )", "question": "How many concerts occurred in 2014 or 2015?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "translated_sql": "( name of department ) that belongs to ( ( people ) , and ( ( poker player ) satisfied that ( ( people id of department ) equal to ( people id of management ) ) ) ) , that have ( ( earnings of management ) greater than ( 300000 ) )", "question": "What are the names of poker players whose earnings is higher than 300000?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "translated_sql": "( cylinders of department ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of department ) equal to ( makeid of management ) ) ) ) , that have ( ( model of management ) equal to ( 'volvo' ) ) , ordered by ( ( accelerate of department ) in ascending order ) , limited to the top ( 1 )", "question": "For model volvo, how many cylinders does the car with the least accelerate have?", "label": 1, "remark": "positive"}
{"sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "translated_sql": "( name ) that belongs to ( stadium ), and except that ( ( name of management ) that belongs to ( ( concert ) , and ( ( stadium ) satisfied that ( ( stadium id of department ) equal to ( stadium id of management ) ) ) ) , that have ( ( year of department ) equal to ( 2014 ) ))", "question": "What are the names of all stadiums that did not have a concert in 2014?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent", "translated_sql": "( continent of likes ) , ( the number of ( all items ) ) that belongs to ( ( continents ) , and ( ( countries ) satisfied that ( ( contid of likes ) equal to ( continent of highschooler ) ) ) , and ( ( car makers ) satisfied that ( ( countryid of highschooler ) equal to ( country of area code state ) ) ) ) , grouped by ( continent of likes )", "question": "How many car makers are there in each continents? List the continent name.", "label": 0, "remark": "value col"}
{"sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "translated_sql": "( major ) , ( age ) that belongs to ( student ) , that have ( ( stuid ) not in ( ( stuid of likes ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of likes ) equal to ( stuid of highschooler ) ) ) , and ( ( pets ) satisfied that ( ( petid of area code state ) equal to ( petid of highschooler ) ) ) ) , that have ( ( pettype of area code state ) equal to ( 'cat' ) ) ) )", "question": "Find the major and average age of students who have a cat pet.", "label": 0, "remark": "logic"}
{"sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )", "translated_sql": "( semester name ) that belongs to ( semesters ) , that have ( ( semester_id ) not in ( ( ( semester id ) that belongs to ( student enrolment ) ) ) )", "question": "Which semesters do not have any student enrolled? List the semester name.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "translated_sql": "( paragraph text of department ) that belongs to ( ( paragraphs ) , and ( ( documents ) satisfied that ( ( document id of department ) equal to ( document id of management ) ) ) ) , that have ( ( document name of management ) equal to ( customer reviews ) )", "question": "Show all paragraph texts for the document \"Customer reviews\".", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "translated_sql": "( flightno of department ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( destairport of department ) equal to ( airportcode of management ) ) ) ) , that have ( ( city of management ) equal to ( aberdeen ) )", "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "label": 1, "remark": "positive"}
{"sql": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "translated_sql": "( population ) , ( region ) that belongs to ( country ) , that have ( ( name ) equal to ( angola ) )", "question": "What region does Angola belong to and what is its population?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "translated_sql": "( title of management ) that belongs to ( ( tv channel ) , and ( ( cartoon ) satisfied that ( ( id of department ) equal to ( channel of management ) ) ) ) , that have ( ( series name of department ) equal to ( sky radio ) )", "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) ,  city FROM employee GROUP BY city", "translated_sql": "( the number of ( all items ) ) , ( city ) that belongs to ( employee ) , grouped by ( city )", "question": "What is the minimum number of employees from each city?", "label": 0, "remark": "logic"}
{"sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "translated_sql": "( template type code ) that belongs to ( ref template types ) , that have ( ( template type description ) equal to ( book ) )", "question": "Return the type code of the template type with the description \"Book\".", "label": 1, "remark": "positive"}
{"sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)", "translated_sql": "( name ) that belongs to ( stadium ) , that have ( ( stadium_id ) not in ( ( stadium id ) that belongs to ( concert ) ) )", "question": "What are the names of the stadiums without any concerts?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(DISTINCT dog_id) FROM Treatments", "translated_sql": "( the number of ( distinct ( dog id ) ) ) that belongs to ( treatments )", "question": "How many dogs went through any treatments?", "label": 1, "remark": "positive"}
{"sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "translated_sql": "( country code ) that belongs to ( players ) , grouped by ( country code ) , that have ( ( the number of ( all items ) ) greater than ( 50 ) )", "question": "Find the codes of countries that have more than 50 players.", "label": 1, "remark": "positive"}
{"sql": "SELECT max(area_code) ,  min(area_code) FROM area_code_state", "translated_sql": "( the maximum of ( area code ) ) , ( the minimum of ( area code ) ) that belongs to ( area code state )", "question": "What are the maximum and average values of area codes?", "label": 0, "remark": "logic"}
{"sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "translated_sql": "( nationality ) that belongs to ( people ) , grouped by ( nationality ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the most common nationality of people?", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")", "translated_sql": "( the average of ( lifeexpectancy ) ) that belongs to ( country ) , that have ( ( name ) not in ( ( name of likes ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of likes ) equal to ( countrycode of highschooler ) ) ) ) , that have ( ( ( language of highschooler ) equal to ( english ) ) and ( ( isofficial of highschooler ) equal to ( t ) ) ) ) )", "question": "What is average life expectancy in the countries where English is  the official language?", "label": 0, "remark": "logic"}
{"sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "translated_sql": "( name ) that belongs to ( singer ) , that have ( ( ( birth year ) equal to ( 1948 ) ) or ( ( birth year ) equal to ( 1949 ) ) )", "question": "Show the name of singers whose birth year is neither 1948 nor 1949?", "label": 0, "remark": "logic"}
{"sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( breed name of likes ) that belongs to ( ( breeds ) , and ( ( dogs ) satisfied that ( ( breed code of likes ) equal to ( breed code of highschooler ) ) ) ) , grouped by ( breed name of likes ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Which breed do the most cats have? Give me the breed name.", "label": 0, "remark": "value table"}
{"sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "translated_sql": "( name of highschooler ) , ( the number of ( all items ) ) that belongs to ( ( course arrange ) , and ( ( teacher ) satisfied that ( ( teacher id of likes ) equal to ( teacher id of highschooler ) ) ) ) , grouped by ( name of highschooler )", "question": "What are the names of the students and how many courses do they have?", "label": 0, "remark": "value col"}
{"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( destairport of department ) equal to ( airportcode of management ) ) ) ) , that have ( ( city of management ) equal to ( aberdeen ) )", "question": "How many flights arriving in Aberdeen city?", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "translated_sql": "( name ) that belongs to ( people ) , that have ( ( people_id ) not in ( ( people id ) that belongs to ( poker player ) ) )", "question": "What are the names of people who do not play poker?", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)", "translated_sql": "( name ) that belongs to ( teacher ) , that have ( ( teacher_id ) not in ( ( teacher id ) that belongs to ( course arrange ) ) )", "question": "What are the names of the teachers whose courses have not been arranged?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2", "translated_sql": "( name of management ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( student id of department ) equal to ( id of management ) ) ) ) , grouped by ( student id of department ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )", "question": "Show the names of students who have at least 2 likes.", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'", "translated_sql": "( distinct ( model of likes ) ) that belongs to ( ( model list ) , and ( ( car names ) satisfied that ( ( model of likes ) equal to ( model of highschooler ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of highschooler ) equal to ( id of area code state ) ) ) , and ( ( car makers ) satisfied that ( ( maker of likes ) equal to ( id of car makers ) ) ) ) , that have ( ( ( weight of area code state ) less than ( 3500 ) ) and ( ( fullname of car makers ) not equal to ( 'ford motor company' ) ) )", "question": "Which models are lighter than 3600 but not built by the 'Ford Motor Company'?", "label": 0, "remark": "value int"}
{"sql": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "translated_sql": "( the sum of ( population ) ) , ( the maximum of ( gnp ) ) that belongs to ( country ) , that have ( ( continent ) equal to ( asia ) )", "question": "How many people live in Asia, and what is the largest GNP among them?", "label": 1, "remark": "positive"}
{"sql": "SELECT name ,  date FROM battle", "translated_sql": "( name ) , ( date ) that belongs to ( battle )", "question": "List the name and result of each battle.", "label": 0, "remark": "value col"}
{"sql": "SELECT max(created) FROM votes WHERE state  =  'CA'", "translated_sql": "( the maximum of ( created ) ) that belongs to ( votes ) , that have ( ( state ) equal to ( 'ca' ) )", "question": "What is last date created of votes from the state 'GA'?", "label": 0, "remark": "value str"}
{"sql": "SELECT line_1 ,  line_2 FROM addresses", "translated_sql": "( line 1 ) , ( line 2 ) that belongs to ( addresses )", "question": "What is the first line for all addresses?", "label": 0, "remark": "value col"}
{"sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'", "translated_sql": "( petid of highschooler ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of likes ) equal to ( stuid of highschooler ) ) ) ) , that have ( ( lname of likes ) equal to ( 'smith' ) )", "question": "Find the id of the pet owned by student whose last name is not \u2018Smith\u2019.", "label": 0, "remark": "logic"}
{"sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "translated_sql": "( first name of department ) , ( middle name of department ) , ( last name of department ) , ( student id of department ) that belongs to ( ( students ) , and ( ( student enrolment ) satisfied that ( ( student id of department ) equal to ( student id of management ) ) ) ) , grouped by ( student id of department ) , that have ( ( the number of ( all items ) ) equal to ( 2 ) )", "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM COUNTRIES;", "translated_sql": "( the number of ( all items ) ) that belongs to ( countries )", "question": "How many countries exist?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "translated_sql": "( fname of department ) , ( age of department ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of department ) equal to ( stuid of management ) ) ) , and ( ( pets ) satisfied that ( ( petid of head ) equal to ( petid of management ) ) ) ) , that have ( ( ( pettype of head ) equal to ( 'dog' ) ) and ( ( t1.stuid ) not in ( ( stuid of department ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of department ) equal to ( stuid of management ) ) ) , and ( ( pets ) satisfied that ( ( petid of head ) equal to ( petid of management ) ) ) ) , that have ( ( pettype of head ) equal to ( 'cat' ) ) ) ) )", "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'", "translated_sql": "( distinct ( fname of department ) ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of department ) equal to ( stuid of management ) ) ) , and ( ( pets ) satisfied that ( ( petid of head ) equal to ( petid of management ) ) ) ) , that have ( ( ( pettype of head ) equal to ( 'cat' ) ) or ( ( pettype of head ) equal to ( 'dog' ) ) )", "question": "Find the first name of students who have cat or dog pet.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District", "translated_sql": "( the number of ( all items ) ) , ( district ) that belongs to ( city ) , that have ( ( population ) greater than ( the average of ( population ) ) that belongs to ( city ) ) , grouped by ( district )", "question": "Find the number of cities in each district whose population is less than the average population of cities?", "label": 0, "remark": "logic"}
{"sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship", "translated_sql": "( citizenship ) , ( the number of ( all items ) ) that belongs to ( singer ) , grouped by ( citizenship )", "question": "Show different citizenship of singers and the number of singers of each citizenship.", "label": 1, "remark": "positive"}
{"sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "translated_sql": "( first name ) , ( last name ) , ( email address ) that belongs to ( owners ) , that have ( ( state ) like ( '%north%' ) )", "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring  'South'.", "label": 0, "remark": "value str"}
{"sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "translated_sql": "( name of likes ) that belongs to ( ( people ) , and ( ( poker player ) satisfied that ( ( people id of likes ) equal to ( people id of highschooler ) ) ) )", "question": "What are the number of poker players?", "label": 0, "remark": "value col"}
{"sql": "SELECT avg(Attendance) FROM SHOW", "translated_sql": "( the average of ( attendance ) ) that belongs to ( show )", "question": "What is the average attendance of shows?", "label": 1, "remark": "positive"}
{"sql": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade", "translated_sql": "( grade ) , ( the number of ( all items ) ) that belongs to ( highschooler ) , grouped by ( grade )", "question": "Show the number of high schoolers for each grade.", "label": 1, "remark": "positive"}
{"sql": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "translated_sql": "( name ) , ( surfacearea ) , ( indepyear ) that belongs to ( country ) , ordered by ( ( population ) ) , limited to the top ( 1 )", "question": "Give the name, year of independence, and surface area of the country that has the largest population.", "label": 0, "remark": "logic"}
{"sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of likes ) equal to ( countrycode of highschooler ) ) ) ) , that have ( ( ( name of likes ) equal to ( afghanistan ) ) and ( ( isofficial ) equal to ( t ) ) )", "question": "How many official languages does aruba have?", "label": 0, "remark": "value str"}
{"sql": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( country ) , that have ( ( continent ) equal to ( asia ) )", "question": "how many countries are in Asia?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "translated_sql": "( continent of department ) , ( the number of ( all items ) ) that belongs to ( ( continents ) , and ( ( countries ) satisfied that ( ( contid of department ) equal to ( continent of management ) ) ) , and ( ( car makers ) satisfied that ( ( countryid of management ) equal to ( country of head ) ) ) ) , grouped by ( continent of department )", "question": "How many car makers are there in each continents? List the continent name and the count.", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"", "translated_sql": "( distinct ( name of head ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) , and ( ( city ) satisfied that ( ( code of department ) equal to ( countrycode of head ) ) ) ) , that have ( ( ( isofficial of management ) equal to ( 't' ) ) and ( ( language of management ) equal to ( 'chinese' ) ) and ( ( continent of department ) equal to ( asia ) ) )", "question": "Whic`h unique cities are in  Asian countries where Chinese is the official language?", "label": 1, "remark": "positive"}
{"sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown", "translated_sql": "( hometown ) , ( the number of ( all items ) ) that belongs to ( teacher ) , grouped by ( hometown )", "question": "For each hometown, how many teachers are there?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name", "translated_sql": "( name of likes ) , ( the sum of ( sales of highschooler ) ) that belongs to ( ( singer ) , and ( ( song ) satisfied that ( ( singer id of likes ) equal to ( singer id of highschooler ) ) ) ) , grouped by ( name of likes )", "question": "For each singer name, what is the average sale for their songs?", "label": 0, "remark": "logic"}
{"sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "translated_sql": "( department description ) that belongs to ( departments ) , that have ( ( department_name ) like ( '%computer%' ) )", "question": "What is the department description for the one whose name has the word computer?", "label": 1, "remark": "positive"}
{"sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "translated_sql": "( song name ) that belongs to ( singer ) , that have ( ( age ) greater than ( the average of ( age ) ) that belongs to ( singer ) )", "question": "What are all the song names by singers who are older than average?", "label": 1, "remark": "positive"}
{"sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "translated_sql": "( template type description ) that belongs to ( ref template types ) , that have ( ( template type code ) equal to ( ad ) )", "question": "What is the template type descriptions for template type code \"AD\".", "label": 1, "remark": "positive"}
{"sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "translated_sql": "( the maximum of ( final table made ) ) that belongs to ( poker player ) , that have ( ( earnings ) less than ( 200000 ) )", "question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "label": 1, "remark": "positive"}
{"sql": "SELECT max(age) FROM Dogs", "translated_sql": "( the maximum of ( age ) ) that belongs to ( dogs )", "question": "Tell me the age of the oldest dog.", "label": 1, "remark": "positive"}
{"sql": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)", "translated_sql": "( name ) that belongs to ( shop ) , that have ( ( number products ) greater than ( the average of ( number products ) ) that belongs to ( shop ) )", "question": "Find the names of stores whose number products is more than the average number of products.", "label": 1, "remark": "positive"}
{"sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( name of evaluation ) that belongs to ( ( hiring ) , and ( ( shop ) satisfied that ( ( shop id of employee ) equal to ( shop id of evaluation ) ) ) ) , grouped by ( shop id of employee ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the name of the shop that is hiring the smallest number of employees?", "label": 0, "remark": "logic"}
{"sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"", "translated_sql": "( name of head ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of department ) equal to ( id of management ) ) ) , and ( ( highschooler ) satisfied that ( ( friend id of department ) equal to ( id of head ) ) ) ) , that have ( ( name of management ) equal to ( kyle ) )", "question": "Return the names of friends of the high school student Kyle.", "label": 1, "remark": "positive"}
{"sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown", "translated_sql": "( hometown ) , ( the number of ( all items ) ) that belongs to ( teacher ) , grouped by ( hometown )", "question": "Show different hometown of teachers and the number of teachers from each hometown.", "label": 1, "remark": "positive"}
{"sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "translated_sql": "( the number of ( language of management ) ) , ( name of department ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , grouped by ( name of department ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )", "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(DISTINCT template_id) FROM Documents", "translated_sql": "( the number of ( distinct ( template id ) ) ) that belongs to ( documents )", "question": "How many different templates do all document use?", "label": 1, "remark": "positive"}
{"sql": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "translated_sql": "( professional id ) , ( last name ) , ( cell number ) that belongs to ( professionals ) , that have ( ( state ) equal to ( 'indiana' ) ) and ( professional id of department ) , ( last name of department ) , ( cell number of department ) that belongs to ( ( professionals ) , and ( ( treatments ) satisfied that ( ( professional id of department ) equal to ( professional id of management ) ) ) ) , grouped by ( professional id of department ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )", "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid", "translated_sql": "( the number of ( all items ) ) , ( stuid of department ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of department ) equal to ( stuid of management ) ) ) ) , grouped by ( stuid of department )", "question": "Find the number of pets for each student who has any pet and student id.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( destairport of likes ) equal to ( airportcode of highschooler ) ) ) ) , that have ( ( ( city of highschooler ) equal to ( aberdeen ) ) or ( ( city of highschooler ) equal to ( abilene ) ) )", "question": "Find the number of flights landing in the city of Aberdeen and Abilene.", "label": 0, "remark": "logic"}
{"sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"", "translated_sql": "( package option ) that belongs to ( tv channel ) , that have ( ( series name ) equal to ( sky radio ) )", "question": "What is the Package Option of TV Channel without serial name \"Sky Radio\"?", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "translated_sql": "( the number of ( all items ) ) , ( the maximum of ( percentage ) ) that belongs to ( countrylanguage ) , that have ( ( language ) equal to ( spanish ) ) , grouped by ( countrycode )", "question": "What is the total number of countries where Spanish is spoken by the smallest percentage of people?", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( flights ) , that have ( ( sourceairport ) equal to ( apg ) )", "question": "How many flights arrive at 'APG'?", "label": 0, "remark": "value col"}
{"sql": "SELECT DISTINCT state ,  created FROM votes", "translated_sql": "( distinct ( state ) ) , ( created ) that belongs to ( votes )", "question": "What are the distinct states and create time of all votes?", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "translated_sql": "( distinct ( course name of likes ) ) that belongs to ( ( courses ) , and ( ( student enrolment courses ) satisfied that ( ( course id of likes ) equal to ( course id of highschooler ) ) ) )", "question": "What are all the course names of the courses which never have students enrolled in?", "label": 0, "remark": "logic"}
{"sql": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC", "translated_sql": "( contestant number ) , ( contestant name ) that belongs to ( contestants ) , ordered by ( ( contestant name ) in descending order )", "question": "List the contestant numbers and names, ordered by contestant name descending.", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "translated_sql": "( name of management ) that belongs to ( ( singer in concert ) , and ( ( singer ) satisfied that ( ( singer id of department ) equal to ( singer id of management ) ) ) , and ( ( concert ) satisfied that ( ( concert id of department ) equal to ( concert id of head ) ) ) ) , that have ( ( year of head ) equal to ( 2014 ) )", "question": "List all singer names in concerts in year 2014.", "label": 1, "remark": "positive"}
{"sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "translated_sql": "( orchestra ) that belongs to ( orchestra ) , that have ( ( orchestra_id ) not in ( ( orchestra id ) that belongs to ( performance ) ) )", "question": "What are the orchestras that do not have any performances?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( name of highschooler ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( student id of likes ) equal to ( id of highschooler ) ) ) ) , grouped by ( student id of likes ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the name of the high schooler who has the lowest number of likes?", "label": 0, "remark": "logic"}
{"sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "translated_sql": "( template id ) that belongs to ( templates ), and except that ( ( template id ) that belongs to ( documents ))", "question": "What are the ids for templates that are not used in any documents?", "label": 1, "remark": "positive"}
{"sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend", "translated_sql": "( id ) that belongs to ( highschooler ), and except that ( ( student id ) that belongs to ( friend ))", "question": "Show ids of all students who have some friends.", "label": 0, "remark": "logic"}
{"sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "translated_sql": "( flightno of department ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( sourceairport of department ) equal to ( airportcode of management ) ) ) ) , that have ( ( city of management ) equal to ( aberdeen ) )", "question": "Give the flight numbers of flights leaving from Aberdeen.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "translated_sql": "( country code of department ) , ( first name of department ) that belongs to ( ( players ) , and ( ( matches ) satisfied that ( ( player id of department ) equal to ( winner id of management ) ) ) ) , that have ( ( tourney name of management ) equal to ( 'wta championships' ) ), and intersect with ( ( country code of department ) , ( first name of department ) that belongs to ( ( players ) , and ( ( matches ) satisfied that ( ( player id of department ) equal to ( winner id of management ) ) ) ) , that have ( ( tourney name of management ) equal to ( 'australian open' ) ))", "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "translated_sql": "( course name of department ) , ( course id of department ) that belongs to ( ( courses ) , and ( ( sections ) satisfied that ( ( course id of department ) equal to ( course id of management ) ) ) ) , grouped by ( course id of department ) , that have ( ( the number of ( all items ) ) less than or equal to ( 2 ) )", "question": "What are the names and ids of every course with less than 2 sections?", "label": 1, "remark": "positive"}
{"sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "translated_sql": "( name ) , ( country ) that belongs to ( singer ) , that have ( ( song_name ) like ( '%hey%' ) )", "question": "what is the name and nation of the singer who have a song without 'Hey' in its name?", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "translated_sql": "( the number of ( all items ) ) , ( directed by ) that belongs to ( cartoon ) , grouped by ( directed by )", "question": "Find the number of cartoons directed by each of the listed directors.", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"", "translated_sql": "( feature type name of management ) that belongs to ( ( other available features ) , and ( ( ref feature types ) satisfied that ( ( feature type code of department ) equal to ( feature type code of management ) ) ) ) , that have ( ( feature name of department ) equal to ( aircon ) )", "question": "What is the feature type name of feature AirCon?", "label": 1, "remark": "positive"}
{"sql": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)", "translated_sql": "( name ) that belongs to ( shop ) , that have ( ( number products ) greater than ( the average of ( number products ) ) that belongs to ( shop ) )", "question": "Which shops' number products is below the average? Give me the shop names.", "label": 0, "remark": "logic"}
{"sql": "SELECT avg(Attendance) FROM SHOW", "translated_sql": "( the average of ( attendance ) ) that belongs to ( show )", "question": "Return the average attendance across all shows.", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(age) FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid)", "translated_sql": "( the average of ( age ) ) that belongs to ( student ) , that have ( ( stuid ) not in ( ( stuid of likes ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of likes ) equal to ( stuid of highschooler ) ) ) ) ) )", "question": "What is the average age for all students who own two pets?", "label": 0, "remark": "logic"}
{"sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "translated_sql": "( template type code ) , ( the number of ( all items ) ) that belongs to ( templates ) , grouped by ( template type code )", "question": "Show all template type codes and number of templates for each.", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "translated_sql": "( name ) that belongs to ( singer ) , that have ( ( ( birth year ) equal to ( 1948 ) ) or ( ( birth year ) equal to ( 1949 ) ) )", "question": "What are the names of the singers whose birth years are neither 1948 nor 1949?", "label": 0, "remark": "logic"}
{"sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1", "translated_sql": "( citizenship ) that belongs to ( singer ) , grouped by ( citizenship ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Please show the least common citizenship of singers.", "label": 0, "remark": "logic"}
{"sql": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)", "translated_sql": "( name ) that belongs to ( museum ) , that have ( ( museum_id ) not in ( ( museum id ) that belongs to ( visit ) ) )", "question": "What is the name of the museum that had no visitor yet?", "label": 1, "remark": "positive"}
{"sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "translated_sql": "( region ) that belongs to ( ( country ) , and ( ( city ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( name of management ) equal to ( kabul ) )", "question": "What region is Kabul in?", "label": 1, "remark": "positive"}
{"sql": "SELECT contestant_name FROM contestants WHERE contestant_name LIKE \"%Al%\"", "translated_sql": "( contestant name ) that belongs to ( contestants ) , that have ( ( contestant_name ) like ( %al% ) )", "question": "Return the names the contestants whose names contain the substring 'Al'.", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "translated_sql": "( distinct ( model of department ) ) that belongs to ( ( model list ) , and ( ( car names ) satisfied that ( ( model of department ) equal to ( model of management ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of management ) equal to ( id of head ) ) ) , and ( ( car makers ) satisfied that ( ( maker of department ) equal to ( id of trip ) ) ) ) , that have ( ( ( weight of head ) less than ( 3500 ) ) and ( ( fullname of trip ) not equal to ( 'ford motor company' ) ) )", "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;", "translated_sql": "( the average of ( mpg ) ) that belongs to ( cars data ) , that have ( ( cylinders ) equal to ( 4 ) )", "question": "What is the average miles per gallon of all the cards with 4 cylinders?", "label": 1, "remark": "positive"}
{"sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'", "translated_sql": "( email address ) that belongs to ( professionals ) , that have ( ( ( state ) equal to ( 'hawaii' ) ) or ( ( state ) equal to ( 'wisconsin' ) ) )", "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.", "label": 1, "remark": "positive"}
{"sql": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1", "translated_sql": "( museum id ) , ( name ) that belongs to ( museum ) , ordered by ( ( num of staff ) in descending order ) , limited to the top ( 1 )", "question": "Find the id and name of the museum that has the most staff members?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "translated_sql": "( name of likes ) that belongs to ( ( people ) , and ( ( poker player ) satisfied that ( ( people id of likes ) equal to ( people id of highschooler ) ) ) )", "question": "Return the ids of all the poker players.", "label": 0, "remark": "value col"}
{"sql": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)", "translated_sql": "( name ) that belongs to ( museum ) , that have ( ( num of staff ) greater than ( the minimum of ( num of staff ) ) that belongs to ( museum ) , that have ( ( open year ) greater than ( 2010 ) ) )", "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"", "translated_sql": "( distinct ( name of area code state ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of likes ) equal to ( countrycode of highschooler ) ) ) , and ( ( city ) satisfied that ( ( code of likes ) equal to ( countrycode of area code state ) ) ) ) , that have ( ( ( isofficial of highschooler ) equal to ( 't' ) ) and ( ( language of highschooler ) equal to ( 'chinese' ) ) and ( ( continent of likes ) equal to ( asia ) ) )", "question": "Return the different names of cities that are in Asia and for which Chinese is not the official language.", "label": 0, "remark": "logic"}
{"sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';", "translated_sql": "( countryid of department ) , ( countryname of department ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of department ) equal to ( country of management ) ) ) ) , grouped by ( countryid of department ) , that have ( ( the number of ( all items ) ) greater than ( 3 ) ) and ( countryid of department ) , ( countryname of department ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of department ) equal to ( country of management ) ) ) , and ( ( model list ) satisfied that ( ( id of management ) equal to ( maker of head ) ) ) ) , that have ( ( model of head ) equal to ( 'fiat' ) )", "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiats?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM singer", "translated_sql": "( the number of ( all items ) ) that belongs to ( singer )", "question": "How many singers do we have?", "label": 1, "remark": "positive"}
{"sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "translated_sql": "( template id ) that belongs to ( templates ) , that have ( ( ( template type code ) equal to ( pp ) ) or ( ( template type code ) equal to ( ppt ) ) )", "question": "What are the ids of templates with template type code neither PP nor PPT?", "label": 0, "remark": "logic"}
{"sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "translated_sql": "( the minimum of ( grade ) ) that belongs to ( highschooler ) , that have ( ( id ) not in ( ( student id of department ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of department ) equal to ( id of management ) ) ) ) ) )", "question": "Find the minimum grade of students who have no friends.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "translated_sql": "( series name of department ) that belongs to ( ( tv channel ) , and ( ( cartoon ) satisfied that ( ( id of department ) equal to ( channel of management ) ) ) ) , that have ( ( title of management ) equal to ( the rise of the blue beetle! ) )", "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "translated_sql": "( model of department ) that belongs to ( ( car names ) , and ( ( cars data ) satisfied that ( ( makeid of department ) equal to ( id of management ) ) ) ) , ordered by ( ( horsepower of management ) in ascending order ) , limited to the top ( 1 )", "question": "Which model of the car has the minimum horsepower?", "label": 1, "remark": "positive"}
{"sql": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC", "translated_sql": "( name ) that belongs to ( visitor ) , that have ( ( level of membership ) greater than ( 4 ) ) , ordered by ( ( level of membership ) in descending order )", "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;", "translated_sql": "( the average of ( mpg ) ) that belongs to ( cars data ) , that have ( ( cylinders ) equal to ( 4 ) )", "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;", "translated_sql": "( the average of ( horsepower ) ) that belongs to ( cars data ) , that have ( ( year ) less than ( 1980 ) )", "question": "What is the average horsepower of the cars before 1980?", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(injured) FROM death", "translated_sql": "( the average of ( injured ) ) that belongs to ( death )", "question": "What is the average number of injuries caused each time?", "label": 1, "remark": "positive"}
{"sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "translated_sql": "( email address ) , ( cell number ) , ( home phone ) that belongs to ( professionals )", "question": "What are the email, cell phone and home phone of each professional?", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "translated_sql": "( the average of ( lifeexpectancy ) ) that belongs to ( country ) , that have ( ( ( continent ) equal to ( africa ) ) and ( ( governmentform ) equal to ( republic ) ) )", "question": "What is the maximum life expectancy in African countries that are republics?", "label": 0, "remark": "logic"}
{"sql": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "translated_sql": "( killed of department ) , ( injured of department ) that belongs to ( ( death ) , and ( ( ship ) satisfied that ( ( caused by ship id of department ) equal to ( id of management ) ) ) ) , that have ( ( tonnage of management ) equal to ( 't' ) )", "question": "What are the death and injury situations caused by the ship with tonnage 't'?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "translated_sql": "( fname of likes ) , ( age of likes ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of likes ) equal to ( stuid of highschooler ) ) ) , and ( ( pets ) satisfied that ( ( petid of area code state ) equal to ( petid of highschooler ) ) ) ) , that have ( ( ( pettype of area code state ) equal to ( 'dog' ) ) and ( ( t1.stuid ) not in ( ( stuid of likes ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of likes ) equal to ( stuid of highschooler ) ) ) , and ( ( pets ) satisfied that ( ( petid of area code state ) equal to ( petid of highschooler ) ) ) ) , that have ( ( pettype of area code state ) equal to ( 'cat' ) ) ) ) )", "question": "What is the first name of every student who has a dog but have a cat?", "label": 0, "remark": "logic"}
{"sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "translated_sql": "( name ) that belongs to ( singer ) , that have ( ( ( birth year ) equal to ( 1948 ) ) or ( ( birth year ) equal to ( 1949 ) ) )", "question": "What are the names of the singers whose birth years are either 1948 or 1949?", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "translated_sql": "( name ) that belongs to ( country ) , that have ( ( ( continent ) equal to ( europe ) ) and ( ( population ) equal to ( 80000 ) ) )", "question": "What are the names of the countries that are in the continent of Europe and have a population less than 80000?", "label": 0, "remark": "logic"}
{"sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "translated_sql": "( citizenship ) , ( the maximum of ( net worth millions ) ) that belongs to ( singer ) , grouped by ( citizenship )", "question": "Show different citizenships and the maximum net worth of singers of each citizenship.", "label": 1, "remark": "positive"}
{"sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "translated_sql": "( airportname ) that belongs to ( airports ) , that have ( ( airportcode ) equal to ( ako ) )", "question": "What is the airport name for airport 'AKO'?", "label": 1, "remark": "positive"}
{"sql": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id", "translated_sql": "( the number of ( all items ) ) , ( fullname of highschooler ) , ( id of highschooler ) that belongs to ( ( model list ) , and ( ( car makers ) satisfied that ( ( maker of likes ) equal to ( id of highschooler ) ) ) ) , grouped by ( id of highschooler )", "question": "How many car models are produced by each maker? List the maker full name.", "label": 0, "remark": "value col"}
{"sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "translated_sql": "( professional id of likes ) , ( role code of likes ) , ( first name of likes ) that belongs to ( ( professionals ) , and ( ( treatments ) satisfied that ( ( professional id of likes ) equal to ( professional id of highschooler ) ) ) ) , grouped by ( professional id of likes ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )", "question": "What are the id, role, and first name of the professionals who have performed two or less treatments?", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( the number of ( all items ) ) , ( student course id ) that belongs to ( transcript contents ) , grouped by ( student course id ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT T1.Year FROM CARS_DATA AS T1 WHERE T1.Weight  >  3000 AND T1.weight  <  4000;", "translated_sql": "( distinct ( year of department ) ) that belongs to ( ( cars data ) ) , that have ( ( ( weight of department ) greater than ( 3000 ) ) and ( ( weight of department ) less than ( 4000 ) ) )", "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000?", "label": 1, "remark": "positive"}
{"sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "translated_sql": "( first name ) , ( middle name ) , ( last name ) that belongs to ( students ) , ordered by ( ( date first registered ) in ascending order ) , limited to the top ( 1 )", "question": "Who is the first student to register? List the first name, middle name and last name.", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;", "translated_sql": "( makeid of management ) , ( make of management ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of department ) equal to ( makeid of management ) ) ) ) , that have ( ( ( horsepower of department ) greater than ( the minimum of ( horsepower ) ) that belongs to ( cars data ) ) and ( ( cylinders of department ) less than or equal to ( 3 ) ) )", "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.", "label": 1, "remark": "positive"}
{"sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2", "translated_sql": "( nationality ) that belongs to ( people ) , grouped by ( nationality ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )", "question": "What are the nationalities that are shared by at least two people?", "label": 1, "remark": "positive"}
{"sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'", "translated_sql": "( section description ) that belongs to ( sections ) , that have ( ( section name ) equal to ( 'h' ) )", "question": "What is the description for the section named h?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code", "translated_sql": "( property type description of highschooler ) that belongs to ( ( properties ) , and ( ( ref property types ) satisfied that ( ( property type code of likes ) equal to ( property type code of highschooler ) ) ) ) , grouped by ( property type code of likes )", "question": "Show the property type descriptions of properties.", "label": 0, "remark": "logic"}
{"sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "translated_sql": "( name ) , ( age ) , ( weight ) that belongs to ( dogs ) , that have ( ( abandoned yn ) equal to ( 1 ) )", "question": "What are the dog name, age and weight of the dogs that were not abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "label": 0, "remark": "logic"}
{"sql": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "translated_sql": "( the minimum of ( version number ) ) , ( template type code ) that belongs to ( templates )", "question": "Return the highest version number, along with its corresponding template type code.", "label": 0, "remark": "logic"}
{"sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id", "translated_sql": "( first name ) that belongs to ( students ) , that have ( ( current address id ) not equal to ( permanent address id ) )", "question": "What is the first name of the student whose permanent address is different from his or her current one?", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(Earnings) FROM poker_player", "translated_sql": "( the average of ( earnings ) ) that belongs to ( poker player )", "question": "What is the total earnings of poker players?", "label": 0, "remark": "logic"}
{"sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "translated_sql": "( the number of ( distinct ( department id ) ) ) that belongs to ( degree programs )", "question": "How many different departments offer degrees?", "label": 1, "remark": "positive"}
{"sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "translated_sql": "( language ) , ( the number of ( all items ) ) that belongs to ( tv channel ) , grouped by ( language ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( 1 )", "question": "List the language used least number of TV Channel. List language and number of TV Channel.", "label": 1, "remark": "positive"}
{"sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( country code ) that belongs to ( players ) , grouped by ( country code ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the code of the country with the most players?", "label": 1, "remark": "positive"}
{"sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "translated_sql": "( first name ) , ( middle name ) , ( last name ) that belongs to ( students ) , ordered by ( ( date first registered ) in ascending order ) , limited to the top ( 1 )", "question": "What is the first, middle, and last name of the first student to register?", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "translated_sql": "( name ) that belongs to ( people ) , that have ( ( people_id ) not in ( ( people id ) that belongs to ( poker player ) ) )", "question": "List the names of people that are not poker players.", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'", "translated_sql": "( petid of management ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of department ) equal to ( stuid of management ) ) ) ) , that have ( ( lname of department ) equal to ( 'smith' ) )", "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( department name of highschooler ) , ( department id of likes ) that belongs to ( ( degree programs ) , and ( ( departments ) satisfied that ( ( department id of likes ) equal to ( department id of highschooler ) ) ) ) , grouped by ( department id of likes ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "For each department id, what is the name of the department with the least number of degrees", "label": 0, "remark": "logic"}
{"sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( winner name ) , ( winner rank points ) that belongs to ( matches ) , grouped by ( winner name ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Find the name and rank points of the winner who won the most times.", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "translated_sql": "( distinct ( course name of department ) ) that belongs to ( ( courses ) , and ( ( student enrolment courses ) satisfied that ( ( course id of department ) equal to ( course id of management ) ) ) )", "question": "What are all the course names of the courses which ever have students enrolled in?", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "translated_sql": "( distinct ( first name of department ) ) , ( last name of department ) that belongs to ( ( professionals ) join ( ( treatments ) ) ) , that have ( ( cost of treatment ) less than ( the average of ( cost of treatment ) ) that belongs to ( treatments ) )", "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'", "translated_sql": "( distinct ( fname of likes ) ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of likes ) equal to ( stuid of highschooler ) ) ) , and ( ( pets ) satisfied that ( ( petid of area code state ) equal to ( petid of highschooler ) ) ) ) , that have ( ( ( pettype of area code state ) equal to ( 'cat' ) ) or ( ( pettype of area code state ) equal to ( 'dog' ) ) )", "question": "Find the first name of students who have cat or bird pet.", "label": 0, "remark": "value str"}
{"sql": "SELECT count(*) FROM pets WHERE weight  >  10", "translated_sql": "( the number of ( all items ) ) that belongs to ( pets ) , that have ( ( weight ) greater than ( 10 ) )", "question": "How many pets have a greater weight than 10?", "label": 1, "remark": "positive"}
{"sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "translated_sql": "( name ) , ( surfacearea ) that belongs to ( country ) , ordered by ( ( surfacearea ) in descending order ) , limited to the top ( 5 )", "question": "What are the names and areas of countries with the top 5 largest area?", "label": 1, "remark": "positive"}
{"sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "translated_sql": "( course description ) that belongs to ( courses ) , that have ( ( course name ) equal to ( 'math' ) )", "question": "How is the math course described?", "label": 1, "remark": "positive"}
{"sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "translated_sql": "( document id ) that belongs to ( paragraphs ) , grouped by ( document id ) , that have ( ( the number of ( all items ) ) between ( 1 ) and ( 2 ) )", "question": "What is the document id with 1 to 2 paragraphs?", "label": 1, "remark": "positive"}
{"sql": "SELECT max(created) FROM votes WHERE state  =  'CA'", "translated_sql": "( the maximum of ( created ) ) that belongs to ( votes ) , that have ( ( state ) equal to ( 'ca' ) )", "question": "What is last date created of votes from the state 'CA'?", "label": 1, "remark": "positive"}
{"sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( winner name ) , ( winner rank points ) that belongs to ( matches ) , grouped by ( winner name ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the name of the winner who has won the least matches, and how many rank points does this player have?", "label": 0, "remark": "logic"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "translated_sql": "( airline of likes ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of likes ) equal to ( airline of highschooler ) ) ) ) , grouped by ( airline of likes ) , that have ( ( the number of ( all items ) ) less than ( 200 ) )", "question": "Find all airlines that have more than 200 flights.", "label": 0, "remark": "logic"}
{"sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "translated_sql": "( distinct ( name of department ) ) that belongs to ( ( singer ) , and ( ( song ) satisfied that ( ( singer id of department ) equal to ( singer id of management ) ) ) ) , that have ( ( sales of management ) greater than ( 300000 ) )", "question": "what are the different names of the singers that have sales more than 300000?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "translated_sql": "( owner id of likes ) , ( zip code of likes ) that belongs to ( ( owners ) , and ( ( dogs ) satisfied that ( ( owner id of likes ) equal to ( owner id of highschooler ) ) ) , and ( ( treatments ) satisfied that ( ( dog id of highschooler ) equal to ( dog id of area code state ) ) ) ) , grouped by ( owner id of likes ) , ordered by ( ( the sum of ( cost of treatment of area code state ) ) in descending order ) , limited to the top ( 1 )", "question": "Find the owner id and zip code of the owner who spent the least money in total for his or her dogs.", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) FROM AIRLINES", "translated_sql": "( the number of ( all items ) ) that belongs to ( airlines )", "question": "What are the airlines that we have?", "label": 0, "remark": "logic"}
{"sql": "SELECT count(DISTINCT Nationality) FROM people", "translated_sql": "( the number of ( distinct ( nationality ) ) ) that belongs to ( people )", "question": "List distinct nationalities?", "label": 0, "remark": "value col"}
{"sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "translated_sql": "( name ) that belongs to ( country ) , ordered by ( ( population ) in ascending order ) , limited to the top ( 3 )", "question": "What are the names of the nations with the lowest populations?", "label": 0, "remark": "value int"}
{"sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "translated_sql": "( the average of ( loser age ) ) , ( the average of ( winner age ) ) that belongs to ( matches )", "question": "Find the average age of losers and winners of all matches.", "label": 1, "remark": "positive"}
{"sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "translated_sql": "( major ) , ( age ) that belongs to ( student ) , that have ( ( stuid ) not in ( ( stuid of department ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of department ) equal to ( stuid of management ) ) ) , and ( ( pets ) satisfied that ( ( petid of head ) equal to ( petid of management ) ) ) ) , that have ( ( pettype of head ) equal to ( 'cat' ) ) ) )", "question": "Find the major and age of students who do not have a cat pet.", "label": 1, "remark": "positive"}
{"sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "translated_sql": "( name ) , ( capacity ) that belongs to ( stadium ) , ordered by ( ( average ) in descending order ) , limited to the top ( 1 )", "question": "What is the name and capacity for the stadium with highest average attendance?", "label": 1, "remark": "positive"}
{"sql": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1", "translated_sql": "( visitor id of catalog structure ) , ( name of catalogs ) , ( level of membership of catalogs ) that belongs to ( ( visitor ) , and ( ( visit ) satisfied that ( ( id of catalogs ) equal to ( visitor id of catalog structure ) ) ) ) , grouped by ( visitor id of catalog structure ) , ordered by ( ( the sum of ( total spent of catalog structure ) ) in descending order ) , limited to the top ( 1 )", "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( the number of ( all items ) ) , ( student course id ) that belongs to ( transcript contents ) , grouped by ( student course id ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)", "translated_sql": "( name ) that belongs to ( teacher ) , that have ( ( teacher_id ) not in ( ( teacher id ) that belongs to ( course arrange ) ) )", "question": "List the names of teachers who have not been arranged to teach courses.", "label": 1, "remark": "positive"}
{"sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "translated_sql": "( email address ) , ( cell number ) , ( home phone ) that belongs to ( professionals )", "question": "What are the email, and cell phone of each professional?", "label": 0, "remark": "value col"}
{"sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "translated_sql": "( distinct ( model of likes ) ) that belongs to ( ( model list ) , and ( ( car names ) satisfied that ( ( model of likes ) equal to ( model of highschooler ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of highschooler ) equal to ( id of area code state ) ) ) ) , that have ( ( year of area code state ) greater than ( 1980 ) )", "question": "Which distinct car models are the produced after 1970?", "label": 0, "remark": "value int"}
{"sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "translated_sql": "( country code ) that belongs to ( players ) , grouped by ( country code ) , that have ( ( the number of ( all items ) ) greater than ( 50 ) )", "question": "What are the codes of countries with more than 50 players?", "label": 1, "remark": "positive"}
{"sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "translated_sql": "( document id ) that belongs to ( paragraphs ) , that have ( ( paragraph text ) equal to ( 'brazil' ) ), and intersect with ( ( document id ) that belongs to ( paragraphs ) , that have ( ( paragraph text ) equal to ( 'ireland' ) ))", "question": "Show the document id with paragraph text 'Russia' and 'Ireland'.", "label": 0, "remark": "value str"}
{"sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';", "translated_sql": "( countryid of department ) , ( countryname of department ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of department ) equal to ( country of management ) ) ) ) , grouped by ( countryid of department ) , that have ( ( the number of ( all items ) ) greater than ( 3 ) ) and ( countryid of department ) , ( countryname of department ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of department ) equal to ( country of management ) ) ) , and ( ( model list ) satisfied that ( ( id of management ) equal to ( maker of head ) ) ) ) , that have ( ( model of head ) equal to ( 'fiat' ) )", "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3", "translated_sql": "( id of likes ) , ( maker of likes ) that belongs to ( ( car makers ) , and ( ( model list ) satisfied that ( ( id of likes ) equal to ( maker of highschooler ) ) ) ) , grouped by ( id of likes ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) ), and intersect with ( ( id of likes ) , ( maker of likes ) that belongs to ( ( car makers ) , and ( ( model list ) satisfied that ( ( id of likes ) equal to ( maker of highschooler ) ) ) , and ( ( car names ) satisfied that ( ( model of highschooler ) equal to ( model of area code state ) ) ) ) , grouped by ( id of likes ) , that have ( ( the number of ( all items ) ) greater than ( 3 ) ))", "question": "What are the ids and makers of all car makers that produce at least 1 models and make more than 4 cars?", "label": 0, "remark": "value int"}
{"sql": "SELECT count(*) FROM Other_Available_Features", "translated_sql": "( the number of ( all items ) ) that belongs to ( other available features )", "question": "What are the available features are there in total?", "label": 0, "remark": "value col"}
{"sql": "SELECT count(*) FROM conductor", "translated_sql": "( the number of ( all items ) ) that belongs to ( conductor )", "question": "List the names of conductors.", "label": 0, "remark": "value col"}
{"sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "translated_sql": "( the sum of ( tours ) ) , ( ranking date ) that belongs to ( rankings ) , grouped by ( ranking date )", "question": "Find the total number of tours for each ranking date.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( city of department ) that belongs to ( ( airports ) , and ( ( flights ) satisfied that ( ( airportcode of department ) equal to ( sourceairport of management ) ) ) ) , grouped by ( city of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Which city is the most frequent source airport?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"", "translated_sql": "( name of likes ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of likes ) equal to ( countrycode of highschooler ) ) ) ) , that have ( ( language of highschooler ) equal to ( english ) ), and intersect with ( ( name of likes ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of likes ) equal to ( countrycode of highschooler ) ) ) ) , that have ( ( language of highschooler ) equal to ( french ) ))", "question": "What are the names of nations speak both Spanish and French?", "label": 0, "remark": "value str"}
{"sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "translated_sql": "( name of management ) that belongs to ( ( course arrange ) , and ( ( teacher ) satisfied that ( ( teacher id of department ) equal to ( teacher id of management ) ) ) ) , grouped by ( name of management ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )", "question": "Show names of teachers that teach at least two courses.", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2", "translated_sql": "( transcript date of management ) , ( transcript id of department ) that belongs to ( ( transcript contents ) , and ( ( transcripts ) satisfied that ( ( transcript id of department ) equal to ( transcript id of management ) ) ) ) , grouped by ( transcript id of department ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )", "question": "What is the date and id of the transcript with at least 2 courses listed?", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "translated_sql": "( the average of ( gnp ) ) , ( the sum of ( population ) ) that belongs to ( country ) , that have ( ( governmentform ) equal to ( us territory ) )", "question": "Give the mean GNP and total population of nations which are considered US territory.", "label": 1, "remark": "positive"}
{"sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id", "translated_sql": "( first name ) that belongs to ( students ) , that have ( ( current address id ) not equal to ( permanent address id ) )", "question": "Whose permanent address is different from his or her current address? List his or her first name.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'", "translated_sql": "( fname of department ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of department ) equal to ( stuid of management ) ) ) , and ( ( pets ) satisfied that ( ( petid of head ) equal to ( petid of management ) ) ) ) , that have ( ( pettype of head ) equal to ( 'cat' ) ), and intersect with ( ( fname of department ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of department ) equal to ( stuid of management ) ) ) , and ( ( pets ) satisfied that ( ( petid of head ) equal to ( petid of management ) ) ) ) , that have ( ( pettype of head ) equal to ( 'dog' ) ))", "question": "Find the name of students who have both cat and dog pets.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM poker_player", "translated_sql": "( the number of ( all items ) ) that belongs to ( poker player )", "question": "How many poker players are there?", "label": 1, "remark": "positive"}
{"sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "translated_sql": "( song name ) , ( song release year ) that belongs to ( singer ) , ordered by ( ( age ) ) , limited to the top ( 1 )", "question": "What are the names and release years for all the songs of the youngest singer?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "translated_sql": "( the number of ( distinct ( language ) ) ) that belongs to ( countrylanguage )", "question": "What is the number of distinct languages used around the world?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "translated_sql": "( episode of highschooler ) that belongs to ( ( tv channel ) , and ( ( tv series ) satisfied that ( ( id of likes ) equal to ( channel of highschooler ) ) ) ) , that have ( ( series name of likes ) equal to ( sky radio ) )", "question": "List the Episode of all  TV series showed on TV Channel without series name \"Sky Radio\".", "label": 0, "remark": "logic"}
{"sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "translated_sql": "( the maximum of ( share ) ) , ( the minimum of ( share ) ) that belongs to ( performance ) , that have ( ( type ) not equal to ( live final ) )", "question": "What are the maximum share of performances whose type is not \"Live final\".", "label": 0, "remark": "value col"}
{"sql": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "translated_sql": "( name ) , ( population ) , ( headofstate ) that belongs to ( country ) , ordered by ( ( surfacearea ) in descending order ) , limited to the top ( 1 )", "question": "Give the name, population, and head of state for the country that has the largest area.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( flights ) , that have ( ( destairport ) equal to ( ato ) )", "question": "Count the number of flights into ATO.", "label": 1, "remark": "positive"}
{"sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "translated_sql": "( the sum of ( population ) ) , ( the average of ( lifeexpectancy ) ) , ( continent ) that belongs to ( country ) , grouped by ( continent ) , that have ( ( the average of ( lifeexpectancy ) ) less than ( 72 ) )", "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?", "label": 1, "remark": "positive"}
{"sql": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "translated_sql": "( language ) , ( countrycode ) , ( the maximum of ( percentage ) ) that belongs to ( countrylanguage ) , grouped by ( countrycode )", "question": "What is the language spoken by the smallest percentage of people in each country?", "label": 0, "remark": "logic"}
{"sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "translated_sql": "( name ) that belongs to ( conductor ) , ordered by ( ( year of work ) in descending order )", "question": "What are the names of conductors, sorted ascending by the number of years they have worked?", "label": 0, "remark": "logic"}
{"sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1", "translated_sql": "( name of department ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , grouped by ( name of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Give the name of the nation that uses the greatest amount of languages.", "label": 1, "remark": "positive"}
{"sql": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 90000", "translated_sql": "( name ) that belongs to ( city ) , that have ( ( population ) between ( 160000 ) and ( 90000 ) )", "question": "Return the names of cities that have a population between 160000 and 900000.", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "translated_sql": "( the average of ( earnings of management ) ) that belongs to ( ( people ) , and ( ( poker player ) satisfied that ( ( people id of department ) equal to ( people id of management ) ) ) ) , that have ( ( height of department ) greater than ( 200 ) )", "question": "Give average earnings of poker players who are taller than 200.", "label": 1, "remark": "positive"}
{"sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "translated_sql": "( air date ) that belongs to ( tv series ) , that have ( ( episode ) equal to ( a love of a lifetime ) )", "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(capacity) ,  max(capacity) FROM stadium", "translated_sql": "( the average of ( capacity ) ) , ( the maximum of ( capacity ) ) that belongs to ( stadium )", "question": "What is the average and the maximum capacity of all stadiums?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "translated_sql": "( country code of department ) , ( first name of department ) that belongs to ( ( players ) , and ( ( rankings ) satisfied that ( ( player id of department ) equal to ( player id of management ) ) ) ) , ordered by ( ( tours of management ) in descending order ) , limited to the top ( 1 )", "question": "Find the first name and country code of the player who did the most number of tours.", "label": 1, "remark": "positive"}
{"sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "translated_sql": "( airportcode ) , ( airportname ) that belongs to ( airports ) , that have ( ( city ) equal to ( anthony ) )", "question": "List the airport code and name in the city of Anthony.", "label": 1, "remark": "positive"}
{"sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "translated_sql": "( the number of ( distinct ( continent ) ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of likes ) equal to ( countrycode of highschooler ) ) ) ) , that have ( ( language of highschooler ) equal to ( chinese ) )", "question": "What is the number of distinct continents where English is spoken?", "label": 0, "remark": "value str"}
{"sql": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008", "translated_sql": "( the number of ( all items ) ) that belongs to ( museum ) , that have ( ( ( open year ) greater than ( 2013 ) ) or ( ( open year ) less than ( 2008 ) ) )", "question": "How many museums were opened after 2013 or before 2008?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( car makers ) , and ( ( countries ) satisfied that ( ( country of department ) equal to ( countryid of management ) ) ) ) , that have ( ( countryname of management ) equal to ( 'france' ) )", "question": "How many car makers are there in france?", "label": 1, "remark": "positive"}
{"sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1", "translated_sql": "( city ) that belongs to ( employee ) , that have ( ( age ) less than ( 30 ) ) , grouped by ( city ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )", "question": "Find the cities that have more than one employee under age 30.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1", "translated_sql": "( name of likes ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of likes ) equal to ( countrycode of highschooler ) ) ) ) , grouped by ( name of likes ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Give the name of the nation that uses the smallest amount of languages.", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) FROM teacher", "translated_sql": "( the number of ( all items ) ) that belongs to ( teacher )", "question": "How many teachers are there?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )", "translated_sql": "( the number of ( all items ) ) that belongs to ( owners ) , that have ( ( owner_id ) not in ( ( owner id ) that belongs to ( dogs ) ) )", "question": "Find the number of owners who do not own any dogs at this moment.", "label": 1, "remark": "positive"}
{"sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "translated_sql": "( role code ) , ( street ) , ( city ) , ( state ) that belongs to ( professionals ) , that have ( ( city ) like ( '%west%' ) )", "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "label": 1, "remark": "positive"}
{"sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType", "translated_sql": "( the maximum of ( weight ) ) , ( pettype ) that belongs to ( pets ) , grouped by ( pettype )", "question": "Find the average weight for each type of pet. List the average weight and pet type.", "label": 0, "remark": "value col"}
{"sql": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 90000", "translated_sql": "( name ) that belongs to ( city ) , that have ( ( population ) between ( 160000 ) and ( 90000 ) )", "question": "Return the names of cities that have a population between 180000 and 800000.", "label": 0, "remark": "value int"}
{"sql": "SELECT count(*) FROM Courses", "translated_sql": "( the number of ( all items ) ) that belongs to ( courses )", "question": "How many courses in average are listed?", "label": 0, "remark": "logic"}
{"sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( country code ) that belongs to ( players ) , grouped by ( country code ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "find the code of the country where has the greatest number of players.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM employee", "translated_sql": "( the number of ( all items ) ) that belongs to ( employee )", "question": "Count the number of employees", "label": 1, "remark": "positive"}
{"sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "translated_sql": "( first name ) that belongs to ( professionals ) and ( first name ) that belongs to ( owners ), and except that ( ( name ) that belongs to ( dogs ))", "question": "Find the last names that are used for professionals or owners but are not used as dog names.", "label": 0, "remark": "value col"}
{"sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "translated_sql": "( earnings ) that belongs to ( poker player ) , ordered by ( ( earnings ) in descending order )", "question": "List the earnings of poker players in ascending order.", "label": 0, "remark": "logic"}
{"sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1", "translated_sql": "( city ) that belongs to ( employee ) , that have ( ( age ) less than ( 30 ) ) , grouped by ( city ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )", "question": "Find the cities that have more than one employee under age 25.", "label": 0, "remark": "value int"}
{"sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "translated_sql": "( the number of ( distinct ( department id ) ) ) that belongs to ( degree programs )", "question": "How many departments do not offer any degree?", "label": 0, "remark": "logic"}
{"sql": "SELECT count(DISTINCT Nationality) FROM conductor", "translated_sql": "( the number of ( distinct ( nationality ) ) ) that belongs to ( conductor )", "question": "How many conductors do we have?", "label": 0, "remark": "value col"}
{"sql": "SELECT count(*) FROM Documents", "translated_sql": "( the number of ( all items ) ) that belongs to ( documents )", "question": "Count the number of distinct documents.", "label": 0, "remark": "logic"}
{"sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "translated_sql": "( distinct ( maker of department ) ) that belongs to ( ( car makers ) , and ( ( model list ) satisfied that ( ( id of department ) equal to ( maker of management ) ) ) , and ( ( car names ) satisfied that ( ( model of management ) equal to ( model of head ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of head ) equal to ( id of trip ) ) ) ) , that have ( ( year of trip ) equal to ( '1970' ) )", "question": "What is the name of the different car makers who produced a car in 1970?", "label": 1, "remark": "positive"}
{"sql": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")", "translated_sql": "( the number of ( all items ) ) that belongs to ( \"l ( name of likes ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of likes ) equal to ( countrycode of highschooler ) ) ) ) , that have ( ( language of highschooler ) equal to ( english ) ), and intersect with ( ( name of likes ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of likes ) equal to ( countrycode of highschooler ) ) ) ) , that have ( ( language of highschooler ) equal to ( dutch ) )) r\" )", "question": "What are the names of the countries speak both English and Dutch?", "label": 0, "remark": "value col"}
{"sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "translated_sql": "( winner name ) , ( loser name ) that belongs to ( matches ) , ordered by ( ( minutes ) in descending order ) , limited to the top ( 1 )", "question": "What are the names of the winner and loser who played in the longest match?", "label": 1, "remark": "positive"}
{"sql": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC", "translated_sql": "( name ) that belongs to ( visitor ) , that have ( ( level of membership ) greater than ( 4 ) ) , ordered by ( ( level of membership ) in descending order )", "question": "Find the names of the visitors whose membership level is higher than 3, and order the results by the level from high to low.", "label": 0, "remark": "value int"}
{"sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "translated_sql": "( student id ) that belongs to ( friend ), and intersect with ( ( liked id ) that belongs to ( likes ))", "question": "What are the ids of students who both have friends and are liked?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "translated_sql": "( cost of treatment of department ) , ( treatment type description of management ) that belongs to ( ( treatments ) , and ( ( treatment types ) satisfied that ( ( treatment type code of department ) equal to ( treatment type code of management ) ) ) )", "question": "What are the cost and treatment type description of each treatment?", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "translated_sql": "( name ) that belongs to ( singer ) , ordered by ( ( net worth millions ) in ascending order )", "question": "List the name of singers in ascending order of net worth.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(DISTINCT pettype) FROM pets", "translated_sql": "( the number of ( distinct ( pettype ) ) ) that belongs to ( pets )", "question": "List different types of pet?", "label": 0, "remark": "value col"}
{"sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1", "translated_sql": "( citizenship ) that belongs to ( singer ) , grouped by ( citizenship ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Please show the most common citizenship of singers.", "label": 1, "remark": "positive"}
{"sql": "SELECT COUNT(*) FROM ( SELECT T1.CountryId ,  COUNT(*) FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >  2 )", "translated_sql": "( the number of ( all items ) ) that belongs to ( \"l ( countryid of likes ) , ( the number of ( all items ) ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of likes ) equal to ( country of highschooler ) ) ) ) , grouped by ( countryid of likes ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) ) r\" )", "question": "What is the number of countries with more than 3 car makers?", "label": 0, "remark": "value int"}
{"sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "translated_sql": "( the number of ( distinct ( department id ) ) ) that belongs to ( degree programs )", "question": "What are the different departments offering degrees?", "label": 0, "remark": "value col"}
{"sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( departments ) , and ( ( degree programs ) satisfied that ( ( department id of department ) equal to ( department id of management ) ) ) ) , that have ( ( department name of department ) equal to ( 'engineer' ) )", "question": "How many degrees does the engineering department have?", "label": 1, "remark": "positive"}
{"sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "translated_sql": "( winner name ) that belongs to ( matches ) , that have ( ( tourney name ) equal to ( 'australian open' ) ) , ordered by ( ( winner rank points ) in descending order ) , limited to the top ( 1 )", "question": "What is the name of the winner with the least rank points who participated in the Australian Open tournament?", "label": 0, "remark": "logic"}
{"sql": "SELECT Maker ,  Model FROM MODEL_LIST;", "translated_sql": "( maker ) , ( model ) that belongs to ( model list )", "question": "What are the makers and models?", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;", "translated_sql": "( the average of ( horsepower ) ) that belongs to ( cars data ) , that have ( ( year ) less than ( 1980 ) )", "question": "What is the average horsepower for all cards produced before 1980?", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "translated_sql": "( name ) that belongs to ( conductor ) , ordered by ( ( year of work ) in descending order ) , limited to the top ( 1 )", "question": "What is the name of the conductor who has worked the greatest number of years?", "label": 1, "remark": "positive"}
{"sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "translated_sql": "( name ) that belongs to ( stadium ), and except that ( ( name of highschooler ) that belongs to ( ( concert ) , and ( ( stadium ) satisfied that ( ( stadium id of likes ) equal to ( stadium id of highschooler ) ) ) ) , that have ( ( year of likes ) equal to ( 2014 ) ))", "question": "Show names for all stadiums except for stadiums having a concert before year 2014.", "label": 0, "remark": "logic"}
{"sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC", "translated_sql": "( name ) , ( country ) , ( age ) that belongs to ( singer ) , ordered by ( ( age ) in descending order )", "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.", "label": 1, "remark": "positive"}
{"sql": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;", "translated_sql": "( the number of ( all items ) ) , ( fullname of management ) , ( id of management ) that belongs to ( ( model list ) , and ( ( car makers ) satisfied that ( ( maker of department ) equal to ( id of management ) ) ) ) , grouped by ( id of management )", "question": "How many car models are produced by each maker? List the count and the maker full name.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( student id of department ) equal to ( id of management ) ) ) ) , that have ( ( name of management ) equal to ( kyle ) )", "question": "How many likes does Kyle have?", "label": 1, "remark": "positive"}
{"sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "translated_sql": "( record company ) that belongs to ( orchestra ) , grouped by ( record company ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "List the record company shared by the most number of orchestras.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "translated_sql": "( treatment type description of department ) that belongs to ( ( treatment types ) , and ( ( treatments ) satisfied that ( ( treatment type code of department ) equal to ( treatment type code of management ) ) ) ) , grouped by ( treatment type code of department ) , ordered by ( ( the sum of ( cost of treatment ) ) in ascending order ) , limited to the top ( 1 )", "question": "Give me the description of the treatment type whose total cost is the lowest.", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "translated_sql": "( name of management ) , ( the number of ( all items ) ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( student id of department ) equal to ( id of management ) ) ) ) , grouped by ( student id of department )", "question": "What are the names of high schoolers who have likes, and how many likes does each have?", "label": 1, "remark": "positive"}
{"sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "translated_sql": "( first name ) , ( last name ) that belongs to ( players ) , that have ( ( hand ) equal to ( 'l' ) ) , ordered by ( ( birth date ) )", "question": "What are the full names of all right handed players, in order of birth date?", "label": 0, "remark": "value str"}
{"sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "translated_sql": "( transcript date ) , ( other details ) that belongs to ( transcripts ) , ordered by ( ( transcript date ) in ascending order ) , limited to the top ( 1 )", "question": "When is the first transcript released? List the date and details.", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "translated_sql": "( make of management ) , ( year of department ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of department ) equal to ( makeid of management ) ) ) ) , that have ( ( year of department ) equal to ( the minimum of ( year ) ) that belongs to ( cars data ) )", "question": "Find the make and production time of the cars that were produced in the earliest year?", "label": 1, "remark": "positive"}
{"sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "translated_sql": "( hometown ) that belongs to ( teacher ) , grouped by ( hometown ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "List the most common hometown of teachers.", "label": 1, "remark": "positive"}
{"sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")", "translated_sql": "( the sum of ( population ) ) that belongs to ( country ) , that have ( ( name ) not in ( ( name of department ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( language of management ) equal to ( english ) ) ) )", "question": "How many people live in countries that do not speak English?", "label": 1, "remark": "positive"}
{"sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id", "translated_sql": "( student id ) , ( the number of ( all items ) ) that belongs to ( friend ) , grouped by ( student id )", "question": "How many friends in average does each student have?", "label": 0, "remark": "logic"}
{"sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "translated_sql": "( city ) , ( country ) that belongs to ( airports ) , that have ( ( airportname ) equal to ( alton ) )", "question": "Which city is the Alton airport at?", "label": 0, "remark": "value col"}
{"sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "translated_sql": "( distinct ( model of management ) ) that belongs to ( ( car names ) , and ( ( model list ) satisfied that ( ( model of department ) equal to ( model of management ) ) ) , and ( ( car makers ) satisfied that ( ( maker of management ) equal to ( id of head ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of department ) equal to ( id of trip ) ) ) ) , that have ( ( ( fullname of head ) equal to ( 'general motors' ) ) or ( ( weight of trip ) greater than ( 3500 ) ) )", "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'", "translated_sql": "( name of likes ) , ( date of likes ) that belongs to ( ( battle ) , and ( ( ship ) satisfied that ( ( id of likes ) equal to ( lost in battle of highschooler ) ) ) ) , that have ( ( name of highschooler ) equal to ( 'lettice' ) ), and intersect with ( ( name of likes ) , ( date of likes ) that belongs to ( ( battle ) , and ( ( ship ) satisfied that ( ( id of likes ) equal to ( lost in battle of highschooler ) ) ) ) , that have ( ( name of highschooler ) equal to ( 'hms atalanta' ) ))", "question": "List the name and date the battle that has lost the ship named 'Lettice' or the ship named 'HMS Atalanta'", "label": 0, "remark": "logic"}
{"sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "translated_sql": "( song name ) that belongs to ( singer ) , that have ( ( age ) greater than ( the average of ( age ) ) that belongs to ( singer ) )", "question": "What are all the song names by singers who are younger than average?", "label": 0, "remark": "logic"}
{"sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "translated_sql": "( student id ) that belongs to ( friend ), and intersect with ( ( liked id ) that belongs to ( likes ))", "question": "Show the ids of high schoolers who have friends but are not also liked by someone else.", "label": 0, "remark": "logic"}
{"sql": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")", "translated_sql": "( name ) that belongs to ( country ) , that have ( ( ( continent ) equal to ( africa ) ) and ( ( population ) less than ( the maximum of ( population ) ) that belongs to ( country ) , that have ( ( continent ) equal to ( asia ) ) ) )", "question": "What are the African countries that have a  population less than any country in Asia?", "label": 1, "remark": "positive"}
{"sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\"", "translated_sql": "( title ) that belongs to ( cartoon ) , that have ( ( ( directed by ) equal to ( ben jones ) ) or ( ( directed by ) equal to ( brandon vietti ) ) )", "question": "What are the titles of all cartoons directed by Ben Jones?", "label": 0, "remark": "value str"}
{"sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "translated_sql": "( major record format ) that belongs to ( orchestra ) , grouped by ( major record format ) , ordered by ( ( the number of ( all items ) ) in ascending order )", "question": "Please show the record formats of orchestras in descending order of count.", "label": 0, "remark": "logic"}
{"sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "translated_sql": "( name ) , ( birth date ) that belongs to ( people ) , ordered by ( ( name ) in ascending order )", "question": "List the names and birth dates of people in descending alphabetical order of name.", "label": 0, "remark": "logic"}
{"sql": "SELECT country ,  count(*) FROM singer GROUP BY country", "translated_sql": "( country ) , ( the number of ( all items ) ) that belongs to ( singer ) , grouped by ( country )", "question": "Show all countries and the number of singers in each country.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(DISTINCT current_address_id) FROM Students", "translated_sql": "( the number of ( distinct ( current address id ) ) ) that belongs to ( students )", "question": "How many different addresses do the students currently live?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10", "translated_sql": "( airline of department ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of department ) equal to ( airline of management ) ) ) ) , grouped by ( airline of department ) , that have ( ( the number of ( all items ) ) greater than ( 10 ) )", "question": "Which airlines have at least 10 flights?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "translated_sql": "( lname of department ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of department ) equal to ( stuid of management ) ) ) , and ( ( pets ) satisfied that ( ( petid of head ) equal to ( petid of management ) ) ) ) , that have ( ( ( pet age of head ) equal to ( 3 ) ) and ( ( pettype of head ) equal to ( 'cat' ) ) )", "question": "What is the last name of the student who has a cat that is 3 years old?", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit", "translated_sql": "( the average of ( num of ticket ) ) , ( the maximum of ( num of ticket ) ) that belongs to ( visit )", "question": "What are the average and maximum number of tickets bought in all visits?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( airline of highschooler ) equal to ( uid of likes ) ) ) ) , that have ( ( ( airline of likes ) equal to ( united airlines ) ) and ( ( sourceairport of highschooler ) equal to ( ahd ) ) )", "question": "How many 'JetBlue Airlines' flights depart from Airport 'AHD'?", "label": 0, "remark": "value col"}
{"sql": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "translated_sql": "( name ) , ( surfacearea ) , ( indepyear ) that belongs to ( country ) , ordered by ( ( population ) ) , limited to the top ( 1 )", "question": "What are the name, independence year, and surface area of the country with the smallest population?", "label": 1, "remark": "positive"}
{"sql": "SELECT Weight FROM CARS_DATA WHERE Cylinders  =  4 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1", "translated_sql": "( weight ) that belongs to ( cars data ) , that have ( ( ( cylinders ) equal to ( 4 ) ) and ( ( year ) equal to ( 1974 ) ) ) , ordered by ( ( weight ) in ascending order ) , limited to the top ( 1 )", "question": "What is the maximum weight of the car with 8 cylinders produced in 1974?", "label": 0, "remark": "logic"}
{"sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "translated_sql": "( name ) , ( population ) , ( lifeexpectancy ) that belongs to ( country ) , that have ( ( continent ) equal to ( asia ) ) , ordered by ( ( surfacearea ) in descending order ) , limited to the top ( 1 )", "question": "What are the name, population, and life expectancy of the largest Africa country by land?", "label": 0, "remark": "value str"}
{"sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( documents ) , and ( ( templates ) satisfied that ( ( template id of department ) equal to ( template id of management ) ) ) ) , that have ( ( template type code of management ) equal to ( 'ppt' ) )", "question": "How many documents are using the template with type code 'PPT'?", "label": 1, "remark": "positive"}
{"sql": "SELECT max(charge_amount) FROM Charges", "translated_sql": "( the maximum of ( charge amount ) ) that belongs to ( charges )", "question": "How much does the most expensive charge type costs?", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "translated_sql": "( the average of ( grade ) ) that belongs to ( highschooler ) , that have ( ( id ) in ( ( student id of department ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of department ) equal to ( id of management ) ) ) ) ) )", "question": "Find the average grade of all students who have some friends.", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "translated_sql": "( name ) that belongs to ( singer ) , that have ( ( citizenship ) not equal to ( france ) )", "question": "What are the names of the singers who are not French citizens?", "label": 1, "remark": "positive"}
{"sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "translated_sql": "( petid ) , ( weight ) that belongs to ( pets ) , that have ( ( pet age ) greater than ( 1 ) )", "question": "Find the id and weight of all pets whose age is older than 10.", "label": 0, "remark": "value int"}
{"sql": "SELECT document_id ,  document_name ,  document_description FROM Documents", "translated_sql": "( document id ) , ( document name ) , ( document description ) that belongs to ( documents )", "question": "What are the ids, names, and descriptions for all documents?", "label": 1, "remark": "positive"}
{"sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "translated_sql": "( template type code ) that belongs to ( templates ) , grouped by ( template type code ) , that have ( ( the number of ( all items ) ) less than ( 3 ) )", "question": "What are the codes of template types that have more than 3 templates?", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) FROM players", "translated_sql": "( the number of ( all items ) ) that belongs to ( players )", "question": "Find the names of players.", "label": 0, "remark": "value col"}
{"sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "translated_sql": "( language of management ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( governmentform of department ) equal to ( republic ) ) , grouped by ( language of management ) , that have ( ( the number of ( all items ) ) equal to ( 1 ) )", "question": "Which languages are spoken by only one country in republic governments?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( student id of department ) , ( first name of department ) , ( middle name of department ) , ( last name of department ) , ( the number of ( all items ) ) , ( student id of department ) that belongs to ( ( students ) , and ( ( student enrolment ) satisfied that ( ( student id of department ) equal to ( student id of management ) ) ) ) , grouped by ( student id of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.", "label": 1, "remark": "positive"}
{"sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company", "translated_sql": "( record company ) , ( the number of ( all items ) ) that belongs to ( orchestra ) , grouped by ( record company )", "question": "Please show the different record companies and the corresponding number of orchestras.", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "translated_sql": "( name of management ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of department ) equal to ( id of management ) ) ) ), and intersect with ( ( name of management ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( liked id of department ) equal to ( id of management ) ) ) ))", "question": "Show name of all students who have some friends and also are liked by someone else.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "translated_sql": "( the number of ( distinct ( degree summary name ) ) ) that belongs to ( degree programs )", "question": "How many different degree names are offered?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( airline of management ) equal to ( uid of department ) ) ) ) , that have ( ( ( airline of department ) equal to ( united airlines ) ) and ( ( destairport of management ) equal to ( asy ) ) )", "question": "How many 'United Airlines' flights go to Airport 'ASY'?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "translated_sql": "( flightno of department ) that belongs to ( ( flights ) , and ( ( airlines ) satisfied that ( ( uid of management ) equal to ( airline of department ) ) ) ) , that have ( ( airline of management ) equal to ( united airlines ) )", "question": "Which flight numbers correspond to United Airlines flights?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1", "translated_sql": "( name of department ) that belongs to ( ( conductor ) , and ( ( orchestra ) satisfied that ( ( conductor id of department ) equal to ( conductor id of management ) ) ) ) , grouped by ( conductor id of management ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the name of the conductor who has conducted the most orchestras?", "label": 1, "remark": "positive"}
{"sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "translated_sql": "( location ) , ( name ) that belongs to ( stadium ) , that have ( ( capacity ) between ( 5000 ) and ( 10000 ) )", "question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "label": 1, "remark": "positive"}
{"sql": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "translated_sql": "( the sum of ( surfacearea ) ) that belongs to ( country ) , that have ( ( region ) equal to ( caribbean ) )", "question": "How much surface area do the countires in the Carribean cover together?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "translated_sql": "( last name of department ) that belongs to ( ( owners ) , and ( ( dogs ) satisfied that ( ( owner id of department ) equal to ( owner id of management ) ) ) ) , that have ( ( age of management ) equal to ( the maximum of ( age ) ) that belongs to ( dogs ) )", "question": "List the last name of the owner owning the youngest dog.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "translated_sql": "( flightno of department ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( sourceairport of department ) equal to ( airportcode of management ) ) ) ) , that have ( ( city of management ) equal to ( aberdeen ) )", "question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM Courses", "translated_sql": "( the number of ( all items ) ) that belongs to ( courses )", "question": "How many courses in total are listed?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "translated_sql": "( fname of department ) , ( age of department ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of department ) equal to ( stuid of management ) ) ) , and ( ( pets ) satisfied that ( ( petid of head ) equal to ( petid of management ) ) ) ) , that have ( ( ( pettype of head ) equal to ( 'dog' ) ) and ( ( t1.stuid ) not in ( ( stuid of department ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of department ) equal to ( stuid of management ) ) ) , and ( ( pets ) satisfied that ( ( petid of head ) equal to ( petid of management ) ) ) ) , that have ( ( pettype of head ) equal to ( 'cat' ) ) ) ) )", "question": "What is the first name of every student who has a dog but does not have a cat?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "translated_sql": "( the number of ( distinct ( degree summary name ) ) ) that belongs to ( degree programs )", "question": "How many different degrees are offered?", "label": 1, "remark": "positive"}
{"sql": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"", "translated_sql": "( grade ) that belongs to ( highschooler ) , that have ( ( name ) equal to ( kyle ) )", "question": "Return the grade for the high schooler named Kyle.", "label": 1, "remark": "positive"}
{"sql": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "translated_sql": "( language ) , ( countrycode ) , ( the maximum of ( percentage ) ) that belongs to ( countrylanguage ) , grouped by ( countrycode )", "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )", "translated_sql": "( the number of ( all items ) ) that belongs to ( professionals ) , that have ( ( professional_id ) not in ( ( professional id ) that belongs to ( treatments ) ) )", "question": "How many professionals did not operate any treatment on dogs?", "label": 1, "remark": "positive"}
{"sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "translated_sql": "( package option ) that belongs to ( tv channel ) , that have ( ( id ) not in ( ( channel ) that belongs to ( cartoon ) , that have ( ( directed by ) equal to ( 'ben jones' ) ) ) )", "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "translated_sql": "( template type code of likes ) , ( the number of ( all items ) ) that belongs to ( ( templates ) , and ( ( documents ) satisfied that ( ( template id of likes ) equal to ( template id of highschooler ) ) ) ) , grouped by ( template type code of likes )", "question": "What are the different template type codes, and how many documents use each type in average?", "label": 0, "remark": "logic"}
{"sql": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "translated_sql": "( continent ) that belongs to ( country ) , that have ( ( name ) equal to ( anguilla ) )", "question": "What is the continent name which Aruba belongs to?", "label": 0, "remark": "value str"}
{"sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "translated_sql": "( language ) , ( the number of ( all items ) ) that belongs to ( tv channel ) , grouped by ( language )", "question": "List each language and the number of TV Channels using it.", "label": 1, "remark": "positive"}
{"sql": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "translated_sql": "( airportname ) that belongs to ( airports ) , that have ( ( city ) equal to ( aberdeen ) )", "question": "What are airport names at City 'Aberdeen'?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( destairport of department ) equal to ( airportcode of management ) ) ) ) , that have ( ( ( city of management ) equal to ( aberdeen ) ) or ( ( city of management ) equal to ( abilene ) ) )", "question": "Find the number of flights landing in the city of Aberdeen or Abilene.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(DISTINCT Nationality) FROM people", "translated_sql": "( the number of ( distinct ( nationality ) ) ) that belongs to ( people )", "question": "How many distinct nationalities are there?", "label": 1, "remark": "positive"}
{"sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "translated_sql": "( country ) , ( the number of ( all items ) ) that belongs to ( tv channel ) , grouped by ( country ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "translated_sql": "( distinct ( breed code ) ) , ( size code ) that belongs to ( dogs )", "question": "What are all the possible breed type and size type combinations?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id ORDER BY T2.Capacity DESC LIMIT 1", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( concert ) , and ( ( stadium ) satisfied that ( ( stadium id of department ) equal to ( stadium id of management ) ) ) ) , ordered by ( ( capacity of management ) in descending order ) , limited to the top ( 1 )", "question": "Find the number of concerts happened in the stadium with the highest capacity.", "label": 1, "remark": "positive"}
{"sql": "SELECT COUNT(*) FROM ( SELECT T1.CountryId ,  COUNT(*) FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >  2 );", "translated_sql": "( the number of ( all items ) ) that belongs to ( \"l ( countryid of department ) , ( the number of ( all items ) ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of department ) equal to ( country of management ) ) ) ) , grouped by ( countryid of department ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) ) r\" )", "question": "How many countries has more than 2 car makers?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "translated_sql": "( language of management ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( name of department ) equal to ( aruba ) ) , ordered by ( ( percentage ) in descending order ) , limited to the top ( 1 )", "question": "What language is predominantly spoken in Aruba?", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype", "translated_sql": "( the average of ( pet age ) ) , ( the maximum of ( pet age ) ) , ( pettype ) that belongs to ( pets ) , grouped by ( pettype )", "question": "Find the average and maximum age for each type of pet.", "label": 1, "remark": "positive"}
{"sql": "SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980 ORDER BY mpg DESC LIMIT 1;", "translated_sql": "( mpg ) that belongs to ( cars data ) , that have ( ( ( cylinders ) equal to ( 8 ) ) or ( ( year ) less than ( 1980 ) ) ) , ordered by ( ( mpg ) in descending order ) , limited to the top ( 1 )", "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980?", "label": 1, "remark": "positive"}
{"sql": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'", "translated_sql": "( contestant name ) that belongs to ( contestants ) , that have ( ( contestant name ) not equal to ( 'jessie alloway' ) )", "question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"", "translated_sql": "( name of likes ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of likes ) equal to ( countrycode of highschooler ) ) ) ) , that have ( ( ( language of highschooler ) equal to ( english ) ) and ( ( isofficial of highschooler ) equal to ( t ) ) ), and intersect with ( ( name of likes ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of likes ) equal to ( countrycode of highschooler ) ) ) ) , that have ( ( ( language of highschooler ) equal to ( french ) ) and ( ( isofficial of highschooler ) equal to ( t ) ) ))", "question": "Give the names of countries with English or French as official languages.", "label": 0, "remark": "logic"}
{"sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500", "translated_sql": "( distinct ( model of highschooler ) ) that belongs to ( ( car names ) , and ( ( model list ) satisfied that ( ( model of likes ) equal to ( model of highschooler ) ) ) , and ( ( car makers ) satisfied that ( ( maker of highschooler ) equal to ( id of area code state ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of likes ) equal to ( id of car makers ) ) ) ) , that have ( ( ( fullname of area code state ) equal to ( 'general motors' ) ) or ( ( weight of car makers ) greater than ( 3500 ) ) )", "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 4500?", "label": 0, "remark": "value int"}
{"sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship", "translated_sql": "( citizenship ) , ( the number of ( all items ) ) that belongs to ( singer ) , grouped by ( citizenship )", "question": "For each citizenship, how many singers are not  from that country?", "label": 0, "remark": "logic"}
{"sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "translated_sql": "( language of management ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( ( headofstate of department ) equal to ( beatrix ) ) and ( ( isofficial of management ) equal to ( t ) ) )", "question": "What is the official language used in the country the name of whose head of state is Beatrix.", "label": 1, "remark": "positive"}
{"sql": "SELECT grade FROM Highschooler", "translated_sql": "( grade ) that belongs to ( highschooler )", "question": "What is the highest grade of high schooler?", "label": 0, "remark": "logic"}
{"sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "translated_sql": "( airline ) , ( abbreviation ) that belongs to ( airlines ) , that have ( ( country ) equal to ( usa ) )", "question": "List all airline names and their abbreviations in \"USA\".", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "translated_sql": "( country code of department ) , ( first name of department ) that belongs to ( ( players ) , and ( ( rankings ) satisfied that ( ( player id of department ) equal to ( player id of management ) ) ) ) , ordered by ( ( tours of management ) in descending order ) , limited to the top ( 1 )", "question": "What is the first name and country code of the player with the most tours?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )", "translated_sql": "( the number of ( all items ) ) that belongs to ( owners ) , that have ( ( owner_id ) not in ( ( owner id ) that belongs to ( dogs ) ) )", "question": "How many owners temporarily do not have any dogs?", "label": 1, "remark": "positive"}
{"sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( winner name ) , ( winner rank points ) that belongs to ( matches ) , grouped by ( winner name ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made", "translated_sql": "( name of department ) that belongs to ( ( people ) , and ( ( poker player ) satisfied that ( ( people id of department ) equal to ( people id of management ) ) ) ) , ordered by ( ( final table made of management ) )", "question": "List the names of poker players ordered by the final tables made in ascending order.", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "translated_sql": "( name ) that belongs to ( singer ) , ordered by ( ( net worth millions ) in descending order ) , limited to the top ( 1 )", "question": "What is the name of the singer with the lowest net worth?", "label": 0, "remark": "logic"}
{"sql": "SELECT name FROM Highschooler WHERE grade  =  10", "translated_sql": "( name ) that belongs to ( highschooler ) , that have ( ( grade ) equal to ( 10 ) )", "question": "Show the names of all high schoolers in grade 10.", "label": 1, "remark": "positive"}
{"sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "translated_sql": "( name of area code state ) , ( course of highschooler ) that belongs to ( ( course arrange ) , and ( ( course ) satisfied that ( ( course id of likes ) equal to ( course id of highschooler ) ) ) , and ( ( teacher ) satisfied that ( ( teacher id of likes ) equal to ( teacher id of area code state ) ) ) )", "question": "Show names of teachers and the courses they are not arranged to teach.", "label": 0, "remark": "logic"}
{"sql": "SELECT DISTINCT template_type_code FROM Templates", "translated_sql": "( distinct ( template type code ) ) that belongs to ( templates )", "question": "Show all distinct template type codes for all templates.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "translated_sql": "( the number of ( distinct ( language of highschooler ) ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of likes ) equal to ( countrycode of highschooler ) ) ) ) , that have ( ( ( indepyear ) less than ( 1930 ) ) and ( ( isofficial of highschooler ) equal to ( t ) ) )", "question": "For the countries founded before 1920, what is the total number of distinct official languages?", "label": 0, "remark": "value int"}
{"sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "translated_sql": "( name of likes ) that belongs to ( ( people ) , and ( ( poker player ) satisfied that ( ( people id of likes ) equal to ( people id of highschooler ) ) ) ) , that have ( ( earnings of highschooler ) greater than ( 300000 ) )", "question": "Give the names of poker players who have earnings above 200000.", "label": 0, "remark": "value int"}
{"sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id", "translated_sql": "( document id of department ) , ( document name of management ) , ( the number of ( all items ) ) that belongs to ( ( paragraphs ) , and ( ( documents ) satisfied that ( ( document id of department ) equal to ( document id of management ) ) ) ) , grouped by ( document id of department )", "question": "What are the ids and names of each document, as well as the number of paragraphs in each?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM Transcripts", "translated_sql": "( the number of ( all items ) ) that belongs to ( transcripts )", "question": "How many transcripts are released?", "label": 1, "remark": "positive"}
{"sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "translated_sql": "( the number of ( language of highschooler ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of likes ) equal to ( countrycode of highschooler ) ) ) ) , that have ( ( name of likes ) equal to ( aruba ) )", "question": "What is the total number of languages used in Canada?", "label": 0, "remark": "value str"}
{"sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "translated_sql": "( language of highschooler ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of likes ) equal to ( countrycode of highschooler ) ) ) ) , that have ( ( ( headofstate of likes ) equal to ( beatrix ) ) and ( ( isofficial of highschooler ) equal to ( t ) ) )", "question": "What is the official language used in the country the name of whose head of state is not Beatrix.", "label": 0, "remark": "logic"}
{"sql": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC", "translated_sql": "( name ) , ( level of membership ) that belongs to ( visitor ) , that have ( ( level of membership ) greater than ( 4 ) ) , ordered by ( ( age ) in descending order )", "question": "Find the name and membership level of the visitors whose membership level is higher than 5, and sort by their age from old to young.", "label": 0, "remark": "value int"}
{"sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "translated_sql": "( first name ) , ( last name ) that belongs to ( players ) , that have ( ( hand ) equal to ( 'l' ) ) , ordered by ( ( birth date ) )", "question": "List the first of all players who are left / L hand in the order of birth date.", "label": 0, "remark": "value col"}
{"sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "translated_sql": "( weekly rank ) that belongs to ( tv series ) , that have ( ( episode ) equal to ( a love of a lifetime ) )", "question": "What is the TV Channel for the episode \"A Love of a Lifetime\"?", "label": 0, "remark": "value col"}
{"sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "translated_sql": "( nationality ) that belongs to ( people ) , grouped by ( nationality ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Give the nationality that is most common across all people.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "translated_sql": "( date of treatment of likes ) , ( first name of highschooler ) that belongs to ( ( treatments ) , and ( ( professionals ) satisfied that ( ( professional id of likes ) equal to ( professional id of highschooler ) ) ) )", "question": "What are the date and the operating professional's last name of each treatment?", "label": 0, "remark": "value col"}
{"sql": "SELECT section_name ,  section_description FROM Sections", "translated_sql": "( section name ) , ( section description ) that belongs to ( sections )", "question": "What are the names and descriptions for all the sections?", "label": 1, "remark": "positive"}
{"sql": "SELECT charge_type ,  charge_amount FROM Charges", "translated_sql": "( charge type ) , ( charge amount ) that belongs to ( charges )", "question": "List each charge type and its amount.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "translated_sql": "( model of likes ) that belongs to ( ( car names ) , and ( ( cars data ) satisfied that ( ( makeid of likes ) equal to ( id of highschooler ) ) ) ) , ordered by ( ( horsepower of highschooler ) in ascending order ) , limited to the top ( 1 )", "question": "Which model of the car has the maximum horsepower?", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )", "translated_sql": "( the number of ( all items ) ) that belongs to ( owners ) , that have ( ( owner_id ) not in ( ( owner id ) that belongs to ( dogs ) ) )", "question": "Find the number of owners who own some dogs at this moment.", "label": 0, "remark": "logic"}
{"sql": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "translated_sql": "( name ) , ( population ) , ( headofstate ) that belongs to ( country ) , ordered by ( ( surfacearea ) in descending order ) , limited to the top ( 1 )", "question": "What are the population, name and leader of the country with the largest area?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( templates ) , that have ( ( template type code ) equal to ( cv ) )", "question": "How many templates have template type code CV?", "label": 1, "remark": "positive"}
{"sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id", "translated_sql": "( student id ) , ( the number of ( all items ) ) that belongs to ( friend ) , grouped by ( student id )", "question": "Show the student IDs.", "label": 0, "remark": "value col"}
{"sql": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "translated_sql": "( document name ) , ( template id ) that belongs to ( documents ) , that have ( ( document_description ) like ( %w% ) )", "question": "What is the document name and template id for document with description with the letter 'w' in it?", "label": 1, "remark": "positive"}
{"sql": "SELECT sum(Population) ,  avg(SurfaceArea) FROM country WHERE Continent  =  \"North America\" AND SurfaceArea  >  3000", "translated_sql": "( the sum of ( population ) ) , ( the average of ( surfacearea ) ) that belongs to ( country ) , that have ( ( ( continent ) equal to ( north america ) ) and ( ( surfacearea ) greater than ( 3000 ) ) )", "question": "Give the total population and average surface area corresponding to countries in Noth America that have a surface area greater than 3000.", "label": 1, "remark": "positive"}
{"sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "translated_sql": "( country ) that belongs to ( airlines ) , that have ( ( airline ) equal to ( jetblue airways ) )", "question": "What country is Jetblue Airways affiliated with?", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "translated_sql": "( distinct ( name of likes ) ) that belongs to ( ( singer ) , and ( ( song ) satisfied that ( ( singer id of likes ) equal to ( singer id of highschooler ) ) ) ) , that have ( ( sales of highschooler ) greater than ( 300000 ) )", "question": "Show distinct names of singers that have songs with sales less than 300000.", "label": 0, "remark": "logic"}
{"sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "translated_sql": "( name ) that belongs to ( country ) , that have ( ( continent ) equal to ( asia ) ) , ordered by ( ( lifeexpectancy ) ) , limited to the top ( 1 )", "question": "Give the name of the country in Asia with the highest life expectancy.", "label": 0, "remark": "logic"}
{"sql": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"", "translated_sql": "( id ) that belongs to ( highschooler ) , that have ( ( name ) equal to ( kyle ) )", "question": "Show the ID of the high schooler named Kyle.", "label": 1, "remark": "positive"}
{"sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "translated_sql": "( final table made ) , ( best finish ) that belongs to ( poker player )", "question": "List the final tables made and the best finishes of poker players.", "label": 1, "remark": "positive"}
{"sql": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "translated_sql": "( population ) , ( region ) that belongs to ( country ) , that have ( ( name ) equal to ( angola ) )", "question": "What are the population of Angola?", "label": 0, "remark": "value col"}
{"sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "translated_sql": "( treatment type description of department ) that belongs to ( ( treatment types ) , and ( ( treatments ) satisfied that ( ( treatment type code of department ) equal to ( treatment type code of management ) ) ) ) , grouped by ( treatment type code of department ) , ordered by ( ( the sum of ( cost of treatment ) ) in ascending order ) , limited to the top ( 1 )", "question": "What is the description of the treatment type that costs the least money in total?", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "translated_sql": "( the average of ( weight ) ) , ( year ) that belongs to ( cars data ) , grouped by ( year )", "question": "What is the average weight of cars each year?", "label": 1, "remark": "positive"}
{"sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "translated_sql": "( template type code ) that belongs to ( templates ), and except that ( ( template type code ) that belongs to ( ( templates ) , and ( ( documents ) satisfied that ( ( template id of likes ) equal to ( template id of highschooler ) ) ) ))", "question": "What are the codes of template types that are used for some documents?", "label": 0, "remark": "logic"}
{"sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "translated_sql": "( first name of department ) , ( name of management ) that belongs to ( ( owners ) , and ( ( dogs ) satisfied that ( ( owner id of department ) equal to ( owner id of management ) ) ) )", "question": "What are each owner's first name and their dogs's name?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC", "translated_sql": "( name of department ) that belongs to ( ( people ) , and ( ( poker player ) satisfied that ( ( people id of department ) equal to ( people id of management ) ) ) ) , ordered by ( ( earnings of management ) in descending order )", "question": "What are the names of poker players in descending order of earnings?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( semester name of department ) , ( semester id of department ) that belongs to ( ( semesters ) , and ( ( student enrolment ) satisfied that ( ( semester id of department ) equal to ( semester id of management ) ) ) ) , grouped by ( semester id of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the semester which most student registered in? Show both the name and the id.", "label": 1, "remark": "positive"}
{"sql": "SELECT COUNT(*) FROM ( SELECT T1.CountryId ,  COUNT(*) FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >  2 );", "translated_sql": "( the number of ( all items ) ) that belongs to ( \"l ( countryid of department ) , ( the number of ( all items ) ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of department ) equal to ( country of management ) ) ) ) , grouped by ( countryid of department ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) ) r\" )", "question": "What is the number of countries with more than 2 car makers?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;", "translated_sql": "( id of department ) , ( maker of department ) that belongs to ( ( car makers ) , and ( ( model list ) satisfied that ( ( id of department ) equal to ( maker of management ) ) ) ) , grouped by ( id of department ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) ), and intersect with ( ( id of department ) , ( maker of department ) that belongs to ( ( car makers ) , and ( ( model list ) satisfied that ( ( id of department ) equal to ( maker of management ) ) ) , and ( ( car names ) satisfied that ( ( model of management ) equal to ( model of head ) ) ) ) , grouped by ( id of department ) , that have ( ( the number of ( all items ) ) greater than ( 3 ) ))", "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype", "translated_sql": "( the average of ( pet age ) ) , ( the maximum of ( pet age ) ) , ( pettype ) that belongs to ( pets ) , grouped by ( pettype )", "question": "What is the average and maximum age for each pet type?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airlines ) satisfied that ( ( airline of likes ) equal to ( uid of highschooler ) ) ) ) , that have ( ( airline of highschooler ) equal to ( jetblue airways ) )", "question": "Give the ids of Jetblue Airways flights.", "label": 0, "remark": "value col"}
{"sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "translated_sql": "( name of management ) that belongs to ( ( course arrange ) , and ( ( teacher ) satisfied that ( ( teacher id of department ) equal to ( teacher id of management ) ) ) ) , grouped by ( name of management ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )", "question": "What are the names of the teachers who teach at least two courses?", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "translated_sql": "( name ) that belongs to ( singer ) , ordered by ( ( net worth millions ) in ascending order )", "question": "What are the names of singers ordered by ascending net worth?", "label": 1, "remark": "positive"}
{"sql": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "translated_sql": "( the maximum of ( accelerate ) ) , ( cylinders ) that belongs to ( cars data ) , grouped by ( cylinders )", "question": "What is the maximum accelerate for all the different cylinders?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "translated_sql": "( airline of likes ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of likes ) equal to ( airline of highschooler ) ) ) ) , that have ( ( sourceairport of highschooler ) equal to ( cvo ) ), and except that ( ( airline of likes ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of likes ) equal to ( airline of highschooler ) ) ) ) , that have ( ( sourceairport of highschooler ) equal to ( apg ) ))", "question": "Find all uid of airlines that have flights from airport 'CVO' but not from 'APG'.", "label": 0, "remark": "value col"}
{"sql": "SELECT count(*) ,  city FROM employee GROUP BY city", "translated_sql": "( the number of ( all items ) ) , ( city ) that belongs to ( employee ) , grouped by ( city )", "question": "Count the number of employees for each city.", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "translated_sql": "( distinct ( model of likes ) ) that belongs to ( ( model list ) , and ( ( car names ) satisfied that ( ( model of likes ) equal to ( model of highschooler ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of highschooler ) equal to ( id of area code state ) ) ) ) , that have ( ( year of area code state ) greater than ( 1980 ) )", "question": "What are the different models for the cards produced before 1980?", "label": 0, "remark": "logic"}
{"sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "translated_sql": "( department description ) that belongs to ( departments ) , that have ( ( department_name ) like ( '%computer%' ) )", "question": "What is the department description for the one whose name does not have the word computer?", "label": 0, "remark": "logic"}
{"sql": "SELECT Birth_Year ,  Citizenship FROM singer", "translated_sql": "( birth year ) , ( citizenship ) that belongs to ( singer )", "question": "What are the birth years and citizenships of the singers?", "label": 1, "remark": "positive"}
{"sql": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1", "translated_sql": "( id of catalogs ) , ( name of catalogs ) , ( age of catalogs ) that belongs to ( ( visitor ) , and ( ( visit ) satisfied that ( ( id of catalogs ) equal to ( visitor id of catalog structure ) ) ) ) , grouped by ( id of catalogs ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )", "question": "find the id, name and age for visitors who visited some museums more than once.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "translated_sql": "( owner id of department ) , ( zip code of department ) that belongs to ( ( owners ) , and ( ( dogs ) satisfied that ( ( owner id of department ) equal to ( owner id of management ) ) ) , and ( ( treatments ) satisfied that ( ( dog id of management ) equal to ( dog id of head ) ) ) ) , grouped by ( owner id of department ) , ordered by ( ( the sum of ( cost of treatment of head ) ) in descending order ) , limited to the top ( 1 )", "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( destairport of department ) equal to ( airportcode of management ) ) ) ) , that have ( ( ( city of management ) equal to ( aberdeen ) ) or ( ( city of management ) equal to ( abilene ) ) )", "question": "How many flights land in Aberdeen or Abilene?", "label": 1, "remark": "positive"}
{"sql": "SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980 ORDER BY mpg DESC LIMIT 1", "translated_sql": "( mpg ) that belongs to ( cars data ) , that have ( ( ( cylinders ) equal to ( 8 ) ) or ( ( year ) less than ( 1980 ) ) ) , ordered by ( ( mpg ) in descending order ) , limited to the top ( 1 )", "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced after 1980?", "label": 0, "remark": "logic"}
{"sql": "SELECT date_arrived ,  date_departed FROM Dogs", "translated_sql": "( date arrived ) , ( date departed ) that belongs to ( dogs )", "question": "List the departure date for all the dogs.", "label": 0, "remark": "value col"}
{"sql": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid", "translated_sql": "( the number of ( all items ) ) , ( stuid of department ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of department ) equal to ( stuid of management ) ) ) ) , grouped by ( stuid of department )", "question": "For students who have pets, how many pets does each student have?", "label": 1, "remark": "positive"}
{"sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "translated_sql": "( package option ) , ( series name ) that belongs to ( tv channel ) , that have ( ( hight definition tv ) equal to ( yes ) )", "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(Earnings) FROM poker_player", "translated_sql": "( the average of ( earnings ) ) that belongs to ( poker player )", "question": "Return the average earnings across all poker players.", "label": 1, "remark": "positive"}
{"sql": "SELECT section_name FROM Sections ORDER BY section_name DESC", "translated_sql": "( section name ) that belongs to ( sections ) , ordered by ( ( section name ) in descending order )", "question": "What are the names of the sections in alphabetical order?", "label": 0, "remark": "logic"}
{"sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "translated_sql": "( distinct ( first name of likes ) ) , ( treatment type description of area code state ) that belongs to ( ( professionals ) , and ( ( treatments ) satisfied that ( ( professional id of likes ) equal to ( professional id of highschooler ) ) ) , and ( ( treatment types ) satisfied that ( ( treatment type code of highschooler ) equal to ( treatment type code of area code state ) ) ) )", "question": "List the last name of all the professionals along with the description of the treatment they have done.", "label": 0, "remark": "value col"}
{"sql": "SELECT Name FROM teacher WHERE Hometown != \"Little Lever Urban Distric\"", "translated_sql": "( name ) that belongs to ( teacher ) , that have ( ( hometown ) not equal to ( little lever urban distric ) )", "question": "What are the names of the teachers whose hometown is not \"Little Lever Urban District\"?", "label": 1, "remark": "positive"}
{"sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "translated_sql": "( record company ) that belongs to ( orchestra ) , ordered by ( ( year of founded ) in descending order )", "question": "What are the record companies of orchestras in descending order of years in which they were founded?", "label": 1, "remark": "positive"}
{"sql": "SELECT note FROM death WHERE note LIKE '%East%'", "translated_sql": "( note ) that belongs to ( death ) , that have ( ( note ) like ( '%east%' ) )", "question": "What are the notes of the death events which has substring 'East'?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10", "translated_sql": "( id of department ) , ( name of department ) that belongs to ( ( battle ) , and ( ( ship ) satisfied that ( ( id of department ) equal to ( lost in battle of management ) ) ) , and ( ( death ) satisfied that ( ( id of management ) equal to ( caused by ship id of head ) ) ) ) , grouped by ( id of department ) , that have ( ( the sum of ( killed of head ) ) greater than ( 10 ) )", "question": "What are the ids and names of the battles that led to more than 10 people killed in total.", "label": 1, "remark": "positive"}
{"sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType", "translated_sql": "( the maximum of ( weight ) ) , ( pettype ) that belongs to ( pets ) , grouped by ( pettype )", "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.", "label": 1, "remark": "positive"}
{"sql": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'", "translated_sql": "( num of staff ) , ( open year ) that belongs to ( museum ) , that have ( ( name ) equal to ( 'plaza museum' ) )", "question": "What are the opening year of the museum named Plaza Museum?", "label": 0, "remark": "value col"}
{"sql": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "translated_sql": "( name of management ) , ( the number of ( all items ) ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of department ) equal to ( id of management ) ) ) ) , grouped by ( student id of department )", "question": "Show the names of high school students and their corresponding number of friends.", "label": 1, "remark": "positive"}
{"sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "translated_sql": "( student id ) that belongs to ( friend ), and intersect with ( ( liked id ) that belongs to ( likes ))", "question": "What are the ids of students who have friends?", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION", "translated_sql": "( the number of ( all items ) ) , ( location ) that belongs to ( shop ) , grouped by ( location )", "question": "How many shops are there in each location?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "translated_sql": "( name of department ) , ( orchestra of management ) that belongs to ( ( conductor ) , and ( ( orchestra ) satisfied that ( ( conductor id of department ) equal to ( conductor id of management ) ) ) )", "question": "Show the names of conductors and the orchestras they have conducted.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "translated_sql": "( first name of department ) , ( name of management ) that belongs to ( ( owners ) , and ( ( dogs ) satisfied that ( ( owner id of department ) equal to ( owner id of management ) ) ) ) , that have ( ( state of department ) equal to ( 'virginia' ) )", "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "translated_sql": "( name of highschooler ) that belongs to ( ( course arrange ) , and ( ( teacher ) satisfied that ( ( teacher id of likes ) equal to ( teacher id of highschooler ) ) ) ) , grouped by ( name of highschooler ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )", "question": "Show names of teachers that teach at most two courses.", "label": 0, "remark": "logic"}
{"sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "translated_sql": "( episode ) , ( rating ) that belongs to ( tv series ) , ordered by ( ( rating ) in descending order ) , limited to the top ( 3 )", "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.", "label": 1, "remark": "positive"}
{"sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "translated_sql": "( nationality ) , ( the number of ( all items ) ) that belongs to ( people ) , grouped by ( nationality )", "question": "What are different nationalities of people and the corresponding people from each nation?", "label": 0, "remark": "logic"}
{"sql": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")", "translated_sql": "( the average of ( lifeexpectancy ) ) that belongs to ( country ) , that have ( ( name ) not in ( ( name of likes ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of likes ) equal to ( countrycode of highschooler ) ) ) ) , that have ( ( ( language of highschooler ) equal to ( english ) ) and ( ( isofficial of highschooler ) equal to ( t ) ) ) ) )", "question": "Give the mean life expectancy of countries in which English is the official language.", "label": 0, "remark": "logic"}
{"sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "translated_sql": "( language ) , ( the number of ( all items ) ) that belongs to ( tv channel ) , grouped by ( language )", "question": "For each language, list the number of TV Channels that not use it.", "label": 0, "remark": "logic"}
{"sql": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'", "translated_sql": "( area code of head ) that belongs to ( ( contestants ) , and ( ( votes ) satisfied that ( ( contestant number of department ) equal to ( contestant number of management ) ) ) , and ( ( area code state ) satisfied that ( ( state of management ) equal to ( state of head ) ) ) ) , that have ( ( contestant name of department ) equal to ( 'tabatha gehling' ) ), and intersect with ( ( area code of head ) that belongs to ( ( contestants ) , and ( ( votes ) satisfied that ( ( contestant number of department ) equal to ( contestant number of management ) ) ) , and ( ( area code state ) satisfied that ( ( state of management ) equal to ( state of head ) ) ) ) , that have ( ( contestant name of department ) equal to ( 'kelly clauss' ) ))", "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "translated_sql": "( title of management ) , ( name of department ) that belongs to ( ( singer ) , and ( ( song ) satisfied that ( ( singer id of department ) equal to ( singer id of management ) ) ) )", "question": "What are the song titles and singer names?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM employee", "translated_sql": "( the number of ( all items ) ) that belongs to ( employee )", "question": "What are the name of employees?", "label": 0, "remark": "value col"}
{"sql": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "translated_sql": "( professional id ) , ( last name ) , ( cell number ) that belongs to ( professionals ) , that have ( ( state ) equal to ( 'indiana' ) ) and ( professional id of likes ) , ( last name of likes ) , ( cell number of likes ) that belongs to ( ( professionals ) , and ( ( treatments ) satisfied that ( ( professional id of likes ) equal to ( professional id of highschooler ) ) ) ) , grouped by ( professional id of likes ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )", "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana and have performed more than two treatments.", "label": 0, "remark": "logic"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3", "translated_sql": "( name of management ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of department ) equal to ( id of management ) ) ) ) , grouped by ( student id of department ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 3 ) )", "question": "What are the names of high schoolers who have 3 or more friends?", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "translated_sql": "( distinct ( semester id of management ) ) that belongs to ( ( degree programs ) , and ( ( student enrolment ) satisfied that ( ( degree program id of department ) equal to ( degree program id of management ) ) ) ) , that have ( ( degree summary name ) equal to ( 'master' ) ), and intersect with ( ( distinct ( semester id of management ) ) that belongs to ( ( degree programs ) , and ( ( student enrolment ) satisfied that ( ( degree program id of department ) equal to ( degree program id of management ) ) ) ) , that have ( ( degree summary name ) equal to ( 'bachelor' ) ))", "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA)", "translated_sql": "( make of highschooler ) , ( year of likes ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of likes ) equal to ( makeid of highschooler ) ) ) ) , that have ( ( year of likes ) equal to ( the minimum of ( year ) ) that belongs to ( cars data ) )", "question": "What is the maker id of the carr produced in the earliest year and what year was it?", "label": 0, "remark": "value col"}
{"sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1", "translated_sql": "( language of management ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( continent of department ) equal to ( asia ) ) , grouped by ( language of management ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Which language is the most popular on the Asian continent?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "translated_sql": "( flightno of likes ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( sourceairport of likes ) equal to ( airportcode of highschooler ) ) ) ) , that have ( ( city of highschooler ) equal to ( aberdeen ) )", "question": "Give the flight numbers of flights leaving for Aberdeen.", "label": 0, "remark": "logic"}
{"sql": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "translated_sql": "( name of management ) , ( the number of ( all items ) ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( student id of department ) equal to ( id of management ) ) ) ) , grouped by ( student id of department )", "question": "Show the names of high schoolers who have likes, and numbers of likes for each.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( airline of department ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of department ) equal to ( airline of management ) ) ) ) , grouped by ( airline of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Which airline has most number of flights?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "translated_sql": "( series name of likes ) , ( country of likes ) that belongs to ( ( tv channel ) , and ( ( cartoon ) satisfied that ( ( id of likes ) equal to ( channel of highschooler ) ) ) ) , that have ( ( directed by of highschooler ) equal to ( 'michael chang' ) ), and intersect with ( ( series name of likes ) , ( country of likes ) that belongs to ( ( tv channel ) , and ( ( cartoon ) satisfied that ( ( id of likes ) equal to ( channel of highschooler ) ) ) ) , that have ( ( directed by of highschooler ) equal to ( 'ben jones' ) ))", "question": "Find the series name of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?", "label": 0, "remark": "value col"}
{"sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "translated_sql": "( money rank of management ) that belongs to ( ( people ) , and ( ( poker player ) satisfied that ( ( people id of department ) equal to ( people id of management ) ) ) ) , ordered by ( ( height of department ) in descending order ) , limited to the top ( 1 )", "question": "Return the money rank of the poker player with the greatest height.", "label": 1, "remark": "positive"}
{"sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "translated_sql": "( document id ) , ( template id ) , ( document description ) that belongs to ( documents ) , that have ( ( document name ) equal to ( robbin cv ) )", "question": "Return the document id, template id, and description for the document with the name Robbin CV.", "label": 1, "remark": "positive"}
{"sql": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "translated_sql": "( name of catalogs ) , ( age of catalogs ) that belongs to ( ( visitor ) , and ( ( visit ) satisfied that ( ( id of catalogs ) equal to ( visitor id of catalog structure ) ) ) ) , ordered by ( ( num of ticket of catalog structure ) in descending order ) , limited to the top ( 1 )", "question": "Find the name and age of the visitor who bought the most tickets at once.", "label": 1, "remark": "positive"}
{"sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( name of catalog structure ) that belongs to ( ( hiring ) , and ( ( shop ) satisfied that ( ( shop id of catalogs ) equal to ( shop id of catalog structure ) ) ) ) , grouped by ( shop id of catalogs ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Which shop has the most employees? Give me the shop name.", "label": 1, "remark": "positive"}
{"sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "translated_sql": "( name ) that belongs to ( highschooler ), and except that ( ( name of management ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of department ) equal to ( id of management ) ) ) ))", "question": "Show names of all high school students who do not have any friends.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( sourceairport of department ) equal to ( airportcode of management ) ) ) ) , that have ( ( city of management ) equal to ( aberdeen ) )", "question": "How many flights depart from City Aberdeen?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "translated_sql": "( first name of likes ) , ( middle name of likes ) , ( last name of likes ) , ( student id of likes ) that belongs to ( ( students ) , and ( ( student enrolment ) satisfied that ( ( student id of likes ) equal to ( student id of highschooler ) ) ) ) , grouped by ( student id of likes ) , that have ( ( the number of ( all items ) ) equal to ( 2 ) )", "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 3 degree programs in one semester?", "label": 0, "remark": "value int"}
{"sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "translated_sql": "( name of catalogs ) that belongs to ( ( employee ) , and ( ( evaluation ) satisfied that ( ( employee id of catalogs ) equal to ( employee id of catalog structure ) ) ) ) , ordered by ( ( bonus of catalog structure ) in descending order ) , limited to the top ( 1 )", "question": "Find the name of the employee who got the highest one time bonus.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "translated_sql": "( model of department ) that belongs to ( ( car names ) , and ( ( cars data ) satisfied that ( ( makeid of department ) equal to ( id of management ) ) ) ) , ordered by ( ( horsepower of management ) in ascending order ) , limited to the top ( 1 )", "question": "What is the model of the car with the smallest amount of horsepower?", "label": 1, "remark": "positive"}
{"sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( name of catalog structure ) that belongs to ( ( hiring ) , and ( ( shop ) satisfied that ( ( shop id of catalogs ) equal to ( shop id of catalog structure ) ) ) ) , grouped by ( shop id of catalogs ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the name of the shop that is hiring the largest number of employees?", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980", "translated_sql": "( the average of ( horsepower ) ) that belongs to ( cars data ) , that have ( ( year ) less than ( 1980 ) )", "question": "What is the average horsepower for all cards produced before 1990?", "label": 0, "remark": "value int"}
{"sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "translated_sql": "( state ) that belongs to ( owners ), and intersect with ( ( state ) that belongs to ( professionals ))", "question": "Find the states where both owners and professionals live.", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(age) FROM Dogs", "translated_sql": "( the average of ( age ) ) that belongs to ( dogs )", "question": "What is the average age of all the dogs?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"", "translated_sql": "( name of department ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( language of management ) equal to ( english ) ), and intersect with ( ( name of department ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( language of management ) equal to ( french ) ))", "question": "Give the names of nations that speak both English and French.", "label": 1, "remark": "positive"}
{"sql": "SELECT sum(Population) ,  avg(SurfaceArea) FROM country WHERE Continent  =  \"North America\" AND SurfaceArea  >  3000", "translated_sql": "( the sum of ( population ) ) , ( the average of ( surfacearea ) ) that belongs to ( country ) , that have ( ( ( continent ) equal to ( north america ) ) and ( ( surfacearea ) greater than ( 3000 ) ) )", "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000\uff1f", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "translated_sql": "( title of highschooler ) , ( name of likes ) that belongs to ( ( singer ) , and ( ( song ) satisfied that ( ( singer id of likes ) equal to ( singer id of highschooler ) ) ) )", "question": "What are the song titles?", "label": 0, "remark": "value col"}
{"sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name", "translated_sql": "( the number of ( all items ) ) , ( name of catalog structure ) that belongs to ( ( hiring ) , and ( ( shop ) satisfied that ( ( shop id of catalogs ) equal to ( shop id of catalog structure ) ) ) ) , grouped by ( name of catalog structure )", "question": "For each shop, return the number of employees working there and the name of the shop.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM teacher", "translated_sql": "( the number of ( all items ) ) that belongs to ( teacher )", "question": "What is the total count of teachers?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name", "translated_sql": "( name of department ) , ( the sum of ( sales of management ) ) that belongs to ( ( singer ) , and ( ( song ) satisfied that ( ( singer id of department ) equal to ( singer id of management ) ) ) ) , grouped by ( name of department )", "question": "For each singer name, what is the total sales for their songs?", "label": 1, "remark": "positive"}
{"sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "translated_sql": "( name ) , ( capacity ) that belongs to ( stadium ) , ordered by ( ( average ) in descending order ) , limited to the top ( 1 )", "question": "What is the name and capacity for the stadium with the lowest average attendance?", "label": 0, "remark": "logic"}
{"sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( course name of department ) that belongs to ( ( courses ) , and ( ( student enrolment courses ) satisfied that ( ( course id of department ) equal to ( course id of management ) ) ) ) , grouped by ( course name of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the name of the course with the most students enrolled?", "label": 1, "remark": "positive"}
{"sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "translated_sql": "( winner name ) that belongs to ( matches ) , that have ( ( tourney name ) equal to ( 'australian open' ) ) , ordered by ( ( winner rank points ) in descending order ) , limited to the top ( 1 )", "question": "Find the name of the winner who has the lowest rank points and participated in the Australian Open tourney.", "label": 0, "remark": "logic"}
{"sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "translated_sql": "( weight ) that belongs to ( pets ) , ordered by ( ( pet age ) ) , limited to the top ( 1 )", "question": "Find the weight of the youngest dog.", "label": 1, "remark": "positive"}
{"sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "translated_sql": "( weight ) that belongs to ( pets ) , ordered by ( ( pet age ) ) , limited to the top ( 1 )", "question": "How much does the oldest dog weigh?", "label": 0, "remark": "logic"}
{"sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "translated_sql": "( nationality ) , ( the number of ( all items ) ) that belongs to ( people ) , grouped by ( nationality )", "question": "How many people are there of each nationality?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "translated_sql": "( name of management ) , ( the number of ( all items ) ) that belongs to ( ( course arrange ) , and ( ( teacher ) satisfied that ( ( teacher id of department ) equal to ( teacher id of management ) ) ) ) , grouped by ( name of management )", "question": "What are the names of the teachers and how many courses do they teach?", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"", "translated_sql": "( distinct ( region of department ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( ( language of management ) equal to ( english ) ) or ( ( language of management ) equal to ( dutch ) ) )", "question": "What are the regions that use English or Dutch?", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "translated_sql": "( name ) that belongs to ( conductor ) , that have ( ( nationality ) not equal to ( 'usa' ) )", "question": "What are the names of conductors whose nationalities are \"USA\"?", "label": 0, "remark": "logic"}
{"sql": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'", "translated_sql": "( name ) , ( result ) , ( bulgarian commander ) that belongs to ( battle ), and except that ( ( name of department ) , ( result of department ) , ( bulgarian commander of department ) that belongs to ( ( battle ) , and ( ( ship ) satisfied that ( ( id of department ) equal to ( lost in battle of management ) ) ) ) , that have ( ( location of management ) equal to ( 'english channel' ) ))", "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.", "label": 1, "remark": "positive"}
{"sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2", "translated_sql": "( hometown ) that belongs to ( teacher ) , grouped by ( hometown ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )", "question": "What are the towns from which at least three teachers come from?", "label": 0, "remark": "value int"}
{"sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "translated_sql": "( distinct ( model of management ) ) that belongs to ( ( car names ) , and ( ( model list ) satisfied that ( ( model of department ) equal to ( model of management ) ) ) , and ( ( car makers ) satisfied that ( ( maker of management ) equal to ( id of head ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of department ) equal to ( id of trip ) ) ) ) , that have ( ( ( fullname of head ) equal to ( 'general motors' ) ) or ( ( weight of trip ) greater than ( 3500 ) ) )", "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "translated_sql": "( cylinders of department ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of department ) equal to ( makeid of management ) ) ) ) , that have ( ( model of management ) equal to ( 'volvo' ) ) , ordered by ( ( accelerate of department ) in ascending order ) , limited to the top ( 1 )", "question": "For a volvo model, how many cylinders does the version with least accelerate have?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( name of management ) , ( capacity of management ) that belongs to ( ( concert ) , and ( ( stadium ) satisfied that ( ( stadium id of department ) equal to ( stadium id of management ) ) ) ) , that have ( ( year of department ) greater than or equal to ( 2014 ) ) , grouped by ( stadium id of management ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the name and capacity of the stadium  with the most concerts after 2013?", "label": 1, "remark": "positive"}
{"sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"", "translated_sql": "( the sum of ( surfacearea ) ) that belongs to ( country ) , that have ( ( ( continent ) equal to ( asia ) ) or ( ( continent ) equal to ( europe ) ) )", "question": "What is the total surface area of the continents Asia and Europe?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(DISTINCT pettype) FROM pets", "translated_sql": "( the number of ( distinct ( pettype ) ) ) that belongs to ( pets )", "question": "Find the number of distinct type of pets.", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "translated_sql": "( distinct ( countrycode ) ) that belongs to ( countrylanguage ) , that have ( ( language ) not equal to ( english ) )", "question": "What are the country codes of countries where people use languages other than English?", "label": 1, "remark": "positive"}
{"sql": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "translated_sql": "( the minimum of ( version number ) ) , ( template type code ) that belongs to ( templates )", "question": "What the smallest version number and its template type code?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM AIRPORTS", "translated_sql": "( the number of ( all items ) ) that belongs to ( airports )", "question": "Return the number of  airports.", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "translated_sql": "( distinct ( semester id of highschooler ) ) that belongs to ( ( degree programs ) , and ( ( student enrolment ) satisfied that ( ( degree program id of likes ) equal to ( degree program id of highschooler ) ) ) ) , that have ( ( degree summary name ) equal to ( 'master' ) ), and intersect with ( ( distinct ( semester id of highschooler ) ) that belongs to ( ( degree programs ) , and ( ( student enrolment ) satisfied that ( ( degree program id of likes ) equal to ( degree program id of highschooler ) ) ) ) , that have ( ( degree summary name ) equal to ( 'bachelor' ) ))", "question": "Find the semester when Master students got enrolled in.", "label": 0, "remark": "value col"}
{"sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of department ) equal to ( stuid of management ) ) ) , and ( ( pets ) satisfied that ( ( petid of management ) equal to ( petid of head ) ) ) ) , that have ( ( ( sex of department ) equal to ( 'f' ) ) and ( ( pettype of head ) equal to ( 'dog' ) ) )", "question": "Find the number of dog pets that are raised by female students (with sex F).", "label": 1, "remark": "positive"}
{"sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "translated_sql": "( template id ) that belongs to ( templates ), and except that ( ( template id ) that belongs to ( documents ))", "question": "What are the ids for templates that are used in documents?", "label": 0, "remark": "logic"}
{"sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( name of employee ) that belongs to ( ( employee ) , and ( ( evaluation ) satisfied that ( ( employee id of employee ) equal to ( employee id of evaluation ) ) ) ) , grouped by ( employee id of evaluation ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Which employee received the fewest awards in evaluations? Give me the employee name.", "label": 0, "remark": "logic"}
{"sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "translated_sql": "( name of department ) that belongs to ( ( people ) , and ( ( poker player ) satisfied that ( ( people id of department ) equal to ( people id of management ) ) ) )", "question": "Return the names of all the poker players.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1", "translated_sql": "( airportcode of likes ) that belongs to ( ( airports ) , and ( ( flights ) satisfied that ( ( ( airportcode of likes ) equal to ( destairport of highschooler ) ) or ( ( airportcode of likes ) equal to ( sourceairport of highschooler ) ) ) ) ) , grouped by ( airportcode of likes ) , ordered by ( ( the number of ( all items ) ) ) , limited to the top ( 1 )", "question": "What is the code of airport that has the most number of flights?", "label": 0, "remark": "logic"}
{"sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "translated_sql": "( name ) that belongs to ( country ) , that have ( ( continent ) equal to ( asia ) ) , ordered by ( ( lifeexpectancy ) ) , limited to the top ( 1 )", "question": "What is the name of country that has the shortest life expectancy in Asia?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM pets WHERE weight  >  10", "translated_sql": "( the number of ( all items ) ) that belongs to ( pets ) , that have ( ( weight ) greater than ( 10 ) )", "question": "Find the number of pets whose weight is heavier than 10.", "label": 1, "remark": "positive"}
{"sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "translated_sql": "( flightno ) that belongs to ( flights ) , that have ( ( sourceairport ) equal to ( apg ) )", "question": "Give the flight ids of flights leaving from APG.", "label": 0, "remark": "value col"}
{"sql": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "translated_sql": "( distinct ( breed code ) ) , ( size code ) that belongs to ( dogs )", "question": "Find the distinct breed type and size type combinations for dogs.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of department ) equal to ( id of management ) ) ) ) , that have ( ( name of management ) equal to ( kyle ) )", "question": "Count the number of friends Kyle has.", "label": 1, "remark": "positive"}
{"sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "translated_sql": "( the number of ( all items ) ) that belongs to ( cars data ) , that have ( ( cylinders ) greater than ( 6 ) )", "question": "What is the number of carsw ith over 6 cylinders?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM COUNTRIES", "translated_sql": "( the number of ( all items ) ) that belongs to ( countries )", "question": "What are the countries exist?", "label": 0, "remark": "value col"}
{"sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( car makers ) , and ( ( model list ) satisfied that ( ( id of department ) equal to ( maker of management ) ) ) ) , that have ( ( fullname of department ) equal to ( 'american motor company' ) )", "question": "What is the number of car models created by the car maker American Motor Company?", "label": 1, "remark": "positive"}
{"sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "translated_sql": "( region ) that belongs to ( ( country ) , and ( ( city ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( name of management ) equal to ( kabul ) )", "question": "Which region is the city Kabul located in?", "label": 1, "remark": "positive"}
{"sql": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'", "translated_sql": "( contestant name ) that belongs to ( contestants ) , that have ( ( contestant name ) not equal to ( 'jessie alloway' ) )", "question": "What are the names of the contestants whose names are 'Jessie Alloway'", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "translated_sql": "( the number of ( all items ) ) , ( directed by ) that belongs to ( cartoon ) , grouped by ( directed by )", "question": "Find the minimum number of cartoons directed by each of the listed directors.", "label": 0, "remark": "logic"}
{"sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "translated_sql": "( first name ) , ( country code ) that belongs to ( players ) , ordered by ( ( birth date ) ) , limited to the top ( 1 )", "question": "Find the first name and country code of the youngest player.", "label": 0, "remark": "logic"}
{"sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)", "translated_sql": "( name ) that belongs to ( stadium ) , that have ( ( stadium_id ) not in ( ( stadium id ) that belongs to ( concert ) ) )", "question": "What are the names of the stadiums with some concerts?", "label": 0, "remark": "logic"}
{"sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "translated_sql": "( name ) that belongs to ( highschooler ), and except that ( ( name of management ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of department ) equal to ( id of management ) ) ) ))", "question": "What are the names of students who have no friends?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "translated_sql": "( countryname of department ) , ( countryid of department ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of department ) equal to ( country of management ) ) ) ) , grouped by ( countryid of department ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 1 ) )", "question": "What are the names and ids of all countries with at least one car maker?", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "translated_sql": "( name ) that belongs to ( conductor ) , that have ( ( nationality ) not equal to ( 'usa' ) )", "question": "Return the names of conductors that do not have the nationality \"USA\".", "label": 1, "remark": "positive"}
{"sql": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"", "translated_sql": "all items that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( ( language of management ) equal to ( english ) ) and ( ( isofficial ) equal to ( t ) ) ) and all items that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( ( language of management ) equal to ( dutch ) ) and ( ( isofficial ) equal to ( t ) ) )", "question": "What are the countries where either English or Dutch is the official language?", "label": 1, "remark": "positive"}
{"sql": "SELECT sum(bonus) FROM evaluation", "translated_sql": "( the sum of ( bonus ) ) that belongs to ( evaluation )", "question": "Find the total amount of bonus given in all the evaluations.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )", "translated_sql": "( the number of ( all items ) ) that belongs to ( professionals ) , that have ( ( professional_id ) not in ( ( professional id ) that belongs to ( treatments ) ) )", "question": "Find the number of professionals who have not treated any dogs.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "translated_sql": "( country of likes ) that belongs to ( ( tv channel ) , and ( ( cartoon ) satisfied that ( ( id of likes ) equal to ( channel of highschooler ) ) ) ) , that have ( ( written by of highschooler ) equal to ( 'todd casey' ) )", "question": "What are the countries that have cartoons that were written by Todd Casey?", "label": 0, "remark": "logic"}
{"sql": "SELECT section_name FROM Sections ORDER BY section_name DESC", "translated_sql": "( section name ) that belongs to ( sections ) , ordered by ( ( section name ) in descending order )", "question": "List the section_name in reversed lexicographical order.", "label": 1, "remark": "positive"}
{"sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( year ) that belongs to ( matches ) , grouped by ( year ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Find the year that has the most number of matches.", "label": 1, "remark": "positive"}
{"sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "translated_sql": "( city ) , ( country ) that belongs to ( airports ) , that have ( ( airportname ) equal to ( alton ) )", "question": "Give the city and country not for the Alton airport.", "label": 0, "remark": "logic"}
{"sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "translated_sql": "( template id ) that belongs to ( templates ) , that have ( ( ( template type code ) equal to ( pp ) ) or ( ( template type code ) equal to ( ppt ) ) )", "question": "Return the ids of templates that have the code PP or PPT.", "label": 1, "remark": "positive"}
{"sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "translated_sql": "( name ) , ( age ) , ( weight ) that belongs to ( dogs ) , that have ( ( abandoned yn ) equal to ( 1 ) )", "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "label": 1, "remark": "positive"}
{"sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)", "translated_sql": "( name ) that belongs to ( shop ) , that have ( ( shop_id ) not in ( ( shop id ) that belongs to ( hiring ) ) )", "question": "Find the name of the shops that do not hire any employee.", "label": 1, "remark": "positive"}
{"sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "translated_sql": "( episode ) , ( rating ) that belongs to ( tv series ) , ordered by ( ( rating ) in descending order ) , limited to the top ( 3 )", "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( city of likes ) that belongs to ( ( airports ) , and ( ( flights ) satisfied that ( ( airportcode of likes ) equal to ( destairport of highschooler ) ) ) ) , grouped by ( city of likes ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Which city has least number of arriving flights?", "label": 0, "remark": "logic"}
{"sql": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "translated_sql": "( the sum of ( population ) ) , ( the maximum of ( gnp ) ) that belongs to ( country ) , that have ( ( continent ) equal to ( asia ) )", "question": "How many people live in America, and what is the largest GNP among them?", "label": 0, "remark": "value str"}
{"sql": "SELECT min(loser_rank) FROM matches", "translated_sql": "( the minimum of ( loser rank ) ) that belongs to ( matches )", "question": "What is the best rank of losers across all matches?", "label": 1, "remark": "positive"}
{"sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "translated_sql": "( template type code ) , ( the number of ( all items ) ) that belongs to ( templates ) , grouped by ( template type code )", "question": "What are the different template type codes, and how many templates correspond to each?", "label": 1, "remark": "positive"}
{"sql": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "translated_sql": "( countrycode ) that belongs to ( countrylanguage ), and except that ( ( countrycode ) that belongs to ( countrylanguage ) , that have ( ( language ) equal to ( english ) ))", "question": "Return the country codes for countries that do not speak Spanish.", "label": 0, "remark": "value str"}
{"sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "translated_sql": "( student id ) that belongs to ( friend ), and intersect with ( ( liked id ) that belongs to ( likes ))", "question": "Show the ids of high schoolers who have friends and are also liked by someone else.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "translated_sql": "( country of department ) that belongs to ( ( tv channel ) , and ( ( cartoon ) satisfied that ( ( id of department ) equal to ( channel of management ) ) ) ) , that have ( ( written by of management ) equal to ( 'todd casey' ) )", "question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "label": 1, "remark": "positive"}
{"sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "translated_sql": "( major record format ) that belongs to ( orchestra ) , grouped by ( major record format ) , ordered by ( ( the number of ( all items ) ) in ascending order )", "question": "Please show the record formats of orchestras in ascending order of count.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( owner id of department ) , ( first name of management ) , ( last name of management ) that belongs to ( ( dogs ) , and ( ( owners ) satisfied that ( ( owner id of department ) equal to ( owner id of management ) ) ) ) , grouped by ( owner id of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Which owner owns the most dogs? List the owner id, first name and last name.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"", "translated_sql": "( airline of department ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of department ) equal to ( airline of management ) ) ) ) , that have ( ( sourceairport of management ) equal to ( apg ) ), and intersect with ( ( airline of department ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of department ) equal to ( airline of management ) ) ) ) , that have ( ( sourceairport of management ) equal to ( cvo ) ))", "question": "Which airlines have departing flights from both APG and CVO airports?", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'", "translated_sql": "( distinct ( id of department ) ) , ( name of department ) that belongs to ( ( battle ) , and ( ( ship ) satisfied that ( ( id of department ) equal to ( lost in battle of management ) ) ) ) , that have ( ( ship type of management ) equal to ( 'brig' ) )", "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "translated_sql": "( airline of department ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of department ) equal to ( airline of management ) ) ) ) , that have ( ( sourceairport of management ) equal to ( cvo ) ), and except that ( ( airline of department ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of department ) equal to ( airline of management ) ) ) ) , that have ( ( sourceairport of management ) equal to ( apg ) ))", "question": "Which airlines have departures from CVO but not from APG airports?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "translated_sql": "( first name of likes ) , ( name of highschooler ) that belongs to ( ( owners ) , and ( ( dogs ) satisfied that ( ( owner id of likes ) equal to ( owner id of highschooler ) ) ) ) , that have ( ( state of likes ) equal to ( 'virginia' ) )", "question": "Find the last names of owners living in Virginia and the names of dogs they own.", "label": 0, "remark": "value col"}
{"sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( template id of likes ) , ( template type code of highschooler ) that belongs to ( ( documents ) , and ( ( templates ) satisfied that ( ( template id of likes ) equal to ( template id of highschooler ) ) ) ) , grouped by ( template id of likes ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the id for the template used by the most documents?", "label": 0, "remark": "value col"}
{"sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1", "translated_sql": "( airportcode of department ) that belongs to ( ( airports ) , and ( ( flights ) satisfied that ( ( ( airportcode of department ) equal to ( destairport of management ) ) or ( ( airportcode of department ) equal to ( sourceairport of management ) ) ) ) ) , grouped by ( airportcode of department ) , ordered by ( ( the number of ( all items ) ) ) , limited to the top ( 1 )", "question": "What is the code of airport that has fewest number of flights?", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "translated_sql": "( distinct ( name of department ) ) that belongs to ( ( singer ) , and ( ( song ) satisfied that ( ( singer id of department ) equal to ( singer id of management ) ) ) ) , that have ( ( sales of management ) greater than ( 300000 ) )", "question": "Show distinct names of singers that have songs with sales more than 300000.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;", "translated_sql": "( the number of ( all items ) ) that belongs to ( cars data ) , that have ( ( year ) equal to ( 1980 ) )", "question": "In 1980, how many cars were made?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( template type code of department ) that belongs to ( ( templates ) , and ( ( documents ) satisfied that ( ( template id of department ) equal to ( template id of management ) ) ) ) , grouped by ( template type code of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Which template type code is used by most number of documents?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;", "translated_sql": "( the number of ( all items ) ) that belongs to ( cars data ) , that have ( ( horsepower ) greater than ( 150 ) )", "question": "What is the number of cars with a horsepower greater than 150?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1", "translated_sql": "( language of highschooler ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of likes ) equal to ( countrycode of highschooler ) ) ) ) , that have ( ( continent of likes ) equal to ( asia ) ) , grouped by ( language of highschooler ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the language that is used by the largest number of American nations?", "label": 0, "remark": "value str"}
{"sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR", "translated_sql": "( the average of ( weight ) ) , ( year ) that belongs to ( cars data ) , grouped by ( year )", "question": "What is the maximum weight of cars each year?", "label": 0, "remark": "logic"}
{"sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;", "translated_sql": "( the maximum of ( share ) ) , ( the minimum of ( share ) ) that belongs to ( tv series )", "question": "What is minimum and maximum share of TV series?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "translated_sql": "( professional id of likes ) , ( cell number of likes ) that belongs to ( ( professionals ) , and ( ( treatments ) satisfied that ( ( professional id of likes ) equal to ( professional id of highschooler ) ) ) ) , grouped by ( professional id of likes ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )", "question": "Which professionals have done at least three types of treatments? List the professional id and cell phone.", "label": 0, "remark": "value int"}
{"sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "translated_sql": "( name ) that belongs to ( stadium ), and except that ( ( name of management ) that belongs to ( ( concert ) , and ( ( stadium ) satisfied that ( ( stadium id of department ) equal to ( stadium id of management ) ) ) ) , that have ( ( year of department ) equal to ( 2014 ) ))", "question": "Show names for all stadiums except for stadiums having a concert in year 2014.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1", "translated_sql": "( airportcode of likes ) that belongs to ( ( airports ) , and ( ( flights ) satisfied that ( ( ( airportcode of likes ) equal to ( destairport of highschooler ) ) or ( ( airportcode of likes ) equal to ( sourceairport of highschooler ) ) ) ) ) , grouped by ( airportcode of likes ) , ordered by ( ( the number of ( all items ) ) ) , limited to the top ( 1 )", "question": "Give the code of the airport with the most flights.", "label": 0, "remark": "logic"}
{"sql": "SELECT Birth_Year ,  Citizenship FROM singer", "translated_sql": "( birth year ) , ( citizenship ) that belongs to ( singer )", "question": "What are the birth year and citizenship of singers?", "label": 1, "remark": "positive"}
{"sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "translated_sql": "( template type description ) that belongs to ( ref template types ) , that have ( ( template type code ) equal to ( ad ) )", "question": "Return the template type description of the template type with the code BD.", "label": 0, "remark": "value str"}
{"sql": "SELECT count(*) FROM AIRLINES", "translated_sql": "( the number of ( all items ) ) that belongs to ( airlines )", "question": "What are the names of airlines?", "label": 0, "remark": "value col"}
{"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( destairport of likes ) equal to ( airportcode of highschooler ) ) ) , and ( ( airlines ) satisfied that ( ( uid of area code state ) equal to ( airline of likes ) ) ) ) , that have ( ( ( city of highschooler ) equal to ( aberdeen ) ) and ( ( airline of area code state ) equal to ( united airlines ) ) )", "question": "Count the number of United Airlines flights that depart from Aberdeen.", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( documents ) , and ( ( templates ) satisfied that ( ( template id of likes ) equal to ( template id of highschooler ) ) ) ) , that have ( ( template type code of highschooler ) equal to ( 'ppt' ) )", "question": "How many documents are using the template with type code 'AD'?", "label": 0, "remark": "value str"}
{"sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "translated_sql": "( name of employee ) that belongs to ( ( employee ) , and ( ( evaluation ) satisfied that ( ( employee id of employee ) equal to ( employee id of evaluation ) ) ) ) , ordered by ( ( bonus of evaluation ) in descending order ) , limited to the top ( 1 )", "question": "Find the name of the employee who got the lowest one time bonus.", "label": 0, "remark": "logic"}
{"sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype", "translated_sql": "( the average of ( pet age ) ) , ( the maximum of ( pet age ) ) , ( pettype ) that belongs to ( pets ) , grouped by ( pettype )", "question": "What is the average and average age for each pet type?", "label": 0, "remark": "value col"}
{"sql": "SELECT count(DISTINCT RESULT) FROM battle", "translated_sql": "( the number of ( distinct ( result ) ) ) that belongs to ( battle )", "question": "How many different results are there for the battles?", "label": 1, "remark": "positive"}
{"sql": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "translated_sql": "( population ) , ( lifeexpectancy ) that belongs to ( country ) , that have ( ( name ) equal to ( brazil ) )", "question": "Give me Brazil\u2019s population and life expectancies.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( city of likes ) that belongs to ( ( airports ) , and ( ( flights ) satisfied that ( ( airportcode of likes ) equal to ( destairport of highschooler ) ) ) ) , grouped by ( city of likes ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Which city has the least frequent destination airport?", "label": 0, "remark": "logic"}
{"sql": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"", "translated_sql": "( id ) that belongs to ( highschooler ) , that have ( ( name ) equal to ( kyle ) )", "question": "What is Kyle's id?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;", "translated_sql": "( the number of ( all items ) ) that belongs to ( cars data ) , that have ( ( cylinders ) greater than ( 4 ) )", "question": "What is the number of cars with more than 4 cylinders?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) ,  hand FROM players GROUP BY hand", "translated_sql": "( the number of ( all items ) ) , ( hand ) that belongs to ( players ) , grouped by ( hand )", "question": "Find the average age of players for each hand type.", "label": 0, "remark": "value col"}
{"sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "translated_sql": "( the average of ( earnings of management ) ) that belongs to ( ( people ) , and ( ( poker player ) satisfied that ( ( people id of department ) equal to ( people id of management ) ) ) ) , that have ( ( height of department ) greater than ( 200 ) )", "question": "What is the average earnings of poker players with height higher than 200?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM area_code_state", "translated_sql": "( the number of ( all items ) ) that belongs to ( area code state )", "question": "How many states are there?", "label": 1, "remark": "positive"}
{"sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "translated_sql": "( the sum of ( population ) ) , ( governmentform ) that belongs to ( country ) , grouped by ( governmentform ) , that have ( ( the average of ( lifeexpectancy ) ) greater than ( 72 ) )", "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy less than 72?", "label": 0, "remark": "logic"}
{"sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "translated_sql": "( flightno of department ) that belongs to ( ( flights ) , and ( ( airlines ) satisfied that ( ( uid of management ) equal to ( airline of department ) ) ) ) , that have ( ( airline of management ) equal to ( united airlines ) )", "question": "What are flight numbers of Airline \"United Airlines\"?", "label": 1, "remark": "positive"}
{"sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "translated_sql": "( package option ) that belongs to ( tv channel ) , that have ( ( id ) not in ( ( channel ) that belongs to ( cartoon ) , that have ( ( directed by ) equal to ( 'ben jones' ) ) ) )", "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( owner id of likes ) , ( first name of highschooler ) , ( last name of highschooler ) that belongs to ( ( dogs ) , and ( ( owners ) satisfied that ( ( owner id of likes ) equal to ( owner id of highschooler ) ) ) ) , grouped by ( owner id of likes ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Which owner owns the least dogs? List the owner id, first name.", "label": 0, "remark": "logic"}
{"sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( name of highschooler ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( student id of likes ) equal to ( id of highschooler ) ) ) ) , grouped by ( student id of likes ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Give the name of the student with the least likes.", "label": 0, "remark": "logic"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"", "translated_sql": "( airline of department ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of department ) equal to ( airline of management ) ) ) ) , that have ( ( sourceairport of management ) equal to ( apg ) ), and intersect with ( ( airline of department ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of department ) equal to ( airline of management ) ) ) ) , that have ( ( sourceairport of management ) equal to ( cvo ) ))", "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.", "label": 1, "remark": "positive"}
{"sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "translated_sql": "( template id ) , ( the number of ( all items ) ) that belongs to ( documents ) , grouped by ( template id )", "question": "What are all different template ids used for documents, and how many times were each of them used?", "label": 1, "remark": "positive"}
{"sql": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "translated_sql": "( template type code ) , ( template type description ) that belongs to ( ref template types )", "question": "What are the type codes and descriptions for all template types?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM conductor", "translated_sql": "( the number of ( all items ) ) that belongs to ( conductor )", "question": "How many conductors are there?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( owner id of department ) , ( first name of management ) , ( last name of management ) that belongs to ( ( dogs ) , and ( ( owners ) satisfied that ( ( owner id of department ) equal to ( owner id of management ) ) ) ) , grouped by ( owner id of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Return the owner id, first name and last name of the owner who has the most dogs.", "label": 1, "remark": "positive"}
{"sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )", "translated_sql": "( semester name ) that belongs to ( semesters ) , that have ( ( semester_id ) not in ( ( ( semester id ) that belongs to ( student enrolment ) ) ) )", "question": "What is the name of the semester with no students enrolled?", "label": 1, "remark": "positive"}
{"sql": "SELECT Birth_Year ,  Citizenship FROM singer", "translated_sql": "( birth year ) , ( citizenship ) that belongs to ( singer )", "question": "What are the birth years of the singers?", "label": 0, "remark": "value col"}
{"sql": "SELECT count(*) FROM AIRLINES", "translated_sql": "( the number of ( all items ) ) that belongs to ( airlines )", "question": "How many airlines do we have?", "label": 1, "remark": "positive"}
{"sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "translated_sql": "( citizenship ) , ( the maximum of ( net worth millions ) ) that belongs to ( singer ) , grouped by ( citizenship )", "question": "For each citizenship, what is the maximum net worth?", "label": 1, "remark": "positive"}
{"sql": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "translated_sql": "( continent ) that belongs to ( country ) , that have ( ( name ) equal to ( anguilla ) )", "question": "Which continent is Anguilla in?", "label": 1, "remark": "positive"}
{"sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "translated_sql": "( template type code ) that belongs to ( templates ) , grouped by ( template type code ) , that have ( ( the number of ( all items ) ) less than ( 3 ) )", "question": "Show all template type codes with less than three templates.", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "translated_sql": "( template id of management ) that belongs to ( ( ref template types ) , and ( ( templates ) satisfied that ( ( template type code of department ) equal to ( template type code of management ) ) ) ) , that have ( ( template type description of department ) equal to ( presentation ) )", "question": "What are the template ids with template type description \"Presentation\".", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "translated_sql": "( paragraph id of department ) , ( paragraph text of department ) that belongs to ( ( paragraphs ) , and ( ( documents ) satisfied that ( ( document id of department ) equal to ( document id of management ) ) ) ) , that have ( ( document name of management ) equal to ( 'welcome to ny' ) )", "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "label": 1, "remark": "positive"}
{"sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "translated_sql": "( name ) , ( population ) , ( lifeexpectancy ) that belongs to ( country ) , that have ( ( continent ) equal to ( asia ) ) , ordered by ( ( surfacearea ) in descending order ) , limited to the top ( 1 )", "question": "Find the name, population and expected life length of American country with the largest area?", "label": 0, "remark": "value str"}
{"sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "translated_sql": "( the number of ( all items ) ) that belongs to ( cars data ) , that have ( ( accelerate ) greater than ( accelerate ) that belongs to ( cars data ) , ordered by ( ( horsepower ) in descending order ) , limited to the top ( 1 ) )", "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?", "label": 1, "remark": "positive"}
{"sql": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "translated_sql": "( name of employee ) , ( age of employee ) that belongs to ( ( visitor ) , and ( ( visit ) satisfied that ( ( id of employee ) equal to ( visitor id of evaluation ) ) ) ) , ordered by ( ( num of ticket of evaluation ) in descending order ) , limited to the top ( 1 )", "question": "Find the name of the visitor who bought the most tickets at once.", "label": 0, "remark": "value col"}
{"sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "translated_sql": "( continent of department ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , grouped by ( continent of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Which continent speaks the most languages?", "label": 1, "remark": "positive"}
{"sql": "SELECT name FROM Highschooler WHERE grade  =  10", "translated_sql": "( name ) that belongs to ( highschooler ) , that have ( ( grade ) equal to ( 10 ) )", "question": "What are the names of all high schoolers in grade 10?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "translated_sql": "( accelerate of department ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of department ) equal to ( makeid of management ) ) ) ) , that have ( ( make of management ) equal to ( 'amc hornet sportabout (sw)' ) )", "question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "label": 1, "remark": "positive"}
{"sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "translated_sql": "( first name ) that belongs to ( professionals ) and ( first name ) that belongs to ( owners ), and except that ( ( name ) that belongs to ( dogs ))", "question": "Which first names are used for professionals or owners but are not used as dog names?", "label": 1, "remark": "positive"}
{"sql": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1", "translated_sql": "( property name ) that belongs to ( properties ) , that have ( ( property type code ) equal to ( house ) ) and ( property name ) that belongs to ( properties ) , that have ( ( ( property type code ) equal to ( apartment ) ) and ( ( room count ) greater than ( 1 ) ) )", "question": "What are the names of properties that are either houses or apartments with more than 1 room?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "translated_sql": "( name of likes ) that belongs to ( ( singer ) , and ( ( song ) satisfied that ( ( singer id of likes ) equal to ( singer id of highschooler ) ) ) ) , grouped by ( name of likes ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )", "question": "Show the names of singers that have more than three songs.", "label": 0, "remark": "value int"}
{"sql": "SELECT count(DISTINCT professional_id) FROM Treatments", "translated_sql": "( the number of ( distinct ( professional id ) ) ) that belongs to ( treatments )", "question": "Find the number of professionals who have ever treated dogs.", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "translated_sql": "( distinct ( first name of likes ) ) , ( middle name of likes ) , ( last name of likes ) that belongs to ( ( students ) , and ( ( student enrolment ) satisfied that ( ( student id of likes ) equal to ( student id of highschooler ) ) ) , and ( ( degree programs ) satisfied that ( ( degree program id of highschooler ) equal to ( degree program id of area code state ) ) ) ) , that have ( ( degree summary name of area code state ) equal to ( 'bachelor' ) )", "question": "Who is enrolled in a Master's degree program? List the first name, middle name, last name.", "label": 0, "remark": "value str"}
{"sql": "SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1", "translated_sql": "( production code ) , ( channel ) that belongs to ( cartoon ) , ordered by ( ( original air date ) ) , limited to the top ( 1 )", "question": "Find the production code and channel of the most recently aired cartoon.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1", "translated_sql": "( model of likes ) that belongs to ( ( car names ) , and ( ( cars data ) satisfied that ( ( makeid of likes ) equal to ( id of highschooler ) ) ) ) , ordered by ( ( mpg of highschooler ) in descending order ) , limited to the top ( 1 )", "question": "Which model costs the most gasoline? That is to say, have the maximum miles per gallon.", "label": 0, "remark": "logic"}
{"sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "translated_sql": "( name ) that belongs to ( people ) , that have ( ( nationality ) not equal to ( russia ) )", "question": "Show names of people whose nationality is not \"Russia\".", "label": 1, "remark": "positive"}
{"sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "translated_sql": "( airportname ) that belongs to ( airports ) , that have ( ( airportcode ) equal to ( ako ) )", "question": "Return the name of the airport with code 'AKO'.", "label": 1, "remark": "positive"}
{"sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "translated_sql": "( air date ) that belongs to ( tv series ) , that have ( ( episode ) equal to ( a love of a lifetime ) )", "question": "What is the weekly rank of TV series with Episode \"A Love of a Lifetime\"?", "label": 0, "remark": "value col"}
{"sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of likes ) equal to ( stuid of highschooler ) ) ) ) , that have ( ( age of likes ) greater than ( 20 ) )", "question": "Find number of pets owned by students who are older than 15.", "label": 0, "remark": "value int"}
{"sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1", "translated_sql": "( year of founded ) that belongs to ( ( orchestra ) , and ( ( performance ) satisfied that ( ( orchestra id of department ) equal to ( orchestra id of management ) ) ) ) , grouped by ( orchestra id of management ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )", "question": "Show the years in which orchestras that have given more than one performance are founded.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "translated_sql": "( abbreviation of department ) , ( country of department ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of department ) equal to ( airline of management ) ) ) ) , grouped by ( airline of department ) , ordered by ( ( the number of ( all items ) ) ) , limited to the top ( 1 )", "question": "Find the abbreviation and country of the airline that has fewest number of flights?", "label": 1, "remark": "positive"}
{"sql": "SELECT section_name ,  section_description FROM Sections", "translated_sql": "( section name ) , ( section description ) that belongs to ( sections )", "question": "What are the names and descriptions of all the sections?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "translated_sql": "( template type code of likes ) that belongs to ( ( templates ) , and ( ( documents ) satisfied that ( ( template id of likes ) equal to ( template id of highschooler ) ) ) ) , that have ( ( document name of highschooler ) equal to ( data base ) )", "question": "What is the template type code of the template used by document without the name \"Data base\"?", "label": 0, "remark": "logic"}
{"sql": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( name of highschooler ) , ( capacity of highschooler ) that belongs to ( ( concert ) , and ( ( stadium ) satisfied that ( ( stadium id of likes ) equal to ( stadium id of highschooler ) ) ) ) , that have ( ( year of likes ) greater than or equal to ( 2014 ) ) , grouped by ( stadium id of highschooler ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Show the stadium name and capacity with most number of concerts in year 2010 or after.", "label": 0, "remark": "value int"}
{"sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "translated_sql": "( the average of ( age ) ) , ( the minimum of ( age ) ) , ( the maximum of ( age ) ) that belongs to ( singer ) , that have ( ( country ) equal to ( 'france' ) )", "question": "What is the average, minimum, and maximum age of all singers not from France?", "label": 0, "remark": "logic"}
{"sql": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1", "translated_sql": "( visitor id of evaluation ) , ( name of employee ) , ( level of membership of employee ) that belongs to ( ( visitor ) , and ( ( visit ) satisfied that ( ( id of employee ) equal to ( visitor id of evaluation ) ) ) ) , grouped by ( visitor id of evaluation ) , ordered by ( ( the sum of ( total spent of evaluation ) ) in descending order ) , limited to the top ( 1 )", "question": "What are the id of visitors who have spent the largest amount of money in total in all museum tickets?", "label": 0, "remark": "value col"}
{"sql": "SELECT grade FROM Highschooler", "translated_sql": "( grade ) that belongs to ( highschooler )", "question": "What is the grade of each high schooler?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"", "translated_sql": "( name of department ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( language of management ) equal to ( english ) ), and intersect with ( ( name of department ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( language of management ) equal to ( french ) ))", "question": "What are the names of nations speak both English and French?", "label": 1, "remark": "positive"}
{"sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1", "translated_sql": "( year of founded ) that belongs to ( ( orchestra ) , and ( ( performance ) satisfied that ( ( orchestra id of likes ) equal to ( orchestra id of highschooler ) ) ) ) , grouped by ( orchestra id of highschooler ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )", "question": "What are years of founding for orchestras that have had more than two performances?", "label": 0, "remark": "value int"}
{"sql": "SELECT count(*) FROM FLIGHTS", "translated_sql": "( the number of ( all items ) ) that belongs to ( flights )", "question": "How many flights do we have?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id", "translated_sql": "( name of management ) , ( the number of ( all items ) ) that belongs to ( ( singer in concert ) , and ( ( singer ) satisfied that ( ( singer id of department ) equal to ( singer id of management ) ) ) ) , grouped by ( singer id of management )", "question": "What are the names of the singers and number of concerts for each person?", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "translated_sql": "( distinct ( first name of department ) ) , ( treatment type description of head ) that belongs to ( ( professionals ) , and ( ( treatments ) satisfied that ( ( professional id of department ) equal to ( professional id of management ) ) ) , and ( ( treatment types ) satisfied that ( ( treatment type code of management ) equal to ( treatment type code of head ) ) ) )", "question": "List the first name of all the professionals along with the description of the treatment they have done.", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2", "translated_sql": "( name of highschooler ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( student id of likes ) equal to ( id of highschooler ) ) ) ) , grouped by ( student id of likes ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )", "question": "Show the names of students who have at most 2 likes.", "label": 0, "remark": "logic"}
{"sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "translated_sql": "( state ) that belongs to ( owners ), and intersect with ( ( state ) that belongs to ( professionals ))", "question": "Find the states where neither owners nor professionals live.", "label": 0, "remark": "logic"}
{"sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "translated_sql": "( name ) that belongs to ( singer ) , that have ( ( citizenship ) not equal to ( france ) )", "question": "List the name of singers whose citizenship is not \"America\".", "label": 0, "remark": "value str"}
{"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airlines ) satisfied that ( ( airline of department ) equal to ( uid of management ) ) ) ) , that have ( ( airline of management ) equal to ( jetblue airways ) )", "question": "How many flights does airline 'JetBlue Airways' have?", "label": 1, "remark": "positive"}
{"sql": "SELECT line_1 ,  line_2 FROM addresses", "translated_sql": "( line 1 ) , ( line 2 ) that belongs to ( addresses )", "question": "What is the first and second line for all addresses?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015", "translated_sql": "( name of management ) , ( location of management ) that belongs to ( ( concert ) , and ( ( stadium ) satisfied that ( ( stadium id of department ) equal to ( stadium id of management ) ) ) ) , that have ( ( year of department ) equal to ( 2014 ) ), and intersect with ( ( name of management ) , ( location of management ) that belongs to ( ( concert ) , and ( ( stadium ) satisfied that ( ( stadium id of department ) equal to ( stadium id of management ) ) ) ) , that have ( ( year of department ) equal to ( 2015 ) ))", "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "translated_sql": "( language of management ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( name of department ) equal to ( aruba ) ) , ordered by ( ( percentage ) in descending order ) , limited to the top ( 1 )", "question": "Which language is the most popular in Aruba?", "label": 1, "remark": "positive"}
{"sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "translated_sql": "( the maximum of ( final table made ) ) that belongs to ( poker player ) , that have ( ( earnings ) less than ( 200000 ) )", "question": "What is the maximum number of final tables made among poker players with earnings less than 300000?", "label": 0, "remark": "value int"}
{"sql": "SELECT count(*) FROM Templates", "translated_sql": "( the number of ( all items ) ) that belongs to ( templates )", "question": "How many templates do we have?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "translated_sql": "( the number of ( distinct ( winner name ) ) ) that belongs to ( matches ) , that have ( ( ( tourney name ) equal to ( 'wta championships' ) ) and ( ( winner hand ) equal to ( 'l' ) ) )", "question": "Find the number of right handed winners who participated in the WTA Championships.", "label": 0, "remark": "value str"}
{"sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1", "translated_sql": "( name of likes ) that belongs to ( ( conductor ) , and ( ( orchestra ) satisfied that ( ( conductor id of likes ) equal to ( conductor id of highschooler ) ) ) ) , grouped by ( conductor id of highschooler ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the name of the conductor who has conducted the least orchestras?", "label": 0, "remark": "logic"}
{"sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "translated_sql": "( id ) that belongs to ( tv channel ) , grouped by ( country ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )", "question": "What are the ids of all tv channels that have more than 2 TV channels?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "translated_sql": "( name of management ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of department ) equal to ( id of management ) ) ) ), and intersect with ( ( name of management ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( liked id of department ) equal to ( id of management ) ) ) ))", "question": "What are the names of high schoolers who both have friends and are liked?", "label": 1, "remark": "positive"}
{"sql": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade", "translated_sql": "( grade ) , ( the number of ( all items ) ) that belongs to ( highschooler ) , grouped by ( grade )", "question": "How many high schoolers are in each grade?", "label": 1, "remark": "positive"}
{"sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "translated_sql": "( song name ) that belongs to ( singer ) , that have ( ( age ) greater than ( the average of ( age ) ) that belongs to ( singer ) )", "question": "List all song names by singers above the average age.", "label": 1, "remark": "positive"}
{"sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "translated_sql": "( abbreviation ) that belongs to ( airlines ) , that have ( ( airline ) equal to ( jetblue airways ) )", "question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "label": 1, "remark": "positive"}
{"sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "translated_sql": "( model ) that belongs to ( car names ) , grouped by ( model ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Which model has the most version(make) of cars?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( country ) , that have ( ( continent ) equal to ( asia ) )", "question": "Count the number of countries in Asia.", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(capacity) ,  max(capacity) FROM stadium", "translated_sql": "( the average of ( capacity ) ) , ( the maximum of ( capacity ) ) that belongs to ( stadium )", "question": "What is the average and minimum capacities for all stations?", "label": 0, "remark": "value col"}
{"sql": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "translated_sql": "( title of management ) , ( name of department ) that belongs to ( ( singer ) , and ( ( song ) satisfied that ( ( singer id of department ) equal to ( singer id of management ) ) ) )", "question": "Show titles of songs and names of singers.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM teacher", "translated_sql": "( the number of ( all items ) ) that belongs to ( teacher )", "question": "What are the ids of the teachers?", "label": 0, "remark": "value col"}
{"sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( paragraphs ) , and ( ( documents ) satisfied that ( ( document id of department ) equal to ( document id of management ) ) ) ) , that have ( ( document name of management ) equal to ( 'summer show' ) )", "question": "How many paragraphs for the document with name 'Summer Show'?", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype", "translated_sql": "( the average of ( weight ) ) , ( pettype ) that belongs to ( pets ) , grouped by ( pettype )", "question": "What is the average weight for each type of pet?", "label": 1, "remark": "positive"}
{"sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "translated_sql": "( language ) , ( the number of ( all items ) ) that belongs to ( tv channel ) , grouped by ( language )", "question": "For each language, list the number of TV Channels that use it.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'", "translated_sql": "( accelerate of likes ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of likes ) equal to ( makeid of highschooler ) ) ) ) , that have ( ( make of highschooler ) equal to ( 'amc hornet sportabout (sw)' ) )", "question": "How many cylinders does the car have that makes amc hornet sportabout (sw)?", "label": 0, "remark": "value col"}
