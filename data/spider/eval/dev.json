{"sql": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;", "translated_sql": "( the average of ( horsepower ) ) that belongs to ( cars data ) , that have ( ( year ) less than ( 1980 ) )", "question": "the average horsepower of cars produced before 1980?", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "translated_sql": "( series name of countries ) that belongs to ( ( tv channel ) , and ( ( tv series ) satisfied that ( ( id of countries ) equal to ( channel of car makers ) ) ) ) , that have ( ( episode of car makers ) equal to ( a love of a lifetime ) )", "question": "series names of tv channels that have an episode \"A Love of a Lifetime\".", "label": "1", "remark": "positive"}
{"sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "translated_sql": "( the number of ( distinct ( series name ) ) ) , ( the number of ( distinct ( content ) ) ) that belongs to ( tv channel )", "question": "many distinct series names and distinct content for each tv channel?", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( airline of car makers ) equal to ( uid of countries ) ) ) ) , that have ( ( ( airline of countries ) equal to ( united airlines ) ) and ( ( destairport of car makers ) equal to ( asy ) ) )", "question": "many flights does the airline \"United Airlines\" belong to?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "translated_sql": "( model of countries ) that belongs to ( ( car names ) , and ( ( cars data ) satisfied that ( ( makeid of countries ) equal to ( id of car makers ) ) ) ) , that have ( ( cylinders of car makers ) equal to ( 4 ) ) , ordered by ( ( horsepower of car makers ) in descending order ) , limited to the top ( 1 )", "question": "is the model of the car with the largest number of cylinders and 4 horsepower?", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "translated_sql": "( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ), and intersect with ( ( name of car makers ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( liked id of countries ) equal to ( id of car makers ) ) ) ))", "question": "names of students who like friends.", "label": "0", "remark": "negative"}
{"sql": "SELECT count(DISTINCT current_address_id) FROM Students", "translated_sql": "( the number of ( distinct ( current address id ) ) ) that belongs to ( students )", "question": "the number of distinct current addresses of students.", "label": "1", "remark": "positive"}
{"sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "translated_sql": "( name ) that belongs to ( highschooler ), and except that ( ( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ))", "question": "the names of students who do not have a friend.", "label": "1", "remark": "positive"}
{"sql": "SELECT DISTINCT country FROM singer WHERE age  >  20", "translated_sql": "( distinct ( country ) ) that belongs to ( singer ) , that have ( ( age ) greater than ( 20 ) )", "question": "the distinct countries of singers who are older than 20.", "label": "1", "remark": "positive"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "translated_sql": "( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ), and intersect with ( ( name of car makers ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( liked id of countries ) equal to ( id of car makers ) ) ) ))", "question": "names of friends who are friends with some students?", "label": "0", "remark": "negative"}
{"sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "translated_sql": "( first name of students ) that belongs to ( ( students ) , and ( ( addresses ) satisfied that ( ( permanent address id of students ) equal to ( address id of addresses ) ) ) ) , that have ( ( ( country of addresses ) equal to ( 'haiti' ) ) or ( ( cell mobile number of students ) equal to ( '09700166582' ) ) )", "question": "the first names of all students who live in the country of Haiti and have cell phone number '09700166582'?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "translated_sql": "( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , that have ( ( sourceairport of car makers ) equal to ( cvo ) ), and except that ( ( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , that have ( ( sourceairport of car makers ) equal to ( apg ) ))", "question": "the names of airlines that do not have source flights in CV or apg?", "label": "0", "remark": "negative"}
{"sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")", "translated_sql": "( name ) that belongs to ( country ) , that have ( ( ( continent ) equal to ( asia ) ) and ( ( population ) greater than ( the maximum of ( population ) ) that belongs to ( country ) , that have ( ( continent ) equal to ( africa ) ) ) )", "question": "the country with the largest population", "label": "0", "remark": "negative"}
{"sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "translated_sql": "( the number of ( language of car makers ) ) , ( name of countries ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of countries ) equal to ( countrycode of car makers ) ) ) ) , grouped by ( name of countries ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )", "question": "are there more than two languages?", "label": "0", "remark": "negative"}
{"sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "translated_sql": "( airline ) that belongs to ( airlines ) , that have ( ( abbreviation ) equal to ( ual ) )", "question": "is the airline with abbreviationUAL?", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "translated_sql": "( make of car makers ) , ( year of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( year of countries ) equal to ( the minimum of ( year ) ) that belongs to ( cars data ) )", "question": "the make and year of the car that was used the most in the last year?", "label": "0", "remark": "negative"}
{"sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "translated_sql": "( first name of students ) that belongs to ( ( students ) , and ( ( addresses ) satisfied that ( ( permanent address id of students ) equal to ( address id of addresses ) ) ) ) , that have ( ( ( country of addresses ) equal to ( 'haiti' ) ) or ( ( cell mobile number of students ) equal to ( '09700166582' ) ) )", "question": "the first names of students who live in the country of 'Haiti' and have cell phone number '09700166582'.", "label": "0", "remark": "negative"}
{"sql": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"", "translated_sql": "( distinct ( name of city ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of students ) equal to ( countrycode of addresses ) ) ) , and ( ( city ) satisfied that ( ( code of students ) equal to ( countrycode of city ) ) ) ) , that have ( ( ( isofficial of addresses ) equal to ( 't' ) ) and ( ( language of addresses ) equal to ( 'chinese' ) ) and ( ( continent of students ) equal to ( asia ) ) )", "question": "the distinct names of cities that are official Chinese cities and are in the Asian region?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( degree program id of countries ) , ( degree summary name of countries ) that belongs to ( ( degree programs ) , and ( ( student enrolment ) satisfied that ( ( degree program id of countries ) equal to ( degree program id of car makers ) ) ) ) , grouped by ( degree program id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "is the id and summary name of the most popular degree?", "label": "0", "remark": "negative"}
{"sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "translated_sql": "( distinct ( model of countries ) ) that belongs to ( ( model list ) , and ( ( car names ) satisfied that ( ( model of countries ) equal to ( model of car makers ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of car makers ) equal to ( id of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( maker of countries ) equal to ( id of cars data ) ) ) ) , that have ( ( ( weight of car makers ) less than ( 3500 ) ) and ( ( fullname of cars data ) not equal to ( 'ford motor company' ) ) )", "question": "distinct models whose weight is less than 3500 and whose full name is not 'ford motor company'.", "label": "0", "remark": "negative"}
{"sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "translated_sql": "( airline ) , ( abbreviation ) that belongs to ( airlines ) , that have ( ( country ) equal to ( usa ) )", "question": "airline and abbreviation for all airlines in country \"USA\".", "label": "0", "remark": "negative"}
{"sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "translated_sql": "( template id ) that belongs to ( templates ) , that have ( ( ( template type code ) equal to ( pp ) ) or ( ( template type code ) equal to ( ppt ) ) )", "question": "ids for templates whose type code is \"PS\" or whose type code is \"pt\"?", "label": "0", "remark": "negative"}
{"sql": "SELECT DISTINCT country FROM singer WHERE age  >  20", "translated_sql": "( distinct ( country ) ) that belongs to ( singer ) , that have ( ( age ) greater than ( 20 ) )", "question": "distinct country of singers who are older than 20?", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( template id of countries ) , ( template type code of car makers ) that belongs to ( ( documents ) , and ( ( templates ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ) , grouped by ( template id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "the id and type code of the most popular document template?", "label": "1", "remark": "positive"}
{"sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "translated_sql": "( student id ) that belongs to ( friend ), and intersect with ( ( liked id ) that belongs to ( likes ))", "question": "ids of students who have friends with likes.", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( flights ) , that have ( ( destairport ) equal to ( ato ) )", "question": "many flights are operated from the airport ato?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "translated_sql": "( series name of countries ) that belongs to ( ( tv channel ) , and ( ( tv series ) satisfied that ( ( id of countries ) equal to ( channel of car makers ) ) ) ) , that have ( ( episode of car makers ) equal to ( a love of a lifetime ) )", "question": "are all the series from A Love of a Lifetime on TV?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "translated_sql": "( model of countries ) that belongs to ( ( car names ) , and ( ( cars data ) satisfied that ( ( makeid of countries ) equal to ( id of car makers ) ) ) ) , that have ( ( cylinders of car makers ) equal to ( 4 ) ) , ordered by ( ( horsepower of car makers ) in descending order ) , limited to the top ( 1 )", "question": "is the model of the car with the most horsepower, with the most cylinders?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "translated_sql": "( cylinders of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( model of car makers ) equal to ( 'volvo' ) ) , ordered by ( ( accelerate of countries ) in ascending order ) , limited to the top ( 1 )", "question": "the id of the car that has the highest accelerate?", "label": "0", "remark": "negative"}
{"sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "translated_sql": "( the number of ( distinct ( winner name ) ) ) that belongs to ( matches ) , that have ( ( ( tourney name ) equal to ( 'wta championships' ) ) and ( ( winner hand ) equal to ( 'l' ) ) )", "question": "the number of different players who won matches with WTA Championships and winner with left hand.", "label": "1", "remark": "positive"}
{"sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "translated_sql": "( country ) that belongs to ( airlines ) , that have ( ( airline ) equal to ( jetblue airways ) )", "question": "countries does jetblue airways operate?", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "translated_sql": "( make of car makers ) , ( year of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( year of countries ) equal to ( the minimum of ( year ) ) that belongs to ( cars data ) )", "question": "make and year of the car that has the smallest data data.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "translated_sql": "( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , grouped by ( airline of countries ) , that have ( ( the number of ( all items ) ) less than ( 200 ) )", "question": "the names of airlines that have less than 200 flight hours.", "label": "0", "remark": "negative"}
{"sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "translated_sql": "( distinct ( model of countries ) ) that belongs to ( ( model list ) , and ( ( car names ) satisfied that ( ( model of countries ) equal to ( model of car makers ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of car makers ) equal to ( id of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( maker of countries ) equal to ( id of cars data ) ) ) ) , that have ( ( ( weight of car makers ) less than ( 3500 ) ) and ( ( fullname of cars data ) not equal to ( 'ford motor company' ) ) )", "question": "distinct models that are not produced by the company whose weight is less than 3500 and whose full name is not 'Ford Motor Company'.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "translated_sql": "( countryname of countries ) , ( countryid of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) ) , grouped by ( countryid of countries ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 1 ) )", "question": "the country name and id of the country that has at least 1 car maker.", "label": "1", "remark": "positive"}
{"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( destairport of countries ) equal to ( airportcode of car makers ) ) ) , and ( ( airports ) satisfied that ( ( sourceairport of countries ) equal to ( airportcode of car makers ) ) ) ) , that have ( ( ( city of car makers ) equal to ( ashley ) ) and ( ( city of car makers ) equal to ( aberdeen ) ) )", "question": "number of flights from Ashley to Aberdeen?", "label": "0", "remark": "negative"}
{"sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "translated_sql": "( airline ) , ( abbreviation ) that belongs to ( airlines ) , that have ( ( country ) equal to ( usa ) )", "question": "the airline and the abbreviation of the airline whose country is \"USA\"?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( degree program id of countries ) , ( degree summary name of countries ) that belongs to ( ( degree programs ) , and ( ( student enrolment ) satisfied that ( ( degree program id of countries ) equal to ( degree program id of car makers ) ) ) ) , grouped by ( degree program id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "the id and summary name of the degree that has the most students enrolled.", "label": "1", "remark": "positive"}
{"sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "translated_sql": "( name ) that belongs to ( highschooler ), and except that ( ( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ))", "question": "names of students who don't have any friend?", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "translated_sql": "( countryname of countries ) , ( countryid of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) ) , grouped by ( countryid of countries ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 1 ) )", "question": "names and ids of countries that have at least 1 car maker?", "label": "1", "remark": "positive"}
{"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( destairport of countries ) equal to ( airportcode of car makers ) ) ) , and ( ( airports ) satisfied that ( ( sourceairport of countries ) equal to ( airportcode of car makers ) ) ) ) , that have ( ( ( city of car makers ) equal to ( ashley ) ) and ( ( city of car makers ) equal to ( aberdeen ) ) )", "question": "number of flights from ashley to Aberdeen", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "translated_sql": "( template id of car makers ) that belongs to ( ( ref template types ) , and ( ( templates ) satisfied that ( ( template type code of countries ) equal to ( template type code of car makers ) ) ) ) , that have ( ( template type description of countries ) equal to ( presentation ) )", "question": "the id of the template that has the description \"Presentation\".", "label": "1", "remark": "positive"}
{"sql": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"", "translated_sql": "( distinct ( name of city ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of students ) equal to ( countrycode of addresses ) ) ) , and ( ( city ) satisfied that ( ( code of students ) equal to ( countrycode of city ) ) ) ) , that have ( ( ( isofficial of addresses ) equal to ( 't' ) ) and ( ( language of addresses ) equal to ( 'chinese' ) ) and ( ( continent of students ) equal to ( asia ) ) )", "question": "the distinct names of cities that are English-speaking and speak the language of country asia.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( template id of countries ) , ( template type code of car makers ) that belongs to ( ( documents ) , and ( ( templates ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ) , grouped by ( template id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "the id and type of the template that has been used the most times.", "label": "1", "remark": "positive"}
{"sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "translated_sql": "( name of car makers ) , ( the number of ( all items ) ) that belongs to ( ( course arrange ) , and ( ( teacher ) satisfied that ( ( teacher id of countries ) equal to ( teacher id of car makers ) ) ) ) , grouped by ( name of car makers )", "question": "the name of each teacher and the number of courses they arrange.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';", "translated_sql": "( countryid of countries ) , ( countryname of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) ) , grouped by ( countryid of countries ) , that have ( ( the number of ( all items ) ) greater than ( 3 ) ) and ( countryid of countries ) , ( countryname of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) , and ( ( model list ) satisfied that ( ( id of car makers ) equal to ( maker of car makers ) ) ) ) , that have ( ( model of car makers ) equal to ( 'fiat' ) )", "question": "countryid and name of the countries that have more than 3 car makers and have more than 3 models.", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( airline of car makers ) equal to ( uid of countries ) ) ) ) , that have ( ( ( airline of countries ) equal to ( united airlines ) ) and ( ( destairport of car makers ) equal to ( asy ) ) )", "question": "the number of flights that are operated by United Airlines and end at an airport called \"ASY\".", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "translated_sql": "( country code of countries ) , ( first name of countries ) that belongs to ( ( players ) , and ( ( matches ) satisfied that ( ( player id of countries ) equal to ( winner id of car makers ) ) ) ) , that have ( ( tourney name of car makers ) equal to ( 'wta championships' ) ), and intersect with ( ( country code of countries ) , ( first name of countries ) that belongs to ( ( players ) , and ( ( matches ) satisfied that ( ( player id of countries ) equal to ( winner id of car makers ) ) ) ) , that have ( ( tourney name of car makers ) equal to ( 'australian open' ) ))", "question": "country code and first name of the players who won both the Wta Championships and Australian Open?", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "translated_sql": "( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , that have ( ( sourceairport of car makers ) equal to ( cvo ) ), and except that ( ( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , that have ( ( sourceairport of car makers ) equal to ( apg ) ))", "question": "the names of airlines that are associated with flights from CVO but not apg?", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "translated_sql": "( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , grouped by ( airline of countries ) , that have ( ( the number of ( all items ) ) less than ( 200 ) )", "question": "the number of flights for all airlines with less than 200.", "label": "0", "remark": "negative"}
{"sql": "SELECT DISTINCT country FROM singer WHERE age  >  20", "translated_sql": "( distinct ( country ) ) that belongs to ( singer ) , that have ( ( age ) greater than ( 20 ) )", "question": "all distinct countries that have singers older than 20?", "label": "1", "remark": "positive"}
{"sql": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1", "translated_sql": "( id of students ) , ( name of students ) , ( age of students ) that belongs to ( ( visitor ) , and ( ( visit ) satisfied that ( ( id of students ) equal to ( visitor id of addresses ) ) ) ) , grouped by ( id of students ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )", "question": "id, name, age for all visitors who visited more than 1.", "label": "0", "remark": "negative"}
{"sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "translated_sql": "( the number of ( distinct ( winner name ) ) ) that belongs to ( matches ) , that have ( ( ( tourney name ) equal to ( 'wta championships' ) ) and ( ( winner hand ) equal to ( 'l' ) ) )", "question": "number of distinct winners of matches in the Wta championships with winner hand L.", "label": "1", "remark": "positive"}
{"sql": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"", "translated_sql": "( distinct ( name of city ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of students ) equal to ( countrycode of addresses ) ) ) , and ( ( city ) satisfied that ( ( code of students ) equal to ( countrycode of city ) ) ) ) , that have ( ( ( isofficial of addresses ) equal to ( 't' ) ) and ( ( language of addresses ) equal to ( 'chinese' ) ) and ( ( continent of students ) equal to ( asia ) ) )", "question": "the distinct names of cities that are English-speaking and speak the language of country asia.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';", "translated_sql": "( countryid of countries ) , ( countryname of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) ) , grouped by ( countryid of countries ) , that have ( ( the number of ( all items ) ) greater than ( 3 ) ) and ( countryid of countries ) , ( countryname of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) , and ( ( model list ) satisfied that ( ( id of car makers ) equal to ( maker of car makers ) ) ) ) , that have ( ( model of car makers ) equal to ( 'fiat' ) )", "question": "3 countries that have more than 3 car makers and have more than 3 models?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "translated_sql": "( fname of countries ) , ( age of countries ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of countries ) equal to ( stuid of car makers ) ) ) , and ( ( pets ) satisfied that ( ( petid of car makers ) equal to ( petid of car makers ) ) ) ) , that have ( ( ( pettype of car makers ) equal to ( 'dog' ) ) and ( ( t1.stuid ) not in ( ( stuid of countries ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of countries ) equal to ( stuid of car makers ) ) ) , and ( ( pets ) satisfied that ( ( petid of car makers ) equal to ( petid of car makers ) ) ) ) , that have ( ( pettype of car makers ) equal to ( 'cat' ) ) ) ) )", "question": "the first name and age of the students who have a pet with type 'dog' but not cat?", "label": "1", "remark": "positive"}
{"sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( documents ) , and ( ( templates ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ) , that have ( ( template type code of car makers ) equal to ( 'ppt' ) )", "question": "the number of documents with type code PVT.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "translated_sql": "( accelerate of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( make of car makers ) equal to ( 'amc hornet sportabout (sw)' ) )", "question": "id of the car whose name is AMC hornet sportabout (sw)?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "translated_sql": "( countryname of countries ) , ( countryid of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) ) , grouped by ( countryid of countries ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 1 ) )", "question": "are the names and id of the countries that have at least one vehicle?", "label": "0", "remark": "negative"}
{"sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "translated_sql": "( distinct ( model of countries ) ) that belongs to ( ( model list ) , and ( ( car names ) satisfied that ( ( model of countries ) equal to ( model of car makers ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of car makers ) equal to ( id of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( maker of countries ) equal to ( id of cars data ) ) ) ) , that have ( ( ( weight of car makers ) less than ( 3500 ) ) and ( ( fullname of cars data ) not equal to ( 'ford motor company' ) ) )", "question": "are the different models of cars whose weight is lower than 3500 and whose full name is not 'Ford Motor Company'?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "translated_sql": "( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , grouped by ( airline of countries ) , that have ( ( the number of ( all items ) ) less than ( 200 ) )", "question": "all airlines that have less than 200 flights.", "label": "1", "remark": "positive"}
{"sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( flights ) , that have ( ( destairport ) equal to ( ato ) )", "question": "the number of flights that go to the airport ato.", "label": "1", "remark": "positive"}
{"sql": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"", "translated_sql": "( distinct ( name of city ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of students ) equal to ( countrycode of addresses ) ) ) , and ( ( city ) satisfied that ( ( code of students ) equal to ( countrycode of city ) ) ) ) , that have ( ( ( isofficial of addresses ) equal to ( 't' ) ) and ( ( language of addresses ) equal to ( 'chinese' ) ) and ( ( continent of students ) equal to ( asia ) ) )", "question": "all the major cities in China that are official language of the language 'Chinese'.", "label": "0", "remark": "negative"}
{"sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "translated_sql": "( first name ) , ( middle name ) , ( last name ) that belongs to ( students ) , ordered by ( ( date left ) in ascending order ) , limited to the top ( 1 )", "question": "the first name, middle name, and last name of the student who left school most recently?", "label": "0", "remark": "negative"}
{"sql": "SELECT count(DISTINCT current_address_id) FROM Students", "translated_sql": "( the number of ( distinct ( current address id ) ) ) that belongs to ( students )", "question": "number of distinct current addresses of students.", "label": "1", "remark": "positive"}
{"sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( airline of car makers ) equal to ( uid of countries ) ) ) ) , that have ( ( ( airline of countries ) equal to ( united airlines ) ) and ( ( destairport of car makers ) equal to ( asy ) ) )", "question": "number of flights operated by airline \"United Airlines\" and \"Asy Airlines\".", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';", "translated_sql": "( countryid of countries ) , ( countryname of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) ) , grouped by ( countryid of countries ) , that have ( ( the number of ( all items ) ) greater than ( 3 ) ) and ( countryid of countries ) , ( countryname of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) , and ( ( model list ) satisfied that ( ( id of car makers ) equal to ( maker of car makers ) ) ) ) , that have ( ( model of car makers ) equal to ( 'fiat' ) )", "question": "the id and country name of countries that have more than 3 models or have more than 3 models.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( student id of countries ) , ( first name of countries ) , ( middle name of countries ) , ( last name of countries ) , ( the number of ( all items ) ) , ( student id of countries ) that belongs to ( ( students ) , and ( ( student enrolment ) satisfied that ( ( student id of countries ) equal to ( student id of car makers ) ) ) ) , grouped by ( student id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "student id, middle name, last name, last name, and the number of students enrolled in the most programs?", "label": "0", "remark": "negative"}
{"sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "translated_sql": "( country ) that belongs to ( airlines ) , that have ( ( airline ) equal to ( jetblue airways ) )", "question": "the countries where the airline JetBlue Airways is based.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "translated_sql": "( continent of countries ) , ( the number of ( all items ) ) that belongs to ( ( continents ) , and ( ( countries ) satisfied that ( ( contid of countries ) equal to ( continent of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( countryid of car makers ) equal to ( country of car makers ) ) ) ) , grouped by ( continent of countries )", "question": "many car companies are there in each country?", "label": "0", "remark": "negative"}
{"sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "translated_sql": "( first name ) , ( last name ) that belongs to ( players ) , ordered by ( ( birth date ) )", "question": "name and last name of all players ordered by birth date.", "label": "0", "remark": "negative"}
{"sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")", "translated_sql": "( name ) that belongs to ( country ) , that have ( ( ( continent ) equal to ( asia ) ) and ( ( population ) greater than ( the maximum of ( population ) ) that belongs to ( country ) , that have ( ( continent ) equal to ( africa ) ) ) )", "question": "the country with the largest population in africa", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( destairport of countries ) equal to ( airportcode of car makers ) ) ) , and ( ( airports ) satisfied that ( ( sourceairport of countries ) equal to ( airportcode of car makers ) ) ) ) , that have ( ( ( city of car makers ) equal to ( ashley ) ) and ( ( city of car makers ) equal to ( aberdeen ) ) )", "question": "is the number of flights from airports in city Ashley and Aberdeen?", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( flights ) , that have ( ( destairport ) equal to ( ato ) )", "question": "number of flights that are from ato airport?", "label": "0", "remark": "negative"}
{"sql": "SELECT count(DISTINCT current_address_id) FROM Students", "translated_sql": "( the number of ( distinct ( current address id ) ) ) that belongs to ( students )", "question": "the number of students living in the same address.", "label": "0", "remark": "negative"}
{"sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "translated_sql": "( template id ) that belongs to ( templates ) , that have ( ( ( template type code ) equal to ( pp ) ) or ( ( template type code ) equal to ( ppt ) ) )", "question": "the id of the template type code \"PPT\" or \"PPT\".", "label": "0", "remark": "negative"}
{"sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "translated_sql": "( first name ) , ( middle name ) , ( last name ) that belongs to ( students ) , ordered by ( ( date left ) in ascending order ) , limited to the top ( 1 )", "question": "the first name, middle name, and last name of the student who left school most recently.", "label": "0", "remark": "negative"}
{"sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "translated_sql": "( template type code ) that belongs to ( templates ), and except that ( ( template type code ) that belongs to ( ( templates ) , and ( ( documents ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ))", "question": "the type codes of templates that are not used by any document.", "label": "1", "remark": "positive"}
{"sql": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;", "translated_sql": "( the average of ( horsepower ) ) that belongs to ( cars data ) , that have ( ( year ) less than ( 1980 ) )", "question": "the average horsepower of all cars from before 1980.", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "translated_sql": "( make of car makers ) , ( year of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( year of countries ) equal to ( the minimum of ( year ) ) that belongs to ( cars data ) )", "question": "the name of the car that was made in the smallest year of data.", "label": "0", "remark": "negative"}
{"sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "translated_sql": "( country ) that belongs to ( airlines ) , that have ( ( airline ) equal to ( jetblue airways ) )", "question": "the country of the airline Jetblue Airlines?", "label": "1", "remark": "positive"}
{"sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "translated_sql": "( the number of ( distinct ( winner name ) ) ) that belongs to ( matches ) , that have ( ( ( tourney name ) equal to ( 'wta championships' ) ) and ( ( winner hand ) equal to ( 'l' ) ) )", "question": "the number of players who won both tourney name 'WTA Championships' and winner hand 'L'.", "label": "1", "remark": "positive"}
{"sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "translated_sql": "( name of students ) that belongs to ( ( employee ) , and ( ( evaluation ) satisfied that ( ( employee id of students ) equal to ( employee id of addresses ) ) ) ) , ordered by ( ( bonus of addresses ) in descending order ) , limited to the top ( 1 )", "question": "is the employee who has the highest score in all evaluations?", "label": "0", "remark": "negative"}
{"sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "translated_sql": "( the number of ( distinct ( winner name ) ) ) that belongs to ( matches ) , that have ( ( ( tourney name ) equal to ( 'wta championships' ) ) and ( ( winner hand ) equal to ( 'l' ) ) )", "question": "the number of distinct winner names for all tourney names with winner 'L'.", "label": "0", "remark": "negative"}
{"sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "translated_sql": "( first name ) , ( middle name ) , ( last name ) that belongs to ( students ) , ordered by ( ( date left ) in ascending order ) , limited to the top ( 1 )", "question": "the first name, middle name, and last name of the youngest student.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "translated_sql": "( killed of countries ) , ( injured of countries ) that belongs to ( ( death ) , and ( ( ship ) satisfied that ( ( caused by ship id of countries ) equal to ( id of car makers ) ) ) ) , that have ( ( tonnage of car makers ) equal to ( 't' ) )", "question": "the number of people killed and injured by ships caused by tonnage smaller than 't'?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';", "translated_sql": "( countryid of countries ) , ( countryname of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) ) , grouped by ( countryid of countries ) , that have ( ( the number of ( all items ) ) greater than ( 3 ) ) and ( countryid of countries ) , ( countryname of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) , and ( ( model list ) satisfied that ( ( id of car makers ) equal to ( maker of car makers ) ) ) ) , that have ( ( model of car makers ) equal to ( 'fiat' ) )", "question": "countries that have more than 3 car makers and which have more than 3 models?", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( flights ) , that have ( ( destairport ) equal to ( ato ) )", "question": "many flights with destination airport \"ATO\"", "label": "0", "remark": "negative"}
{"sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "translated_sql": "( template type code ) that belongs to ( templates ), and except that ( ( template type code ) that belongs to ( ( templates ) , and ( ( documents ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ))", "question": "the code of the template type that is not used in any documents.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "translated_sql": "( cylinders of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( model of car makers ) equal to ( 'volvo' ) ) , ordered by ( ( accelerate of countries ) in ascending order ) , limited to the top ( 1 )", "question": "is the id of the car with the model 'Volvo' that accelerates the most?", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( documents ) , and ( ( templates ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ) , that have ( ( template type code of car makers ) equal to ( 'ppt' ) )", "question": "the number of documents with type code 'PPT'", "label": "1", "remark": "positive"}
{"sql": "SELECT count(DISTINCT current_address_id) FROM Students", "translated_sql": "( the number of ( distinct ( current address id ) ) ) that belongs to ( students )", "question": "number of distinct current address ids of students.", "label": "1", "remark": "positive"}
{"sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "translated_sql": "( the number of ( distinct ( series name ) ) ) , ( the number of ( distinct ( content ) ) ) that belongs to ( tv channel )", "question": "many distinct series names and distinct content for each tv channel?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "translated_sql": "( accelerate of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( make of car makers ) equal to ( 'amc hornet sportabout (sw)' ) )", "question": "accelerations of the cars whose make is AMC hornet sportabout (sw)?", "label": "0", "remark": "negative"}
{"sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "translated_sql": "( first name of students ) that belongs to ( ( students ) , and ( ( addresses ) satisfied that ( ( permanent address id of students ) equal to ( address id of addresses ) ) ) ) , that have ( ( ( country of addresses ) equal to ( 'haiti' ) ) or ( ( cell mobile number of students ) equal to ( '09700166582' ) ) )", "question": "the first name of students who live in country Haiti and have cell phone number '09700166582'.", "label": "0", "remark": "negative"}
{"sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "translated_sql": "( the maximum of ( mpg ) ) that belongs to ( cars data ) , that have ( ( ( cylinders ) equal to ( 8 ) ) or ( ( year ) less than ( 1980 ) ) )", "question": "mpg of the car with cylinders equal to 8 or before 1980.", "label": "1", "remark": "positive"}
{"sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "translated_sql": "( country ) that belongs to ( airlines ) , that have ( ( airline ) equal to ( jetblue airways ) )", "question": "country of the airline JetBlue Airlines?", "label": "1", "remark": "positive"}
{"sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( airline of car makers ) equal to ( uid of countries ) ) ) ) , that have ( ( ( airline of countries ) equal to ( united airlines ) ) and ( ( destairport of car makers ) equal to ( asy ) ) )", "question": "many flights does United Airlines have?", "label": "0", "remark": "negative"}
{"sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "translated_sql": "( the number of ( distinct ( series name ) ) ) , ( the number of ( distinct ( content ) ) ) that belongs to ( tv channel )", "question": "many distinct series names and content?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "translated_sql": "( fname of countries ) , ( age of countries ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of countries ) equal to ( stuid of car makers ) ) ) , and ( ( pets ) satisfied that ( ( petid of car makers ) equal to ( petid of car makers ) ) ) ) , that have ( ( ( pettype of car makers ) equal to ( 'dog' ) ) and ( ( t1.stuid ) not in ( ( stuid of countries ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of countries ) equal to ( stuid of car makers ) ) ) , and ( ( pets ) satisfied that ( ( petid of car makers ) equal to ( petid of car makers ) ) ) ) , that have ( ( pettype of car makers ) equal to ( 'cat' ) ) ) ) )", "question": "the first name and age of the student who has a dog but not a cat?", "label": "1", "remark": "positive"}
{"sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "translated_sql": "( airline ) , ( abbreviation ) that belongs to ( airlines ) , that have ( ( country ) equal to ( usa ) )", "question": "airline and abbreviation for airlines from country \"USA\".", "label": "0", "remark": "negative"}
{"sql": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"", "translated_sql": "( distinct ( name of city ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of students ) equal to ( countrycode of addresses ) ) ) , and ( ( city ) satisfied that ( ( code of students ) equal to ( countrycode of city ) ) ) ) , that have ( ( ( isofficial of addresses ) equal to ( 't' ) ) and ( ( language of addresses ) equal to ( 'chinese' ) ) and ( ( continent of students ) equal to ( asia ) ) )", "question": "distinct names of cities that are official in the language of Chinese and continent asia?", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "translated_sql": "( killed of countries ) , ( injured of countries ) that belongs to ( ( death ) , and ( ( ship ) satisfied that ( ( caused by ship id of countries ) equal to ( id of car makers ) ) ) ) , that have ( ( tonnage of car makers ) equal to ( 't' ) )", "question": "are the killed and injured of ships with tonnage T2?", "label": "0", "remark": "negative"}
{"sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "translated_sql": "( first name ) , ( middle name ) , ( last name ) that belongs to ( students ) , ordered by ( ( date left ) in ascending order ) , limited to the top ( 1 )", "question": "first name, middle name, and last name has the least number of students left.", "label": "0", "remark": "negative"}
{"sql": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"", "translated_sql": "( distinct ( name of city ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of students ) equal to ( countrycode of addresses ) ) ) , and ( ( city ) satisfied that ( ( code of students ) equal to ( countrycode of city ) ) ) ) , that have ( ( ( isofficial of addresses ) equal to ( 't' ) ) and ( ( language of addresses ) equal to ( 'chinese' ) ) and ( ( continent of students ) equal to ( asia ) ) )", "question": "distinct cities in China where the language is English and the continent is asia?", "label": "0", "remark": "negative"}
{"sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "translated_sql": "( first name ) , ( middle name ) , ( last name ) that belongs to ( students ) , ordered by ( ( date left ) in ascending order ) , limited to the top ( 1 )", "question": "the first name, middle name, and last name of the student who left school most recently.", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "translated_sql": "( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ), and intersect with ( ( name of car makers ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( liked id of countries ) equal to ( id of car makers ) ) ) ))", "question": "the names of friends who have likes and likes.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "translated_sql": "( series name of countries ) that belongs to ( ( tv channel ) , and ( ( tv series ) satisfied that ( ( id of countries ) equal to ( channel of car makers ) ) ) ) , that have ( ( episode of car makers ) equal to ( a love of a lifetime ) )", "question": "the series name of the channel that has an episode titled \"A Love of a Lifetime\".", "label": "1", "remark": "positive"}
{"sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "translated_sql": "( distinct ( model of countries ) ) that belongs to ( ( model list ) , and ( ( car names ) satisfied that ( ( model of countries ) equal to ( model of car makers ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of car makers ) equal to ( id of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( maker of countries ) equal to ( id of cars data ) ) ) ) , that have ( ( ( weight of car makers ) less than ( 3500 ) ) and ( ( fullname of cars data ) not equal to ( 'ford motor company' ) ) )", "question": "the distinct models whose weight is less than 3500 and whose full name is not 'Ford Motor Company'.", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "translated_sql": "( make of car makers ) , ( year of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( year of countries ) equal to ( the minimum of ( year ) ) that belongs to ( cars data ) )", "question": "the make and year of the car that was used the most in the last year?", "label": "0", "remark": "negative"}
{"sql": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"", "translated_sql": "( distinct ( name of city ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of students ) equal to ( countrycode of addresses ) ) ) , and ( ( city ) satisfied that ( ( code of students ) equal to ( countrycode of city ) ) ) ) , that have ( ( ( isofficial of addresses ) equal to ( 't' ) ) and ( ( language of addresses ) equal to ( 'chinese' ) ) and ( ( continent of students ) equal to ( asia ) ) )", "question": "the distinct names of cities that are official Chinese cities in the \"continent\".", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "translated_sql": "( model of countries ) that belongs to ( ( car names ) , and ( ( cars data ) satisfied that ( ( makeid of countries ) equal to ( id of car makers ) ) ) ) , that have ( ( cylinders of car makers ) equal to ( 4 ) ) , ordered by ( ( horsepower of car makers ) in descending order ) , limited to the top ( 1 )", "question": "model of the car that has the highest horsepower?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( degree program id of countries ) , ( degree summary name of countries ) that belongs to ( ( degree programs ) , and ( ( student enrolment ) satisfied that ( ( degree program id of countries ) equal to ( degree program id of car makers ) ) ) ) , grouped by ( degree program id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "the id and summary name of the degree program that has the most student enrolment.", "label": "1", "remark": "positive"}
{"sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of countries ) equal to ( countrycode of car makers ) ) ) ) , that have ( ( ( name of countries ) equal to ( afghanistan ) ) and ( ( isofficial ) equal to ( t ) ) )", "question": "many countries are \"Afghanistan\" official?", "label": "0", "remark": "negative"}
{"sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "translated_sql": "( the maximum of ( mpg ) ) that belongs to ( cars data ) , that have ( ( ( cylinders ) equal to ( 8 ) ) or ( ( year ) less than ( 1980 ) ) )", "question": "me the mpg of the car with 8 or more wheels in 1980, which is the highest mpg before 1980.", "label": "0", "remark": "negative"}
{"sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "translated_sql": "( the number of ( language of car makers ) ) , ( name of countries ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of countries ) equal to ( countrycode of car makers ) ) ) ) , grouped by ( name of countries ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )", "question": "number of languages that are used by more than 2 countries.", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( destairport of countries ) equal to ( airportcode of car makers ) ) ) , and ( ( airports ) satisfied that ( ( sourceairport of countries ) equal to ( airportcode of car makers ) ) ) ) , that have ( ( ( city of car makers ) equal to ( ashley ) ) and ( ( city of car makers ) equal to ( aberdeen ) ) )", "question": "number of flights to ashley and Aberdeen?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "translated_sql": "( cylinders of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( model of car makers ) equal to ( 'volvo' ) ) , ordered by ( ( accelerate of countries ) in ascending order ) , limited to the top ( 1 )", "question": "are the cylinders of the car with the model with the highest accelerate?", "label": "0", "remark": "negative"}
{"sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "translated_sql": "( first name ) , ( last name ) that belongs to ( players ) , ordered by ( ( birth date ) )", "question": "the first name and last name of all players, ordered by birth date.", "label": "1", "remark": "positive"}
{"sql": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1", "translated_sql": "( id of students ) , ( name of students ) , ( age of students ) that belongs to ( ( visitor ) , and ( ( visit ) satisfied that ( ( id of students ) equal to ( visitor id of addresses ) ) ) ) , grouped by ( id of students ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )", "question": "the id, name and age of the visitor who made more than one visit.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "translated_sql": "( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , grouped by ( airline of countries ) , that have ( ( the number of ( all items ) ) less than ( 200 ) )", "question": "are the names of airlines that have more than 200 flights?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "translated_sql": "( accelerate of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( make of car makers ) equal to ( 'amc hornet sportabout (sw)' ) )", "question": "accelerate of the car with make AMC hornet sportabout (sw).", "label": "1", "remark": "positive"}
{"sql": "SELECT count(DISTINCT current_address_id) FROM Students", "translated_sql": "( the number of ( distinct ( current address id ) ) ) that belongs to ( students )", "question": "many different addresses do students live in?", "label": "0", "remark": "negative"}
{"sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "translated_sql": "( first name of students ) that belongs to ( ( students ) , and ( ( addresses ) satisfied that ( ( permanent address id of students ) equal to ( address id of addresses ) ) ) ) , that have ( ( ( country of addresses ) equal to ( 'haiti' ) ) or ( ( cell mobile number of students ) equal to ( '09700166582' ) ) )", "question": "the first names of students who are living in country 'Haiti' and have cell phone number '09700166582'?", "label": "0", "remark": "negative"}
{"sql": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"", "translated_sql": "( distinct ( name of city ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of students ) equal to ( countrycode of addresses ) ) ) , and ( ( city ) satisfied that ( ( code of students ) equal to ( countrycode of city ) ) ) ) , that have ( ( ( isofficial of addresses ) equal to ( 't' ) ) and ( ( language of addresses ) equal to ( 'chinese' ) ) and ( ( continent of students ) equal to ( asia ) ) )", "question": "all the major cities in China that are official language of the language 'Chinese'.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "translated_sql": "( accelerate of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( make of car makers ) equal to ( 'amc hornet sportabout (sw)' ) )", "question": "the accelerate data of the car named AMC hornet sportabout (sw).", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "translated_sql": "( continent of countries ) , ( the number of ( all items ) ) that belongs to ( ( continents ) , and ( ( countries ) satisfied that ( ( contid of countries ) equal to ( continent of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( countryid of car makers ) equal to ( country of car makers ) ) ) ) , grouped by ( continent of countries )", "question": "the number of cars produced by each country", "label": "0", "remark": "negative"}
{"sql": "SELECT count(DISTINCT current_address_id) FROM Students", "translated_sql": "( the number of ( distinct ( current address id ) ) ) that belongs to ( students )", "question": "number of distinct addresses of students?", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "translated_sql": "( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ), and intersect with ( ( name of car makers ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( liked id of countries ) equal to ( id of car makers ) ) ) ))", "question": "the names of the students who have friends who have likes.", "label": "1", "remark": "positive"}
{"sql": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"", "translated_sql": "( distinct ( name of city ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of students ) equal to ( countrycode of addresses ) ) ) , and ( ( city ) satisfied that ( ( code of students ) equal to ( countrycode of city ) ) ) ) , that have ( ( ( isofficial of addresses ) equal to ( 't' ) ) and ( ( language of addresses ) equal to ( 'chinese' ) ) and ( ( continent of students ) equal to ( asia ) ) )", "question": "the names of cities that are official Chinese cities in the \"continent\" of Asia.", "label": "0", "remark": "negative"}
{"sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "translated_sql": "( the maximum of ( mpg ) ) that belongs to ( cars data ) , that have ( ( ( cylinders ) equal to ( 8 ) ) or ( ( year ) less than ( 1980 ) ) )", "question": "is the average gas mileage of the car with 8 or more cylinders in the year before 1980?", "label": "0", "remark": "negative"}
{"sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "translated_sql": "( the maximum of ( mpg ) ) that belongs to ( cars data ) , that have ( ( ( cylinders ) equal to ( 8 ) ) or ( ( year ) less than ( 1980 ) ) )", "question": "is the mpg of the car with the cylinders equal to 8 or less after 1980?", "label": "0", "remark": "negative"}
{"sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "translated_sql": "( first name ) , ( middle name ) , ( last name ) that belongs to ( students ) , ordered by ( ( date left ) in ascending order ) , limited to the top ( 1 )", "question": "the first name, middle name, and last name of the student who left the school most recently?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "translated_sql": "( country code of countries ) , ( first name of countries ) that belongs to ( ( players ) , and ( ( matches ) satisfied that ( ( player id of countries ) equal to ( winner id of car makers ) ) ) ) , that have ( ( tourney name of car makers ) equal to ( 'wta championships' ) ), and intersect with ( ( country code of countries ) , ( first name of countries ) that belongs to ( ( players ) , and ( ( matches ) satisfied that ( ( player id of countries ) equal to ( winner id of car makers ) ) ) ) , that have ( ( tourney name of car makers ) equal to ( 'australian open' ) ))", "question": "country code and first name of players who won both the WTA Championships and Australian Open?", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( template id of countries ) , ( template type code of car makers ) that belongs to ( ( documents ) , and ( ( templates ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ) , grouped by ( template id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "the id and type code of the template that has been used the most.", "label": "1", "remark": "positive"}
{"sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "translated_sql": "( name of car makers ) , ( the number of ( all items ) ) that belongs to ( ( course arrange ) , and ( ( teacher ) satisfied that ( ( teacher id of countries ) equal to ( teacher id of car makers ) ) ) ) , grouped by ( name of car makers )", "question": "names of teachers and the number of courses they arrange.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( degree program id of countries ) , ( degree summary name of countries ) that belongs to ( ( degree programs ) , and ( ( student enrolment ) satisfied that ( ( degree program id of countries ) equal to ( degree program id of car makers ) ) ) ) , grouped by ( degree program id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "the id and summary name of the degree program that has the most student enrolment?", "label": "1", "remark": "positive"}
{"sql": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)", "translated_sql": "( name ) that belongs to ( museum ) , that have ( ( num of staff ) greater than ( the minimum of ( num of staff ) ) that belongs to ( museum ) , that have ( ( open year ) greater than ( 2010 ) ) )", "question": "names of museums that have more than one staff member working after 2010.", "label": "0", "remark": "negative"}
{"sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "translated_sql": "( first name ) , ( last name ) that belongs to ( players ) , ordered by ( ( birth date ) )", "question": "the first name and last name of all players, ordered by their birth date.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "translated_sql": "( model of countries ) that belongs to ( ( car names ) , and ( ( cars data ) satisfied that ( ( makeid of countries ) equal to ( id of car makers ) ) ) ) , that have ( ( cylinders of car makers ) equal to ( 4 ) ) , ordered by ( ( horsepower of car makers ) in descending order ) , limited to the top ( 1 )", "question": "model of the car with the most horsepower?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( degree program id of countries ) , ( degree summary name of countries ) that belongs to ( ( degree programs ) , and ( ( student enrolment ) satisfied that ( ( degree program id of countries ) equal to ( degree program id of car makers ) ) ) ) , grouped by ( degree program id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "the id and summary name of the degree program with the most student enrolment.", "label": "1", "remark": "positive"}
{"sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "translated_sql": "( name of car makers ) , ( the number of ( all items ) ) that belongs to ( ( course arrange ) , and ( ( teacher ) satisfied that ( ( teacher id of countries ) equal to ( teacher id of car makers ) ) ) ) , grouped by ( name of car makers )", "question": "the name of each teacher and the number of courses arranged by that teacher.", "label": "1", "remark": "positive"}
{"sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "translated_sql": "( the number of ( language of car makers ) ) , ( name of countries ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of countries ) equal to ( countrycode of car makers ) ) ) ) , grouped by ( name of countries ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )", "question": "number of languages in each country and name of country that has more than 2 languages.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "translated_sql": "( accelerate of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( make of car makers ) equal to ( 'amc hornet sportabout (sw)' ) )", "question": "is the acceleration data of the car with the name AMC hornet sportabout (sw)?", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( model list ) , and ( ( car makers ) satisfied that ( ( maker of countries ) equal to ( id of car makers ) ) ) , and ( ( countries ) satisfied that ( ( country of car makers ) equal to ( countryid of car makers ) ) ) ) , that have ( ( countryname of car makers ) equal to ( 'usa' ) )", "question": "many models are produced in the country ofusa", "label": "0", "remark": "negative"}
{"sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "translated_sql": "( name of students ) that belongs to ( ( employee ) , and ( ( evaluation ) satisfied that ( ( employee id of students ) equal to ( employee id of addresses ) ) ) ) , ordered by ( ( bonus of addresses ) in descending order ) , limited to the top ( 1 )", "question": "the name of the employee who has the highest bonus.", "label": "1", "remark": "positive"}
{"sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "translated_sql": "( the number of ( distinct ( winner name ) ) ) that belongs to ( matches ) , that have ( ( ( tourney name ) equal to ( 'wta championships' ) ) and ( ( winner hand ) equal to ( 'l' ) ) )", "question": "number of distinct winners of the tourney named 'Wta championships'.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "translated_sql": "( country code of countries ) , ( first name of countries ) that belongs to ( ( players ) , and ( ( matches ) satisfied that ( ( player id of countries ) equal to ( winner id of car makers ) ) ) ) , that have ( ( tourney name of car makers ) equal to ( 'wta championships' ) ), and intersect with ( ( country code of countries ) , ( first name of countries ) that belongs to ( ( players ) , and ( ( matches ) satisfied that ( ( player id of countries ) equal to ( winner id of car makers ) ) ) ) , that have ( ( tourney name of car makers ) equal to ( 'australian open' ) ))", "question": "the country code and first name of the player who won both the WTA Championships and the Australian Open?", "label": "1", "remark": "positive"}
{"sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "translated_sql": "( name ) that belongs to ( highschooler ), and except that ( ( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ))", "question": "names of students who don't have any friends.", "label": "1", "remark": "positive"}
{"sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "translated_sql": "( name of students ) that belongs to ( ( employee ) , and ( ( evaluation ) satisfied that ( ( employee id of students ) equal to ( employee id of addresses ) ) ) ) , ordered by ( ( bonus of addresses ) in descending order ) , limited to the top ( 1 )", "question": "the name of the employee who has the highest number of evaluations and gets the highest bonus.", "label": "0", "remark": "negative"}
{"sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "translated_sql": "( student id ) that belongs to ( friend ), and intersect with ( ( liked id ) that belongs to ( likes ))", "question": "the ids of all students who have friends who have likes?", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( documents ) , and ( ( templates ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ) , that have ( ( template type code of car makers ) equal to ( 'ppt' ) )", "question": "number of documents that have type code 'PPT'?", "label": "1", "remark": "positive"}
{"sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "translated_sql": "( distinct ( model of countries ) ) that belongs to ( ( model list ) , and ( ( car names ) satisfied that ( ( model of countries ) equal to ( model of car makers ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of car makers ) equal to ( id of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( maker of countries ) equal to ( id of cars data ) ) ) ) , that have ( ( ( weight of car makers ) less than ( 3500 ) ) and ( ( fullname of cars data ) not equal to ( 'ford motor company' ) ) )", "question": "distinct models that are not produced by the company whose weight is less than 3500 and whose full name is not 'Ford Motor Company'.", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( airline of car makers ) equal to ( uid of countries ) ) ) ) , that have ( ( ( airline of countries ) equal to ( united airlines ) ) and ( ( destairport of car makers ) equal to ( asy ) ) )", "question": "many flights does the airline \"United Airlines\" belong to?", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( documents ) , and ( ( templates ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ) , that have ( ( template type code of car makers ) equal to ( 'ppt' ) )", "question": "the number of documents that have the type code 'PPT'?", "label": "1", "remark": "positive"}
{"sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "translated_sql": "( the number of ( distinct ( series name ) ) ) , ( the number of ( distinct ( content ) ) ) that belongs to ( tv channel )", "question": "the number of distinct series and the number of different content.", "label": "0", "remark": "negative"}
{"sql": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;", "translated_sql": "( the average of ( horsepower ) ) that belongs to ( cars data ) , that have ( ( year ) less than ( 1980 ) )", "question": "is the average number of horsepower of the cars produced before 1980", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( model list ) , and ( ( car makers ) satisfied that ( ( maker of countries ) equal to ( id of car makers ) ) ) , and ( ( countries ) satisfied that ( ( country of car makers ) equal to ( countryid of car makers ) ) ) ) , that have ( ( countryname of car makers ) equal to ( 'usa' ) )", "question": "many models are made by the country of origin?", "label": "0", "remark": "negative"}
{"sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "translated_sql": "( distinct ( model of car makers ) ) that belongs to ( ( car names ) , and ( ( model list ) satisfied that ( ( model of countries ) equal to ( model of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( maker of car makers ) equal to ( id of car makers ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of countries ) equal to ( id of cars data ) ) ) ) , that have ( ( ( fullname of car makers ) equal to ( 'general motors' ) ) or ( ( weight of cars data ) greater than ( 3500 ) ) )", "question": "distinct models of cars whose full name is 'General Motors' or have a weight greater than 3500?", "label": "1", "remark": "positive"}
{"sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "translated_sql": "( the maximum of ( mpg ) ) that belongs to ( cars data ) , that have ( ( ( cylinders ) equal to ( 8 ) ) or ( ( year ) less than ( 1980 ) ) )", "question": "the mpg of the car with the cylinders equal to 8 or less before 1980?", "label": "0", "remark": "negative"}
{"sql": "SELECT count(DISTINCT current_address_id) FROM Students", "translated_sql": "( the number of ( distinct ( current address id ) ) ) that belongs to ( students )", "question": "the number of distinct students' current addresses.", "label": "1", "remark": "positive"}
{"sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "translated_sql": "( make of car makers ) , ( year of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( year of countries ) equal to ( the minimum of ( year ) ) that belongs to ( cars data ) )", "question": "are the make and year of the car that was used the most in the car data?", "label": "0", "remark": "negative"}
{"sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "translated_sql": "( distinct ( model of countries ) ) that belongs to ( ( model list ) , and ( ( car names ) satisfied that ( ( model of countries ) equal to ( model of car makers ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of car makers ) equal to ( id of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( maker of countries ) equal to ( id of cars data ) ) ) ) , that have ( ( ( weight of car makers ) less than ( 3500 ) ) and ( ( fullname of cars data ) not equal to ( 'ford motor company' ) ) )", "question": "the distinct names of the models whose weight is below 3500 and whose full name is not \"Ford Motor Company\".", "label": "0", "remark": "negative"}
{"sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "translated_sql": "( airline ) , ( abbreviation ) that belongs to ( airlines ) , that have ( ( country ) equal to ( usa ) )", "question": "the airline name and abbreviation for all flights from country \"USA\".", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "translated_sql": "( killed of countries ) , ( injured of countries ) that belongs to ( ( death ) , and ( ( ship ) satisfied that ( ( caused by ship id of countries ) equal to ( id of car makers ) ) ) ) , that have ( ( tonnage of car makers ) equal to ( 't' ) )", "question": "are the killed and injured of ships with tonnage T2?", "label": "0", "remark": "negative"}
{"sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "translated_sql": "( name ) that belongs to ( highschooler ), and except that ( ( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ))", "question": "the names of students who do not have any friends?", "label": "1", "remark": "positive"}
{"sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of countries ) equal to ( countrycode of car makers ) ) ) ) , that have ( ( ( name of countries ) equal to ( afghanistan ) ) and ( ( isofficial ) equal to ( t ) ) )", "question": "many languages does Afghanistan have?", "label": "0", "remark": "negative"}
{"sql": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)", "translated_sql": "( name ) that belongs to ( museum ) , that have ( ( num of staff ) greater than ( the minimum of ( num of staff ) ) that belongs to ( museum ) , that have ( ( open year ) greater than ( 2010 ) ) )", "question": "names of museums that have more than one staff member.", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "translated_sql": "( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ), and intersect with ( ( name of car makers ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( liked id of countries ) equal to ( id of car makers ) ) ) ))", "question": "the names of students who are friends with both likes and likes.", "label": "0", "remark": "negative"}
{"sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "translated_sql": "( first name of students ) that belongs to ( ( students ) , and ( ( addresses ) satisfied that ( ( permanent address id of students ) equal to ( address id of addresses ) ) ) ) , that have ( ( ( country of addresses ) equal to ( 'haiti' ) ) or ( ( cell mobile number of students ) equal to ( '09700166582' ) ) )", "question": "the first names of students who live in the country of Haiti and have cell phone number 09700166582?", "label": "0", "remark": "negative"}
{"sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "translated_sql": "( name ) that belongs to ( highschooler ), and except that ( ( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ))", "question": "names of students who do not have any friends.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( template id of countries ) , ( template type code of car makers ) that belongs to ( ( documents ) , and ( ( templates ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ) , grouped by ( template id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "id and type code of the template that has the most documents?", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "translated_sql": "( name of car makers ) , ( the number of ( all items ) ) that belongs to ( ( course arrange ) , and ( ( teacher ) satisfied that ( ( teacher id of countries ) equal to ( teacher id of car makers ) ) ) ) , grouped by ( name of car makers )", "question": "names of all teachers and the number of courses arranged by each teacher.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( student id of countries ) , ( first name of countries ) , ( middle name of countries ) , ( last name of countries ) , ( the number of ( all items ) ) , ( student id of countries ) that belongs to ( ( students ) , and ( ( student enrolment ) satisfied that ( ( student id of countries ) equal to ( student id of car makers ) ) ) ) , grouped by ( student id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "student id, middle name, last name, and number of students enrolled in the largest number of programs.", "label": "0", "remark": "negative"}
{"sql": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)", "translated_sql": "( name ) that belongs to ( museum ) , that have ( ( num of staff ) greater than ( the minimum of ( num of staff ) ) that belongs to ( museum ) , that have ( ( open year ) greater than ( 2010 ) ) )", "question": "are the names of museums that have a staff of more than the minimum number of staff for any museum opened after 2010?", "label": "0", "remark": "negative"}
{"sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "translated_sql": "( template type code ) that belongs to ( templates ), and except that ( ( template type code ) that belongs to ( ( templates ) , and ( ( documents ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ))", "question": "type codes that do not belong to any document.", "label": "1", "remark": "positive"}
{"sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "translated_sql": "( template type code ) that belongs to ( templates ), and except that ( ( template type code ) that belongs to ( ( templates ) , and ( ( documents ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ))", "question": "the type code of the template that is not used in any document.", "label": "1", "remark": "positive"}
{"sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "translated_sql": "( distinct ( model of countries ) ) that belongs to ( ( model list ) , and ( ( car names ) satisfied that ( ( model of countries ) equal to ( model of car makers ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of car makers ) equal to ( id of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( maker of countries ) equal to ( id of cars data ) ) ) ) , that have ( ( ( weight of car makers ) less than ( 3500 ) ) and ( ( fullname of cars data ) not equal to ( 'ford motor company' ) ) )", "question": "models whose weight is less than 3500 and whose full name is not 'Ford Motor Company'?", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "translated_sql": "( template id of car makers ) that belongs to ( ( ref template types ) , and ( ( templates ) satisfied that ( ( template type code of countries ) equal to ( template type code of car makers ) ) ) ) , that have ( ( template type description of countries ) equal to ( presentation ) )", "question": "the id of the template type described as Presentation?", "label": "1", "remark": "positive"}
{"sql": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"", "translated_sql": "( distinct ( name of city ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of students ) equal to ( countrycode of addresses ) ) ) , and ( ( city ) satisfied that ( ( code of students ) equal to ( countrycode of city ) ) ) ) , that have ( ( ( isofficial of addresses ) equal to ( 't' ) ) and ( ( language of addresses ) equal to ( 'chinese' ) ) and ( ( continent of students ) equal to ( asia ) ) )", "question": "distinct names of cities that are official in the language of Chinese and continent asia.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "translated_sql": "( country code of countries ) , ( first name of countries ) that belongs to ( ( players ) , and ( ( matches ) satisfied that ( ( player id of countries ) equal to ( winner id of car makers ) ) ) ) , that have ( ( tourney name of car makers ) equal to ( 'wta championships' ) ), and intersect with ( ( country code of countries ) , ( first name of countries ) that belongs to ( ( players ) , and ( ( matches ) satisfied that ( ( player id of countries ) equal to ( winner id of car makers ) ) ) ) , that have ( ( tourney name of car makers ) equal to ( 'australian open' ) ))", "question": "the country code and first name of players who won both the WTA Championships and Australian Open.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "translated_sql": "( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , grouped by ( airline of countries ) , that have ( ( the number of ( all items ) ) less than ( 200 ) )", "question": "airlines that have less than 200 flights.", "label": "1", "remark": "positive"}
{"sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of countries ) equal to ( countrycode of car makers ) ) ) ) , that have ( ( ( name of countries ) equal to ( afghanistan ) ) and ( ( isofficial ) equal to ( t ) ) )", "question": "number of countries that have an official language?", "label": "0", "remark": "negative"}
{"sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "translated_sql": "( distinct ( model of car makers ) ) that belongs to ( ( car names ) , and ( ( model list ) satisfied that ( ( model of countries ) equal to ( model of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( maker of car makers ) equal to ( id of car makers ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of countries ) equal to ( id of cars data ) ) ) ) , that have ( ( ( fullname of car makers ) equal to ( 'general motors' ) ) or ( ( weight of cars data ) greater than ( 3500 ) ) )", "question": "distinct models of cars that have full name 'General Motors' or have weight greater than 3500?", "label": "1", "remark": "positive"}
{"sql": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1", "translated_sql": "( id of students ) , ( name of students ) , ( age of students ) that belongs to ( ( visitor ) , and ( ( visit ) satisfied that ( ( id of students ) equal to ( visitor id of addresses ) ) ) ) , grouped by ( id of students ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )", "question": "the id, name and age of the visitor who made more than one visit?", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "translated_sql": "( accelerate of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( make of car makers ) equal to ( 'amc hornet sportabout (sw)' ) )", "question": "accelerate of the cars whose name is AMC hornet sportabout (sw)?", "label": "1", "remark": "positive"}
{"sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "translated_sql": "( country ) that belongs to ( airlines ) , that have ( ( airline ) equal to ( jetblue airways ) )", "question": "countries does jetblue airways belong to?", "label": "0", "remark": "negative"}
{"sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "translated_sql": "( the number of ( distinct ( series name ) ) ) , ( the number of ( distinct ( content ) ) ) that belongs to ( tv channel )", "question": "the number of distinct series name and the number of distinct content.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( student id of countries ) , ( first name of countries ) , ( middle name of countries ) , ( last name of countries ) , ( the number of ( all items ) ) , ( student id of countries ) that belongs to ( ( students ) , and ( ( student enrolment ) satisfied that ( ( student id of countries ) equal to ( student id of car makers ) ) ) ) , grouped by ( student id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "the student with the most enrollments. List the student ID, middle name, last name, and the number of enrollments.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( degree program id of countries ) , ( degree summary name of countries ) that belongs to ( ( degree programs ) , and ( ( student enrolment ) satisfied that ( ( degree program id of countries ) equal to ( degree program id of car makers ) ) ) ) , grouped by ( degree program id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "program id and summary name for the degree with the most student enrolment?", "label": "1", "remark": "positive"}
{"sql": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;", "translated_sql": "( the average of ( horsepower ) ) that belongs to ( cars data ) , that have ( ( year ) less than ( 1980 ) )", "question": "average horsepower of cars built before 1980.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "translated_sql": "( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , that have ( ( sourceairport of car makers ) equal to ( cvo ) ), and except that ( ( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , that have ( ( sourceairport of car makers ) equal to ( apg ) ))", "question": "the airports that have both a CVO and a APG flight but no APG flight.", "label": "0", "remark": "negative"}
{"sql": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)", "translated_sql": "( name ) that belongs to ( museum ) , that have ( ( num of staff ) greater than ( the minimum of ( num of staff ) ) that belongs to ( museum ) , that have ( ( open year ) greater than ( 2010 ) ) )", "question": "the names of museums that have more than one staff member after opening year.", "label": "0", "remark": "negative"}
{"sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "translated_sql": "( distinct ( model of countries ) ) that belongs to ( ( model list ) , and ( ( car names ) satisfied that ( ( model of countries ) equal to ( model of car makers ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of car makers ) equal to ( id of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( maker of countries ) equal to ( id of cars data ) ) ) ) , that have ( ( ( weight of car makers ) less than ( 3500 ) ) and ( ( fullname of cars data ) not equal to ( 'ford motor company' ) ) )", "question": "the distinct models of cars whose weight is less than 3500 and whose full name is not \"ford motor company\".", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "translated_sql": "( country code of countries ) , ( first name of countries ) that belongs to ( ( players ) , and ( ( matches ) satisfied that ( ( player id of countries ) equal to ( winner id of car makers ) ) ) ) , that have ( ( tourney name of car makers ) equal to ( 'wta championships' ) ), and intersect with ( ( country code of countries ) , ( first name of countries ) that belongs to ( ( players ) , and ( ( matches ) satisfied that ( ( player id of countries ) equal to ( winner id of car makers ) ) ) ) , that have ( ( tourney name of car makers ) equal to ( 'australian open' ) ))", "question": "the country code and first name of players who won both the Wta Championships and Australian Open?", "label": "1", "remark": "positive"}
{"sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "translated_sql": "( country ) that belongs to ( airlines ) , that have ( ( airline ) equal to ( jetblue airways ) )", "question": "are the countries of the airlines JetBlue Airways?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "translated_sql": "( accelerate of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( make of car makers ) equal to ( 'amc hornet sportabout (sw)' ) )", "question": "the acceleration times of all the cars that are involved in the amc hornet sportabout.", "label": "0", "remark": "negative"}
{"sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "translated_sql": "( airline ) that belongs to ( airlines ) , that have ( ( abbreviation ) equal to ( ual ) )", "question": "names of all airlines with abbreviation \"UAL\".", "label": "1", "remark": "positive"}
{"sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of countries ) equal to ( countrycode of car makers ) ) ) ) , that have ( ( ( name of countries ) equal to ( afghanistan ) ) and ( ( isofficial ) equal to ( t ) ) )", "question": "the number of languages that are official in Afghanistan.", "label": "1", "remark": "positive"}
{"sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "translated_sql": "( name ) that belongs to ( highschooler ), and except that ( ( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ))", "question": "the names of students who do not have any friends.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "translated_sql": "( country code of countries ) , ( first name of countries ) that belongs to ( ( players ) , and ( ( matches ) satisfied that ( ( player id of countries ) equal to ( winner id of car makers ) ) ) ) , that have ( ( tourney name of car makers ) equal to ( 'wta championships' ) ), and intersect with ( ( country code of countries ) , ( first name of countries ) that belongs to ( ( players ) , and ( ( matches ) satisfied that ( ( player id of countries ) equal to ( winner id of car makers ) ) ) ) , that have ( ( tourney name of car makers ) equal to ( 'australian open' ) ))", "question": "country code and first name of the players who won both the WTA championships and Australian open.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( student id of countries ) , ( first name of countries ) , ( middle name of countries ) , ( last name of countries ) , ( the number of ( all items ) ) , ( student id of countries ) that belongs to ( ( students ) , and ( ( student enrolment ) satisfied that ( ( student id of countries ) equal to ( student id of car makers ) ) ) ) , grouped by ( student id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "id, middle name, last name, and the number of students enrolled in the school.", "label": "0", "remark": "negative"}
{"sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "translated_sql": "( template id ) that belongs to ( templates ) , that have ( ( ( template type code ) equal to ( pp ) ) or ( ( template type code ) equal to ( ppt ) ) )", "question": "the id of the template type code \"PPT\" or type code \"PPT\"?", "label": "0", "remark": "negative"}
{"sql": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;", "translated_sql": "( the average of ( horsepower ) ) that belongs to ( cars data ) , that have ( ( year ) less than ( 1980 ) )", "question": "the average horsepower of the cars that were produced before 1980.", "label": "1", "remark": "positive"}
{"sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of countries ) equal to ( countrycode of car makers ) ) ) ) , that have ( ( ( name of countries ) equal to ( afghanistan ) ) and ( ( isofficial ) equal to ( t ) ) )", "question": "many languages are there in Afghanistan and is official?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( template id of countries ) , ( template type code of car makers ) that belongs to ( ( documents ) , and ( ( templates ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ) , grouped by ( template id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "is the id and type code of the most popular document?", "label": "0", "remark": "negative"}
{"sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "translated_sql": "( country ) that belongs to ( airlines ) , that have ( ( airline ) equal to ( jetblue airways ) )", "question": "the country of the airline Jetblue Airlines?", "label": "1", "remark": "positive"}
{"sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "translated_sql": "( name of car makers ) , ( the number of ( all items ) ) that belongs to ( ( course arrange ) , and ( ( teacher ) satisfied that ( ( teacher id of countries ) equal to ( teacher id of car makers ) ) ) ) , grouped by ( name of car makers )", "question": "name of each teacher and the number of courses arranged by each teacher.", "label": "1", "remark": "positive"}
{"sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( documents ) , and ( ( templates ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ) , that have ( ( template type code of car makers ) equal to ( 'ppt' ) )", "question": "number of documents that have the type code 'PPT'.", "label": "1", "remark": "positive"}
{"sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "translated_sql": "( the number of ( distinct ( series name ) ) ) , ( the number of ( distinct ( content ) ) ) that belongs to ( tv channel )", "question": "the number of different series and series and the number of different content.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "translated_sql": "( model of countries ) that belongs to ( ( car names ) , and ( ( cars data ) satisfied that ( ( makeid of countries ) equal to ( id of car makers ) ) ) ) , that have ( ( cylinders of car makers ) equal to ( 4 ) ) , ordered by ( ( horsepower of car makers ) in descending order ) , limited to the top ( 1 )", "question": "model of the car with the most horsepower.", "label": "0", "remark": "negative"}
{"sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "translated_sql": "( student id ) that belongs to ( friend ), and intersect with ( ( liked id ) that belongs to ( likes ))", "question": "ids for friends and liked ids.", "label": "0", "remark": "negative"}
{"sql": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)", "translated_sql": "( name ) that belongs to ( museum ) , that have ( ( num of staff ) greater than ( the minimum of ( num of staff ) ) that belongs to ( museum ) , that have ( ( open year ) greater than ( 2010 ) ) )", "question": "the name of museums that have more than one staff member and which have more than one staff member.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "translated_sql": "( model of countries ) that belongs to ( ( car names ) , and ( ( cars data ) satisfied that ( ( makeid of countries ) equal to ( id of car makers ) ) ) ) , that have ( ( cylinders of car makers ) equal to ( 4 ) ) , ordered by ( ( horsepower of car makers ) in descending order ) , limited to the top ( 1 )", "question": "the model of the car with the most horsepower in cylinders?", "label": "0", "remark": "negative"}
{"sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")", "translated_sql": "( name ) that belongs to ( country ) , that have ( ( ( continent ) equal to ( asia ) ) and ( ( population ) greater than ( the maximum of ( population ) ) that belongs to ( country ) , that have ( ( continent ) equal to ( africa ) ) ) )", "question": "the country with the largest population of asia", "label": "0", "remark": "negative"}
{"sql": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;", "translated_sql": "( the average of ( horsepower ) ) that belongs to ( cars data ) , that have ( ( year ) less than ( 1980 ) )", "question": "the average horsepower of all cars that were produced before 1980.", "label": "1", "remark": "positive"}
{"sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "translated_sql": "( country ) that belongs to ( airlines ) , that have ( ( airline ) equal to ( jetblue airways ) )", "question": "country does jetblue airways belong to?", "label": "0", "remark": "negative"}
{"sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "translated_sql": "( distinct ( model of car makers ) ) that belongs to ( ( car names ) , and ( ( model list ) satisfied that ( ( model of countries ) equal to ( model of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( maker of car makers ) equal to ( id of car makers ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of countries ) equal to ( id of cars data ) ) ) ) , that have ( ( ( fullname of car makers ) equal to ( 'general motors' ) ) or ( ( weight of cars data ) greater than ( 3500 ) ) )", "question": "the distinct models of cars that have either a full name 'General Motors' or a weight of more than 3500.", "label": "1", "remark": "positive"}
{"sql": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1", "translated_sql": "( id of students ) , ( name of students ) , ( age of students ) that belongs to ( ( visitor ) , and ( ( visit ) satisfied that ( ( id of students ) equal to ( visitor id of addresses ) ) ) ) , grouped by ( id of students ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )", "question": "the id, name, and age for all visitors who visited more than one time.", "label": "1", "remark": "positive"}
{"sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "translated_sql": "( distinct ( model of car makers ) ) that belongs to ( ( car names ) , and ( ( model list ) satisfied that ( ( model of countries ) equal to ( model of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( maker of car makers ) equal to ( id of car makers ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of countries ) equal to ( id of cars data ) ) ) ) , that have ( ( ( fullname of car makers ) equal to ( 'general motors' ) ) or ( ( weight of cars data ) greater than ( 3500 ) ) )", "question": "models that are either 'General Motors' or have weight greater than 3500?", "label": "0", "remark": "negative"}
{"sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "translated_sql": "( template type code ) that belongs to ( templates ), and except that ( ( template type code ) that belongs to ( ( templates ) , and ( ( documents ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ))", "question": "the type codes of the templates that are not used by any document", "label": "1", "remark": "positive"}
{"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( destairport of countries ) equal to ( airportcode of car makers ) ) ) , and ( ( airports ) satisfied that ( ( sourceairport of countries ) equal to ( airportcode of car makers ) ) ) ) , that have ( ( ( city of car makers ) equal to ( ashley ) ) and ( ( city of car makers ) equal to ( aberdeen ) ) )", "question": "number of flights from ashley to Aberdeen.", "label": "0", "remark": "negative"}
{"sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "translated_sql": "( name ) that belongs to ( highschooler ), and except that ( ( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ))", "question": "the names of students who are not friends with any other student.", "label": "1", "remark": "positive"}
{"sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( documents ) , and ( ( templates ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ) , that have ( ( template type code of car makers ) equal to ( 'ppt' ) )", "question": "many documents have the type code 'PPT' in them?", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( documents ) , and ( ( templates ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ) , that have ( ( template type code of car makers ) equal to ( 'ppt' ) )", "question": "many documents have the type code 'PPT' in them?", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( flights ) , that have ( ( destairport ) equal to ( ato ) )", "question": "many flights go to the ato airport?", "label": "0", "remark": "negative"}
{"sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "translated_sql": "( name of students ) that belongs to ( ( employee ) , and ( ( evaluation ) satisfied that ( ( employee id of students ) equal to ( employee id of addresses ) ) ) ) , ordered by ( ( bonus of addresses ) in descending order ) , limited to the top ( 1 )", "question": "name of the employee who has the highest number of bonuses?", "label": "1", "remark": "positive"}
{"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( destairport of countries ) equal to ( airportcode of car makers ) ) ) , and ( ( airports ) satisfied that ( ( sourceairport of countries ) equal to ( airportcode of car makers ) ) ) ) , that have ( ( ( city of car makers ) equal to ( ashley ) ) and ( ( city of car makers ) equal to ( aberdeen ) ) )", "question": "number of flights from Ashley to Aberdeen?", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( model list ) , and ( ( car makers ) satisfied that ( ( maker of countries ) equal to ( id of car makers ) ) ) , and ( ( countries ) satisfied that ( ( country of car makers ) equal to ( countryid of car makers ) ) ) ) , that have ( ( countryname of car makers ) equal to ( 'usa' ) )", "question": "the number of models produced by the country named USA", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "translated_sql": "( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , grouped by ( airline of countries ) , that have ( ( the number of ( all items ) ) less than ( 200 ) )", "question": "the number of flights for all airlines with number less than 200?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( template id of countries ) , ( template type code of car makers ) that belongs to ( ( documents ) , and ( ( templates ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ) , grouped by ( template id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "the id and type code of the template with the most documents?", "label": "1", "remark": "positive"}
{"sql": "SELECT DISTINCT country FROM singer WHERE age  >  20", "translated_sql": "( distinct ( country ) ) that belongs to ( singer ) , that have ( ( age ) greater than ( 20 ) )", "question": "distinct countries of singers older than 20?", "label": "1", "remark": "positive"}
{"sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "translated_sql": "( first name of students ) that belongs to ( ( students ) , and ( ( addresses ) satisfied that ( ( permanent address id of students ) equal to ( address id of addresses ) ) ) ) , that have ( ( ( country of addresses ) equal to ( 'haiti' ) ) or ( ( cell mobile number of students ) equal to ( '09700166582' ) ) )", "question": "the first name of students who live in country 'haiti' and have cell phone number '09700166582'.", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "translated_sql": "( template id of car makers ) that belongs to ( ( ref template types ) , and ( ( templates ) satisfied that ( ( template type code of countries ) equal to ( template type code of car makers ) ) ) ) , that have ( ( template type description of countries ) equal to ( presentation ) )", "question": "ids of the templates that have type description \"Presentation\".", "label": "1", "remark": "positive"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "translated_sql": "( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ), and intersect with ( ( name of car makers ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( liked id of countries ) equal to ( id of car makers ) ) ) ))", "question": "the names of students who have both a friend and a student who has a friend.", "label": "0", "remark": "negative"}
{"sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "translated_sql": "( the number of ( distinct ( winner name ) ) ) that belongs to ( matches ) , that have ( ( ( tourney name ) equal to ( 'wta championships' ) ) and ( ( winner hand ) equal to ( 'l' ) ) )", "question": "many distinct winners of the tourney named Wta championships?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';", "translated_sql": "( countryid of countries ) , ( countryname of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) ) , grouped by ( countryid of countries ) , that have ( ( the number of ( all items ) ) greater than ( 3 ) ) and ( countryid of countries ) , ( countryname of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) , and ( ( model list ) satisfied that ( ( id of car makers ) equal to ( maker of car makers ) ) ) ) , that have ( ( model of car makers ) equal to ( 'fiat' ) )", "question": "countries have more than 3 car makers and have more than 3 models? List the countryid and name.", "label": "0", "remark": "negative"}
{"sql": "SELECT DISTINCT country FROM singer WHERE age  >  20", "translated_sql": "( distinct ( country ) ) that belongs to ( singer ) , that have ( ( age ) greater than ( 20 ) )", "question": "distinct countries that have singers older than 20?", "label": "1", "remark": "positive"}
{"sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "translated_sql": "( template id ) that belongs to ( templates ) , that have ( ( ( template type code ) equal to ( pp ) ) or ( ( template type code ) equal to ( ppt ) ) )", "question": "ids of templates whose type code is \"PS\" or whose type code is \"Ppt\"?", "label": "0", "remark": "negative"}
{"sql": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1", "translated_sql": "( id of students ) , ( name of students ) , ( age of students ) that belongs to ( ( visitor ) , and ( ( visit ) satisfied that ( ( id of students ) equal to ( visitor id of addresses ) ) ) ) , grouped by ( id of students ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )", "question": "the id, name, and age of the visitors who visited more than 1 place.", "label": "0", "remark": "negative"}
{"sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "translated_sql": "( the number of ( language of car makers ) ) , ( name of countries ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of countries ) equal to ( countrycode of car makers ) ) ) ) , grouped by ( name of countries ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )", "question": "many languages are there in the country that has more than 2 languages?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "translated_sql": "( killed of countries ) , ( injured of countries ) that belongs to ( ( death ) , and ( ( ship ) satisfied that ( ( caused by ship id of countries ) equal to ( id of car makers ) ) ) ) , that have ( ( tonnage of car makers ) equal to ( 't' ) )", "question": "the killed and injured of ships with tonnage T2.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "translated_sql": "( series name of countries ) that belongs to ( ( tv channel ) , and ( ( tv series ) satisfied that ( ( id of countries ) equal to ( channel of car makers ) ) ) ) , that have ( ( episode of car makers ) equal to ( a love of a lifetime ) )", "question": "series are on TV Channel A Love of a Lifetime?", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "translated_sql": "( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ), and intersect with ( ( name of car makers ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( liked id of countries ) equal to ( id of car makers ) ) ) ))", "question": "the names of students who are friends with both likes and dislikes.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "translated_sql": "( cylinders of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( model of car makers ) equal to ( 'volvo' ) ) , ordered by ( ( accelerate of countries ) in ascending order ) , limited to the top ( 1 )", "question": "the id of the car that has the highest accelerate?", "label": "0", "remark": "negative"}
{"sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "translated_sql": "( the number of ( language of car makers ) ) , ( name of countries ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of countries ) equal to ( countrycode of car makers ) ) ) ) , grouped by ( name of countries ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )", "question": "the number of languages that are used by more than one country.", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "translated_sql": "( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ), and intersect with ( ( name of car makers ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( liked id of countries ) equal to ( id of car makers ) ) ) ))", "question": "names of friends who have likes?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "translated_sql": "( countryname of countries ) , ( countryid of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) ) , grouped by ( countryid of countries ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 1 ) )", "question": "the country name and id of the country that has at least 1 car maker.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "translated_sql": "( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , grouped by ( airline of countries ) , that have ( ( the number of ( all items ) ) less than ( 200 ) )", "question": "the names of airlines that have more than 200 flights.", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "translated_sql": "( template id of car makers ) that belongs to ( ( ref template types ) , and ( ( templates ) satisfied that ( ( template type code of countries ) equal to ( template type code of car makers ) ) ) ) , that have ( ( template type description of countries ) equal to ( presentation ) )", "question": "ids of the templates described as presentation.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( degree program id of countries ) , ( degree summary name of countries ) that belongs to ( ( degree programs ) , and ( ( student enrolment ) satisfied that ( ( degree program id of countries ) equal to ( degree program id of car makers ) ) ) ) , grouped by ( degree program id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "the id and summary name of the degree program with the most student enrolment?", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "translated_sql": "( series name of countries ) that belongs to ( ( tv channel ) , and ( ( tv series ) satisfied that ( ( id of countries ) equal to ( channel of car makers ) ) ) ) , that have ( ( episode of car makers ) equal to ( a love of a lifetime ) )", "question": "the series name of the channel that has an episode titled \"A Love of a Lifetime\".", "label": "1", "remark": "positive"}
{"sql": "SELECT DISTINCT country FROM singer WHERE age  >  20", "translated_sql": "( distinct ( country ) ) that belongs to ( singer ) , that have ( ( age ) greater than ( 20 ) )", "question": "distinct countries of singers who are older than 20.", "label": "1", "remark": "positive"}
{"sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "translated_sql": "( template type code ) that belongs to ( templates ), and except that ( ( template type code ) that belongs to ( ( templates ) , and ( ( documents ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ))", "question": "the code of the template type that is not used in any document", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "translated_sql": "( continent of countries ) , ( the number of ( all items ) ) that belongs to ( ( continents ) , and ( ( countries ) satisfied that ( ( contid of countries ) equal to ( continent of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( countryid of car makers ) equal to ( country of car makers ) ) ) ) , grouped by ( continent of countries )", "question": "the continent of countries and the number of car makers on each continent.", "label": "0", "remark": "negative"}
{"sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "translated_sql": "( the maximum of ( mpg ) ) that belongs to ( cars data ) , that have ( ( ( cylinders ) equal to ( 8 ) ) or ( ( year ) less than ( 1980 ) ) )", "question": "is the mpg of the car with the least number of cylinders that was produced before 1980 or before 1980?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';", "translated_sql": "( countryid of countries ) , ( countryname of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) ) , grouped by ( countryid of countries ) , that have ( ( the number of ( all items ) ) greater than ( 3 ) ) and ( countryid of countries ) , ( countryname of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) , and ( ( model list ) satisfied that ( ( id of car makers ) equal to ( maker of car makers ) ) ) ) , that have ( ( model of car makers ) equal to ( 'fiat' ) )", "question": "the country with more than 3 models and the country with more than 3 models", "label": "0", "remark": "negative"}
{"sql": "SELECT DISTINCT country FROM singer WHERE age  >  20", "translated_sql": "( distinct ( country ) ) that belongs to ( singer ) , that have ( ( age ) greater than ( 20 ) )", "question": "all countries that have a singer older than 20.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "translated_sql": "( accelerate of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( make of car makers ) equal to ( 'amc hornet sportabout (sw)' ) )", "question": "accelerates the cars that are involved in amc hornet sportabout (sw).", "label": "0", "remark": "negative"}
{"sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "translated_sql": "( the number of ( language of car makers ) ) , ( name of countries ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of countries ) equal to ( countrycode of car makers ) ) ) ) , grouped by ( name of countries ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )", "question": "many languages are there in the country that has more than 2 languages?", "label": "0", "remark": "negative"}
{"sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "translated_sql": "( name of students ) that belongs to ( ( employee ) , and ( ( evaluation ) satisfied that ( ( employee id of students ) equal to ( employee id of addresses ) ) ) ) , ordered by ( ( bonus of addresses ) in descending order ) , limited to the top ( 1 )", "question": "the employee who has the highest total score in all evaluations?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "translated_sql": "( series name of countries ) that belongs to ( ( tv channel ) , and ( ( tv series ) satisfied that ( ( id of countries ) equal to ( channel of car makers ) ) ) ) , that have ( ( episode of car makers ) equal to ( a love of a lifetime ) )", "question": "the series names of the channels that have an episode \"A Love of a Lifetime\".", "label": "1", "remark": "positive"}
{"sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "translated_sql": "( name ) that belongs to ( highschooler ), and except that ( ( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ))", "question": "names of students who are friends but not friends?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "translated_sql": "( continent of countries ) , ( the number of ( all items ) ) that belongs to ( ( continents ) , and ( ( countries ) satisfied that ( ( contid of countries ) equal to ( continent of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( countryid of car makers ) equal to ( country of car makers ) ) ) ) , grouped by ( continent of countries )", "question": "each continent and the number of car makers on that continent.", "label": "1", "remark": "positive"}
{"sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "translated_sql": "( the number of ( distinct ( winner name ) ) ) that belongs to ( matches ) , that have ( ( ( tourney name ) equal to ( 'wta championships' ) ) and ( ( winner hand ) equal to ( 'l' ) ) )", "question": "many players have won both the WTA Championships and the WTA Championships?", "label": "0", "remark": "negative"}
{"sql": "SELECT count(DISTINCT current_address_id) FROM Students", "translated_sql": "( the number of ( distinct ( current address id ) ) ) that belongs to ( students )", "question": "many distinct current address ids exist for students.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "translated_sql": "( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , that have ( ( sourceairport of car makers ) equal to ( cvo ) ), and except that ( ( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , that have ( ( sourceairport of car makers ) equal to ( apg ) ))", "question": "the names of airlines that have never operated to CV but never to apg?", "label": "0", "remark": "negative"}
{"sql": "SELECT DISTINCT country FROM singer WHERE age  >  20", "translated_sql": "( distinct ( country ) ) that belongs to ( singer ) , that have ( ( age ) greater than ( 20 ) )", "question": "the distinct countries that have singers older than 20?", "label": "1", "remark": "positive"}
{"sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( model list ) , and ( ( car makers ) satisfied that ( ( maker of countries ) equal to ( id of car makers ) ) ) , and ( ( countries ) satisfied that ( ( country of car makers ) equal to ( countryid of car makers ) ) ) ) , that have ( ( countryname of car makers ) equal to ( 'usa' ) )", "question": "the number of models made in the country ofusa.", "label": "0", "remark": "negative"}
{"sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "translated_sql": "( the number of ( distinct ( winner name ) ) ) that belongs to ( matches ) , that have ( ( ( tourney name ) equal to ( 'wta championships' ) ) and ( ( winner hand ) equal to ( 'l' ) ) )", "question": "the number of distinct winners of the tourney named 'Wta Championships' and the winner hand.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "translated_sql": "( accelerate of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( make of car makers ) equal to ( 'amc hornet sportabout (sw)' ) )", "question": "the accelerate data of the car named AMC hornet sportabout (sw).", "label": "1", "remark": "positive"}
{"sql": "SELECT count(DISTINCT current_address_id) FROM Students", "translated_sql": "( the number of ( distinct ( current address id ) ) ) that belongs to ( students )", "question": "many students live there?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "translated_sql": "( model of countries ) that belongs to ( ( car names ) , and ( ( cars data ) satisfied that ( ( makeid of countries ) equal to ( id of car makers ) ) ) ) , that have ( ( cylinders of car makers ) equal to ( 4 ) ) , ordered by ( ( horsepower of car makers ) in descending order ) , limited to the top ( 1 )", "question": "the model of the car with the most horsepower that has 4 cylinders.", "label": "1", "remark": "positive"}
{"sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "translated_sql": "( the number of ( distinct ( winner name ) ) ) that belongs to ( matches ) , that have ( ( ( tourney name ) equal to ( 'wta championships' ) ) and ( ( winner hand ) equal to ( 'l' ) ) )", "question": "the number of different winner names of the matches held in the WTA Championships.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "translated_sql": "( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , grouped by ( airline of countries ) , that have ( ( the number of ( all items ) ) less than ( 200 ) )", "question": "the names of all airlines that have less than 200 flights.", "label": "1", "remark": "positive"}
{"sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "translated_sql": "( first name of students ) that belongs to ( ( students ) , and ( ( addresses ) satisfied that ( ( permanent address id of students ) equal to ( address id of addresses ) ) ) ) , that have ( ( ( country of addresses ) equal to ( 'haiti' ) ) or ( ( cell mobile number of students ) equal to ( '09700166582' ) ) )", "question": "the first names of students who live in country Haiti and have cell phone number '09700166582'.", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "translated_sql": "( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ), and intersect with ( ( name of car makers ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( liked id of countries ) equal to ( id of car makers ) ) ) ))", "question": "the names of students who are friends with both likes and dislikes.", "label": "0", "remark": "negative"}
{"sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "translated_sql": "( student id ) that belongs to ( friend ), and intersect with ( ( liked id ) that belongs to ( likes ))", "question": "ids for all students who have both friends and likes.", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "translated_sql": "( template id of car makers ) that belongs to ( ( ref template types ) , and ( ( templates ) satisfied that ( ( template type code of countries ) equal to ( template type code of car makers ) ) ) ) , that have ( ( template type description of countries ) equal to ( presentation ) )", "question": "the id of the template that has the description \"Presentation\".", "label": "1", "remark": "positive"}
{"sql": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1", "translated_sql": "( id of students ) , ( name of students ) , ( age of students ) that belongs to ( ( visitor ) , and ( ( visit ) satisfied that ( ( id of students ) equal to ( visitor id of addresses ) ) ) ) , grouped by ( id of students ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )", "question": "the id, name, and age of the visitors who visited more than 1 time.", "label": "1", "remark": "positive"}
{"sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "translated_sql": "( template id of car makers ) that belongs to ( ( ref template types ) , and ( ( templates ) satisfied that ( ( template type code of countries ) equal to ( template type code of car makers ) ) ) ) , that have ( ( template type description of countries ) equal to ( presentation ) )", "question": "id of the templates that have the description \"Presentation\".", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "translated_sql": "( countryname of countries ) , ( countryid of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) ) , grouped by ( countryid of countries ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 1 ) )", "question": "the names and ids of countries that have at least one car manufacturer.", "label": "1", "remark": "positive"}
{"sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "translated_sql": "( first name of students ) that belongs to ( ( students ) , and ( ( addresses ) satisfied that ( ( permanent address id of students ) equal to ( address id of addresses ) ) ) ) , that have ( ( ( country of addresses ) equal to ( 'haiti' ) ) or ( ( cell mobile number of students ) equal to ( '09700166582' ) ) )", "question": "first names of students who live in country 'Haiti' and have cell phone number '09700166582'.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "translated_sql": "( country code of countries ) , ( first name of countries ) that belongs to ( ( players ) , and ( ( matches ) satisfied that ( ( player id of countries ) equal to ( winner id of car makers ) ) ) ) , that have ( ( tourney name of car makers ) equal to ( 'wta championships' ) ), and intersect with ( ( country code of countries ) , ( first name of countries ) that belongs to ( ( players ) , and ( ( matches ) satisfied that ( ( player id of countries ) equal to ( winner id of car makers ) ) ) ) , that have ( ( tourney name of car makers ) equal to ( 'australian open' ) ))", "question": "the country code and the first name of the player who won both the WTA Championships and the Australian Open?", "label": "1", "remark": "positive"}
{"sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( airline of car makers ) equal to ( uid of countries ) ) ) ) , that have ( ( ( airline of countries ) equal to ( united airlines ) ) and ( ( destairport of car makers ) equal to ( asy ) ) )", "question": "many flights are operated by airline \"United Airlines\" from Asy airport?", "label": "0", "remark": "negative"}
{"sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "translated_sql": "( template type code ) that belongs to ( templates ), and except that ( ( template type code ) that belongs to ( ( templates ) , and ( ( documents ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ))", "question": "the template type codes that are not used by any documents?", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "translated_sql": "( fname of countries ) , ( age of countries ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of countries ) equal to ( stuid of car makers ) ) ) , and ( ( pets ) satisfied that ( ( petid of car makers ) equal to ( petid of car makers ) ) ) ) , that have ( ( ( pettype of car makers ) equal to ( 'dog' ) ) and ( ( t1.stuid ) not in ( ( stuid of countries ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of countries ) equal to ( stuid of car makers ) ) ) , and ( ( pets ) satisfied that ( ( petid of car makers ) equal to ( petid of car makers ) ) ) ) , that have ( ( pettype of car makers ) equal to ( 'cat' ) ) ) ) )", "question": "ids and ages of students who have pet type 'dog' but not cat?", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "translated_sql": "( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ), and intersect with ( ( name of car makers ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( liked id of countries ) equal to ( id of car makers ) ) ) ))", "question": "the names of students who are friends with both likes and likes.", "label": "0", "remark": "negative"}
{"sql": "SELECT count(DISTINCT current_address_id) FROM Students", "translated_sql": "( the number of ( distinct ( current address id ) ) ) that belongs to ( students )", "question": "many students live in the district?", "label": "0", "remark": "negative"}
{"sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "translated_sql": "( airline ) , ( abbreviation ) that belongs to ( airlines ) , that have ( ( country ) equal to ( usa ) )", "question": "airline name and abbreviation for airlines in country \"USA\"?", "label": "1", "remark": "positive"}
{"sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "translated_sql": "( first name ) , ( last name ) that belongs to ( players ) , ordered by ( ( birth date ) )", "question": "first name and last name of all players ordered by birth date.", "label": "1", "remark": "positive"}
{"sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "translated_sql": "( airline ) , ( abbreviation ) that belongs to ( airlines ) , that have ( ( country ) equal to ( usa ) )", "question": "airline name and abbreviation for all airlines in the country \"USA\".", "label": "1", "remark": "positive"}
{"sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "translated_sql": "( student id ) that belongs to ( friend ), and intersect with ( ( liked id ) that belongs to ( likes ))", "question": "ids of friends and likes.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( template id of countries ) , ( template type code of car makers ) that belongs to ( ( documents ) , and ( ( templates ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ) , grouped by ( template id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "the id and type of the template with the most documents?", "label": "1", "remark": "positive"}
{"sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "translated_sql": "( name ) that belongs to ( highschooler ), and except that ( ( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ))", "question": "names of students who do not have a friend.", "label": "1", "remark": "positive"}
{"sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "translated_sql": "( make of car makers ) , ( year of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( year of countries ) equal to ( the minimum of ( year ) ) that belongs to ( cars data ) )", "question": "the make and year of the car with the smallest data.", "label": "0", "remark": "negative"}
{"sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "translated_sql": "( first name of students ) that belongs to ( ( students ) , and ( ( addresses ) satisfied that ( ( permanent address id of students ) equal to ( address id of addresses ) ) ) ) , that have ( ( ( country of addresses ) equal to ( 'haiti' ) ) or ( ( cell mobile number of students ) equal to ( '09700166582' ) ) )", "question": "the first names of students whose permanent address is in country 'Haiti' and whose cell phone number is 09700166582?", "label": "0", "remark": "negative"}
{"sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")", "translated_sql": "( name ) that belongs to ( country ) , that have ( ( ( continent ) equal to ( asia ) ) and ( ( population ) greater than ( the maximum of ( population ) ) that belongs to ( country ) , that have ( ( continent ) equal to ( africa ) ) ) )", "question": "the name of countries that are larger than the largest country in africa.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( degree program id of countries ) , ( degree summary name of countries ) that belongs to ( ( degree programs ) , and ( ( student enrolment ) satisfied that ( ( degree program id of countries ) equal to ( degree program id of car makers ) ) ) ) , grouped by ( degree program id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "is the id and summary name of the degree that has the most number of students enrolled?", "label": "0", "remark": "negative"}
{"sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")", "translated_sql": "( name ) that belongs to ( country ) , that have ( ( ( continent ) equal to ( asia ) ) and ( ( population ) greater than ( the maximum of ( population ) ) that belongs to ( country ) , that have ( ( continent ) equal to ( africa ) ) ) )", "question": "the name of countries that have a larger population than the largest country in africa", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "translated_sql": "( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , that have ( ( sourceairport of car makers ) equal to ( cvo ) ), and except that ( ( airline of countries ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of countries ) equal to ( airline of car makers ) ) ) ) , that have ( ( sourceairport of car makers ) equal to ( apg ) ))", "question": "are the names of airlines that do not operate flights from CVO but not from apg?", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "translated_sql": "( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ), and intersect with ( ( name of car makers ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( liked id of countries ) equal to ( id of car makers ) ) ) ))", "question": "the names of students who have friends who have likes and likes.", "label": "0", "remark": "negative"}
{"sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "translated_sql": "( the maximum of ( mpg ) ) that belongs to ( cars data ) , that have ( ( ( cylinders ) equal to ( 8 ) ) or ( ( year ) less than ( 1980 ) ) )", "question": "is the mpg of the car with the cylinders equal to 8 or less after 1980?", "label": "0", "remark": "negative"}
{"sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "translated_sql": "( template type code ) that belongs to ( templates ), and except that ( ( template type code ) that belongs to ( ( templates ) , and ( ( documents ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ))", "question": "type codes for all templates except those with documents.", "label": "1", "remark": "positive"}
{"sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( documents ) , and ( ( templates ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ) , that have ( ( template type code of car makers ) equal to ( 'ppt' ) )", "question": "number of documents that have the type code 'ppt'.", "label": "1", "remark": "positive"}
{"sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "translated_sql": "( distinct ( model of car makers ) ) that belongs to ( ( car names ) , and ( ( model list ) satisfied that ( ( model of countries ) equal to ( model of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( maker of car makers ) equal to ( id of car makers ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of countries ) equal to ( id of cars data ) ) ) ) , that have ( ( ( fullname of car makers ) equal to ( 'general motors' ) ) or ( ( weight of cars data ) greater than ( 3500 ) ) )", "question": "distinct models of cars that have either 'General Motors' or weight greater than 3500?", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( destairport of countries ) equal to ( airportcode of car makers ) ) ) , and ( ( airports ) satisfied that ( ( sourceairport of countries ) equal to ( airportcode of car makers ) ) ) ) , that have ( ( ( city of car makers ) equal to ( ashley ) ) and ( ( city of car makers ) equal to ( aberdeen ) ) )", "question": "many flights are there from ashley airport in Aberdeen city?", "label": "0", "remark": "negative"}
{"sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "translated_sql": "( airline ) that belongs to ( airlines ) , that have ( ( abbreviation ) equal to ( ual ) )", "question": "the names of all airlines with abbreviation \"UAL\".", "label": "1", "remark": "positive"}
{"sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "translated_sql": "( make of car makers ) , ( year of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( year of countries ) equal to ( the minimum of ( year ) ) that belongs to ( cars data ) )", "question": "the make and year of the car with the smallest data.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "translated_sql": "( fname of countries ) , ( age of countries ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of countries ) equal to ( stuid of car makers ) ) ) , and ( ( pets ) satisfied that ( ( petid of car makers ) equal to ( petid of car makers ) ) ) ) , that have ( ( ( pettype of car makers ) equal to ( 'dog' ) ) and ( ( t1.stuid ) not in ( ( stuid of countries ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of countries ) equal to ( stuid of car makers ) ) ) , and ( ( pets ) satisfied that ( ( petid of car makers ) equal to ( petid of car makers ) ) ) ) , that have ( ( pettype of car makers ) equal to ( 'cat' ) ) ) ) )", "question": "the first name and age of the students who have both a pet type dog and a pet type cat?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( degree program id of countries ) , ( degree summary name of countries ) that belongs to ( ( degree programs ) , and ( ( student enrolment ) satisfied that ( ( degree program id of countries ) equal to ( degree program id of car makers ) ) ) ) , grouped by ( degree program id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "program id and summary name for the degree that has the most student enrollment?", "label": "1", "remark": "positive"}
{"sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "translated_sql": "( the number of ( distinct ( series name ) ) ) , ( the number of ( distinct ( content ) ) ) that belongs to ( tv channel )", "question": "many distinct series names and content?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';", "translated_sql": "( countryid of countries ) , ( countryname of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) ) , grouped by ( countryid of countries ) , that have ( ( the number of ( all items ) ) greater than ( 3 ) ) and ( countryid of countries ) , ( countryname of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) , and ( ( model list ) satisfied that ( ( id of car makers ) equal to ( maker of car makers ) ) ) ) , that have ( ( model of car makers ) equal to ( 'fiat' ) )", "question": "countries have more than 3 car makers and have more than 3 models? List the countryid and name.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "translated_sql": "( country code of countries ) , ( first name of countries ) that belongs to ( ( players ) , and ( ( matches ) satisfied that ( ( player id of countries ) equal to ( winner id of car makers ) ) ) ) , that have ( ( tourney name of car makers ) equal to ( 'wta championships' ) ), and intersect with ( ( country code of countries ) , ( first name of countries ) that belongs to ( ( players ) , and ( ( matches ) satisfied that ( ( player id of countries ) equal to ( winner id of car makers ) ) ) ) , that have ( ( tourney name of car makers ) equal to ( 'australian open' ) ))", "question": "the country code and first name of players who won both the WTA championships and Australian Open?", "label": "1", "remark": "positive"}
{"sql": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)", "translated_sql": "( name ) that belongs to ( museum ) , that have ( ( num of staff ) greater than ( the minimum of ( num of staff ) ) that belongs to ( museum ) , that have ( ( open year ) greater than ( 2010 ) ) )", "question": "names of museums that have more than one staff member after 2010.", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "translated_sql": "( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ), and intersect with ( ( name of car makers ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( liked id of countries ) equal to ( id of car makers ) ) ) ))", "question": "the names of students who are friends with both likes and likes.", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "translated_sql": "( make of car makers ) , ( year of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( year of countries ) equal to ( the minimum of ( year ) ) that belongs to ( cars data ) )", "question": "make and year of the car that has the smallest data.", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( flights ) , that have ( ( destairport ) equal to ( ato ) )", "question": "many flights go to the ato airport?", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "translated_sql": "( template id of car makers ) that belongs to ( ( ref template types ) , and ( ( templates ) satisfied that ( ( template type code of countries ) equal to ( template type code of car makers ) ) ) ) , that have ( ( template type description of countries ) equal to ( presentation ) )", "question": "the id of the templates described as \"Presentation\".", "label": "1", "remark": "positive"}
{"sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "translated_sql": "( airline ) , ( abbreviation ) that belongs to ( airlines ) , that have ( ( country ) equal to ( usa ) )", "question": "airline name and abbreviation for all airlines in the country \"USA\".", "label": "1", "remark": "positive"}
{"sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "translated_sql": "( first name ) , ( middle name ) , ( last name ) that belongs to ( students ) , ordered by ( ( date left ) in ascending order ) , limited to the top ( 1 )", "question": "the first name, middle name, and last name of the students who left school before any date.", "label": "0", "remark": "negative"}
{"sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "translated_sql": "( airline ) , ( abbreviation ) that belongs to ( airlines ) , that have ( ( country ) equal to ( usa ) )", "question": "the name and abbreviation of the airline whose country is \"USA\"?", "label": "1", "remark": "positive"}
{"sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( model list ) , and ( ( car makers ) satisfied that ( ( maker of countries ) equal to ( id of car makers ) ) ) , and ( ( countries ) satisfied that ( ( country of car makers ) equal to ( countryid of car makers ) ) ) ) , that have ( ( countryname of car makers ) equal to ( 'usa' ) )", "question": "many models belong to the country ofusa", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( model list ) , and ( ( car makers ) satisfied that ( ( maker of countries ) equal to ( id of car makers ) ) ) , and ( ( countries ) satisfied that ( ( country of car makers ) equal to ( countryid of car makers ) ) ) ) , that have ( ( countryname of car makers ) equal to ( 'usa' ) )", "question": "number of models produced by the country named USA?", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "translated_sql": "( killed of countries ) , ( injured of countries ) that belongs to ( ( death ) , and ( ( ship ) satisfied that ( ( caused by ship id of countries ) equal to ( id of car makers ) ) ) ) , that have ( ( tonnage of car makers ) equal to ( 't' ) )", "question": "the killed and injured of ships with tonnage of T2.", "label": "0", "remark": "negative"}
{"sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "translated_sql": "( country ) that belongs to ( airlines ) , that have ( ( airline ) equal to ( jetblue airways ) )", "question": "the countries of the airlines \"JetBlue Airways\".", "label": "1", "remark": "positive"}
{"sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "translated_sql": "( name of students ) that belongs to ( ( employee ) , and ( ( evaluation ) satisfied that ( ( employee id of students ) equal to ( employee id of addresses ) ) ) ) , ordered by ( ( bonus of addresses ) in descending order ) , limited to the top ( 1 )", "question": "name of the employee who has the highest bonus evaluation?", "label": "1", "remark": "positive"}
{"sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "translated_sql": "( template id of car makers ) that belongs to ( ( ref template types ) , and ( ( templates ) satisfied that ( ( template type code of countries ) equal to ( template type code of car makers ) ) ) ) , that have ( ( template type description of countries ) equal to ( presentation ) )", "question": "ids of the templates that have type description \"Presentation\".", "label": "1", "remark": "positive"}
{"sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of countries ) equal to ( countrycode of car makers ) ) ) ) , that have ( ( ( name of countries ) equal to ( afghanistan ) ) and ( ( isofficial ) equal to ( t ) ) )", "question": "the number of languages that are English in Afghanistan.", "label": "0", "remark": "negative"}
{"sql": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;", "translated_sql": "( the average of ( horsepower ) ) that belongs to ( cars data ) , that have ( ( year ) less than ( 1980 ) )", "question": "the average horsepower of all cars that were produced before 1980.", "label": "1", "remark": "positive"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "translated_sql": "( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ), and intersect with ( ( name of car makers ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( liked id of countries ) equal to ( id of car makers ) ) ) ))", "question": "the names of students who have both a friend and a friend.", "label": "0", "remark": "negative"}
{"sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "translated_sql": "( airline ) , ( abbreviation ) that belongs to ( airlines ) , that have ( ( country ) equal to ( usa ) )", "question": "the airline name and abbreviation for all aircrafts whose country is \"USA\".", "label": "0", "remark": "negative"}
{"sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "translated_sql": "( first name ) , ( middle name ) , ( last name ) that belongs to ( students ) , ordered by ( ( date left ) in ascending order ) , limited to the top ( 1 )", "question": "first name, middle name, last name for the student with the most students left?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "translated_sql": "( model of countries ) that belongs to ( ( car names ) , and ( ( cars data ) satisfied that ( ( makeid of countries ) equal to ( id of car makers ) ) ) ) , that have ( ( cylinders of car makers ) equal to ( 4 ) ) , ordered by ( ( horsepower of car makers ) in descending order ) , limited to the top ( 1 )", "question": "model has the most horsepower in cars?", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( flights ) , that have ( ( destairport ) equal to ( ato ) )", "question": "number of flights that go to the ato Airport", "label": "1", "remark": "positive"}
{"sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( model list ) , and ( ( car makers ) satisfied that ( ( maker of countries ) equal to ( id of car makers ) ) ) , and ( ( countries ) satisfied that ( ( country of car makers ) equal to ( countryid of car makers ) ) ) ) , that have ( ( countryname of car makers ) equal to ( 'usa' ) )", "question": "many models are produced by the country \"USA\"?", "label": "0", "remark": "negative"}
{"sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "translated_sql": "( distinct ( model of car makers ) ) that belongs to ( ( car names ) , and ( ( model list ) satisfied that ( ( model of countries ) equal to ( model of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( maker of car makers ) equal to ( id of car makers ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of countries ) equal to ( id of cars data ) ) ) ) , that have ( ( ( fullname of car makers ) equal to ( 'general motors' ) ) or ( ( weight of cars data ) greater than ( 3500 ) ) )", "question": "the distinct names of the models whose full name is General Motors or whose weight is above 3500 kg.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "translated_sql": "( fname of countries ) , ( age of countries ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of countries ) equal to ( stuid of car makers ) ) ) , and ( ( pets ) satisfied that ( ( petid of car makers ) equal to ( petid of car makers ) ) ) ) , that have ( ( ( pettype of car makers ) equal to ( 'dog' ) ) and ( ( t1.stuid ) not in ( ( stuid of countries ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of countries ) equal to ( stuid of car makers ) ) ) , and ( ( pets ) satisfied that ( ( petid of car makers ) equal to ( petid of car makers ) ) ) ) , that have ( ( pettype of car makers ) equal to ( 'cat' ) ) ) ) )", "question": "first name and age of the student who has a pet with type 'dog' but not a cat?", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "translated_sql": "( cylinders of countries ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of countries ) equal to ( makeid of car makers ) ) ) ) , that have ( ( model of car makers ) equal to ( 'volvo' ) ) , ordered by ( ( accelerate of countries ) in ascending order ) , limited to the top ( 1 )", "question": "the id of the car with model 'volvo' that accelerates the most.", "label": "0", "remark": "negative"}
{"sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "translated_sql": "( distinct ( model of countries ) ) that belongs to ( ( model list ) , and ( ( car names ) satisfied that ( ( model of countries ) equal to ( model of car makers ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of car makers ) equal to ( id of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( maker of countries ) equal to ( id of cars data ) ) ) ) , that have ( ( ( weight of car makers ) less than ( 3500 ) ) and ( ( fullname of cars data ) not equal to ( 'ford motor company' ) ) )", "question": "are the different models of cars whose weight is lower than 3500 and whose full name is not 'Ford Motor Company'?", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( documents ) , and ( ( templates ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ) , that have ( ( template type code of car makers ) equal to ( 'ppt' ) )", "question": "many documents have the type code PPT?", "label": "0", "remark": "negative"}
{"sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "translated_sql": "( student id ) that belongs to ( friend ), and intersect with ( ( liked id ) that belongs to ( likes ))", "question": "ids of students who have friends who have likes?", "label": "0", "remark": "negative"}
{"sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "translated_sql": "( first name ) , ( last name ) that belongs to ( players ) , ordered by ( ( birth date ) )", "question": "the first name and last name of all players in alphabetical order of birth date.", "label": "1", "remark": "positive"}
{"sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( flights ) , that have ( ( destairport ) equal to ( ato ) )", "question": "number of flights that go to ato airport.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "translated_sql": "( continent of countries ) , ( the number of ( all items ) ) that belongs to ( ( continents ) , and ( ( countries ) satisfied that ( ( contid of countries ) equal to ( continent of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( countryid of car makers ) equal to ( country of car makers ) ) ) ) , grouped by ( continent of countries )", "question": "continents and the number of car makers on each continent", "label": "1", "remark": "positive"}
{"sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "translated_sql": "( the number of ( language of car makers ) ) , ( name of countries ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of countries ) equal to ( countrycode of car makers ) ) ) ) , grouped by ( name of countries ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )", "question": "many languages are there in more than two countries?", "label": "0", "remark": "negative"}
{"sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "translated_sql": "( template id ) that belongs to ( templates ) , that have ( ( ( template type code ) equal to ( pp ) ) or ( ( template type code ) equal to ( ppt ) ) )", "question": "ids for all the templates with type code \"PP\" or \"PPT\"?", "label": "1", "remark": "positive"}
{"sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "translated_sql": "( the number of ( distinct ( winner name ) ) ) that belongs to ( matches ) , that have ( ( ( tourney name ) equal to ( 'wta championships' ) ) and ( ( winner hand ) equal to ( 'l' ) ) )", "question": "many distinct winners of the tourney named Wta championships?", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( destairport of countries ) equal to ( airportcode of car makers ) ) ) , and ( ( airports ) satisfied that ( ( sourceairport of countries ) equal to ( airportcode of car makers ) ) ) ) , that have ( ( ( city of car makers ) equal to ( ashley ) ) and ( ( city of car makers ) equal to ( aberdeen ) ) )", "question": "many flights are there from ashley airport in Aberdeen city?", "label": "0", "remark": "negative"}
{"sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "translated_sql": "( template type code ) that belongs to ( templates ), and except that ( ( template type code ) that belongs to ( ( templates ) , and ( ( documents ) satisfied that ( ( template id of countries ) equal to ( template id of car makers ) ) ) ))", "question": "the type code of the template that is not used in any document.", "label": "1", "remark": "positive"}
{"sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( airline of car makers ) equal to ( uid of countries ) ) ) ) , that have ( ( ( airline of countries ) equal to ( united airlines ) ) and ( ( destairport of car makers ) equal to ( asy ) ) )", "question": "many times does United Airlines have a flight with destination airportASY?", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( flights ) , that have ( ( destairport ) equal to ( ato ) )", "question": "the number of flights that go to the airport named \"ATO\".", "label": "1", "remark": "positive"}
{"sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of countries ) equal to ( countrycode of car makers ) ) ) ) , that have ( ( ( name of countries ) equal to ( afghanistan ) ) and ( ( isofficial ) equal to ( t ) ) )", "question": "many languages does Afghanistan have?", "label": "0", "remark": "negative"}
{"sql": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1", "translated_sql": "( id of students ) , ( name of students ) , ( age of students ) that belongs to ( ( visitor ) , and ( ( visit ) satisfied that ( ( id of students ) equal to ( visitor id of addresses ) ) ) ) , grouped by ( id of students ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )", "question": "ids, names, and ages of all visitors who visited more than 1 place.", "label": "0", "remark": "negative"}
{"sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "translated_sql": "( the number of ( language of car makers ) ) , ( name of countries ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of countries ) equal to ( countrycode of car makers ) ) ) ) , grouped by ( name of countries ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )", "question": "number of languages that are used by more than 2 countries", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "translated_sql": "( template id of car makers ) that belongs to ( ( ref template types ) , and ( ( templates ) satisfied that ( ( template type code of countries ) equal to ( template type code of car makers ) ) ) ) , that have ( ( template type description of countries ) equal to ( presentation ) )", "question": "is the id of the template type described as Presentation?", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';", "translated_sql": "( countryid of countries ) , ( countryname of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) ) , grouped by ( countryid of countries ) , that have ( ( the number of ( all items ) ) greater than ( 3 ) ) and ( countryid of countries ) , ( countryname of countries ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of countries ) equal to ( country of car makers ) ) ) , and ( ( model list ) satisfied that ( ( id of car makers ) equal to ( maker of car makers ) ) ) ) , that have ( ( model of car makers ) equal to ( 'fiat' ) )", "question": "the id and name of countries that have more than 3 car makers and have more than 3 models?", "label": "0", "remark": "negative"}
{"sql": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;", "translated_sql": "( the average of ( horsepower ) ) that belongs to ( cars data ) , that have ( ( year ) less than ( 1980 ) )", "question": "average horsepower of the cars produced before 1980.", "label": "1", "remark": "positive"}
{"sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "translated_sql": "( series name of countries ) that belongs to ( ( tv channel ) , and ( ( tv series ) satisfied that ( ( id of countries ) equal to ( channel of car makers ) ) ) ) , that have ( ( episode of car makers ) equal to ( a love of a lifetime ) )", "question": "are the series names of the tv series \"A Love of a Lifetime\"", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "translated_sql": "( killed of countries ) , ( injured of countries ) that belongs to ( ( death ) , and ( ( ship ) satisfied that ( ( caused by ship id of countries ) equal to ( id of car makers ) ) ) ) , that have ( ( tonnage of car makers ) equal to ( 't' ) )", "question": "the number of people killed and injured by ships caused by tonnage smaller than t.", "label": "0", "remark": "negative"}
{"sql": "SELECT DISTINCT country FROM singer WHERE age  >  20", "translated_sql": "( distinct ( country ) ) that belongs to ( singer ) , that have ( ( age ) greater than ( 20 ) )", "question": "the distinct countries of singers who are older than 20.", "label": "1", "remark": "positive"}
{"sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "translated_sql": "( template id ) that belongs to ( templates ) , that have ( ( ( template type code ) equal to ( pp ) ) or ( ( template type code ) equal to ( ppt ) ) )", "question": "ids of templates whose type code is \"PS\" or whose type code is \"Ppt\"?", "label": "0", "remark": "negative"}
{"sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")", "translated_sql": "( name ) that belongs to ( country ) , that have ( ( ( continent ) equal to ( asia ) ) and ( ( population ) greater than ( the maximum of ( population ) ) that belongs to ( country ) , that have ( ( continent ) equal to ( africa ) ) ) )", "question": "the countries whose population is greater than the population of all countries in \"Asia\".", "label": "0", "remark": "negative"}
{"sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "translated_sql": "( airline ) that belongs to ( airlines ) , that have ( ( abbreviation ) equal to ( ual ) )", "question": "the airline names of all flights with the abbreviationUAL.", "label": "0", "remark": "negative"}
{"sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "translated_sql": "( student id ) that belongs to ( friend ), and intersect with ( ( liked id ) that belongs to ( likes ))", "question": "ids of students who have friends and liked them.", "label": "0", "remark": "negative"}
{"sql": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;", "translated_sql": "( the average of ( horsepower ) ) that belongs to ( cars data ) , that have ( ( year ) less than ( 1980 ) )", "question": "the average horsepower of the cars produced before 1980?", "label": "1", "remark": "positive"}
{"sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "translated_sql": "( name of students ) that belongs to ( ( employee ) , and ( ( evaluation ) satisfied that ( ( employee id of students ) equal to ( employee id of addresses ) ) ) ) , ordered by ( ( bonus of addresses ) in descending order ) , limited to the top ( 1 )", "question": "the name of the employee who has the highest score in all evaluations?", "label": "0", "remark": "negative"}
{"sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "translated_sql": "( first name of students ) that belongs to ( ( students ) , and ( ( addresses ) satisfied that ( ( permanent address id of students ) equal to ( address id of addresses ) ) ) ) , that have ( ( ( country of addresses ) equal to ( 'haiti' ) ) or ( ( cell mobile number of students ) equal to ( '09700166582' ) ) )", "question": "the students whose cell phone number is '09700166582'", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "translated_sql": "( series name of countries ) that belongs to ( ( tv channel ) , and ( ( tv series ) satisfied that ( ( id of countries ) equal to ( channel of car makers ) ) ) ) , that have ( ( episode of car makers ) equal to ( a love of a lifetime ) )", "question": "the series name of the channel that has an episode \"A Love of a Lifetime\".", "label": "1", "remark": "positive"}
{"sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "translated_sql": "( the number of ( distinct ( winner name ) ) ) that belongs to ( matches ) , that have ( ( ( tourney name ) equal to ( 'wta championships' ) ) and ( ( winner hand ) equal to ( 'l' ) ) )", "question": "the number of different winner names of the matches held in the WTA Championships.", "label": "0", "remark": "negative"}
{"sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "translated_sql": "( the number of ( distinct ( series name ) ) ) , ( the number of ( distinct ( content ) ) ) that belongs to ( tv channel )", "question": "the number of series names and the number of content on TV channels.", "label": "1", "remark": "positive"}
{"sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")", "translated_sql": "( name ) that belongs to ( country ) , that have ( ( ( continent ) equal to ( asia ) ) and ( ( population ) greater than ( the maximum of ( population ) ) that belongs to ( country ) , that have ( ( continent ) equal to ( africa ) ) ) )", "question": "the country with a population greater than the largest country in africa", "label": "0", "remark": "negative"}
{"sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "translated_sql": "( the number of ( language of car makers ) ) , ( name of countries ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of countries ) equal to ( countrycode of car makers ) ) ) ) , grouped by ( name of countries ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )", "question": "the number of languages in each country that have more than 2 languages.", "label": "0", "remark": "negative"}
{"sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( student id of countries ) , ( first name of countries ) , ( middle name of countries ) , ( last name of countries ) , ( the number of ( all items ) ) , ( student id of countries ) that belongs to ( ( students ) , and ( ( student enrolment ) satisfied that ( ( student id of countries ) equal to ( student id of car makers ) ) ) ) , grouped by ( student id of countries ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "student id, middle name, last name, and the number of students enrolled.", "label": "0", "remark": "negative"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "translated_sql": "( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of countries ) equal to ( id of car makers ) ) ) ), and intersect with ( ( name of car makers ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( liked id of countries ) equal to ( id of car makers ) ) ) ))", "question": "the names of students who have friends who have likes and likes.", "label": "0", "remark": "negative"}
{"sql": "SELECT count(*) FROM visitor WHERE age  <  30", "translated_sql": "( the number of ( all items ) ) that belongs to ( visitor ) , that have ( ( age ) less than ( 30 ) )", "question": "How many visitors above age 30 are there?", "label": 0, "remark": "logic"}
{"sql": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "translated_sql": "( first name of department ) , ( last name of department ) , ( size code of management ) that belongs to ( ( owners ) , and ( ( dogs ) satisfied that ( ( owner id of department ) equal to ( owner id of management ) ) ) )", "question": "What are each owner's first name, last name, and the size of their dog?", "label": 1, "remark": "positive"}
{"sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "translated_sql": "( major ) , ( age ) that belongs to ( student ) , that have ( ( stuid ) not in ( ( stuid of likes ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of likes ) equal to ( stuid of highschooler ) ) ) , and ( ( pets ) satisfied that ( ( petid of area code state ) equal to ( petid of highschooler ) ) ) ) , that have ( ( pettype of area code state ) equal to ( 'cat' ) ) ) )", "question": "What major is every student who does own a cat as a pet, and also how old are they?", "label": 0, "remark": "logic"}
{"sql": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "translated_sql": "( population ) , ( lifeexpectancy ) that belongs to ( country ) , that have ( ( name ) equal to ( brazil ) )", "question": "What are the population and life expectancies in Japan?", "label": 0, "remark": "value str"}
{"sql": "SELECT date_arrived ,  date_departed FROM Dogs", "translated_sql": "( date arrived ) , ( date departed ) that belongs to ( dogs )", "question": "List the arrival date and the departure date for all the dogs.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;", "translated_sql": "( model of department ) that belongs to ( ( car names ) , and ( ( cars data ) satisfied that ( ( makeid of department ) equal to ( id of management ) ) ) ) , ordered by ( ( mpg of management ) in descending order ) , limited to the top ( 1 )", "question": "What is the car wmodel with the highest mpg?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1", "translated_sql": "( name of department ) , ( population of department ) that belongs to ( ( city ) , and ( ( countrylanguage ) satisfied that ( ( countrycode of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( language of management ) equal to ( english ) ) , ordered by ( ( population of department ) in descending order ) , limited to the top ( 1 )", "question": "Find the city with the largest population that uses English.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM Other_Available_Features", "translated_sql": "( the number of ( all items ) ) that belongs to ( other available features )", "question": "How many available features are there in total?", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM country WHERE IndepYear  >  1950", "translated_sql": "( name ) that belongs to ( country ) , that have ( ( indepyear ) greater than ( 1950 ) )", "question": "What are the names of all the countries that became independent after 1950?", "label": 1, "remark": "positive"}
{"sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id", "translated_sql": "( first name ) that belongs to ( students ) , that have ( ( current address id ) not equal to ( permanent address id ) )", "question": "Whose permanent address is different from his or her current address? List his or her last name.", "label": 0, "remark": "value col"}
{"sql": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "translated_sql": "( killed of likes ) , ( injured of likes ) that belongs to ( ( death ) , and ( ( ship ) satisfied that ( ( caused by ship id of likes ) equal to ( id of highschooler ) ) ) ) , that have ( ( tonnage of highschooler ) equal to ( 't' ) )", "question": "What are the death and injury situations caused by the ship with tonnage 'f'?", "label": 0, "remark": "value str"}
{"sql": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "translated_sql": "( the maximum of ( accelerate ) ) , ( cylinders ) that belongs to ( cars data ) , grouped by ( cylinders )", "question": "What is the maximum accelerate for different number of cylinders?", "label": 1, "remark": "positive"}
{"sql": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'", "translated_sql": "( num of staff ) , ( open year ) that belongs to ( museum ) , that have ( ( name ) equal to ( 'plaza museum' ) )", "question": "What are the opening year and staff number of the museum named Plaza Museum?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "translated_sql": "( lname of likes ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of likes ) equal to ( stuid of highschooler ) ) ) , and ( ( pets ) satisfied that ( ( petid of area code state ) equal to ( petid of highschooler ) ) ) ) , that have ( ( ( pet age of area code state ) equal to ( 3 ) ) and ( ( pettype of area code state ) equal to ( 'cat' ) ) )", "question": "Find the last name of the student who has a cat that is age 4.", "label": 0, "remark": "value int"}
{"sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "translated_sql": "( the maximum of ( share ) ) , ( the minimum of ( share ) ) that belongs to ( performance ) , that have ( ( type ) not equal to ( live final ) )", "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "translated_sql": "( airline of department ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of department ) equal to ( airline of management ) ) ) ) , that have ( ( sourceairport of management ) equal to ( ahd ) )", "question": "What are airlines that have some flight departing from airport 'AHD'?", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "translated_sql": "( name ) that belongs to ( singer ) , that have ( ( singer_id ) not in ( ( singer id ) that belongs to ( song ) ) )", "question": "What is the sname of every sing that does not have any song?", "label": 1, "remark": "positive"}
{"sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "translated_sql": "( country ) , ( the number of ( all items ) ) that belongs to ( tv channel ) , grouped by ( country ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the country with the most number of TV Channels and how many does it have?", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009", "translated_sql": "( the average of ( num of staff ) ) that belongs to ( museum ) , that have ( ( open year ) less than ( 2009 ) )", "question": "Find the average number of staff working for the museums that were open before 2009.", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "translated_sql": "( the average of ( edispl of management ) ) that belongs to ( ( car names ) , and ( ( cars data ) satisfied that ( ( makeid of department ) equal to ( id of management ) ) ) ) , that have ( ( model of department ) equal to ( 'volvo' ) )", "question": "What is the average edispl of the cars of model volvo?", "label": 1, "remark": "positive"}
{"sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "translated_sql": "( record company ) that belongs to ( orchestra ) , grouped by ( record company ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "List the record company shared by the least number of orchestras.", "label": 0, "remark": "logic"}
{"sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "translated_sql": "( transcript date ) that belongs to ( transcripts ) , ordered by ( ( transcript date ) in descending order ) , limited to the top ( 1 )", "question": "When was the last transcript released?", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33", "translated_sql": "( name ) that belongs to ( teacher ) , that have ( ( ( age ) equal to ( 32 ) ) or ( ( age ) equal to ( 33 ) ) )", "question": "Show the name of teachers aged either 32 or 33?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( template id of department ) , ( template type code of management ) that belongs to ( ( documents ) , and ( ( templates ) satisfied that ( ( template id of department ) equal to ( template id of management ) ) ) ) , grouped by ( template id of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the id and type code for the template used by the most documents?", "label": 1, "remark": "positive"}
{"sql": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1", "translated_sql": "( the sum of ( total spent of catalog structure ) ) that belongs to ( ( visitor ) , and ( ( visit ) satisfied that ( ( id of catalogs ) equal to ( visitor id of catalog structure ) ) ) ) , that have ( ( level of membership of catalogs ) equal to ( 1 ) )", "question": "What is the total ticket expense of the visitors whose membership level is 1?", "label": 1, "remark": "positive"}
{"sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "translated_sql": "( cost of treatment ) that belongs to ( treatments ) , ordered by ( ( date of treatment ) in descending order ) , limited to the top ( 1 )", "question": "How much does the most recent treatment cost?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( name of management ) , ( capacity of management ) that belongs to ( ( concert ) , and ( ( stadium ) satisfied that ( ( stadium id of department ) equal to ( stadium id of management ) ) ) ) , that have ( ( year of department ) greater than or equal to ( 2014 ) ) , grouped by ( stadium id of management ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "translated_sql": "( name ) that belongs to ( people ) , that have ( ( nationality ) not equal to ( russia ) )", "question": "Show names of people whose nationality is \"Russia\".", "label": 0, "remark": "logic"}
{"sql": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "translated_sql": "( name ) that belongs to ( country ) , that have ( ( surfacearea ) greater than ( the minimum of ( surfacearea ) ) that belongs to ( country ) , that have ( ( continent ) equal to ( europe ) ) )", "question": "What are the countries that have greater surface area than any country in Europe?", "label": 1, "remark": "positive"}
{"sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company", "translated_sql": "( record company ) , ( the number of ( all items ) ) that belongs to ( orchestra ) , grouped by ( record company )", "question": "How many orchestras does each record company manage?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)", "translated_sql": "( the number of ( all items ) ) that belongs to ( visitor ) , that have ( ( id ) not in ( ( visitor id of catalog structure ) that belongs to ( ( museum ) , and ( ( visit ) satisfied that ( ( museum id of catalogs ) equal to ( museum id of catalog structure ) ) ) ) , that have ( ( open year of catalogs ) greater than ( 2010 ) ) ) )", "question": "Find the number of visitors who did not visit any museum opened after 2010.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( area code of department ) that belongs to ( ( area code state ) , and ( ( votes ) satisfied that ( ( state of department ) equal to ( state of management ) ) ) ) , grouped by ( area code of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the area code in which the most voters voted?", "label": 1, "remark": "positive"}
{"sql": "SELECT name ,  grade FROM Highschooler", "translated_sql": "( name ) , ( grade ) that belongs to ( highschooler )", "question": "Show the names and grades of each high schooler.", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT template_type_code FROM Templates", "translated_sql": "( distinct ( template type code ) ) that belongs to ( templates )", "question": "What are the different template type codes?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "translated_sql": "( paragraph id of department ) , ( paragraph text of department ) that belongs to ( ( paragraphs ) , and ( ( documents ) satisfied that ( ( document id of department ) equal to ( document id of management ) ) ) ) , that have ( ( document name of management ) equal to ( 'welcome to ny' ) )", "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "translated_sql": "( distinct ( first name of department ) ) , ( treatment type description of head ) that belongs to ( ( professionals ) , and ( ( treatments ) satisfied that ( ( professional id of department ) equal to ( professional id of management ) ) ) , and ( ( treatment types ) satisfied that ( ( treatment type code of management ) equal to ( treatment type code of head ) ) ) )", "question": "What are each professional's first name and description of the treatment they have performed?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "translated_sql": "( the number of ( all items ) ) , ( the maximum of ( percentage ) ) that belongs to ( countrylanguage ) , that have ( ( language ) equal to ( spanish ) ) , grouped by ( countrycode )", "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "translated_sql": "( the average of ( loser age ) ) , ( the average of ( winner age ) ) that belongs to ( matches )", "question": "What are the average ages of losers and winners across matches?", "label": 1, "remark": "positive"}
{"sql": "SELECT Title FROM Cartoon ORDER BY title", "translated_sql": "( title ) that belongs to ( cartoon ) , ordered by ( ( title ) )", "question": "What are the titles of the TV series sorted alphabetically?", "label": 0, "remark": "value table"}
{"sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "translated_sql": "( name ) that belongs to ( country ) , ordered by ( ( population ) in descending order ) , limited to the top ( 3 )", "question": "Return the names of the 3 most populated countries.", "label": 1, "remark": "positive"}
{"sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"", "translated_sql": "( the sum of ( surfacearea ) ) that belongs to ( country ) , that have ( ( ( continent ) equal to ( asia ) ) or ( ( continent ) equal to ( europe ) ) )", "question": "Give the total surface area covered by countries in Asia or South America.", "label": 0, "remark": "value str"}
{"sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "translated_sql": "( orchestra ) that belongs to ( orchestra ) , that have ( ( orchestra_id ) not in ( ( orchestra id ) that belongs to ( performance ) ) )", "question": "List the names of orchestras that have no performance.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)", "translated_sql": "( the number of ( all items ) ) that belongs to ( visitor ) , that have ( ( id ) not in ( ( visitor id of evaluation ) that belongs to ( ( museum ) , and ( ( visit ) satisfied that ( ( museum id of employee ) equal to ( museum id of evaluation ) ) ) ) , that have ( ( open year of employee ) greater than ( 2010 ) ) ) )", "question": "Find the number of visitors who did not visit any museum opened after 2011.", "label": 0, "remark": "value int"}
{"sql": "SELECT count(*) FROM matches", "translated_sql": "( the number of ( all items ) ) that belongs to ( matches )", "question": "List the dates of matches.", "label": 0, "remark": "value col"}
{"sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "translated_sql": "( the average of ( lifeexpectancy ) ) that belongs to ( country ) , that have ( ( ( continent ) equal to ( africa ) ) and ( ( governmentform ) equal to ( republic ) ) )", "question": "Give the average life expectancy for countries in Africa which are republics?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "translated_sql": "( treatment type description of likes ) that belongs to ( ( treatment types ) , and ( ( treatments ) satisfied that ( ( treatment type code of likes ) equal to ( treatment type code of highschooler ) ) ) ) , grouped by ( treatment type code of likes ) , ordered by ( ( the sum of ( cost of treatment ) ) in ascending order ) , limited to the top ( 1 )", "question": "What is the description of the treatment type that costs the most money in total?", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )", "translated_sql": "( the number of ( all items ) ) that belongs to ( dogs ) , that have ( ( dog_id ) not in ( ( dog id ) that belongs to ( treatments ) ) )", "question": "How many dogs have not gone through any treatment?", "label": 1, "remark": "positive"}
{"sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2", "translated_sql": "( hometown ) that belongs to ( teacher ) , grouped by ( hometown ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )", "question": "Show the hometowns shared by at least two teachers.", "label": 1, "remark": "positive"}
{"sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "translated_sql": "( location ) , ( name ) that belongs to ( stadium ) , that have ( ( capacity ) between ( 5000 ) and ( 10000 ) )", "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "translated_sql": "( the average of ( lifeexpectancy ) ) that belongs to ( country ) , that have ( ( region ) equal to ( central africa ) )", "question": "How long is the people\u2019s average life expectancy in Central Africa?", "label": 1, "remark": "positive"}
{"sql": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "translated_sql": "( language ) , ( countrycode ) , ( the maximum of ( percentage ) ) that belongs to ( countrylanguage ) , grouped by ( countrycode )", "question": "What is the language spoken by the largest percentage of people in each country?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "translated_sql": "( language of highschooler ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of likes ) equal to ( countrycode of highschooler ) ) ) ) , that have ( ( ( headofstate of likes ) equal to ( beatrix ) ) and ( ( isofficial of highschooler ) equal to ( t ) ) )", "question": "How many official languages are spoken in the country whose head of state is Beatrix?", "label": 0, "remark": "value col"}
{"sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "translated_sql": "( distinct ( first name of department ) ) , ( middle name of department ) , ( last name of department ) that belongs to ( ( students ) , and ( ( student enrolment ) satisfied that ( ( student id of department ) equal to ( student id of management ) ) ) , and ( ( degree programs ) satisfied that ( ( degree program id of management ) equal to ( degree program id of head ) ) ) ) , that have ( ( degree summary name of head ) equal to ( 'bachelor' ) )", "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( departments ) , and ( ( degree programs ) satisfied that ( ( department id of department ) equal to ( department id of management ) ) ) ) , that have ( ( department name of department ) equal to ( 'engineer' ) )", "question": "How many degrees does the engineering department offer?", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "translated_sql": "( name ) that belongs to ( country ) , ordered by ( ( population ) in descending order ) , limited to the top ( 3 )", "question": "What are names of countries with the top 3 smallest population?", "label": 0, "remark": "logic"}
{"sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "translated_sql": "( pettype ) , ( weight ) that belongs to ( pets ) , ordered by ( ( pet age ) ) , limited to the top ( 1 )", "question": "Find the type and weight of the youngest pet.", "label": 1, "remark": "positive"}
{"sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "translated_sql": "( name ) that belongs to ( highschooler ), and except that ( ( name of highschooler ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of likes ) equal to ( id of highschooler ) ) ) ))", "question": "What are the names of students who have friends?", "label": 0, "remark": "logic"}
{"sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "translated_sql": "( id ) that belongs to ( tv channel ), and except that ( ( channel ) that belongs to ( cartoon ) , that have ( ( directed by ) equal to ( 'ben jones' ) ))", "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?", "label": 1, "remark": "positive"}
{"sql": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "translated_sql": "( population ) , ( lifeexpectancy ) that belongs to ( country ) , that have ( ( name ) equal to ( brazil ) )", "question": "What are the population and life expectancies in Brazil?", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"", "translated_sql": "( distinct ( region of likes ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of likes ) equal to ( countrycode of highschooler ) ) ) ) , that have ( ( ( language of highschooler ) equal to ( english ) ) or ( ( language of highschooler ) equal to ( dutch ) ) )", "question": "Which regions speak neither Dutch nor English?", "label": 0, "remark": "logic"}
{"sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "translated_sql": "( distinct ( model of department ) ) that belongs to ( ( model list ) , and ( ( car names ) satisfied that ( ( model of department ) equal to ( model of management ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of management ) equal to ( id of head ) ) ) ) , that have ( ( year of head ) greater than ( 1980 ) )", "question": "What are the different models for the cards produced after 1980?", "label": 1, "remark": "positive"}
{"sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "translated_sql": "( countrycode ) , ( the maximum of ( percentage ) ) that belongs to ( countrylanguage ) , that have ( ( language ) equal to ( spanish ) ) , grouped by ( countrycode )", "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33", "translated_sql": "( name ) that belongs to ( teacher ) , that have ( ( ( age ) equal to ( 32 ) ) or ( ( age ) equal to ( 33 ) ) )", "question": "What are the names of the teachers who are aged either 32 or 35?", "label": 0, "remark": "value int"}
{"sql": "SELECT Age ,  Hometown FROM teacher", "translated_sql": "( age ) , ( hometown ) that belongs to ( teacher )", "question": "What are the age of teachers?", "label": 0, "remark": "value col"}
{"sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;", "translated_sql": "( horsepower of department ) that belongs to ( ( cars data ) ) , ordered by ( ( accelerate of department ) in descending order ) , limited to the top ( 1 )", "question": "What is the horsepower of the car with the largest accelerate?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM Templates", "translated_sql": "( the number of ( all items ) ) that belongs to ( templates )", "question": "Count the number of templates.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )", "translated_sql": "( the number of ( all items ) ) that belongs to ( dogs ) , that have ( ( age ) less than ( the average of ( age ) ) that belongs to ( dogs ) )", "question": "How many dogs have an age below the average?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "translated_sql": "( document name of management ) that belongs to ( ( templates ) , and ( ( documents ) satisfied that ( ( template id of department ) equal to ( template id of management ) ) ) ) , that have ( ( template type code of department ) equal to ( bk ) )", "question": "Show all document names using templates with template type code BK.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\"", "translated_sql": "( series name of likes ) that belongs to ( ( tv channel ) , and ( ( cartoon ) satisfied that ( ( id of likes ) equal to ( channel of highschooler ) ) ) ) , that have ( ( title of highschooler ) equal to ( the rise of the blue beetle! ) )", "question": "What is the id of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "label": 0, "remark": "value col"}
{"sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "translated_sql": "( name ) , ( surfacearea ) that belongs to ( country ) , ordered by ( ( surfacearea ) in descending order ) , limited to the top ( 5 )", "question": "Return the names and surface areas of the 5 largest countries.", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "translated_sql": "( title of management ) that belongs to ( ( tv channel ) , and ( ( cartoon ) satisfied that ( ( id of department ) equal to ( channel of management ) ) ) ) , that have ( ( series name of department ) equal to ( sky radio ) )", "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "label": 1, "remark": "positive"}
{"sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'", "translated_sql": "( section description ) that belongs to ( sections ) , that have ( ( section name ) equal to ( 'h' ) )", "question": "Describe the section r.", "label": 0, "remark": "value str"}
{"sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( airlines ) , that have ( ( country ) equal to ( usa ) )", "question": "Return the number of airlines in the USA.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(DISTINCT current_address_id) FROM Students", "translated_sql": "( the number of ( distinct ( current address id ) ) ) that belongs to ( students )", "question": "How many same addresses do the students currently live?", "label": 0, "remark": "logic"}
{"sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( owner id of likes ) , ( last name of likes ) that belongs to ( ( owners ) , and ( ( dogs ) satisfied that ( ( owner id of likes ) equal to ( owner id of highschooler ) ) ) , and ( ( treatments ) satisfied that ( ( dog id of highschooler ) equal to ( dog id of area code state ) ) ) ) , grouped by ( owner id of likes ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Which owner has paid for the fewest treatments on his or her dogs? List the owner id and last name.", "label": 0, "remark": "logic"}
{"sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "translated_sql": "( template id ) that belongs to ( templates ) , that have ( ( ( template type code ) equal to ( pp ) ) or ( ( template type code ) equal to ( ppt ) ) )", "question": "What are the ids of templates with template type code PP or PPT?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "translated_sql": "( abbreviation of department ) , ( country of department ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of department ) equal to ( airline of management ) ) ) ) , grouped by ( airline of department ) , ordered by ( ( the number of ( all items ) ) ) , limited to the top ( 1 )", "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?", "label": 1, "remark": "positive"}
{"sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( name of employee ) that belongs to ( ( employee ) , and ( ( evaluation ) satisfied that ( ( employee id of employee ) equal to ( employee id of evaluation ) ) ) ) , grouped by ( employee id of evaluation ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "find the name of employee who was awarded the least times in the evaluation.", "label": 0, "remark": "logic"}
{"sql": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "translated_sql": "( document name ) , ( template id ) that belongs to ( documents ) , that have ( ( document_description ) like ( %w% ) )", "question": "Return the names and template ids for documents that contain the letter w in their description.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( car makers ) , and ( ( countries ) satisfied that ( ( country of department ) equal to ( countryid of management ) ) ) ) , that have ( ( countryname of management ) equal to ( 'france' ) )", "question": "What is the number of makers of care in France?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( country ) , that have ( ( governmentform ) equal to ( republic ) )", "question": "How many countries do not have a republic as their form of government?", "label": 0, "remark": "logic"}
{"sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "translated_sql": "( distinct ( first name of likes ) ) , ( middle name of likes ) , ( last name of likes ) that belongs to ( ( students ) , and ( ( student enrolment ) satisfied that ( ( student id of likes ) equal to ( student id of highschooler ) ) ) , and ( ( degree programs ) satisfied that ( ( degree program id of highschooler ) equal to ( degree program id of area code state ) ) ) ) , that have ( ( degree summary name of area code state ) equal to ( 'bachelor' ) )", "question": "What are the last names for everybody enrolled in a Bachelors program?", "label": 0, "remark": "value col"}
{"sql": "SELECT count(*) FROM employee", "translated_sql": "( the number of ( all items ) ) that belongs to ( employee )", "question": "Find the employees.", "label": 0, "remark": "logic"}
{"sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "translated_sql": "( course name of likes ) , ( course id of likes ) that belongs to ( ( courses ) , and ( ( sections ) satisfied that ( ( course id of likes ) equal to ( course id of highschooler ) ) ) ) , grouped by ( course id of likes ) , that have ( ( the number of ( all items ) ) less than or equal to ( 2 ) )", "question": "What are the names and id of courses having at least 2 sections?", "label": 0, "remark": "logic"}
{"sql": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'", "translated_sql": "( name ) that belongs to ( battle ) , that have ( ( ( bulgarian commander ) equal to ( 'kaloyan' ) ) and ( ( latin commander ) equal to ( 'baldwin i' ) ) )", "question": "What are the distinct battle names which is bulgarian commander 'Kaloyan' or latin commander 'Baldwin I'?", "label": 0, "remark": "logic"}
{"sql": "SELECT count(DISTINCT current_address_id) FROM Students", "translated_sql": "( the number of ( distinct ( current address id ) ) ) that belongs to ( students )", "question": "What are the addresses that have students living there?", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "translated_sql": "( the number of ( all items ) ) that belongs to ( cars data ) , that have ( ( horsepower ) greater than ( 150 ) )", "question": "What is the number of the cars with horsepower more than 100?", "label": 0, "remark": "value int"}
{"sql": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'", "translated_sql": "( created of highschooler ) , ( state of highschooler ) , ( phone number of highschooler ) that belongs to ( ( contestants ) , and ( ( votes ) satisfied that ( ( contestant number of likes ) equal to ( contestant number of highschooler ) ) ) ) , that have ( ( contestant name of likes ) equal to ( 'tabatha gehling' ) )", "question": "What are the create dates, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "label": 0, "remark": "value col"}
{"sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "translated_sql": "( name of department ) that belongs to ( ( conductor ) , and ( ( orchestra ) satisfied that ( ( conductor id of department ) equal to ( conductor id of management ) ) ) ) , that have ( ( year of founded ) greater than ( 2008 ) )", "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "translated_sql": "( template type code of department ) , ( the number of ( all items ) ) that belongs to ( ( templates ) , and ( ( documents ) satisfied that ( ( template id of department ) equal to ( template id of management ) ) ) ) , grouped by ( template type code of department )", "question": "What are the different template type codes, and how many documents use each type?", "label": 1, "remark": "positive"}
{"sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"", "translated_sql": "( package option ) that belongs to ( tv channel ) , that have ( ( series name ) equal to ( sky radio ) )", "question": "What are the names of the TV Channels whose series names are Sky Radio?", "label": 0, "remark": "value col"}
{"sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "translated_sql": "( horsepower of likes ) that belongs to ( ( cars data ) ) , ordered by ( ( accelerate of likes ) in descending order ) , limited to the top ( 1 )", "question": "What is the horsepower of the car with the smallest accelerate?", "label": 0, "remark": "logic"}
{"sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC", "translated_sql": "( name ) , ( location ) , ( district ) that belongs to ( shop ) , ordered by ( ( number products ) in descending order )", "question": "Return the name, location and district of all shops in descending order of number of products.", "label": 1, "remark": "positive"}
{"sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "translated_sql": "( title ) , ( directed by ) that belongs to ( cartoon ) , ordered by ( ( original air date ) )", "question": "What is the name and directors of all the cartoons that are ordered by air date?", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM conductor ORDER BY Age ASC", "translated_sql": "( name ) that belongs to ( conductor ) , ordered by ( ( age ) in ascending order )", "question": "List the names of conductors in descending order of age.", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( airlines ) , that have ( ( country ) equal to ( usa ) )", "question": "How many airlines are not from USA?", "label": 0, "remark": "logic"}
{"sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend", "translated_sql": "( id ) that belongs to ( highschooler ), and except that ( ( student id ) that belongs to ( friend ))", "question": "What are the ids of high school students who do not have friends?", "label": 1, "remark": "positive"}
{"sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "translated_sql": "( other student details ) that belongs to ( students ) , ordered by ( ( other student details ) in descending order )", "question": "What other details can you tell me about students in reverse alphabetical order?", "label": 1, "remark": "positive"}
{"sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "translated_sql": "( air date ) that belongs to ( tv series ) , that have ( ( episode ) equal to ( a love of a lifetime ) )", "question": "When did the episode \"A Love of a Lifetime\" air?", "label": 1, "remark": "positive"}
{"sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "translated_sql": "( template id ) that belongs to ( documents ) , grouped by ( template id ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )", "question": "What are the template ids of any templates used in more than a single document?", "label": 1, "remark": "positive"}
{"sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "translated_sql": "( model ) that belongs to ( car names ) , grouped by ( model ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What model has the most different versions?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( city of department ) that belongs to ( ( airports ) , and ( ( flights ) satisfied that ( ( airportcode of department ) equal to ( sourceairport of management ) ) ) ) , grouped by ( city of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Which city has most number of departing flights?", "label": 1, "remark": "positive"}
{"sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country", "translated_sql": "( countryname ) that belongs to ( countries ), and except that ( ( countryname of likes ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of likes ) equal to ( country of highschooler ) ) ) ))", "question": "What are the name of the countries where there is a single car maker?", "label": 0, "remark": "logic"}
{"sql": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"", "translated_sql": "( id ) that belongs to ( highschooler ) , that have ( ( name ) equal to ( kyle ) )", "question": "What is Kyle's grade?", "label": 0, "remark": "value col"}
{"sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1", "translated_sql": "( fname of department ) , ( sex of department ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of department ) equal to ( stuid of management ) ) ) ) , grouped by ( stuid of department ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )", "question": "Find the first name and gender of student who have more than one pet.", "label": 1, "remark": "positive"}
{"sql": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1", "translated_sql": "( id of employee ) , ( name of employee ) , ( age of employee ) that belongs to ( ( visitor ) , and ( ( visit ) satisfied that ( ( id of employee ) equal to ( visitor id of evaluation ) ) ) ) , grouped by ( id of employee ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )", "question": "find the id, name and age for visitors who visited some museums less than once.", "label": 0, "remark": "logic"}
{"sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "translated_sql": "( name ) , ( population ) , ( lifeexpectancy ) that belongs to ( country ) , that have ( ( continent ) equal to ( asia ) ) , ordered by ( ( surfacearea ) in descending order ) , limited to the top ( 1 )", "question": "Find the name, population and expected life length of asian country with the largest area?", "label": 1, "remark": "positive"}
{"sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "translated_sql": "( role code ) , ( street ) , ( city ) , ( state ) that belongs to ( professionals ) , that have ( ( city ) like ( '%west%' ) )", "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "label": 1, "remark": "positive"}
{"sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company", "translated_sql": "( record company ) , ( the number of ( all items ) ) that belongs to ( orchestra ) , grouped by ( record company )", "question": "How many record company are there?", "label": 0, "remark": "value col"}
{"sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "translated_sql": "( the number of ( all items ) ) that belongs to ( cars data ) , that have ( ( year ) equal to ( 1980 ) )", "question": "In 1981, how many cars were made?", "label": 0, "remark": "value int"}
{"sql": "SELECT count(*) FROM Documents", "translated_sql": "( the number of ( all items ) ) that belongs to ( documents )", "question": "Count the number of documents.", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2", "translated_sql": "( name of management ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( student id of department ) equal to ( id of management ) ) ) ) , grouped by ( student id of department ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )", "question": "What are the names of students who have 2 or more likes?", "label": 1, "remark": "positive"}
{"sql": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id", "translated_sql": "( professional id ) , ( role code ) , ( email address ) that belongs to ( professionals ), and except that ( ( professional id of likes ) , ( role code of likes ) , ( email address of likes ) that belongs to ( ( professionals ) , and ( ( treatments ) satisfied that ( ( professional id of likes ) equal to ( professional id of highschooler ) ) ) ))", "question": "Which professional operate at least one treatment on dogs? List the professional's id, role and email.", "label": 0, "remark": "logic"}
{"sql": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id", "translated_sql": "( concert name of management ) , ( theme of management ) , ( the number of ( all items ) ) that belongs to ( ( singer in concert ) , and ( ( concert ) satisfied that ( ( concert id of department ) equal to ( concert id of management ) ) ) ) , grouped by ( concert id of management )", "question": "Show the name and theme for all concerts and the number of singers in each concert.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "translated_sql": "( name of department ) that belongs to ( ( conductor ) , and ( ( orchestra ) satisfied that ( ( conductor id of department ) equal to ( conductor id of management ) ) ) ) , that have ( ( year of founded ) greater than ( 2008 ) )", "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "label": 1, "remark": "positive"}
{"sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "translated_sql": "( document id ) , ( the number of ( all items ) ) that belongs to ( paragraphs ) , grouped by ( document id ) , ordered by ( ( document id ) )", "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) ,  city FROM employee GROUP BY city", "translated_sql": "( the number of ( all items ) ) , ( city ) that belongs to ( employee ) , grouped by ( city )", "question": "Count the total number of employees of all cities.", "label": 0, "remark": "value col"}
{"sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";", "translated_sql": "( title ) that belongs to ( cartoon ) , that have ( ( directed by ) equal to ( ben jones ) )", "question": "What are the names of all cartoons directed by Ben Jones?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "translated_sql": "( horsepower of management ) , ( make of department ) that belongs to ( ( car names ) , and ( ( cars data ) satisfied that ( ( makeid of department ) equal to ( id of management ) ) ) ) , that have ( ( cylinders of management ) equal to ( 3 ) ) , ordered by ( ( horsepower of management ) in descending order ) , limited to the top ( 1 )", "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "label": 1, "remark": "positive"}
{"sql": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"", "translated_sql": "( grade ) that belongs to ( highschooler ) , that have ( ( name ) equal to ( kyle ) )", "question": "What school is Kyle in?", "label": 0, "remark": "value col"}
{"sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "translated_sql": "( countryname of department ) , ( countryid of department ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of department ) equal to ( country of management ) ) ) ) , grouped by ( countryid of department ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 1 ) )", "question": "What are the countries having at least one car maker? List name and id.", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "translated_sql": "( distinct ( name of likes ) ) that belongs to ( ( singer ) , and ( ( song ) satisfied that ( ( singer id of likes ) equal to ( singer id of highschooler ) ) ) ) , that have ( ( sales of highschooler ) greater than ( 300000 ) )", "question": "what are the different names of the singers that have sales more than 400000?", "label": 0, "remark": "value int"}
{"sql": "SELECT Name FROM teacher ORDER BY Age ASC", "translated_sql": "( name ) that belongs to ( teacher ) , ordered by ( ( age ) in ascending order )", "question": "List the names of teachers in descending order of age.", "label": 0, "remark": "logic"}
{"sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "translated_sql": "( model of department ) that belongs to ( ( car names ) , and ( ( cars data ) satisfied that ( ( makeid of department ) equal to ( id of management ) ) ) ) , that have ( ( cylinders of management ) equal to ( 4 ) ) , ordered by ( ( horsepower of management ) in descending order ) , limited to the top ( 1 )", "question": "For the cars with 4 cylinders, which model has the largest horsepower?", "label": 1, "remark": "positive"}
{"sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( orchestra ) , that have ( ( ( major record format ) equal to ( cd ) ) or ( ( major record format ) equal to ( dvd ) ) )", "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".", "label": 1, "remark": "positive"}
{"sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "translated_sql": "( document id ) that belongs to ( paragraphs ) , grouped by ( document id ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )", "question": "What are the ids of documents that have 2 or more paragraphs?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( breed name of department ) that belongs to ( ( breeds ) , and ( ( dogs ) satisfied that ( ( breed code of department ) equal to ( breed code of management ) ) ) ) , grouped by ( breed name of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the name of the breed with the most dogs?", "label": 1, "remark": "positive"}
{"sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "translated_sql": "( country ) that belongs to ( tv channel ), and except that ( ( country of likes ) that belongs to ( ( tv channel ) , and ( ( cartoon ) satisfied that ( ( id of likes ) equal to ( channel of highschooler ) ) ) ) , that have ( ( written by of highschooler ) equal to ( 'todd casey' ) ))", "question": "What are the countries that are playing cartoons written by Todd Casey?", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( airline of management ) equal to ( uid of department ) ) ) ) , that have ( ( ( airline of department ) equal to ( united airlines ) ) and ( ( sourceairport of management ) equal to ( ahd ) ) )", "question": "Return the number of United Airlines flights leaving from AHD Airport.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "translated_sql": "( series name of department ) that belongs to ( ( tv channel ) , and ( ( tv series ) satisfied that ( ( id of department ) equal to ( channel of management ) ) ) ) , that have ( ( episode of management ) equal to ( a love of a lifetime ) )", "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of likes ) equal to ( stuid of highschooler ) ) ) , and ( ( pets ) satisfied that ( ( petid of highschooler ) equal to ( petid of area code state ) ) ) ) , that have ( ( ( sex of likes ) equal to ( 'f' ) ) and ( ( pettype of area code state ) equal to ( 'dog' ) ) )", "question": "Find the number of dog pets that are raised by male students (with sex M).", "label": 0, "remark": "value str"}
{"sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "translated_sql": "( the minimum of ( grade ) ) that belongs to ( highschooler ) , that have ( ( id ) not in ( ( student id of likes ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of likes ) equal to ( id of highschooler ) ) ) ) ) )", "question": "Find the average grade of students who have no friends.", "label": 0, "remark": "value col"}
{"sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "translated_sql": "( name ) that belongs to ( singer ) , that have ( ( citizenship ) not equal to ( france ) )", "question": "List the name of singers whose citizenship is not \"France\".", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "translated_sql": "( the average of ( grade ) ) that belongs to ( highschooler ) , that have ( ( id ) in ( ( student id of likes ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of likes ) equal to ( id of highschooler ) ) ) ) ) )", "question": "Find the average grade of all students who do not have any friends.", "label": 0, "remark": "logic"}
{"sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( semester name of department ) , ( semester id of department ) that belongs to ( ( semesters ) , and ( ( student enrolment ) satisfied that ( ( semester id of department ) equal to ( semester id of management ) ) ) ) , grouped by ( semester id of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "For each semester, what is the name and id of the one with the most students registered?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "translated_sql": "( date of treatment of likes ) , ( first name of highschooler ) that belongs to ( ( treatments ) , and ( ( professionals ) satisfied that ( ( professional id of likes ) equal to ( professional id of highschooler ) ) ) )", "question": "List the date of each treatment, together with the first name of the professional who do not operated it.", "label": 0, "remark": "logic"}
{"sql": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "translated_sql": "( cost of treatment of department ) , ( treatment type description of management ) that belongs to ( ( treatments ) , and ( ( treatment types ) satisfied that ( ( treatment type code of department ) equal to ( treatment type code of management ) ) ) )", "question": "List the cost of each treatment and the corresponding treatment type description.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM matches", "translated_sql": "( the number of ( all items ) ) that belongs to ( matches )", "question": "Find the total number of matches.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "translated_sql": "( owner id of department ) , ( zip code of department ) that belongs to ( ( owners ) , and ( ( dogs ) satisfied that ( ( owner id of department ) equal to ( owner id of management ) ) ) , and ( ( treatments ) satisfied that ( ( dog id of management ) equal to ( dog id of head ) ) ) ) , grouped by ( owner id of department ) , ordered by ( ( the sum of ( cost of treatment of head ) ) in descending order ) , limited to the top ( 1 )", "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.", "label": 1, "remark": "positive"}
{"sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "translated_sql": "( money rank ) that belongs to ( poker player ) , ordered by ( ( earnings ) in descending order ) , limited to the top ( 1 )", "question": "Return the money rank of the player with the greatest earnings.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "translated_sql": "( series name of department ) , ( country of department ) that belongs to ( ( tv channel ) , and ( ( cartoon ) satisfied that ( ( id of department ) equal to ( channel of management ) ) ) ) , that have ( ( directed by of management ) equal to ( 'michael chang' ) ), and intersect with ( ( series name of department ) , ( country of department ) that belongs to ( ( tv channel ) , and ( ( cartoon ) satisfied that ( ( id of department ) equal to ( channel of management ) ) ) ) , that have ( ( directed by of management ) equal to ( 'ben jones' ) ))", "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( model list ) , and ( ( car makers ) satisfied that ( ( maker of department ) equal to ( id of management ) ) ) , and ( ( countries ) satisfied that ( ( country of management ) equal to ( countryid of head ) ) ) ) , that have ( ( countryname of head ) equal to ( 'usa' ) )", "question": "What is the count of the car models produced in the United States?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM singer", "translated_sql": "( the number of ( all items ) ) that belongs to ( singer )", "question": "What is the count of singers?", "label": 1, "remark": "positive"}
{"sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "translated_sql": "( weekly rank ) that belongs to ( tv series ) , that have ( ( episode ) equal to ( a love of a lifetime ) )", "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( semester name of likes ) , ( semester id of likes ) that belongs to ( ( semesters ) , and ( ( student enrolment ) satisfied that ( ( semester id of likes ) equal to ( semester id of highschooler ) ) ) ) , grouped by ( semester id of likes ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "For each semester, what is the name of the one with the most students registered?", "label": 0, "remark": "value col"}
{"sql": "SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1", "translated_sql": "( production code ) , ( channel ) that belongs to ( cartoon ) , ordered by ( ( original air date ) ) , limited to the top ( 1 )", "question": "What is the produdction code and channel of the most recent cartoon?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id", "translated_sql": "( concert name of management ) , ( theme of management ) , ( the number of ( all items ) ) that belongs to ( ( singer in concert ) , and ( ( concert ) satisfied that ( ( concert id of department ) equal to ( concert id of management ) ) ) ) , grouped by ( concert id of management )", "question": "What are the names, themes, and number of singers for each and every concert?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1", "translated_sql": "( name of likes ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of likes ) equal to ( countrycode of highschooler ) ) ) ) , grouped by ( name of likes ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is name of the country that speaks the smallest number of languages?", "label": 0, "remark": "logic"}
{"sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")", "translated_sql": "( the sum of ( population ) ) that belongs to ( country ) , that have ( ( name ) not in ( ( name of department ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( language of management ) equal to ( english ) ) ) )", "question": "What is the total number of people living in the nations that do not use English?", "label": 1, "remark": "positive"}
{"sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "translated_sql": "( orchestra ) that belongs to ( orchestra ) , that have ( ( orchestra_id ) not in ( ( orchestra id ) that belongs to ( performance ) ) )", "question": "List the names of orchestras that have performance.", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of department ) equal to ( stuid of management ) ) ) ) , that have ( ( age of department ) greater than ( 20 ) )", "question": "How many pets are owned by students that have an age greater than 20?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1", "translated_sql": "( name of department ) , ( population of department ) that belongs to ( ( city ) , and ( ( countrylanguage ) satisfied that ( ( countrycode of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( language of management ) equal to ( english ) ) , ordered by ( ( population of department ) in descending order ) , limited to the top ( 1 )", "question": "What is the most populace city that speaks English?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "translated_sql": "( last name of department ) that belongs to ( ( students ) , and ( ( addresses ) satisfied that ( ( current address id of department ) equal to ( address id of management ) ) ) ) , that have ( ( state province county of management ) equal to ( 'northcarolina' ) ), and except that ( ( distinct ( last name of head ) ) that belongs to ( ( students ) , and ( ( student enrolment ) satisfied that ( ( student id of head ) equal to ( student id of trip ) ) ) ))", "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.", "label": 1, "remark": "positive"}
{"sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)", "translated_sql": "( name ) that belongs to ( shop ) , that have ( ( shop_id ) not in ( ( shop id ) that belongs to ( hiring ) ) )", "question": "Which shops run with employees? Find the shop names", "label": 0, "remark": "logic"}
{"sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( course name of department ) that belongs to ( ( courses ) , and ( ( student enrolment courses ) satisfied that ( ( course id of department ) equal to ( course id of management ) ) ) ) , grouped by ( course name of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What's the name of the course with most number of enrollments?", "label": 1, "remark": "positive"}
{"sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "translated_sql": "( template type code ) that belongs to ( ref template types ) , that have ( ( template type description ) equal to ( book ) )", "question": "Return the type name of the template type with the description \"Book\".", "label": 0, "remark": "value col"}
{"sql": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "translated_sql": "( name of department ) , ( orchestra of management ) that belongs to ( ( conductor ) , and ( ( orchestra ) satisfied that ( ( conductor id of department ) equal to ( conductor id of management ) ) ) )", "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "translated_sql": "( the average of ( age ) ) , ( the minimum of ( age ) ) , ( the maximum of ( age ) ) that belongs to ( singer ) , that have ( ( country ) equal to ( 'france' ) )", "question": "What is the average, minimum, and maximum age of all singers from France?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "translated_sql": "( first name of department ) , ( last name of department ) , ( size code of management ) that belongs to ( ( owners ) , and ( ( dogs ) satisfied that ( ( owner id of department ) equal to ( owner id of management ) ) ) )", "question": "List each owner's first name, last name, and the size of his for her dog.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District", "translated_sql": "( the number of ( all items ) ) , ( district ) that belongs to ( city ) , that have ( ( population ) greater than ( the average of ( population ) ) that belongs to ( city ) ) , grouped by ( district )", "question": "Find the number of cities in each district whose population is greater than the average population of cities?", "label": 1, "remark": "positive"}
{"sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( grade ) that belongs to ( highschooler ) , grouped by ( grade ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Which grade has the most high schoolers?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;", "translated_sql": "( the number of ( all items ) ) that belongs to ( cars data ) , that have ( ( year ) equal to ( 1980 ) )", "question": "how many cars were produced in 1980?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( flights ) , that have ( ( sourceairport ) equal to ( apg ) )", "question": "How many flights depart from 'APG'?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )", "translated_sql": "( the number of ( all items ) ) that belongs to ( dogs ) , that have ( ( dog_id ) not in ( ( dog id ) that belongs to ( treatments ) ) )", "question": "Tell me the number of dogs that have received any treatment.", "label": 1, "remark": "positive"}
{"sql": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "translated_sql": "( citizenship ) that belongs to ( singer ) , that have ( ( birth year ) less than ( 1945 ) ), and intersect with ( ( citizenship ) that belongs to ( singer ) , that have ( ( birth year ) greater than ( 1955 ) ))", "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM pets WHERE weight  >  10", "translated_sql": "( the number of ( all items ) ) that belongs to ( pets ) , that have ( ( weight ) greater than ( 10 ) )", "question": "How many pets have a smaller weight than 10?", "label": 0, "remark": "logic"}
{"sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "translated_sql": "( distinct ( template type description of likes ) ) that belongs to ( ( ref template types ) , and ( ( templates ) satisfied that ( ( template type code of likes ) equal to ( template type code of highschooler ) ) ) , and ( ( documents ) satisfied that ( ( template id of highschooler ) equal to ( template id of area code state ) ) ) )", "question": "Return the different descriptions for templates that have not been used in a document.", "label": 0, "remark": "logic"}
{"sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "translated_sql": "( document id ) that belongs to ( paragraphs ) , grouped by ( document id ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )", "question": "List all document ids with at least two paragraphs.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "translated_sql": "( template type code of department ) , ( the number of ( all items ) ) that belongs to ( ( templates ) , and ( ( documents ) satisfied that ( ( template id of department ) equal to ( template id of management ) ) ) ) , grouped by ( template type code of department )", "question": "Show all template type codes and the number of documents using each type.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "translated_sql": "( country of department ) that belongs to ( ( tv channel ) , and ( ( cartoon ) satisfied that ( ( id of department ) equal to ( channel of management ) ) ) ) , that have ( ( written by of management ) equal to ( 'todd casey' ) )", "question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id", "translated_sql": "( document id of department ) , ( document name of management ) , ( the number of ( all items ) ) that belongs to ( ( paragraphs ) , and ( ( documents ) satisfied that ( ( document id of department ) equal to ( document id of management ) ) ) ) , grouped by ( document id of department )", "question": "Show all document ids, names and the number of paragraphs in each document.", "label": 1, "remark": "positive"}
{"sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "translated_sql": "( template type code ) , ( the number of ( all items ) ) that belongs to ( templates ) , grouped by ( template type code )", "question": "What are the different template type codes, and how many templates in average correspond to each?", "label": 0, "remark": "logic"}
{"sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "translated_sql": "( name ) , ( country ) that belongs to ( singer ) , that have ( ( song_name ) like ( '%hey%' ) )", "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "label": 1, "remark": "positive"}
{"sql": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "translated_sql": "( the sum of ( population ) ) that belongs to ( city ) , that have ( ( district ) equal to ( gelderland ) )", "question": "What is the total population of Gelderland district?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2", "translated_sql": "( transcript date of highschooler ) , ( transcript id of likes ) that belongs to ( ( transcript contents ) , and ( ( transcripts ) satisfied that ( ( transcript id of likes ) equal to ( transcript id of highschooler ) ) ) ) , grouped by ( transcript id of likes ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )", "question": "Show the date and id of the transcript with at least 3 course results.", "label": 0, "remark": "value int"}
{"sql": "SELECT DISTINCT country FROM singer WHERE age  >  20", "translated_sql": "( distinct ( country ) ) that belongs to ( singer ) , that have ( ( age ) greater than ( 20 ) )", "question": "What are  the different countries with singers above age 20?", "label": 1, "remark": "positive"}
{"sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "translated_sql": "( id ) that belongs to ( tv channel ), and except that ( ( channel ) that belongs to ( cartoon ) , that have ( ( directed by ) equal to ( 'ben jones' ) ))", "question": "What are the ids of the TV channels that do have any cartoons directed by Ben Jones?", "label": 0, "remark": "logic"}
{"sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1", "translated_sql": "( city ) that belongs to ( employee ) , that have ( ( age ) less than ( 30 ) ) , grouped by ( city ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )", "question": "Which cities do more than one employee under age 30 come from?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );", "translated_sql": "( the number of ( all items ) ) that belongs to ( battle ) , that have ( ( id ) not in ( ( lost in battle ) that belongs to ( ship ) , that have ( ( tonnage ) equal to ( '225' ) ) ) )", "question": "How many battles did not lose any ship with tonnage '225'?", "label": 1, "remark": "positive"}
{"sql": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( museum id of catalog structure ) , ( name of catalogs ) that belongs to ( ( museum ) , and ( ( visit ) satisfied that ( ( museum id of catalogs ) equal to ( museum id of catalog structure ) ) ) ) , grouped by ( museum id of catalog structure ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What are the id and name of the museum visited most times?", "label": 1, "remark": "positive"}
{"sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "translated_sql": "( department description ) that belongs to ( departments ) , that have ( ( department_name ) like ( '%computer%' ) )", "question": "What is the description of the department whose name has the substring the computer?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "translated_sql": "( airline of department ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of department ) equal to ( airline of management ) ) ) ) , grouped by ( airline of department ) , that have ( ( the number of ( all items ) ) less than ( 200 ) )", "question": "Find all airlines that have fewer than 200 flights.", "label": 1, "remark": "positive"}
{"sql": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "translated_sql": "( the sum of ( surfacearea ) ) that belongs to ( country ) , that have ( ( region ) equal to ( caribbean ) )", "question": "What is the total surface area of the countries in the Caribbean region?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;", "translated_sql": "( fullname of department ) , ( id of department ) , ( the number of ( all items ) ) that belongs to ( ( car makers ) , and ( ( model list ) satisfied that ( ( id of department ) equal to ( maker of management ) ) ) ) , grouped by ( id of department )", "question": "What is the full name of each car maker, along with its id and how many models it produces?", "label": 1, "remark": "positive"}
{"sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "translated_sql": "( the maximum of ( share ) ) , ( the minimum of ( share ) ) that belongs to ( performance ) , that have ( ( type ) not equal to ( live final ) )", "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "translated_sql": "( the average of ( gnp ) ) , ( the sum of ( population ) ) that belongs to ( country ) , that have ( ( governmentform ) equal to ( us territory ) )", "question": "What is the average GNP and total population in all nations whose government is US territory?", "label": 1, "remark": "positive"}
{"sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( country ) , ( the number of ( all items ) ) that belongs to ( tv channel ) , grouped by ( country ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Which country has the least of TV Channels? List the country and number of TV Channels it has.", "label": 0, "remark": "logic"}
{"sql": "SELECT max(charge_amount) FROM Charges", "translated_sql": "( the maximum of ( charge amount ) ) that belongs to ( charges )", "question": "What is the charge amount of the most expensive charge type?", "label": 1, "remark": "positive"}
{"sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id", "translated_sql": "( student id ) , ( the number of ( all items ) ) that belongs to ( likes ) , grouped by ( student id )", "question": "Count the number of likes for each student id.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1", "translated_sql": "( airportcode of department ) that belongs to ( ( airports ) , and ( ( flights ) satisfied that ( ( ( airportcode of department ) equal to ( destairport of management ) ) or ( ( airportcode of department ) equal to ( sourceairport of management ) ) ) ) ) , grouped by ( airportcode of department ) , ordered by ( ( the number of ( all items ) ) ) , limited to the top ( 1 )", "question": "Give the code of the airport with the least flights.", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'", "translated_sql": "( created of management ) , ( state of management ) , ( phone number of management ) that belongs to ( ( contestants ) , and ( ( votes ) satisfied that ( ( contestant number of department ) equal to ( contestant number of management ) ) ) ) , that have ( ( contestant name of department ) equal to ( 'tabatha gehling' ) )", "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "translated_sql": "( last name of likes ) that belongs to ( ( students ) , and ( ( addresses ) satisfied that ( ( current address id of likes ) equal to ( address id of highschooler ) ) ) ) , that have ( ( state province county of highschooler ) equal to ( 'northcarolina' ) ), and except that ( ( distinct ( last name of area code state ) ) that belongs to ( ( students ) , and ( ( student enrolment ) satisfied that ( ( student id of area code state ) equal to ( student id of car makers ) ) ) ))", "question": "What are the first name of the students who live in North Carolina but have not registered in any degree programs?", "label": 0, "remark": "value col"}
{"sql": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'", "translated_sql": "( cell mobile number ) that belongs to ( students ) , that have ( ( ( first name ) equal to ( 'timmothy' ) ) and ( ( last name ) equal to ( 'ward' ) ) )", "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "label": 1, "remark": "positive"}
{"sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "translated_sql": "( winner name ) that belongs to ( matches ) , that have ( ( tourney name ) equal to ( 'australian open' ) ) , ordered by ( ( winner rank points ) in descending order ) , limited to the top ( 1 )", "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "translated_sql": "( model of department ) that belongs to ( ( car names ) , and ( ( cars data ) satisfied that ( ( makeid of department ) equal to ( id of management ) ) ) ) , that have ( ( weight of management ) less than ( the average of ( weight ) ) that belongs to ( cars data ) )", "question": "Find the model of the car whose weight is below the average weight.", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"", "translated_sql": "( distinct ( name of area code state ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of likes ) equal to ( countrycode of highschooler ) ) ) , and ( ( city ) satisfied that ( ( code of likes ) equal to ( countrycode of area code state ) ) ) ) , that have ( ( ( isofficial of highschooler ) equal to ( 't' ) ) and ( ( language of highschooler ) equal to ( 'chinese' ) ) and ( ( continent of likes ) equal to ( asia ) ) )", "question": "Whic`h unique cities are in  Asian countries where Janpanese is the official language?", "label": 0, "remark": "value str"}
{"sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "translated_sql": "( name of head ) that belongs to ( ( course arrange ) , and ( ( course ) satisfied that ( ( course id of department ) equal to ( course id of management ) ) ) , and ( ( teacher ) satisfied that ( ( teacher id of department ) equal to ( teacher id of head ) ) ) ) , that have ( ( course of management ) equal to ( math ) )", "question": "Show the name of the teacher for the math course.", "label": 1, "remark": "positive"}
{"sql": "SELECT name ,  tonnage FROM ship ORDER BY name DESC", "translated_sql": "( name ) , ( tonnage ) that belongs to ( ship ) , ordered by ( ( name ) in descending order )", "question": "List the name and tonnage ordered by in ascending alphabetical order for the names.", "label": 0, "remark": "logic"}
{"sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "translated_sql": "( country ) that belongs to ( airlines ) , that have ( ( airline ) equal to ( jetblue airways ) )", "question": "Which country does Airline \"JetBlue Airways\" belong to?", "label": 1, "remark": "positive"}
{"sql": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "translated_sql": "( countrycode ) that belongs to ( countrylanguage ), and except that ( ( countrycode ) that belongs to ( countrylanguage ) , that have ( ( language ) equal to ( english ) ))", "question": "What are the country codes for countries that do not speak English?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2", "translated_sql": "( name of management ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of department ) equal to ( id of management ) ) ) ) , that have ( ( grade of management ) greater than ( 5 ) ) , grouped by ( student id of department ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )", "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.", "label": 1, "remark": "positive"}
{"sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "translated_sql": "( region ) that belongs to ( ( country ) , and ( ( city ) satisfied that ( ( code of likes ) equal to ( countrycode of highschooler ) ) ) ) , that have ( ( name of highschooler ) equal to ( kabul ) )", "question": "Which region is the city Beijing located in?", "label": 0, "remark": "value str"}
{"sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "translated_sql": "( earnings ) that belongs to ( poker player ) , ordered by ( ( earnings ) in descending order )", "question": "List the earnings of poker players in descending order.", "label": 1, "remark": "positive"}
{"sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "translated_sql": "( the maximum of ( final table made ) ) that belongs to ( poker player ) , that have ( ( earnings ) less than ( 200000 ) )", "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( airline of management ) equal to ( uid of department ) ) ) ) , that have ( ( ( airline of department ) equal to ( united airlines ) ) and ( ( destairport of management ) equal to ( asy ) ) )", "question": "Count the number of United Airlines flights arriving in ASY Airport.", "label": 1, "remark": "positive"}
{"sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "translated_sql": "( cost of treatment ) that belongs to ( treatments ) , ordered by ( ( date of treatment ) in descending order ) , limited to the top ( 1 )", "question": "Show me the cost of the most recently performed treatment.", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"", "translated_sql": "( distinct ( name of head ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) , and ( ( city ) satisfied that ( ( code of department ) equal to ( countrycode of head ) ) ) ) , that have ( ( ( isofficial of management ) equal to ( 't' ) ) and ( ( language of management ) equal to ( 'chinese' ) ) and ( ( continent of department ) equal to ( asia ) ) )", "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.", "label": 1, "remark": "positive"}
{"sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "translated_sql": "( the minimum of ( grade ) ) that belongs to ( highschooler ) , that have ( ( id ) not in ( ( student id of department ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of department ) equal to ( id of management ) ) ) ) ) )", "question": "What is the lowest grade of students who do not have any friends?", "label": 1, "remark": "positive"}
{"sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "translated_sql": "( the sum of ( ranking points ) ) , ( first name of department ) that belongs to ( ( players ) , and ( ( rankings ) satisfied that ( ( player id of department ) equal to ( player id of management ) ) ) ) , grouped by ( first name of department )", "question": "Find the total ranking points for each player and their first name.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'", "translated_sql": "( the number of ( all items ) ) that belongs to ( ship ) , that have ( ( disposition of ship ) equal to ( 'captured' ) )", "question": "How many ships ended up being 'Captured'?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( cartoon ) , that have ( ( written by ) equal to ( joseph kuhr ) )", "question": "How many cartoons were not written by \"Joseph Kuhr\"?", "label": 0, "remark": "logic"}
{"sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "translated_sql": "( email address ) , ( cell number ) , ( home phone ) that belongs to ( professionals )", "question": "List the email, cell phone and home phone of all the professionals.", "label": 1, "remark": "positive"}
{"sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "translated_sql": "( first name ) , ( last name ) , ( email address ) that belongs to ( owners ) , that have ( ( state ) like ( '%north%' ) )", "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "label": 1, "remark": "positive"}
{"sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1", "translated_sql": "( document id ) that belongs to ( paragraphs ) , grouped by ( document id ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( 1 )", "question": "What is the document id with least number of paragraphs?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(DISTINCT country_code) FROM players", "translated_sql": "( the number of ( distinct ( country code ) ) ) that belongs to ( players )", "question": "find the number of distinct country codes of all players.", "label": 1, "remark": "positive"}
{"sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "translated_sql": "( stuid ) that belongs to ( student ), and except that ( ( stuid of likes ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of likes ) equal to ( stuid of highschooler ) ) ) , and ( ( pets ) satisfied that ( ( petid of area code state ) equal to ( petid of highschooler ) ) ) ) , that have ( ( pettype of area code state ) equal to ( 'cat' ) ))", "question": "What are the ids of the students who do not own dogs as pets?", "label": 0, "remark": "value str"}
{"sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "translated_sql": "( winner name ) , ( loser name ) that belongs to ( matches ) , ordered by ( ( minutes ) in descending order ) , limited to the top ( 1 )", "question": "find the names of loser who played in the match with greatest number of minutes.", "label": 0, "remark": "value col"}
{"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( destairport of department ) equal to ( airportcode of management ) ) ) , and ( ( airports ) satisfied that ( ( sourceairport of department ) equal to ( airportcode of head ) ) ) ) , that have ( ( ( city of management ) equal to ( ashley ) ) and ( ( city of head ) equal to ( aberdeen ) ) )", "question": "How many flights fly from Aberdeen to Ashley?", "label": 1, "remark": "positive"}
{"sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "translated_sql": "( countrycode ) , ( the maximum of ( percentage ) ) that belongs to ( countrylanguage ) , that have ( ( language ) equal to ( spanish ) ) , grouped by ( countrycode )", "question": "Return the codes of countries for which Spanish is the predominantly spoken language.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid", "translated_sql": "( the number of ( all items ) ) , ( stuid of likes ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of likes ) equal to ( stuid of highschooler ) ) ) ) , grouped by ( stuid of likes )", "question": "For students who have pets, how many pets does in total the students have?", "label": 0, "remark": "logic"}
{"sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "translated_sql": "( the average of ( lifeexpectancy ) ) that belongs to ( country ) , that have ( ( ( continent ) equal to ( africa ) ) and ( ( governmentform ) equal to ( republic ) ) )", "question": "What is the average life expectancy in African countries that are republics?", "label": 1, "remark": "positive"}
{"sql": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'", "translated_sql": "( cell mobile number ) that belongs to ( students ) , that have ( ( ( first name ) equal to ( 'timmothy' ) ) and ( ( last name ) equal to ( 'ward' ) ) )", "question": "What is the mobile phone number of the student named Timothy Ward?", "label": 1, "remark": "positive"}
{"sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "translated_sql": "( document id ) that belongs to ( paragraphs ) , grouped by ( document id ) , that have ( ( the number of ( all items ) ) between ( 1 ) and ( 2 ) )", "question": "Give the ids of documents that have between one and two paragraphs.", "label": 1, "remark": "positive"}
{"sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "translated_sql": "( record company ) that belongs to ( orchestra ) , grouped by ( record company ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the record company used by the greatest number of orchestras?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "translated_sql": "( birth date of department ) that belongs to ( ( people ) , and ( ( poker player ) satisfied that ( ( people id of department ) equal to ( people id of management ) ) ) ) , ordered by ( ( earnings of management ) in ascending order ) , limited to the top ( 1 )", "question": "Return the birth date of the poker player with the lowest earnings.", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "translated_sql": "( transcript date of management ) , ( transcript id of department ) that belongs to ( ( transcript contents ) , and ( ( transcripts ) satisfied that ( ( transcript id of department ) equal to ( transcript id of management ) ) ) ) , grouped by ( transcript id of department ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( 1 )", "question": "Show the date of the transcript which shows the least number of results, also list the id.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(DISTINCT LOCATION) FROM shop", "translated_sql": "( the number of ( distinct ( location ) ) ) that belongs to ( shop )", "question": "Count the number of distinct store locations.", "label": 1, "remark": "positive"}
{"sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "translated_sql": "( petid ) , ( weight ) that belongs to ( pets ) , that have ( ( pet age ) greater than ( 1 ) )", "question": "Find the id and weight of all pets whose age is older than 1.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "translated_sql": "( the number of ( distinct ( language ) ) ) that belongs to ( countrylanguage )", "question": "What are the names of distinct languages used around the world?", "label": 0, "remark": "value col"}
{"sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "translated_sql": "( stuid ) that belongs to ( student ), and except that ( ( stuid of department ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of department ) equal to ( stuid of management ) ) ) , and ( ( pets ) satisfied that ( ( petid of head ) equal to ( petid of management ) ) ) ) , that have ( ( pettype of head ) equal to ( 'cat' ) ))", "question": "What are the ids of the students who do not own cats as pets?", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT T1.Year FROM CARS_DATA AS T1 WHERE T1.Weight  >  3000 AND T1.weight  <  4000;", "translated_sql": "( distinct ( year of department ) ) that belongs to ( ( cars data ) ) , that have ( ( ( weight of department ) greater than ( 3000 ) ) and ( ( weight of department ) less than ( 4000 ) ) )", "question": "In which years cars were produced weighing no less than 3000 and no more than 4000?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(DISTINCT loser_name) FROM matches", "translated_sql": "( the number of ( distinct ( loser name ) ) ) that belongs to ( matches )", "question": "How many different loser names are there?", "label": 1, "remark": "positive"}
{"sql": "SELECT max(age) FROM Dogs", "translated_sql": "( the maximum of ( age ) ) that belongs to ( dogs )", "question": "What is the age of the oldest cat?", "label": 0, "remark": "value table"}
{"sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "translated_sql": "( name ) that belongs to ( conductor ) , ordered by ( ( year of work ) in descending order ) , limited to the top ( 1 )", "question": "What is the name of the conductor who has worked the fewest number of years?", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) FROM Transcripts", "translated_sql": "( the number of ( all items ) ) that belongs to ( transcripts )", "question": "How many transcripts are not released?", "label": 0, "remark": "logic"}
{"sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "translated_sql": "( the average of ( age ) ) , ( the minimum of ( age ) ) , ( the maximum of ( age ) ) that belongs to ( singer ) , that have ( ( country ) equal to ( 'france' ) )", "question": "What is the average, minimum, and total age for all French singers?", "label": 0, "remark": "logic"}
{"sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "translated_sql": "( flightno ) that belongs to ( flights ) , that have ( ( destairport ) equal to ( apg ) )", "question": "Give the flight numbers of flights landing at APG.", "label": 1, "remark": "positive"}
{"sql": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "translated_sql": "( winner name ) that belongs to ( matches ) , that have ( ( year ) equal to ( 2013 ) ), and intersect with ( ( winner name ) that belongs to ( matches ) , that have ( ( year ) equal to ( 2016 ) ))", "question": "What are the names of players who won in both 2013 and 2016?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id", "translated_sql": "( name of management ) , ( the number of ( all items ) ) that belongs to ( ( concert ) , and ( ( stadium ) satisfied that ( ( stadium id of department ) equal to ( stadium id of management ) ) ) ) , grouped by ( stadium id of department )", "question": "Show the stadium name and the number of concerts in each stadium.", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "translated_sql": "( name ) that belongs to ( conductor ) , that have ( ( nationality ) not equal to ( 'usa' ) )", "question": "Return the names of conductors that do not have the nationality \"China\".", "label": 0, "remark": "value str"}
{"sql": "SELECT count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id ORDER BY T2.Capacity DESC LIMIT 1", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( concert ) , and ( ( stadium ) satisfied that ( ( stadium id of department ) equal to ( stadium id of management ) ) ) ) , ordered by ( ( capacity of management ) in descending order ) , limited to the top ( 1 )", "question": "What are the number of concerts that occurred in the stadium with the largest capacity?", "label": 1, "remark": "positive"}
{"sql": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "translated_sql": "( professional id ) , ( last name ) , ( cell number ) that belongs to ( professionals ) , that have ( ( state ) equal to ( 'indiana' ) ) and ( professional id of likes ) , ( last name of likes ) , ( cell number of likes ) that belongs to ( ( professionals ) , and ( ( treatments ) satisfied that ( ( professional id of likes ) equal to ( professional id of highschooler ) ) ) ) , grouped by ( professional id of likes ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )", "question": "Which professionals live in the state of Indiana or have done treatment on less than 2 treatments? List his or her id, last name and cell phone.", "label": 0, "remark": "logic"}
{"sql": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "translated_sql": "( code ) that belongs to ( country ) , that have ( ( governmentform ) not equal to ( republic ) ), and except that ( ( countrycode ) that belongs to ( countrylanguage ) , that have ( ( language ) equal to ( english ) ))", "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "translated_sql": "( name ) that belongs to ( country ) , that have ( ( surfacearea ) greater than ( the minimum of ( surfacearea ) ) that belongs to ( country ) , that have ( ( continent ) equal to ( europe ) ) )", "question": "Which countries have greater area than that of any country in Europe?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "translated_sql": "( template id of management ) that belongs to ( ( ref template types ) , and ( ( templates ) satisfied that ( ( template type code of department ) equal to ( template type code of management ) ) ) ) , that have ( ( template type description of department ) equal to ( presentation ) )", "question": "Return the ids corresponding to templates with the description 'Presentation'.", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "translated_sql": "( name ) that belongs to ( conductor ) , that have ( ( nationality ) not equal to ( 'usa' ) )", "question": "What are the names of conductors whose nationalities are not \"USA\"?", "label": 1, "remark": "positive"}
{"sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2", "translated_sql": "( hometown ) that belongs to ( teacher ) , grouped by ( hometown ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )", "question": "Show the hometowns shared by at least three teachers.", "label": 0, "remark": "value int"}
{"sql": "SELECT count(*) FROM Transcripts", "translated_sql": "( the number of ( all items ) ) that belongs to ( transcripts )", "question": "How many transcripts are listed?", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM teacher WHERE Hometown != \"Little Lever Urban Distric\"", "translated_sql": "( name ) that belongs to ( teacher ) , that have ( ( hometown ) not equal to ( little lever urban distric ) )", "question": "List the id of teachers whose hometown is not \"Little Lever Urban District\".", "label": 0, "remark": "value col"}
{"sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "translated_sql": "( countrycode ) , ( the maximum of ( percentage ) ) that belongs to ( countrylanguage ) , that have ( ( language ) equal to ( spanish ) ) , grouped by ( countrycode )", "question": "Return the codes of countries for which Spanish is not the predominantly spoken language.", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name", "translated_sql": "( the number of ( all items ) ) , ( name of catalog structure ) that belongs to ( ( hiring ) , and ( ( shop ) satisfied that ( ( shop id of catalogs ) equal to ( shop id of catalog structure ) ) ) ) , grouped by ( name of catalog structure )", "question": "Find the number of employees hired in each shop; show the shop name as well.", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id", "translated_sql": "( name of management ) , ( the number of ( all items ) ) that belongs to ( ( concert ) , and ( ( stadium ) satisfied that ( ( stadium id of department ) equal to ( stadium id of management ) ) ) ) , grouped by ( stadium id of department )", "question": "For each stadium, how many concerts play there?", "label": 1, "remark": "positive"}
{"sql": "SELECT country ,  count(*) FROM singer GROUP BY country", "translated_sql": "( country ) , ( the number of ( all items ) ) that belongs to ( singer ) , grouped by ( country )", "question": "How many singers are from each country?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(DISTINCT Nationality) FROM conductor", "translated_sql": "( the number of ( distinct ( nationality ) ) ) that belongs to ( conductor )", "question": "Count the number of different nationalities of conductors.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airlines ) satisfied that ( ( airline of department ) equal to ( uid of management ) ) ) ) , that have ( ( airline of management ) equal to ( jetblue airways ) )", "question": "Give the number of Jetblue Airways flights.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM CONTINENTS;", "translated_sql": "( the number of ( all items ) ) that belongs to ( continents )", "question": "What is the number of continents?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "translated_sql": "( accelerate of department ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of department ) equal to ( makeid of management ) ) ) ) , that have ( ( make of management ) equal to ( 'amc hornet sportabout (sw)' ) )", "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "translated_sql": "( horsepower of management ) , ( make of department ) that belongs to ( ( car names ) , and ( ( cars data ) satisfied that ( ( makeid of department ) equal to ( id of management ) ) ) ) , that have ( ( cylinders of management ) equal to ( 3 ) ) , ordered by ( ( horsepower of management ) in descending order ) , limited to the top ( 1 )", "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name", "translated_sql": "( name of department ) , ( the sum of ( sales of management ) ) that belongs to ( ( singer ) , and ( ( song ) satisfied that ( ( singer id of department ) equal to ( singer id of management ) ) ) ) , grouped by ( name of department )", "question": "Show the names of singers and the total sales of their songs.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(DISTINCT loser_name) FROM matches", "translated_sql": "( the number of ( distinct ( loser name ) ) ) that belongs to ( matches )", "question": "How many loser names are there?", "label": 0, "remark": "logic"}
{"sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "translated_sql": "( record company ) that belongs to ( orchestra ) , that have ( ( year of founded ) less than ( 2003 ) ), and intersect with ( ( record company ) that belongs to ( orchestra ) , that have ( ( year of founded ) greater than ( 2003 ) ))", "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?", "label": 1, "remark": "positive"}
{"sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "translated_sql": "( the sum of ( population ) ) , ( the average of ( lifeexpectancy ) ) , ( continent ) that belongs to ( country ) , grouped by ( continent ) , that have ( ( the average of ( lifeexpectancy ) ) less than ( 72 ) )", "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 82?", "label": 0, "remark": "value int"}
{"sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "translated_sql": "( the number of ( all items ) ) that belongs to ( cars data ) , that have ( ( accelerate ) greater than ( accelerate ) that belongs to ( cars data ) , ordered by ( ( horsepower ) in descending order ) , limited to the top ( 1 ) )", "question": "How many cars have a larger accelerate than the car with the largest horsepower?", "label": 1, "remark": "positive"}
{"sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "translated_sql": "( template id ) that belongs to ( documents ) , grouped by ( template id ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )", "question": "Show ids for all templates that are used by more than one document.", "label": 1, "remark": "positive"}
{"sql": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "translated_sql": "( countrycode ) that belongs to ( countrylanguage ), and except that ( ( countrycode ) that belongs to ( countrylanguage ) , that have ( ( language ) equal to ( english ) ))", "question": "Return the country codes for countries that do not speak English.", "label": 1, "remark": "positive"}
{"sql": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "translated_sql": "( the sum of ( surfacearea ) ) that belongs to ( country ) , that have ( ( region ) equal to ( caribbean ) )", "question": "What is the average surface area of the countries in the Caribbean region?", "label": 0, "remark": "logic"}
{"sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "translated_sql": "( airline ) , ( abbreviation ) that belongs to ( airlines ) , that have ( ( country ) equal to ( usa ) )", "question": "What are the airline names and abbreviations for airlines in the USA?", "label": 1, "remark": "positive"}
{"sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";", "translated_sql": "( title ) that belongs to ( cartoon ) , that have ( ( ( directed by ) equal to ( ben jones ) ) or ( ( directed by ) equal to ( brandon vietti ) ) )", "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?", "label": 1, "remark": "positive"}
{"sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "translated_sql": "( template id ) that belongs to ( templates ), and except that ( ( template id ) that belongs to ( documents ))", "question": "Show ids for all templates not used by any document.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( templates ) , that have ( ( template type code ) equal to ( cv ) )", "question": "Count the number of templates of the type CV.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM poker_player", "translated_sql": "( the number of ( all items ) ) that belongs to ( poker player )", "question": "Count the number of poker players.", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( name of management ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of department ) equal to ( id of management ) ) ) ) , grouped by ( student id of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Return the name of the high school student with the most friends.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "translated_sql": "( first name of department ) , ( middle name of department ) , ( last name of department ) , ( student id of department ) that belongs to ( ( students ) , and ( ( student enrolment ) satisfied that ( ( student id of department ) equal to ( student id of management ) ) ) ) , grouped by ( student id of department ) , that have ( ( the number of ( all items ) ) equal to ( 2 ) )", "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?", "label": 1, "remark": "positive"}
{"sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "translated_sql": "( tourney name ) that belongs to ( matches ) , grouped by ( tourney name ) , that have ( ( the number of ( all items ) ) greater than ( 10 ) )", "question": "Find the name of tourney that has more than 10 matches.", "label": 1, "remark": "positive"}
{"sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "translated_sql": "( weekly rank ) that belongs to ( tv series ) , that have ( ( episode ) equal to ( a love of a lifetime ) )", "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id ORDER BY T2.Capacity DESC LIMIT 1", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( concert ) , and ( ( stadium ) satisfied that ( ( stadium id of likes ) equal to ( stadium id of highschooler ) ) ) ) , ordered by ( ( capacity of highschooler ) in descending order ) , limited to the top ( 1 )", "question": "Find the number of concerts happened in the stadium with the lowest capacity.", "label": 0, "remark": "logic"}
{"sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( name of catalogs ) that belongs to ( ( employee ) , and ( ( evaluation ) satisfied that ( ( employee id of catalogs ) equal to ( employee id of catalog structure ) ) ) ) , grouped by ( employee id of catalog structure ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Which employee received the most awards in evaluations? Give me the employee name.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "translated_sql": "( the number of ( distinct ( language ) ) ) that belongs to ( countrylanguage )", "question": "How many languages are spoken in the world?", "label": 0, "remark": "logic"}
{"sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "translated_sql": "( first name ) , ( last name ) , ( email address ) that belongs to ( owners ) , that have ( ( state ) like ( '%north%' ) )", "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "translated_sql": "( continent of department ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , grouped by ( continent of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Which continent has the most diverse languages?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( degree summary name of department ) that belongs to ( ( degree programs ) , and ( ( student enrolment ) satisfied that ( ( degree program id of department ) equal to ( degree program id of management ) ) ) ) , grouped by ( degree summary name of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the degree summary name that has the most number of students enrolled?", "label": 1, "remark": "positive"}
{"sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( year ) that belongs to ( matches ) , grouped by ( year ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Which year had the most matches?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3", "translated_sql": "( makeid of highschooler ) , ( make of highschooler ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of likes ) equal to ( makeid of highschooler ) ) ) ) , that have ( ( ( horsepower of likes ) greater than ( the minimum of ( horsepower ) ) that belongs to ( cars data ) ) and ( ( cylinders of likes ) less than or equal to ( 3 ) ) )", "question": "Among the cars with more than lowest horsepower, which ones do have more than 3 cylinders? List the car makeid and make name.", "label": 0, "remark": "logic"}
{"sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC", "translated_sql": "( name of department ) that belongs to ( ( people ) , and ( ( poker player ) satisfied that ( ( people id of department ) equal to ( people id of management ) ) ) ) , ordered by ( ( earnings of management ) in descending order )", "question": "Return the names of poker players sorted by their earnings descending.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'", "translated_sql": "( fname of likes ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of likes ) equal to ( stuid of highschooler ) ) ) , and ( ( pets ) satisfied that ( ( petid of area code state ) equal to ( petid of highschooler ) ) ) ) , that have ( ( pettype of area code state ) equal to ( 'cat' ) ), and intersect with ( ( fname of likes ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of likes ) equal to ( stuid of highschooler ) ) ) , and ( ( pets ) satisfied that ( ( petid of area code state ) equal to ( petid of highschooler ) ) ) ) , that have ( ( pettype of area code state ) equal to ( 'dog' ) ))", "question": "What are the students' first names who have either cats or dogs as pets?", "label": 0, "remark": "logic"}
{"sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "translated_sql": "( flightno of department ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( destairport of department ) equal to ( airportcode of management ) ) ) ) , that have ( ( city of management ) equal to ( aberdeen ) )", "question": "Give the flight numbers of flights arriving in Aberdeen.", "label": 1, "remark": "positive"}
{"sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "translated_sql": "( pixel aspect ratio par ) , ( country ) that belongs to ( tv channel ) , that have ( ( language ) not equal to ( 'english' ) )", "question": "find the pixel aspect ratio and nation of the tv channels that do not use Spanish.", "label": 0, "remark": "value str"}
{"sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "translated_sql": "( country ) that belongs to ( tv channel ), and except that ( ( country of department ) that belongs to ( ( tv channel ) , and ( ( cartoon ) satisfied that ( ( id of department ) equal to ( channel of management ) ) ) ) , that have ( ( written by of management ) equal to ( 'todd casey' ) ))", "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) ,  hand FROM players GROUP BY hand", "translated_sql": "( the number of ( all items ) ) , ( hand ) that belongs to ( players ) , grouped by ( hand )", "question": "Find the number of players for each hand type.", "label": 1, "remark": "positive"}
{"sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "translated_sql": "( language ) , ( the number of ( all items ) ) that belongs to ( tv channel ) , grouped by ( language )", "question": "List each language and the number of TV Channels not using it.", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )", "translated_sql": "( the number of ( all items ) ) that belongs to ( dogs ) , that have ( ( age ) less than ( the average of ( age ) ) that belongs to ( dogs ) )", "question": "Count the number of dogs of an age below the average.", "label": 1, "remark": "positive"}
{"sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( ( name of department ) equal to ( afghanistan ) ) and ( ( isofficial ) equal to ( t ) ) )", "question": "How many official languages are spoken in Afghanistan?", "label": 1, "remark": "positive"}
{"sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "translated_sql": "( name ) , ( surfacearea ) that belongs to ( country ) , ordered by ( ( surfacearea ) in descending order ) , limited to the top ( 5 )", "question": "What are the names and areas of countries with the top 5 smallest area?", "label": 0, "remark": "logic"}
{"sql": "SELECT Title FROM Cartoon ORDER BY title", "translated_sql": "( title ) that belongs to ( cartoon ) , ordered by ( ( title ) )", "question": "What are the titles of the cartoons sorted alphabetically?", "label": 1, "remark": "positive"}
{"sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( language ) that belongs to ( countrylanguage ) , grouped by ( language ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Which language is spoken by the largest number of countries?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "translated_sql": "( episode of management ) that belongs to ( ( tv channel ) , and ( ( tv series ) satisfied that ( ( id of department ) equal to ( channel of management ) ) ) ) , that have ( ( series name of department ) equal to ( sky radio ) )", "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( destairport of department ) equal to ( airportcode of management ) ) ) ) , that have ( ( city of management ) equal to ( aberdeen ) )", "question": "Return the number of flights arriving in Aberdeen.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "translated_sql": "( the number of ( distinct ( department id ) ) ) that belongs to ( degree programs )", "question": "How many departments offer any degree?", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "translated_sql": "( name ) that belongs to ( singer ) , ordered by ( ( net worth millions ) in descending order ) , limited to the top ( 1 )", "question": "What is the name of the singer with the largest net worth?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "translated_sql": "( model of department ) that belongs to ( ( car names ) , and ( ( cars data ) satisfied that ( ( makeid of department ) equal to ( id of management ) ) ) ) , that have ( ( cylinders of management ) equal to ( 4 ) ) , ordered by ( ( horsepower of management ) in descending order ) , limited to the top ( 1 )", "question": "For all of the 4 cylinder cars, which model has the most horsepower?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(DISTINCT Nationality) FROM conductor", "translated_sql": "( the number of ( distinct ( nationality ) ) ) that belongs to ( conductor )", "question": "How many different nationalities do conductors have?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'", "translated_sql": "( petid of management ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of department ) equal to ( stuid of management ) ) ) ) , that have ( ( lname of department ) equal to ( 'smith' ) )", "question": "What is the id of the pet owned by the student whose last name is 'Smith'?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "translated_sql": "( first name of likes ) , ( country code of likes ) , ( birth date of likes ) that belongs to ( ( players ) , and ( ( matches ) satisfied that ( ( player id of likes ) equal to ( winner id of highschooler ) ) ) ) , ordered by ( ( winner rank points of highschooler ) in descending order ) , limited to the top ( 1 )", "question": "What is the last name, country code, and birth date of the player with the most winner rank points across all matches?", "label": 0, "remark": "value col"}
{"sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "translated_sql": "( version number ) , ( template type code ) that belongs to ( templates ) , that have ( ( version number ) greater than ( 5 ) )", "question": "What is the version number and template type code for the template with version number earlier than 5?", "label": 0, "remark": "logic"}
{"sql": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3", "translated_sql": "( makeid of highschooler ) , ( make of highschooler ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of likes ) equal to ( makeid of highschooler ) ) ) ) , that have ( ( ( horsepower of likes ) greater than ( the minimum of ( horsepower ) ) that belongs to ( cars data ) ) and ( ( cylinders of likes ) less than or equal to ( 3 ) ) )", "question": "Among the cars that do not have the minimum horsepower, what are the make ids and names of al those with less than 3 cylinders?", "label": 0, "remark": "value int"}
{"sql": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( id of highschooler ) , ( name of highschooler ) that belongs to ( ( death ) , and ( ( ship ) satisfied that ( ( caused by ship id of likes ) equal to ( id of highschooler ) ) ) ) , grouped by ( id of highschooler ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the ship id and name that caused fewest total injuries?", "label": 0, "remark": "logic"}
{"sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "translated_sql": "( name ) that belongs to ( country ) , ordered by ( ( population ) in ascending order ) , limited to the top ( 3 )", "question": "Return the names of the 3 countries with the fewest people.", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "translated_sql": "( document name of management ) that belongs to ( ( templates ) , and ( ( documents ) satisfied that ( ( template id of department ) equal to ( template id of management ) ) ) ) , that have ( ( template type code of department ) equal to ( bk ) )", "question": "What are the names of documents that use templates with the code BK?", "label": 1, "remark": "positive"}
{"sql": "SELECT charge_type ,  charge_amount FROM Charges", "translated_sql": "( charge type ) , ( charge amount ) that belongs to ( charges )", "question": "How much does each charge type costs? List both charge type and amount.", "label": 1, "remark": "positive"}
{"sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( template type code ) that belongs to ( templates ) , grouped by ( template type code ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Return the type code of the template type that the most templates belong to.", "label": 1, "remark": "positive"}
{"sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "translated_sql": "( title ) , ( directed by ) that belongs to ( cartoon ) , ordered by ( ( original air date ) )", "question": "list all cartoon titles and their directors ordered by their air date", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "translated_sql": "( name of management ) that belongs to ( ( singer in concert ) , and ( ( singer ) satisfied that ( ( singer id of department ) equal to ( singer id of management ) ) ) , and ( ( concert ) satisfied that ( ( concert id of department ) equal to ( concert id of head ) ) ) ) , that have ( ( year of head ) equal to ( 2014 ) )", "question": "What are the names of the singers who performed in a concert in 2014?", "label": 1, "remark": "positive"}
{"sql": "SELECT section_name ,  section_description FROM Sections", "translated_sql": "( section name ) , ( section description ) that belongs to ( sections )", "question": "What are the descriptions for all the sections?", "label": 0, "remark": "value col"}
{"sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( year ) that belongs to ( matches ) , grouped by ( year ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Which month had the most matches?", "label": 0, "remark": "value col"}
{"sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "translated_sql": "( model of likes ) that belongs to ( ( car names ) , and ( ( cars data ) satisfied that ( ( makeid of likes ) equal to ( id of highschooler ) ) ) ) , that have ( ( weight of highschooler ) less than ( the average of ( weight ) ) that belongs to ( cars data ) )", "question": "What is the name for the car with a weight smaller than the average?", "label": 0, "remark": "value col"}
{"sql": "SELECT Other_Details FROM Paragraphs WHERE paragraph_text  =  'Korea'", "translated_sql": "( other details ) that belongs to ( paragraphs ) , that have ( ( paragraph text ) equal to ( 'korea' ) )", "question": "What are the details for the paragraph that includes the text 'Korea'?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015", "translated_sql": "( name of management ) , ( location of management ) that belongs to ( ( concert ) , and ( ( stadium ) satisfied that ( ( stadium id of department ) equal to ( stadium id of management ) ) ) ) , that have ( ( year of department ) equal to ( 2014 ) ), and intersect with ( ( name of management ) , ( location of management ) that belongs to ( ( concert ) , and ( ( stadium ) satisfied that ( ( stadium id of department ) equal to ( stadium id of management ) ) ) ) , that have ( ( year of department ) equal to ( 2015 ) ))", "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "translated_sql": "( distinct ( template type description of department ) ) that belongs to ( ( ref template types ) , and ( ( templates ) satisfied that ( ( template type code of department ) equal to ( template type code of management ) ) ) , and ( ( documents ) satisfied that ( ( template id of management ) equal to ( template id of head ) ) ) )", "question": "What are the distinct template type descriptions for the templates ever used by any document?", "label": 1, "remark": "positive"}
{"sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1", "translated_sql": "( year of founded ) that belongs to ( ( orchestra ) , and ( ( performance ) satisfied that ( ( orchestra id of department ) equal to ( orchestra id of management ) ) ) ) , grouped by ( orchestra id of management ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )", "question": "What are years of founding for orchestras that have had more than a single performance?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "translated_sql": "( course name of department ) , ( course id of department ) that belongs to ( ( courses ) , and ( ( sections ) satisfied that ( ( course id of department ) equal to ( course id of management ) ) ) ) , grouped by ( course id of department ) , that have ( ( the number of ( all items ) ) less than or equal to ( 2 ) )", "question": "What are the names and id of courses having at most 2 sections?", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(age) FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid)", "translated_sql": "( the average of ( age ) ) that belongs to ( student ) , that have ( ( stuid ) not in ( ( stuid of department ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of department ) equal to ( stuid of management ) ) ) ) ) )", "question": "What is the average age for all students who do not own any pets?", "label": 1, "remark": "positive"}
{"sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"", "translated_sql": "( the sum of ( surfacearea ) ) that belongs to ( country ) , that have ( ( ( continent ) equal to ( asia ) ) or ( ( continent ) equal to ( europe ) ) )", "question": "Give the total surface area covered by countries in Asia or Europe.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "translated_sql": "( countryname of department ) that belongs to ( ( countries ) , and ( ( continents ) satisfied that ( ( continent of department ) equal to ( contid of management ) ) ) , and ( ( car makers ) satisfied that ( ( countryid of department ) equal to ( country of head ) ) ) ) , that have ( ( continent of management ) equal to ( 'europe' ) ) , grouped by ( countryname of department ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 3 ) )", "question": "Which countries in europe have at least 3 car manufacturers?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;", "translated_sql": "( the number of ( all items ) ) that belongs to ( cars data ) , that have ( ( cylinders ) greater than ( 4 ) )", "question": "How many cars have more than 4 cylinders?", "label": 1, "remark": "positive"}
{"sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "translated_sql": "( name ) , ( country ) that belongs to ( singer ) , that have ( ( song_name ) like ( '%hey%' ) )", "question": "What is the name and country of origin of every singer who has a song without the word 'Hey' in its title?", "label": 0, "remark": "logic"}
{"sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "translated_sql": "( major ) , ( age ) that belongs to ( student ) , that have ( ( stuid ) not in ( ( stuid of department ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of department ) equal to ( stuid of management ) ) ) , and ( ( pets ) satisfied that ( ( petid of head ) equal to ( petid of management ) ) ) ) , that have ( ( pettype of head ) equal to ( 'cat' ) ) ) )", "question": "What major is every student who does not own a cat as a pet, and also how old are they?", "label": 1, "remark": "positive"}
{"sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "translated_sql": "( abbreviation ) that belongs to ( airlines ) , that have ( ( airline ) equal to ( jetblue airways ) )", "question": "What is the number of the flights of Airline \"JetBlue Airways\"?", "label": 0, "remark": "logic"}
{"sql": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "translated_sql": "( name ) that belongs to ( country ) , that have ( ( surfacearea ) greater than ( the minimum of ( surfacearea ) ) that belongs to ( country ) , that have ( ( continent ) equal to ( europe ) ) )", "question": "What are the countries that have smaller surface area than any country in Europe?", "label": 0, "remark": "logic"}
{"sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "translated_sql": "( the sum of ( tours ) ) , ( ranking date ) that belongs to ( rankings ) , grouped by ( ranking date )", "question": "How many total tours were there for each ranking date?", "label": 1, "remark": "positive"}
{"sql": "SELECT Weight FROM CARS_DATA WHERE Cylinders  =  4 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1;", "translated_sql": "( weight ) that belongs to ( cars data ) , that have ( ( ( cylinders ) equal to ( 4 ) ) and ( ( year ) equal to ( 1974 ) ) ) , ordered by ( ( weight ) in ascending order ) , limited to the top ( 1 )", "question": "What is the smallest weight of the car produced with 8 cylinders on 1974?", "label": 1, "remark": "positive"}
{"sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "translated_sql": "( name ) , ( age ) , ( weight ) that belongs to ( dogs ) , that have ( ( abandoned yn ) equal to ( 1 ) )", "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "label": 1, "remark": "positive"}
{"sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "translated_sql": "( document id ) that belongs to ( paragraphs ) , that have ( ( paragraph text ) equal to ( 'brazil' ) ), and intersect with ( ( document id ) that belongs to ( paragraphs ) , that have ( ( paragraph text ) equal to ( 'ireland' ) ))", "question": "What are the ids of documents that contain the paragraph text 'Brazil' or 'Ireland'?", "label": 0, "remark": "logic"}
{"sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "translated_sql": "( hometown ) that belongs to ( teacher ) , ordered by ( ( age ) in ascending order ) , limited to the top ( 1 )", "question": "What is the hometown of the youngest teacher?", "label": 1, "remark": "positive"}
{"sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "translated_sql": "( money rank ) that belongs to ( poker player ) , ordered by ( ( earnings ) in descending order ) , limited to the top ( 1 )", "question": "Return the money rank of the player with the lowest earnings.", "label": 0, "remark": "logic"}
{"sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "translated_sql": "( fullname of department ) , ( id of department ) that belongs to ( ( car makers ) , and ( ( model list ) satisfied that ( ( id of department ) equal to ( maker of management ) ) ) ) , grouped by ( id of department ) , that have ( ( the number of ( all items ) ) greater than ( 3 ) )", "question": "What are the names and ids of all makers with more than 3 models?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3", "translated_sql": "( fullname of likes ) , ( id of likes ) that belongs to ( ( car makers ) , and ( ( model list ) satisfied that ( ( id of likes ) equal to ( maker of highschooler ) ) ) ) , grouped by ( id of likes ) , that have ( ( the number of ( all items ) ) greater than ( 3 ) )", "question": "Which makers designed more than 4 car models? List full name and the id.", "label": 0, "remark": "value int"}
{"sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4", "translated_sql": "( grade ) that belongs to ( highschooler ) , grouped by ( grade ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 4 ) )", "question": "Which grades have 4 or more high schoolers?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "translated_sql": "( name of department ) that belongs to ( ( singer ) , and ( ( song ) satisfied that ( ( singer id of department ) equal to ( singer id of management ) ) ) ) , grouped by ( name of department ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )", "question": "What are the names of the singers that have more than one songs?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( destairport of likes ) equal to ( airportcode of highschooler ) ) ) ) , that have ( ( city of highschooler ) equal to ( aberdeen ) )", "question": "How many flights arriving in Mexico city?", "label": 0, "remark": "value str"}
{"sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( year ) that belongs to ( concert ) , grouped by ( year ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Which year has most number of concerts?", "label": 1, "remark": "positive"}
{"sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "translated_sql": "( version number ) , ( template type code ) that belongs to ( templates ) , that have ( ( version number ) greater than ( 5 ) )", "question": "What is the version number and template type code for the template with version number later than 5?", "label": 1, "remark": "positive"}
{"sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( template type code ) that belongs to ( templates ) , grouped by ( template type code ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Which template type code has most number of templates?", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(winner_rank) FROM matches", "translated_sql": "( the average of ( winner rank ) ) that belongs to ( matches )", "question": "What is the total rank for winners in all matches?", "label": 0, "remark": "logic"}
{"sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made", "translated_sql": "( name of likes ) that belongs to ( ( people ) , and ( ( poker player ) satisfied that ( ( people id of likes ) equal to ( people id of highschooler ) ) ) ) , ordered by ( ( final table made of highschooler ) )", "question": "List the names of poker players ordered by the final tables made in descending order.", "label": 0, "remark": "logic"}
{"sql": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "translated_sql": "( district ) that belongs to ( shop ) , that have ( ( number products ) less than ( 3000 ) ), and intersect with ( ( district ) that belongs to ( shop ) , that have ( ( number products ) greater than ( 10000 ) ))", "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "translated_sql": "( distinct ( model of department ) ) that belongs to ( ( model list ) , and ( ( car names ) satisfied that ( ( model of department ) equal to ( model of management ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of management ) equal to ( id of head ) ) ) , and ( ( car makers ) satisfied that ( ( maker of department ) equal to ( id of trip ) ) ) ) , that have ( ( ( weight of head ) less than ( 3500 ) ) and ( ( fullname of trip ) not equal to ( 'ford motor company' ) ) )", "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")", "translated_sql": "( name ) that belongs to ( country ) , that have ( ( ( continent ) equal to ( africa ) ) and ( ( population ) less than ( the minimum of ( population ) ) that belongs to ( country ) , that have ( ( continent ) equal to ( asia ) ) ) )", "question": "Which African countries have a larger population than that of any country in Asia?", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) FROM area_code_state", "translated_sql": "( the number of ( all items ) ) that belongs to ( area code state )", "question": "How many different states are there?", "label": 0, "remark": "logic"}
{"sql": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")", "translated_sql": "( the number of ( all items ) ) that belongs to ( \"l ( name of department ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( language of management ) equal to ( english ) ), and intersect with ( ( name of department ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( language of management ) equal to ( dutch ) )) r\" )", "question": "What is the number of nations that use English and Dutch?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";", "translated_sql": "( the number of ( all items ) ) that belongs to ( tv channel ) , that have ( ( language ) equal to ( english ) )", "question": "How many TV Channels use the English language?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( name of highschooler ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of likes ) equal to ( id of highschooler ) ) ) ) , grouped by ( student id of likes ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Return the name of the high school student with the least friends.", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) FROM employee", "translated_sql": "( the number of ( all items ) ) that belongs to ( employee )", "question": "How many employees are there?", "label": 1, "remark": "positive"}
{"sql": "SELECT Maker ,  Model FROM MODEL_LIST", "translated_sql": "( maker ) , ( model ) that belongs to ( model list )", "question": "What are all the makers?", "label": 0, "remark": "value col"}
{"sql": "SELECT count(*) ,  hand FROM players GROUP BY hand", "translated_sql": "( the number of ( all items ) ) , ( hand ) that belongs to ( players ) , grouped by ( hand )", "question": "How many players are there for each hand type?", "label": 1, "remark": "positive"}
{"sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "translated_sql": "( name of head ) that belongs to ( ( course arrange ) , and ( ( course ) satisfied that ( ( course id of department ) equal to ( course id of management ) ) ) , and ( ( teacher ) satisfied that ( ( teacher id of department ) equal to ( teacher id of head ) ) ) ) , that have ( ( course of management ) equal to ( math ) )", "question": "What are the names of the people who teach math courses?", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)", "translated_sql": "( name ) that belongs to ( teacher ) , that have ( ( teacher_id ) not in ( ( teacher id ) that belongs to ( course arrange ) ) )", "question": "List the names of teachers who have been arranged to teach courses.", "label": 0, "remark": "logic"}
{"sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;", "translated_sql": "( countryname ) that belongs to ( countries ), and except that ( ( countryname of department ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of department ) equal to ( country of management ) ) ) ))", "question": "What are the name of the countries where there is not a single car maker?", "label": 1, "remark": "positive"}
{"sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "translated_sql": "( stuid ) that belongs to ( student ), and except that ( ( stuid of likes ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of likes ) equal to ( stuid of highschooler ) ) ) , and ( ( pets ) satisfied that ( ( petid of area code state ) equal to ( petid of highschooler ) ) ) ) , that have ( ( pettype of area code state ) equal to ( 'cat' ) ))", "question": "Find the id of students who do not have a dog pet.", "label": 0, "remark": "value str"}
{"sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "translated_sql": "( the number of ( distinct ( language of management ) ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( ( indepyear ) less than ( 1930 ) ) and ( ( isofficial of management ) equal to ( t ) ) )", "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM AIRLINES", "translated_sql": "( the number of ( all items ) ) that belongs to ( airlines )", "question": "What is the total number of airlines?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "translated_sql": "( the number of ( distinct ( language of highschooler ) ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of likes ) equal to ( countrycode of highschooler ) ) ) ) , that have ( ( ( indepyear ) less than ( 1930 ) ) and ( ( isofficial of highschooler ) equal to ( t ) ) )", "question": "What is the total number of unique official languages spoken in the countries that are founded before 1940?", "label": 0, "remark": "value int"}
{"sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "translated_sql": "( name of head ) , ( course of management ) that belongs to ( ( course arrange ) , and ( ( course ) satisfied that ( ( course id of department ) equal to ( course id of management ) ) ) , and ( ( teacher ) satisfied that ( ( teacher id of department ) equal to ( teacher id of head ) ) ) )", "question": "Show names of teachers and the courses they are arranged to teach.", "label": 1, "remark": "positive"}
{"sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "translated_sql": "( weight ) that belongs to ( pets ) , ordered by ( ( pet age ) ) , limited to the top ( 1 )", "question": "Find the weight of the oldest dog.", "label": 0, "remark": "logic"}
{"sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "translated_sql": "( name of catalogs ) that belongs to ( ( employee ) , and ( ( evaluation ) satisfied that ( ( employee id of catalogs ) equal to ( employee id of catalog structure ) ) ) ) , ordered by ( ( bonus of catalog structure ) in descending order ) , limited to the top ( 1 )", "question": "Which employee received the biggest bonus? Give me the employee name.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "translated_sql": "( first name of department ) , ( country code of department ) , ( birth date of department ) that belongs to ( ( players ) , and ( ( matches ) satisfied that ( ( player id of department ) equal to ( winner id of management ) ) ) ) , ordered by ( ( winner rank points of management ) in descending order ) , limited to the top ( 1 )", "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "translated_sql": "( the number of ( all items ) ) , ( the maximum of ( percentage ) ) that belongs to ( countrylanguage ) , that have ( ( language ) equal to ( spanish ) ) , grouped by ( countrycode )", "question": "Count the number of countries for which Spanish is the predominantly spoken language.", "label": 1, "remark": "positive"}
{"sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "translated_sql": "( state ) that belongs to ( owners ), and intersect with ( ( state ) that belongs to ( professionals ))", "question": "Which states have both owners and professionals living there?", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009", "translated_sql": "( the average of ( num of staff ) ) that belongs to ( museum ) , that have ( ( open year ) less than ( 2009 ) )", "question": "Find the average number of staff working for the museums that were open after 2009.", "label": 0, "remark": "logic"}
{"sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "translated_sql": "( name ) that belongs to ( country ) , ordered by ( ( population ) in descending order ) , limited to the top ( 3 )", "question": "What are names of countries with the top 3 largest population?", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(age) FROM Dogs", "translated_sql": "( the average of ( age ) ) that belongs to ( dogs )", "question": "What is the maximum age of all the dogs?", "label": 0, "remark": "value col"}
{"sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2", "translated_sql": "( nationality ) that belongs to ( people ) , grouped by ( nationality ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )", "question": "Return the nationalities for which there are two or more people.", "label": 1, "remark": "positive"}
{"sql": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "translated_sql": "( citizenship ) that belongs to ( singer ) , that have ( ( birth year ) less than ( 1945 ) ), and intersect with ( ( citizenship ) that belongs to ( singer ) , that have ( ( birth year ) greater than ( 1955 ) ))", "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?", "label": 1, "remark": "positive"}
{"sql": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "translated_sql": "( template type code ) , ( template type description ) that belongs to ( ref template types )", "question": "Show all template type codes.", "label": 0, "remark": "value col"}
{"sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "translated_sql": "( the number of ( distinct ( language ) ) ) that belongs to ( countrylanguage )", "question": "How many unique languages are spoken in the world?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( city of department ) that belongs to ( ( airports ) , and ( ( flights ) satisfied that ( ( airportcode of department ) equal to ( destairport of management ) ) ) ) , grouped by ( city of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Which city has the most frequent destination airport?", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(winner_rank) FROM matches", "translated_sql": "( the average of ( winner rank ) ) that belongs to ( matches )", "question": "What is the average rank for winners in all matches?", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(Earnings) FROM poker_player", "translated_sql": "( the average of ( earnings ) ) that belongs to ( poker player )", "question": "What is the average earnings of poker players?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "translated_sql": "( name of likes ) , ( orchestra of highschooler ) that belongs to ( ( conductor ) , and ( ( orchestra ) satisfied that ( ( conductor id of likes ) equal to ( conductor id of highschooler ) ) ) )", "question": "What are the id of conductors as well as the corresonding orchestras that they have conducted?", "label": 0, "remark": "value col"}
{"sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "translated_sql": "( abbreviation of likes ) , ( country of likes ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of likes ) equal to ( airline of highschooler ) ) ) ) , grouped by ( airline of likes ) , ordered by ( ( the number of ( all items ) ) ) , limited to the top ( 1 )", "question": "Find the abbreviation and country of the airline that has most number of flights?", "label": 0, "remark": "logic"}
{"sql": "SELECT count(DISTINCT current_address_id) FROM Students", "translated_sql": "( the number of ( distinct ( current address id ) ) ) that belongs to ( students )", "question": "What are the different addresses that have students living there?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "translated_sql": "( flightno of likes ) that belongs to ( ( flights ) , and ( ( airlines ) satisfied that ( ( uid of highschooler ) equal to ( airline of likes ) ) ) ) , that have ( ( airline of highschooler ) equal to ( united airlines ) )", "question": "What are flight numbers of Airline \"jetblue airways\"?", "label": 0, "remark": "value str"}
{"sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "translated_sql": "( course description ) that belongs to ( courses ) , that have ( ( course name ) equal to ( 'math' ) )", "question": "What are the descriptions for all the math courses?", "label": 1, "remark": "positive"}
{"sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "translated_sql": "( air date ) that belongs to ( tv series ) , that have ( ( episode ) equal to ( a love of a lifetime ) )", "question": "What is the id of episode \"A Love of a Lifetime\"?", "label": 0, "remark": "value col"}
{"sql": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "translated_sql": "( distinct ( name of highschooler ) ) that belongs to ( ( country ) , and ( ( city ) satisfied that ( ( countrycode of highschooler ) equal to ( code of likes ) ) ) ) , that have ( ( ( continent of likes ) equal to ( 'europe' ) ) and ( ( t1.name ) not in ( ( name of area code state ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of area code state ) equal to ( countrycode of car makers ) ) ) ) , that have ( ( ( isofficial of car makers ) equal to ( 't' ) ) and ( ( language of car makers ) equal to ( 'english' ) ) ) ) ) )", "question": "What are the names of cities in America for which English is not the official language?", "label": 0, "remark": "value str"}
{"sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( degree program id of department ) , ( degree summary name of department ) that belongs to ( ( degree programs ) , and ( ( student enrolment ) satisfied that ( ( degree program id of department ) equal to ( degree program id of management ) ) ) ) , grouped by ( degree program id of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the program id and the summary of the degree that has the most students enrolled?", "label": 1, "remark": "positive"}
{"sql": "SELECT Episode FROM TV_series ORDER BY rating", "translated_sql": "( episode ) that belongs to ( tv series ) , ordered by ( ( rating ) )", "question": "List the Episode of all TV series sorted by rating.", "label": 1, "remark": "positive"}
{"sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name", "translated_sql": "( name of head ) , ( course of management ) that belongs to ( ( course arrange ) , and ( ( course ) satisfied that ( ( course id of department ) equal to ( course id of management ) ) ) , and ( ( teacher ) satisfied that ( ( teacher id of department ) equal to ( teacher id of head ) ) ) ) , ordered by ( ( name of head ) )", "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM COUNTRIES", "translated_sql": "( the number of ( all items ) ) that belongs to ( countries )", "question": "What are the names of the listed countries?", "label": 0, "remark": "logic"}
{"sql": "SELECT Name FROM teacher ORDER BY Age ASC", "translated_sql": "( name ) that belongs to ( teacher ) , ordered by ( ( age ) in ascending order )", "question": "List the names of teachers in ascending order of age.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(DISTINCT template_id) FROM Documents", "translated_sql": "( the number of ( distinct ( template id ) ) ) that belongs to ( documents )", "question": "Count the names of different templates used for documents.", "label": 0, "remark": "value col"}
{"sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( degree summary name of department ) that belongs to ( ( degree programs ) , and ( ( student enrolment ) satisfied that ( ( degree program id of department ) equal to ( degree program id of management ) ) ) ) , grouped by ( degree summary name of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Find the kind of program which most number of students are enrolled in?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(DISTINCT Nationality) FROM people", "translated_sql": "( the number of ( distinct ( nationality ) ) ) that belongs to ( people )", "question": "Count the number of different nationalities.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "translated_sql": "( name of department ) , ( date of treatment of management ) that belongs to ( ( dogs ) , and ( ( treatments ) satisfied that ( ( dog id of department ) equal to ( dog id of management ) ) ) ) , that have ( ( breed code of department ) equal to ( breed code ) that belongs to ( dogs ) , grouped by ( breed code ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( 1 ) )", "question": "Which dogs are of the rarest breed? Show their names and treatment dates.", "label": 1, "remark": "positive"}
{"sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "translated_sql": "( id ) that belongs to ( tv channel ), and except that ( ( channel ) that belongs to ( cartoon ) , that have ( ( directed by ) equal to ( 'ben jones' ) ))", "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.", "label": 1, "remark": "positive"}
{"sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1", "translated_sql": "( language ) , ( the number of ( all items ) ) that belongs to ( tv channel ) , grouped by ( language ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( 1 )", "question": "List the language used most number of TV Channel. List language and number of TV Channel.", "label": 0, "remark": "logic"}
{"sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "translated_sql": "( distinct ( template type description of department ) ) that belongs to ( ( ref template types ) , and ( ( templates ) satisfied that ( ( template type code of department ) equal to ( template type code of management ) ) ) , and ( ( documents ) satisfied that ( ( template id of management ) equal to ( template id of head ) ) ) )", "question": "Return the different descriptions for templates that have been used in a document.", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT country FROM singer WHERE age  >  20", "translated_sql": "( distinct ( country ) ) that belongs to ( singer ) , that have ( ( age ) greater than ( 20 ) )", "question": "What are all distinct countries where singers above age 30 are from?", "label": 0, "remark": "value int"}
{"sql": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)", "translated_sql": "( name ) that belongs to ( shop ) , that have ( ( number products ) greater than ( the average of ( number products ) ) that belongs to ( shop ) )", "question": "Which shops' number products is above the average? Give me the shop names.", "label": 1, "remark": "positive"}
{"sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "translated_sql": "( the sum of ( population ) ) , ( governmentform ) that belongs to ( country ) , grouped by ( governmentform ) , that have ( ( the average of ( lifeexpectancy ) ) greater than ( 72 ) )", "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 69.", "label": 0, "remark": "value int"}
{"sql": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T2.country  =  'Haiti' UNION SELECT first_name FROM Students WHERE cell_mobile_number  =  '09700166582'", "translated_sql": "( first name of department ) that belongs to ( ( students ) , and ( ( addresses ) satisfied that ( ( permanent address id of department ) equal to ( address id of management ) ) ) ) , that have ( ( country of management ) equal to ( 'haiti' ) ) and ( first name ) that belongs to ( students ) , that have ( ( cell mobile number ) equal to ( '09700166582' ) )", "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582.", "label": 1, "remark": "positive"}
{"sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "translated_sql": "( name ) , ( surfacearea ) that belongs to ( country ) , ordered by ( ( surfacearea ) in descending order ) , limited to the top ( 5 )", "question": "Return the names and surface areas of the 6 largest countries.", "label": 0, "remark": "value int"}
{"sql": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION", "translated_sql": "( the number of ( all items ) ) , ( location ) that belongs to ( shop ) , grouped by ( location )", "question": "Find the number of shops in each location.", "label": 1, "remark": "positive"}
{"sql": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30", "translated_sql": "( country ) that belongs to ( singer ) , that have ( ( age ) greater than ( 40 ) ), and intersect with ( ( country ) that belongs to ( singer ) , that have ( ( age ) less than ( 30 ) ))", "question": "Show countries where a singer above age 40 and a singer below 30 are from.", "label": 1, "remark": "positive"}
{"sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "translated_sql": "( airline ) that belongs to ( airlines ) , that have ( ( abbreviation ) equal to ( ual ) )", "question": "Give the airline with abbreviation 'UAL'.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "translated_sql": "( date of treatment of department ) , ( first name of management ) that belongs to ( ( treatments ) , and ( ( professionals ) satisfied that ( ( professional id of department ) equal to ( professional id of management ) ) ) )", "question": "What are the date and the operating professional's first name of each treatment?", "label": 1, "remark": "positive"}
{"sql": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'", "translated_sql": "( cell mobile number ) that belongs to ( students ) , that have ( ( ( first name ) equal to ( 'timmothy' ) ) and ( ( last name ) equal to ( 'ward' ) ) )", "question": "What is the mobile phone number of the student whose first name is Timothy?", "label": 0, "remark": "logic"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( name of highschooler ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of likes ) equal to ( id of highschooler ) ) ) ) , grouped by ( student id of likes ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the id of the high schooler who has the greatest number of friends?", "label": 0, "remark": "value col"}
{"sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "translated_sql": "( name ) that belongs to ( conductor ) , ordered by ( ( year of work ) in descending order )", "question": "List names of conductors in descending order of years of work.", "label": 1, "remark": "positive"}
{"sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( year ) that belongs to ( concert ) , grouped by ( year ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the year that had the most concerts?", "label": 1, "remark": "positive"}
{"sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "translated_sql": "( first name ) , ( country code ) that belongs to ( players ) , ordered by ( ( birth date ) ) , limited to the top ( 1 )", "question": "Find the first name and country code of the oldest player.", "label": 1, "remark": "positive"}
{"sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( language ) that belongs to ( countrylanguage ) , grouped by ( language ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Which language is spoken by the least number of countries?", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) FROM Paragraphs", "translated_sql": "( the number of ( all items ) ) that belongs to ( paragraphs )", "question": "Find the names of paragraphs.", "label": 0, "remark": "value col"}
{"sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "translated_sql": "( document id ) , ( template id ) , ( document description ) that belongs to ( documents ) , that have ( ( document name ) equal to ( robbin cv ) )", "question": "What is the document id, template id and description for document named \"Robbin CV\"?", "label": 1, "remark": "positive"}
{"sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( country code ) that belongs to ( players ) , grouped by ( country code ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the code of the country with the least players?", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( departments ) , and ( ( degree programs ) satisfied that ( ( department id of likes ) equal to ( department id of highschooler ) ) ) ) , that have ( ( department name of likes ) equal to ( 'engineer' ) )", "question": "How many degrees does the computer department offer?", "label": 0, "remark": "value str"}
{"sql": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "translated_sql": "( district ) that belongs to ( shop ) , that have ( ( number products ) less than ( 3000 ) ), and intersect with ( ( district ) that belongs to ( shop ) , that have ( ( number products ) greater than ( 10000 ) ))", "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "translated_sql": "( name ) that belongs to ( singer ) , that have ( ( citizenship ) not equal to ( france ) )", "question": "What are the names of the singers who are French citizens?", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) FROM poker_player", "translated_sql": "( the number of ( all items ) ) that belongs to ( poker player )", "question": "List the names of poker players.", "label": 0, "remark": "value col"}
{"sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "translated_sql": "( transcript date ) that belongs to ( transcripts ) , ordered by ( ( transcript date ) in descending order ) , limited to the top ( 1 )", "question": "When was the first transcript released?", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( student id of likes ) equal to ( id of highschooler ) ) ) ) , that have ( ( name of highschooler ) equal to ( kyle ) )", "question": "What are the likes that Kyle have?", "label": 0, "remark": "logic"}
{"sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "translated_sql": "( the number of ( distinct ( governmentform ) ) ) that belongs to ( country ) , that have ( ( continent ) equal to ( africa ) )", "question": "How many different forms of governments are there in Africa?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( car makers ) , and ( ( model list ) satisfied that ( ( id of department ) equal to ( maker of management ) ) ) ) , that have ( ( fullname of department ) equal to ( 'american motor company' ) )", "question": "How many car models were produced by the maker with full name American Motor Company?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( degree program id of department ) , ( degree summary name of department ) that belongs to ( ( degree programs ) , and ( ( student enrolment ) satisfied that ( ( degree program id of department ) equal to ( degree program id of management ) ) ) ) , grouped by ( degree program id of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Find the program which most number of students are enrolled in. List both the id and the summary.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "translated_sql": "( name of likes ) that belongs to ( ( people ) , and ( ( poker player ) satisfied that ( ( people id of likes ) equal to ( people id of highschooler ) ) ) ) , that have ( ( earnings of highschooler ) greater than ( 300000 ) )", "question": "What are the names of poker players whose earnings is higher than 400000?", "label": 0, "remark": "value int"}
{"sql": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District", "translated_sql": "( the number of ( all items ) ) , ( district ) that belongs to ( city ) , that have ( ( population ) greater than ( the average of ( population ) ) that belongs to ( city ) ) , grouped by ( district )", "question": "How many cities in each district have a population that is above the average population across all cities?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "translated_sql": "( model of department ) that belongs to ( ( car names ) , and ( ( cars data ) satisfied that ( ( makeid of department ) equal to ( id of management ) ) ) ) , that have ( ( weight of management ) less than ( the average of ( weight ) ) that belongs to ( cars data ) )", "question": "What is the model for the car with a weight smaller than the average?", "label": 1, "remark": "positive"}
{"sql": "SELECT COUNT(*) FROM ( SELECT T1.CountryId ,  COUNT(*) FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >  2 )", "translated_sql": "( the number of ( all items ) ) that belongs to ( \"l ( countryid of likes ) , ( the number of ( all items ) ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of likes ) equal to ( country of highschooler ) ) ) ) , grouped by ( countryid of likes ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) ) r\" )", "question": "How many countries has more than 3 car makers?", "label": 0, "remark": "value int"}
{"sql": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "translated_sql": "( template type code ) , ( template type description ) that belongs to ( ref template types )", "question": "What are the type codes for all template types?", "label": 0, "remark": "value col"}
{"sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "translated_sql": "( flightno ) that belongs to ( flights ) , that have ( ( sourceairport ) equal to ( apg ) )", "question": "What are flight numbers of flights arriving at Airport \"APG\"?", "label": 0, "remark": "value col"}
{"sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "translated_sql": "( distinct ( semester id of highschooler ) ) that belongs to ( ( degree programs ) , and ( ( student enrolment ) satisfied that ( ( degree program id of likes ) equal to ( degree program id of highschooler ) ) ) ) , that have ( ( degree summary name ) equal to ( 'master' ) ), and intersect with ( ( distinct ( semester id of highschooler ) ) that belongs to ( ( degree programs ) , and ( ( student enrolment ) satisfied that ( ( degree program id of likes ) equal to ( degree program id of highschooler ) ) ) ) , that have ( ( degree summary name ) equal to ( 'bachelor' ) ))", "question": "What is the id of the semester that had neither Masters nor Bachelors students enrolled?", "label": 0, "remark": "logic"}
{"sql": "SELECT DISTINCT country FROM singer WHERE age  >  20", "translated_sql": "( distinct ( country ) ) that belongs to ( singer ) , that have ( ( age ) greater than ( 20 ) )", "question": "What are all distinct countries where singers above age 20 are from?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2", "translated_sql": "( transcript date of management ) , ( transcript id of department ) that belongs to ( ( transcript contents ) , and ( ( transcripts ) satisfied that ( ( transcript id of department ) equal to ( transcript id of management ) ) ) ) , grouped by ( transcript id of department ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )", "question": "Show the date and id of the transcript with at least 2 course results.", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2", "translated_sql": "( name of management ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of department ) equal to ( id of management ) ) ) ) , that have ( ( grade of management ) greater than ( 5 ) ) , grouped by ( student id of department ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )", "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM AIRPORTS", "translated_sql": "( the number of ( all items ) ) that belongs to ( airports )", "question": "List the airports we have?", "label": 0, "remark": "value col"}
{"sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made", "translated_sql": "( name of department ) that belongs to ( ( people ) , and ( ( poker player ) satisfied that ( ( people id of department ) equal to ( people id of management ) ) ) ) , ordered by ( ( final table made of management ) )", "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(Earnings) FROM poker_player", "translated_sql": "( the average of ( earnings ) ) that belongs to ( poker player )", "question": "Return the maximum earnings across all poker players.", "label": 0, "remark": "value col"}
{"sql": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'", "translated_sql": "( name ) that belongs to ( battle ) , that have ( ( ( bulgarian commander ) equal to ( 'kaloyan' ) ) and ( ( latin commander ) equal to ( 'baldwin i' ) ) )", "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "label": 1, "remark": "positive"}
{"sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"", "translated_sql": "( name of head ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of department ) equal to ( id of management ) ) ) , and ( ( highschooler ) satisfied that ( ( friend id of department ) equal to ( id of head ) ) ) ) , that have ( ( name of management ) equal to ( kyle ) )", "question": "Show the names of all of the high schooler Kyle's friends.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(DISTINCT country_code) FROM players", "translated_sql": "( the number of ( distinct ( country code ) ) ) that belongs to ( players )", "question": "How many distinct countries do players come from?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "translated_sql": "( airline of department ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of department ) equal to ( airline of management ) ) ) ) , that have ( ( sourceairport of management ) equal to ( cvo ) ), and except that ( ( airline of department ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of department ) equal to ( airline of management ) ) ) ) , that have ( ( sourceairport of management ) equal to ( apg ) ))", "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.", "label": 1, "remark": "positive"}
{"sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "translated_sql": "( the number of ( language of management ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( name of department ) equal to ( aruba ) )", "question": "How many languages are spoken in Aruba?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( student id of likes ) equal to ( id of highschooler ) ) ) ) , that have ( ( name of highschooler ) equal to ( kyle ) )", "question": "Return the number of likes that the high schooler named James has.", "label": 0, "remark": "value str"}
{"sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "translated_sql": "( distinct ( date arrived of department ) ) , ( date departed of department ) that belongs to ( ( dogs ) , and ( ( treatments ) satisfied that ( ( dog id of department ) equal to ( dog id of management ) ) ) )", "question": "Find the arriving date and the departing date of the dogs that received a treatment.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM singer", "translated_sql": "( the number of ( all items ) ) that belongs to ( singer )", "question": "What is the total number of singers?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T2.country  =  'Haiti' UNION SELECT first_name FROM Students WHERE cell_mobile_number  =  '09700166582'", "translated_sql": "( first name of likes ) that belongs to ( ( students ) , and ( ( addresses ) satisfied that ( ( permanent address id of likes ) equal to ( address id of highschooler ) ) ) ) , that have ( ( country of highschooler ) equal to ( 'haiti' ) ) and ( first name ) that belongs to ( students ) , that have ( ( cell mobile number ) equal to ( '09700166582' ) )", "question": "What are the last names of the students who live in Haiti permanently or have the cell phone number 09700166582?", "label": 0, "remark": "value col"}
{"sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\"", "translated_sql": "( title ) that belongs to ( cartoon ) , that have ( ( ( directed by ) equal to ( ben jones ) ) or ( ( directed by ) equal to ( brandon vietti ) ) )", "question": "List the title of all TV Series directed by \"Ben Jones\" or \"Brandon Vietti\".", "label": 0, "remark": "value col"}
{"sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";", "translated_sql": "( the number of ( all items ) ) that belongs to ( cartoon ) , that have ( ( written by ) equal to ( joseph kuhr ) )", "question": "What is the number of cartoones written by Joseph Kuhr?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( airline of department ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of department ) equal to ( airline of management ) ) ) ) , grouped by ( airline of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What airline serves the most flights?", "label": 1, "remark": "positive"}
{"sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "translated_sql": "( package option ) that belongs to ( tv channel ) , that have ( ( id ) not in ( ( channel ) that belongs to ( cartoon ) , that have ( ( directed by ) equal to ( 'ben jones' ) ) ) )", "question": "What are the package options of all tv channels that are playing some cartoons directed by Ben Jones?", "label": 0, "remark": "logic"}
{"sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "translated_sql": "( id ) that belongs to ( tv channel ) , grouped by ( country ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )", "question": "find id of the tv channels that from the countries where have more than three tv channels.", "label": 0, "remark": "value int"}
{"sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( owner id of department ) , ( last name of department ) that belongs to ( ( owners ) , and ( ( dogs ) satisfied that ( ( owner id of department ) equal to ( owner id of management ) ) ) , and ( ( treatments ) satisfied that ( ( dog id of management ) equal to ( dog id of head ) ) ) ) , grouped by ( owner id of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.", "label": 1, "remark": "positive"}
{"sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "translated_sql": "( template id ) , ( the number of ( all items ) ) that belongs to ( documents ) , grouped by ( template id )", "question": "Show all template ids and number of documents using each template.", "label": 1, "remark": "positive"}
{"sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";", "translated_sql": "( content ) that belongs to ( tv channel ) , that have ( ( series name ) equal to ( sky radio ) )", "question": "What is the content of the series Sky Radio?", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(age) FROM Dogs", "translated_sql": "( the average of ( age ) ) that belongs to ( dogs )", "question": "Compute the average age of all the dogs.", "label": 1, "remark": "positive"}
{"sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "translated_sql": "( abbreviation ) that belongs to ( airlines ) , that have ( ( airline ) equal to ( jetblue airways ) )", "question": "Which abbreviation corresponds to China Airways?", "label": 0, "remark": "value str"}
{"sql": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC", "translated_sql": "( name ) , ( level of membership ) that belongs to ( visitor ) , that have ( ( level of membership ) greater than ( 4 ) ) , ordered by ( ( age ) in descending order )", "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008", "translated_sql": "( the number of ( all items ) ) that belongs to ( museum ) , that have ( ( ( open year ) greater than ( 2013 ) ) or ( ( open year ) less than ( 2008 ) ) )", "question": "How many museums were opened before 2013 and after 2008?", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( country ) , that have ( ( governmentform ) equal to ( republic ) )", "question": "How many countries have governments that are republics?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "translated_sql": "( the number of ( all items ) ) , ( directed by ) that belongs to ( cartoon ) , grouped by ( directed by )", "question": "How many cartoons did each director create?", "label": 1, "remark": "positive"}
{"sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "translated_sql": "( template type code ) that belongs to ( templates ), and except that ( ( template type code ) that belongs to ( ( templates ) , and ( ( documents ) satisfied that ( ( template id of department ) equal to ( template id of management ) ) ) ))", "question": "Show all template type codes that are not used by any document.", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( name of management ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( student id of department ) equal to ( id of management ) ) ) ) , grouped by ( student id of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Give the name of the student with the most likes.", "label": 1, "remark": "positive"}
{"sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "translated_sql": "( document id ) that belongs to ( paragraphs ) , that have ( ( paragraph text ) equal to ( 'brazil' ) ), and intersect with ( ( document id ) that belongs to ( paragraphs ) , that have ( ( paragraph text ) equal to ( 'ireland' ) ))", "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( area code of likes ) that belongs to ( ( area code state ) , and ( ( votes ) satisfied that ( ( state of likes ) equal to ( state of highschooler ) ) ) ) , grouped by ( area code of likes ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the area name in which the most voters voted?", "label": 0, "remark": "value col"}
{"sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "translated_sql": "( course name of likes ) , ( course id of likes ) that belongs to ( ( courses ) , and ( ( sections ) satisfied that ( ( course id of likes ) equal to ( course id of highschooler ) ) ) ) , grouped by ( course id of likes ) , that have ( ( the number of ( all items ) ) less than or equal to ( 2 ) )", "question": "What are the names and ids of every course with less than three sections?", "label": 0, "remark": "value int"}
{"sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4", "translated_sql": "( grade ) that belongs to ( highschooler ) , grouped by ( grade ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 4 ) )", "question": "Show me all grades that have at least 4 students.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code", "translated_sql": "( the number of ( all items ) ) , ( country code ) that belongs to ( players ) , grouped by ( country code )", "question": "How many players are from each country in average?", "label": 0, "remark": "logic"}
{"sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( owner id of department ) , ( last name of department ) that belongs to ( ( owners ) , and ( ( dogs ) satisfied that ( ( owner id of department ) equal to ( owner id of management ) ) ) , and ( ( treatments ) satisfied that ( ( dog id of management ) equal to ( dog id of head ) ) ) ) , grouped by ( owner id of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM visitor WHERE age  <  30", "translated_sql": "( the number of ( all items ) ) that belongs to ( visitor ) , that have ( ( age ) less than ( 30 ) )", "question": "How many visitors below age 30 are there?", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "translated_sql": "( distinct ( name of management ) ) that belongs to ( ( country ) , and ( ( city ) satisfied that ( ( countrycode of management ) equal to ( code of department ) ) ) ) , that have ( ( ( continent of department ) equal to ( 'europe' ) ) and ( ( t1.name ) not in ( ( name of head ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of head ) equal to ( countrycode of trip ) ) ) ) , that have ( ( ( isofficial of trip ) equal to ( 't' ) ) and ( ( language of trip ) equal to ( 'english' ) ) ) ) ) )", "question": "What are the names of cities in Europe for which English is not the official language?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "translated_sql": "( fullname of department ) , ( id of department ) that belongs to ( ( car makers ) , and ( ( model list ) satisfied that ( ( id of department ) equal to ( maker of management ) ) ) ) , grouped by ( id of department ) , that have ( ( the number of ( all items ) ) greater than ( 3 ) )", "question": "Which makers designed more than 3 car models? List full name and the id.", "label": 1, "remark": "positive"}
{"sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "translated_sql": "( the number of ( distinct ( continent ) ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( language of management ) equal to ( chinese ) )", "question": "What is the number of distinct continents where Chinese is spoken?", "label": 1, "remark": "positive"}
{"sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "translated_sql": "( city ) , ( country ) that belongs to ( airports ) , that have ( ( airportname ) equal to ( alton ) )", "question": "Which city and country is the Alton airport at?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "translated_sql": "( treatment type description of likes ) that belongs to ( ( treatment types ) , and ( ( treatments ) satisfied that ( ( treatment type code of likes ) equal to ( treatment type code of highschooler ) ) ) ) , grouped by ( treatment type code of likes ) , ordered by ( ( the sum of ( cost of treatment ) ) in ascending order ) , limited to the top ( 1 )", "question": "Give me the description of the treatment type whose total cost is the highest.", "label": 0, "remark": "logic"}
{"sql": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "translated_sql": "( code ) that belongs to ( country ) , that have ( ( governmentform ) not equal to ( republic ) ), and except that ( ( countrycode ) that belongs to ( countrylanguage ) , that have ( ( language ) equal to ( english ) ))", "question": "Return the codes of countries that do not speak Spanish and do not have Republics for governments.", "label": 0, "remark": "value str"}
{"sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2", "translated_sql": "( hometown ) that belongs to ( teacher ) , grouped by ( hometown ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )", "question": "What are the towns from which at least two teachers come from?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'", "translated_sql": "( the number of ( all items ) ) that belongs to ( ship ) , that have ( ( disposition of ship ) equal to ( 'captured' ) )", "question": "What are the ships ended up being 'Captured'?", "label": 0, "remark": "value col"}
{"sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "translated_sql": "( template type code ) that belongs to ( templates ) , grouped by ( template type code ) , that have ( ( the number of ( all items ) ) less than ( 3 ) )", "question": "What are the codes of template types that have fewer than 3 templates?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM Highschooler", "translated_sql": "( the number of ( all items ) ) that belongs to ( highschooler )", "question": "How many high schoolers are there?", "label": 1, "remark": "positive"}
{"sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "translated_sql": "( country ) that belongs to ( tv channel ), and except that ( ( country of department ) that belongs to ( ( tv channel ) , and ( ( cartoon ) satisfied that ( ( id of department ) equal to ( channel of management ) ) ) ) , that have ( ( written by of management ) equal to ( 'todd casey' ) ))", "question": "What are the countries that are not playing cartoons written by Todd Casey?", "label": 1, "remark": "positive"}
{"sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1", "translated_sql": "( document id ) that belongs to ( paragraphs ) , grouped by ( document id ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( 1 )", "question": "Return the id of the document with the fewest paragraphs.", "label": 1, "remark": "positive"}
{"sql": "SELECT sum(Population) ,  avg(SurfaceArea) FROM country WHERE Continent  =  \"North America\" AND SurfaceArea  >  3000", "translated_sql": "( the sum of ( population ) ) , ( the average of ( surfacearea ) ) that belongs to ( country ) , that have ( ( ( continent ) equal to ( north america ) ) and ( ( surfacearea ) greater than ( 3000 ) ) )", "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 1000\uff1f", "label": 0, "remark": "value int"}
{"sql": "SELECT Age ,  Hometown FROM teacher", "translated_sql": "( age ) , ( hometown ) that belongs to ( teacher )", "question": "What are the age and hometown of teachers?", "label": 1, "remark": "positive"}
{"sql": "SELECT Episode FROM TV_series ORDER BY rating", "translated_sql": "( episode ) that belongs to ( tv series ) , ordered by ( ( rating ) )", "question": "What are all of the episodes ordered by ratings?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1", "translated_sql": "( name of likes ) that belongs to ( ( conductor ) , and ( ( orchestra ) satisfied that ( ( conductor id of likes ) equal to ( conductor id of highschooler ) ) ) ) , grouped by ( conductor id of highschooler ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )", "question": "What are the names of conductors who have conducted at less than one orchestra?", "label": 0, "remark": "logic"}
{"sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "translated_sql": "( template type code ) that belongs to ( ref template types ) , that have ( ( template type description ) equal to ( book ) )", "question": "What is the template type code for template type description \"Book\".", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "translated_sql": "( distinct ( countrycode ) ) that belongs to ( countrylanguage ) , that have ( ( language ) not equal to ( english ) )", "question": "What are the country codes of countries where people use languages other than Chinese?", "label": 0, "remark": "value str"}
{"sql": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "translated_sql": "( last name of department ) that belongs to ( ( owners ) , and ( ( dogs ) satisfied that ( ( owner id of department ) equal to ( owner id of management ) ) ) ) , that have ( ( age of management ) equal to ( the maximum of ( age ) ) that belongs to ( dogs ) )", "question": "Who owns the youngest dog? Give me his or her last name.", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "translated_sql": "( the average of ( mpg ) ) that belongs to ( cars data ) , that have ( ( cylinders ) equal to ( 4 ) )", "question": "What is the average miles per gallon of all the cards with 5 cylinders?", "label": 0, "remark": "value int"}
{"sql": "SELECT Name FROM teacher ORDER BY Age ASC", "translated_sql": "( name ) that belongs to ( teacher ) , ordered by ( ( age ) in ascending order )", "question": "What are the names of the teachers ordered by descending age?", "label": 0, "remark": "logic"}
{"sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "translated_sql": "( the number of ( distinct ( language of management ) ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( ( indepyear ) less than ( 1930 ) ) and ( ( isofficial of management ) equal to ( t ) ) )", "question": "For the countries founded before 1930, what is the total number of distinct official languages?", "label": 1, "remark": "positive"}
{"sql": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'", "translated_sql": "( name ) , ( result ) that belongs to ( battle ) , that have ( ( bulgarian commander ) not equal to ( 'boril' ) )", "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( airportcode of department ) that belongs to ( ( airports ) , and ( ( flights ) satisfied that ( ( ( airportcode of department ) equal to ( destairport of management ) ) or ( ( airportcode of department ) equal to ( sourceairport of management ) ) ) ) ) , grouped by ( airportcode of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the airport code of the airport with the most flights?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "translated_sql": "( series name of likes ) , ( country of likes ) that belongs to ( ( tv channel ) , and ( ( cartoon ) satisfied that ( ( id of likes ) equal to ( channel of highschooler ) ) ) ) , that have ( ( directed by of highschooler ) equal to ( 'michael chang' ) ), and intersect with ( ( series name of likes ) , ( country of likes ) that belongs to ( ( tv channel ) , and ( ( cartoon ) satisfied that ( ( id of likes ) equal to ( channel of highschooler ) ) ) ) , that have ( ( directed by of highschooler ) equal to ( 'ben jones' ) ))", "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones or cartoons directed by Michael Chang?", "label": 0, "remark": "logic"}
{"sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "translated_sql": "( distinct ( first name of likes ) ) , ( last name of likes ) that belongs to ( ( professionals ) join ( ( treatments ) ) ) , that have ( ( cost of treatment ) less than ( the average of ( cost of treatment ) ) that belongs to ( treatments ) )", "question": "What are the first name and last name of the professionals who have done treatment with cost above average?", "label": 0, "remark": "logic"}
{"sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "translated_sql": "( language of highschooler ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of likes ) equal to ( countrycode of highschooler ) ) ) ) , that have ( ( governmentform of likes ) equal to ( republic ) ) , grouped by ( language of highschooler ) , that have ( ( the number of ( all items ) ) equal to ( 1 ) )", "question": "Which languages are spoken by at least one country in republic governments?", "label": 0, "remark": "logic"}
{"sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "translated_sql": "( name ) that belongs to ( country ) , ordered by ( ( population ) in ascending order ) , limited to the top ( 3 )", "question": "What are the names of the nations with the 3 lowest populations?", "label": 1, "remark": "positive"}
{"sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";", "translated_sql": "( title ) that belongs to ( cartoon ) , that have ( ( directed by ) equal to ( ben jones ) )", "question": "List all cartoon directed by \"Ben Jones\".", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3", "translated_sql": "( name of highschooler ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of likes ) equal to ( id of highschooler ) ) ) ) , grouped by ( student id of likes ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 3 ) )", "question": "What are the names of high schoolers who have 3 or fewer friends?", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( destairport of department ) equal to ( airportcode of management ) ) ) , and ( ( airports ) satisfied that ( ( sourceairport of department ) equal to ( airportcode of head ) ) ) ) , that have ( ( ( city of management ) equal to ( ashley ) ) and ( ( city of head ) equal to ( aberdeen ) ) )", "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?", "label": 1, "remark": "positive"}
{"sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)", "translated_sql": "( name ) that belongs to ( employee ) , that have ( ( employee_id ) not in ( ( employee id ) that belongs to ( evaluation ) ) )", "question": "What are the names of the employees who never received any evaluation?", "label": 1, "remark": "positive"}
{"sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "translated_sql": "( hometown ) that belongs to ( teacher ) , grouped by ( hometown ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the most commmon hometowns for teachers?", "label": 1, "remark": "positive"}
{"sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "translated_sql": "( first name ) , ( last name ) that belongs to ( players ) , that have ( ( hand ) equal to ( 'l' ) ) , ordered by ( ( birth date ) )", "question": "List the first and last name of all players who are left / L hand in the order of birth date.", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(age) FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid)", "translated_sql": "( the average of ( age ) ) that belongs to ( student ) , that have ( ( stuid ) not in ( ( stuid of department ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of department ) equal to ( stuid of management ) ) ) ) ) )", "question": "Find the average age of students who do not have any pet.", "label": 1, "remark": "positive"}
{"sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;", "translated_sql": "( countryname ) that belongs to ( countries ), and except that ( ( countryname of department ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of department ) equal to ( country of management ) ) ) ))", "question": "What are the names of the countries with no car makers?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) ,  city FROM employee GROUP BY city", "translated_sql": "( the number of ( all items ) ) , ( city ) that belongs to ( employee ) , grouped by ( city )", "question": "What is the number of employees from each city?", "label": 1, "remark": "positive"}
{"sql": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id", "translated_sql": "( professional id ) , ( role code ) , ( email address ) that belongs to ( professionals ), and except that ( ( professional id of department ) , ( role code of department ) , ( email address of department ) that belongs to ( ( professionals ) , and ( ( treatments ) satisfied that ( ( professional id of department ) equal to ( professional id of management ) ) ) ))", "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "translated_sql": "( the average of ( grade ) ) that belongs to ( highschooler ) , that have ( ( id ) in ( ( student id of department ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of department ) equal to ( id of management ) ) ) ) ) )", "question": "What is the average grade of students who have friends?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "translated_sql": "( title of highschooler ) that belongs to ( ( tv channel ) , and ( ( cartoon ) satisfied that ( ( id of likes ) equal to ( channel of highschooler ) ) ) ) , that have ( ( series name of likes ) equal to ( sky radio ) )", "question": "List the title of all  TV Series showed on TV Channel with series name \"Sky Radio\".", "label": 0, "remark": "value col"}
{"sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "translated_sql": "( first name ) , ( middle name ) , ( last name ) that belongs to ( students ) , ordered by ( ( date left ) in ascending order ) , limited to the top ( 1 )", "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "translated_sql": "( distinct ( course name of department ) ) that belongs to ( ( courses ) , and ( ( student enrolment courses ) satisfied that ( ( course id of department ) equal to ( course id of management ) ) ) )", "question": "What are the names of all courses that have some students enrolled?", "label": 1, "remark": "positive"}
{"sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "translated_sql": "( the minimum of ( number products ) ) , ( the maximum of ( number products ) ) that belongs to ( shop )", "question": "find the minimum and maximum number of products of all stores.", "label": 1, "remark": "positive"}
{"sql": "SELECT max(killed) ,  min(killed) FROM death", "translated_sql": "( the maximum of ( killed ) ) , ( the minimum of ( killed ) ) that belongs to ( death )", "question": "What is maximum and minimum death toll caused each time?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2", "translated_sql": "( contestant number of department ) , ( contestant name of department ) that belongs to ( ( contestants ) , and ( ( votes ) satisfied that ( ( contestant number of department ) equal to ( contestant number of management ) ) ) ) , grouped by ( contestant number of department ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )", "question": "What are the contestant numbers and names of the contestants who had at least two votes?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "translated_sql": "( first name of likes ) , ( last name of likes ) , ( size code of highschooler ) that belongs to ( ( owners ) , and ( ( dogs ) satisfied that ( ( owner id of likes ) equal to ( owner id of highschooler ) ) ) )", "question": "What are each owner's first name, last name, and the number of their dog?", "label": 0, "remark": "value col"}
{"sql": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "translated_sql": "( district ) that belongs to ( shop ) , that have ( ( number products ) less than ( 3000 ) ), and intersect with ( ( district ) that belongs to ( shop ) , that have ( ( number products ) greater than ( 10000 ) ))", "question": "SELECT district FROM shop WHERE Number_products  <  2000 INTERSECT SELECT district FROM shop WHERE Number_products  >  11000", "label": 0, "remark": "value int"}
{"sql": "SELECT name FROM Highschooler WHERE grade  =  10", "translated_sql": "( name ) that belongs to ( highschooler ) , that have ( ( grade ) equal to ( 10 ) )", "question": "Show the names of all high schoolers in grade 9.", "label": 0, "remark": "value int"}
{"sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "translated_sql": "( distinct ( fname of department ) ) , ( age of department ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of department ) equal to ( stuid of management ) ) ) )", "question": "Find the first name and age of students who have a pet.", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;", "translated_sql": "( makeid of management ) , ( make of management ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of department ) equal to ( makeid of management ) ) ) ) , that have ( ( ( horsepower of department ) greater than ( the minimum of ( horsepower ) ) that belongs to ( cars data ) ) and ( ( cylinders of department ) less than or equal to ( 3 ) ) )", "question": "Among the cars that do not have the minimum horsepower, what are the make ids and names of al those with less than 4 cylinders?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "translated_sql": "( template type code of department ) that belongs to ( ( templates ) , and ( ( documents ) satisfied that ( ( template id of department ) equal to ( template id of management ) ) ) ) , that have ( ( document name of management ) equal to ( data base ) )", "question": "Return the template type code of the template that is used by a document named Data base.", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "translated_sql": "( name ) that belongs to ( country ) , that have ( ( continent ) equal to ( asia ) ) , ordered by ( ( lifeexpectancy ) ) , limited to the top ( 1 )", "question": "Give the name of the country in Asia with the lowest life expectancy.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id", "translated_sql": "( fullname of likes ) , ( id of likes ) , ( the number of ( all items ) ) that belongs to ( ( car makers ) , and ( ( model list ) satisfied that ( ( id of likes ) equal to ( maker of highschooler ) ) ) ) , grouped by ( id of likes )", "question": "What is the full name of each car maker, and how many models it produces?", "label": 0, "remark": "value col"}
{"sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "translated_sql": "( distinct ( first name of department ) ) , ( last name of department ) that belongs to ( ( professionals ) join ( ( treatments ) ) ) , that have ( ( cost of treatment ) less than ( the average of ( cost of treatment ) ) that belongs to ( treatments ) )", "question": "What are the first name and last name of the professionals who have done treatment with cost below average?", "label": 1, "remark": "positive"}
{"sql": "SELECT name ,  grade FROM Highschooler", "translated_sql": "( name ) , ( grade ) that belongs to ( highschooler )", "question": "What are the names and grades for each high schooler?", "label": 1, "remark": "positive"}
{"sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "translated_sql": "( record company ) that belongs to ( orchestra ) , that have ( ( year of founded ) less than ( 2003 ) ), and intersect with ( ( record company ) that belongs to ( orchestra ) , that have ( ( year of founded ) greater than ( 2003 ) ))", "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.", "label": 1, "remark": "positive"}
{"sql": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;", "translated_sql": "( the number of ( all items ) ) , ( fullname of management ) , ( id of management ) that belongs to ( ( model list ) , and ( ( car makers ) satisfied that ( ( maker of department ) equal to ( id of management ) ) ) ) , grouped by ( id of management )", "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?", "label": 1, "remark": "positive"}
{"sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( year ) that belongs to ( concert ) , grouped by ( year ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Which year has least number of concerts?", "label": 0, "remark": "logic"}
{"sql": "SELECT Name FROM teacher WHERE Hometown != \"Little Lever Urban Distric\"", "translated_sql": "( name ) that belongs to ( teacher ) , that have ( ( hometown ) not equal to ( little lever urban distric ) )", "question": "List the name of teachers whose hometown is not \"Little Lever Urban District\".", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( airline of management ) equal to ( uid of department ) ) ) ) , that have ( ( ( airline of department ) equal to ( united airlines ) ) and ( ( sourceairport of management ) equal to ( ahd ) ) )", "question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "label": 1, "remark": "positive"}
{"sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "translated_sql": "( document id ) , ( the number of ( all items ) ) that belongs to ( paragraphs ) , grouped by ( document id ) , ordered by ( ( document id ) )", "question": "Show all document ids and the number of paragraphs in each document. Order by document id.", "label": 1, "remark": "positive"}
{"sql": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "translated_sql": "( the sum of ( population ) ) , ( the maximum of ( gnp ) ) that belongs to ( country ) , that have ( ( continent ) equal to ( asia ) )", "question": "What is the total population and maximum GNP in Asia?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "translated_sql": "( airline of department ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of department ) equal to ( airline of management ) ) ) ) , that have ( ( destairport of management ) equal to ( ahd ) )", "question": "What are airlines that have flights arriving at airport 'AHD'?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "translated_sql": "( continent of department ) , ( the number of ( all items ) ) that belongs to ( ( continents ) , and ( ( countries ) satisfied that ( ( contid of department ) equal to ( continent of management ) ) ) , and ( ( car makers ) satisfied that ( ( countryid of management ) equal to ( country of head ) ) ) ) , grouped by ( continent of department )", "question": "What is the name of each continent and how many car makers are there in each one?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "translated_sql": "( countryname of department ) that belongs to ( ( countries ) , and ( ( continents ) satisfied that ( ( continent of department ) equal to ( contid of management ) ) ) , and ( ( car makers ) satisfied that ( ( countryid of department ) equal to ( country of head ) ) ) ) , that have ( ( continent of management ) equal to ( 'europe' ) ) , grouped by ( countryname of department ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 3 ) )", "question": "What are the names of all European countries with at least 3 manufacturers?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "translated_sql": "( name of management ) , ( the number of ( all items ) ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of department ) equal to ( id of management ) ) ) ) , grouped by ( student id of department )", "question": "What are the names of the high schoolers and how many friends does each have?", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(capacity) ,  max(capacity) FROM stadium", "translated_sql": "( the average of ( capacity ) ) , ( the maximum of ( capacity ) ) that belongs to ( stadium )", "question": "What is the average and maximum capacities for all stations?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;", "translated_sql": "( contid of department ) , ( continent of department ) , ( the number of ( all items ) ) that belongs to ( ( continents ) , and ( ( countries ) satisfied that ( ( contid of department ) equal to ( continent of management ) ) ) ) , grouped by ( contid of department )", "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.", "label": 1, "remark": "positive"}
{"sql": "SELECT * FROM hiring", "translated_sql": "all items that belongs to ( hiring )", "question": "What is all the information about hiring?", "label": 1, "remark": "positive"}
{"sql": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "translated_sql": "( the minimum of ( version number ) ) , ( template type code ) that belongs to ( templates )", "question": "What the largest version number and its template type code?", "label": 0, "remark": "logic"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( airline of likes ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of likes ) equal to ( airline of highschooler ) ) ) ) , grouped by ( airline of likes ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What airline serves the least flights?", "label": 0, "remark": "logic"}
{"sql": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "translated_sql": "( first name of likes ) , ( last name of likes ) , ( size code of highschooler ) that belongs to ( ( owners ) , and ( ( dogs ) satisfied that ( ( owner id of likes ) equal to ( owner id of highschooler ) ) ) )", "question": "List each owner's first name, and the size of his for her dog.", "label": 0, "remark": "value col"}
{"sql": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T2.country  =  'Haiti' UNION SELECT first_name FROM Students WHERE cell_mobile_number  =  '09700166582'", "translated_sql": "( first name of department ) that belongs to ( ( students ) , and ( ( addresses ) satisfied that ( ( permanent address id of department ) equal to ( address id of management ) ) ) ) , that have ( ( country of management ) equal to ( 'haiti' ) ) and ( first name ) that belongs to ( students ) , that have ( ( cell mobile number ) equal to ( '09700166582' ) )", "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582?", "label": 1, "remark": "positive"}
{"sql": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000", "translated_sql": "( name ) that belongs to ( city ) , that have ( ( population ) between ( 160000 ) and ( 900000 ) )", "question": "What are the cities whose population is between 160000 and 900000?", "label": 1, "remark": "positive"}
{"sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "translated_sql": "( money rank ) that belongs to ( poker player ) , ordered by ( ( earnings ) in descending order ) , limited to the top ( 1 )", "question": "What is the money rank of the poker player with the highest earnings?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(DISTINCT template_id) FROM Documents", "translated_sql": "( the number of ( distinct ( template id ) ) ) that belongs to ( documents )", "question": "Count the number of different templates used for documents.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( template id of department ) , ( template type code of management ) that belongs to ( ( documents ) , and ( ( templates ) satisfied that ( ( template id of department ) equal to ( template id of management ) ) ) ) , grouped by ( template id of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Return the id and type code of the template that is used for the greatest number of documents.", "label": 1, "remark": "positive"}
{"sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")", "translated_sql": "( the sum of ( population ) ) that belongs to ( country ) , that have ( ( name ) not in ( ( name of likes ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of likes ) equal to ( countrycode of highschooler ) ) ) ) , that have ( ( language of highschooler ) equal to ( english ) ) ) )", "question": "What is the total number of people living in the nations that do not use Japanese?", "label": 0, "remark": "value int"}
{"sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "translated_sql": "( hometown ) that belongs to ( teacher ) , ordered by ( ( age ) in ascending order ) , limited to the top ( 1 )", "question": "Where is the youngest teacher from?", "label": 1, "remark": "positive"}
{"sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name", "translated_sql": "( name of head ) , ( course of management ) that belongs to ( ( course arrange ) , and ( ( course ) satisfied that ( ( course id of department ) equal to ( course id of management ) ) ) , and ( ( teacher ) satisfied that ( ( teacher id of department ) equal to ( teacher id of head ) ) ) ) , ordered by ( ( name of head ) )", "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.", "label": 1, "remark": "positive"}
{"sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "translated_sql": "( id ) that belongs to ( tv channel ) , grouped by ( country ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )", "question": "find id of the tv channels that from the countries where have more than two tv channels.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( student id of department ) equal to ( id of management ) ) ) ) , that have ( ( name of management ) equal to ( kyle ) )", "question": "Return the number of likes that the high schooler named Kyle has.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "translated_sql": "( professional id of department ) , ( role code of department ) , ( first name of department ) that belongs to ( ( professionals ) , and ( ( treatments ) satisfied that ( ( professional id of department ) equal to ( professional id of management ) ) ) ) , grouped by ( professional id of department ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )", "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "translated_sql": "( name ) that belongs to ( singer ) , that have ( ( ( birth year ) equal to ( 1948 ) ) or ( ( birth year ) equal to ( 1949 ) ) )", "question": "Show the name of singers whose birth year is either 1948 or 1949?", "label": 1, "remark": "positive"}
{"sql": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "translated_sql": "( the minimum of ( version number ) ) , ( template type code ) that belongs to ( templates )", "question": "Return the lowest version number, along with its corresponding template type code.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( documents ) , and ( ( templates ) satisfied that ( ( template id of department ) equal to ( template id of management ) ) ) ) , that have ( ( template type code of management ) equal to ( 'ppt' ) )", "question": "Count the number of documents that use the PPT template type.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM Documents", "translated_sql": "( the number of ( all items ) ) that belongs to ( documents )", "question": "How many documents do we have?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "translated_sql": "( the number of ( distinct ( governmentform ) ) ) that belongs to ( country ) , that have ( ( continent ) equal to ( africa ) )", "question": "How many type of governments are in Africa?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM Highschooler", "translated_sql": "( the number of ( all items ) ) that belongs to ( highschooler )", "question": "Count the number of high schoolers.", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "translated_sql": "( distinct ( countrycode ) ) that belongs to ( countrylanguage ) , that have ( ( language ) not equal to ( english ) )", "question": "Give the country codes for countries in which people speak langauges that are not English.", "label": 1, "remark": "positive"}
{"sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "translated_sql": "( airportname ) that belongs to ( airports ) , that have ( ( airportcode ) not in ( ( sourceairport ) that belongs to ( flights ) and ( destairport ) that belongs to ( flights ) ) )", "question": "Which airports do not have departing or arriving flights?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "translated_sql": "( airline of department ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of department ) equal to ( airline of management ) ) ) ) , grouped by ( airline of department ) , that have ( ( the number of ( all items ) ) less than ( 200 ) )", "question": "Which airlines have less than 200 flights?", "label": 1, "remark": "positive"}
{"sql": "SELECT Other_Details FROM Paragraphs WHERE paragraph_text  =  'Korea'", "translated_sql": "( other details ) that belongs to ( paragraphs ) , that have ( ( paragraph text ) equal to ( 'korea' ) )", "question": "Show paragraph details for paragraph with text 'Korea'.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( paragraphs ) , and ( ( documents ) satisfied that ( ( document id of department ) equal to ( document id of management ) ) ) ) , that have ( ( document name of management ) equal to ( 'summer show' ) )", "question": "Count the number of paragraphs in the document named 'Summer Show'.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM players", "translated_sql": "( the number of ( all items ) ) that belongs to ( players )", "question": "How many players are there?", "label": 1, "remark": "positive"}
{"sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "translated_sql": "( name ) , ( country ) that belongs to ( singer ) , that have ( ( song_name ) like ( '%hey%' ) )", "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "label": 1, "remark": "positive"}
{"sql": "SELECT max(charge_amount) FROM Charges", "translated_sql": "( the maximum of ( charge amount ) ) that belongs to ( charges )", "question": "How much does the least expensive charge type costs?", "label": 0, "remark": "logic"}
{"sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "translated_sql": "( airportname ) that belongs to ( airports ) , that have ( ( airportcode ) not in ( ( sourceairport ) that belongs to ( flights ) and ( destairport ) that belongs to ( flights ) ) )", "question": "Which airports do have departing or arriving flights?", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) FROM Paragraphs", "translated_sql": "( the number of ( all items ) ) that belongs to ( paragraphs )", "question": "Count the number of paragraphs.", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype", "translated_sql": "( the average of ( pet age ) ) , ( the maximum of ( pet age ) ) , ( pettype ) that belongs to ( pets ) , grouped by ( pettype )", "question": "Find the average and minimum age for each type of pet.", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";", "translated_sql": "( the number of ( all items ) ) that belongs to ( cartoon ) , that have ( ( written by ) equal to ( joseph kuhr ) )", "question": "How many cartoons were written by \"Joseph Kuhr\"?", "label": 1, "remark": "positive"}
{"sql": "SELECT Maker ,  Model FROM MODEL_LIST;", "translated_sql": "( maker ) , ( model ) that belongs to ( model list )", "question": "What are all the makers and models?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( student id of likes ) , ( first name of likes ) , ( middle name of likes ) , ( last name of likes ) , ( the number of ( all items ) ) , ( student id of likes ) that belongs to ( ( students ) , and ( ( student enrolment ) satisfied that ( ( student id of likes ) equal to ( student id of highschooler ) ) ) ) , grouped by ( student id of likes ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Which student has enrolled for the least times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.", "label": 0, "remark": "logic"}
{"sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;", "translated_sql": "( fullname of department ) , ( id of department ) , ( the number of ( all items ) ) that belongs to ( ( car makers ) , and ( ( model list ) satisfied that ( ( id of department ) equal to ( maker of management ) ) ) ) , grouped by ( id of department )", "question": "How many models does each car maker produce? List maker full name, id and the number.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "translated_sql": "( date of treatment of department ) , ( first name of management ) that belongs to ( ( treatments ) , and ( ( professionals ) satisfied that ( ( professional id of department ) equal to ( professional id of management ) ) ) )", "question": "List the date of each treatment, together with the first name of the professional who operated it.", "label": 1, "remark": "positive"}
{"sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "translated_sql": "( flightno ) that belongs to ( flights ) , that have ( ( sourceairport ) equal to ( apg ) )", "question": "What are flight numbers of flights departing from Airport \"APG\"?", "label": 1, "remark": "positive"}
{"sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "translated_sql": "( zip postcode ) that belongs to ( addresses ) , that have ( ( city ) equal to ( 'port chelsea' ) )", "question": "What is the zip code of the address in the city Port Chelsea?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( model list ) , and ( ( car makers ) satisfied that ( ( maker of department ) equal to ( id of management ) ) ) , and ( ( countries ) satisfied that ( ( country of management ) equal to ( countryid of head ) ) ) ) , that have ( ( countryname of head ) equal to ( 'usa' ) )", "question": "How many car models are produced in the usa?", "label": 1, "remark": "positive"}
{"sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "translated_sql": "( package option ) that belongs to ( tv channel ) , that have ( ( series name ) equal to ( sky radio ) )", "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "label": 1, "remark": "positive"}
{"sql": "SELECT charge_type ,  charge_amount FROM Charges", "translated_sql": "( charge type ) , ( charge amount ) that belongs to ( charges )", "question": "How much does each charge type costs? List charge type.", "label": 0, "remark": "value col"}
{"sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( document id of likes ) , ( document name of highschooler ) that belongs to ( ( paragraphs ) , and ( ( documents ) satisfied that ( ( document id of likes ) equal to ( document id of highschooler ) ) ) ) , grouped by ( document id of likes ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the document id with smallest number of paragraphs?", "label": 0, "remark": "value col"}
{"sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "translated_sql": "( the number of ( all items ) ) that belongs to ( matches ) , that have ( ( ( year ) equal to ( 2013 ) ) or ( ( year ) equal to ( 2016 ) ) )", "question": "List the number of all matches who played in years of 2013 or 2016.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10", "translated_sql": "( airline of likes ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of likes ) equal to ( airline of highschooler ) ) ) ) , grouped by ( airline of likes ) , that have ( ( the number of ( all items ) ) greater than ( 10 ) )", "question": "Find all airlines that have at most 10 flights.", "label": 0, "remark": "logic"}
{"sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "translated_sql": "( other student details ) that belongs to ( students ) , ordered by ( ( other student details ) in descending order )", "question": "List all the student details in reversed lexicographical order.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "translated_sql": "( airline of likes ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of likes ) equal to ( airline of highschooler ) ) ) ) , that have ( ( destairport of highschooler ) equal to ( ahd ) )", "question": "Which airlines have a flight with departure airport AHD?", "label": 0, "remark": "value col"}
{"sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";", "translated_sql": "( content ) that belongs to ( tv channel ) , that have ( ( series name ) equal to ( sky radio ) )", "question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "label": 1, "remark": "positive"}
{"sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "translated_sql": "( airline ) that belongs to ( airlines ) , that have ( ( abbreviation ) equal to ( ual ) )", "question": "Which airline has abbreviation 'UAL'?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of department ) equal to ( stuid of management ) ) ) , and ( ( pets ) satisfied that ( ( petid of management ) equal to ( petid of head ) ) ) ) , that have ( ( ( sex of department ) equal to ( 'f' ) ) and ( ( pettype of head ) equal to ( 'dog' ) ) )", "question": "How many dog pets are raised by female students?", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "translated_sql": "( distinct ( template type description of likes ) ) that belongs to ( ( ref template types ) , and ( ( templates ) satisfied that ( ( template type code of likes ) equal to ( template type code of highschooler ) ) ) , and ( ( documents ) satisfied that ( ( template id of highschooler ) equal to ( template id of area code state ) ) ) )", "question": "What are the template type descriptions for the templates ever used by any document?", "label": 0, "remark": "logic"}
{"sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "translated_sql": "( petid ) , ( weight ) that belongs to ( pets ) , that have ( ( pet age ) greater than ( 1 ) )", "question": "What is the id and weight of every pet who is older than 1?", "label": 1, "remark": "positive"}
{"sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "translated_sql": "( template type code ) that belongs to ( templates ), and except that ( ( template type code ) that belongs to ( ( templates ) , and ( ( documents ) satisfied that ( ( template id of department ) equal to ( template id of management ) ) ) ))", "question": "What are the codes of template types that are not used for any document?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "translated_sql": "( name of department ) , ( date of treatment of management ) that belongs to ( ( dogs ) , and ( ( treatments ) satisfied that ( ( dog id of department ) equal to ( dog id of management ) ) ) ) , that have ( ( breed code of department ) equal to ( breed code ) that belongs to ( dogs ) , grouped by ( breed code ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( 1 ) )", "question": "List the names of the dogs of the rarest breed and the treatment dates of them.", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "translated_sql": "( name ) that belongs to ( singer ) , that have ( ( singer_id ) not in ( ( singer id ) that belongs to ( song ) ) )", "question": "List the name of singers that have two songs.", "label": 0, "remark": "value int"}
{"sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "translated_sql": "( distinct ( date arrived of department ) ) , ( date departed of department ) that belongs to ( ( dogs ) , and ( ( treatments ) satisfied that ( ( dog id of department ) equal to ( dog id of management ) ) ) )", "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "label": 1, "remark": "positive"}
{"sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id", "translated_sql": "( student id ) , ( the number of ( all items ) ) that belongs to ( friend ) , grouped by ( student id )", "question": "Show the student IDs and numbers of friends corresponding to each.", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")", "translated_sql": "( name ) that belongs to ( country ) , that have ( ( ( continent ) equal to ( asia ) ) and ( ( population ) greater than ( the minimum of ( population ) ) that belongs to ( country ) , that have ( ( continent ) equal to ( africa ) ) ) )", "question": "What are the Asian countries which have a population larger than that of any country in Africa?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1", "translated_sql": "( contestant number of department ) , ( contestant name of department ) that belongs to ( ( contestants ) , and ( ( votes ) satisfied that ( ( contestant number of department ) equal to ( contestant number of management ) ) ) ) , grouped by ( contestant number of department ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( 1 )", "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1", "translated_sql": "( model of likes ) that belongs to ( ( car names ) , and ( ( cars data ) satisfied that ( ( makeid of likes ) equal to ( id of highschooler ) ) ) ) , ordered by ( ( mpg of highschooler ) in descending order ) , limited to the top ( 1 )", "question": "What is the car wmodel with the lowest mpg?", "label": 0, "remark": "logic"}
{"sql": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( id of management ) , ( name of management ) that belongs to ( ( death ) , and ( ( ship ) satisfied that ( ( caused by ship id of department ) equal to ( id of management ) ) ) ) , grouped by ( id of management ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the ship id and name that caused most total injuries?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( breed name of department ) that belongs to ( ( breeds ) , and ( ( dogs ) satisfied that ( ( breed code of department ) equal to ( breed code of management ) ) ) ) , grouped by ( breed name of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Which breed do the most dogs have? Give me the breed name.", "label": 1, "remark": "positive"}
{"sql": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id", "translated_sql": "( professional id ) , ( role code ) , ( email address ) that belongs to ( professionals ), and except that ( ( professional id of department ) , ( role code of department ) , ( email address of department ) that belongs to ( ( professionals ) , and ( ( treatments ) satisfied that ( ( professional id of department ) equal to ( professional id of management ) ) ) ))", "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.", "label": 1, "remark": "positive"}
{"sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "translated_sql": "( template id ) that belongs to ( templates ) , that have ( ( ( template type code ) equal to ( pp ) ) or ( ( template type code ) equal to ( ppt ) ) )", "question": "Return the ids of templates that do not have the code PP or PPT.", "label": 0, "remark": "logic"}
{"sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "translated_sql": "( abbreviation ) that belongs to ( airlines ) , that have ( ( airline ) equal to ( jetblue airways ) )", "question": "Which abbreviation corresponds to Jetblue Airways?", "label": 1, "remark": "positive"}
{"sql": "SELECT Age ,  Hometown FROM teacher", "translated_sql": "( age ) , ( hometown ) that belongs to ( teacher )", "question": "What is the age and hometown of every teacher?", "label": 1, "remark": "positive"}
{"sql": "SELECT vote_id ,  phone_number ,  state FROM votes", "translated_sql": "( vote id ) , ( phone number ) , ( state ) that belongs to ( votes )", "question": "List the vote ids, phone numbers and states of all votes.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( destairport of department ) equal to ( airportcode of management ) ) ) , and ( ( airlines ) satisfied that ( ( uid of head ) equal to ( airline of department ) ) ) ) , that have ( ( ( city of management ) equal to ( aberdeen ) ) and ( ( airline of head ) equal to ( united airlines ) ) )", "question": "How many United Airlines flights go to City 'Aberdeen'?", "label": 1, "remark": "positive"}
{"sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "translated_sql": "( citizenship ) , ( the maximum of ( net worth millions ) ) that belongs to ( singer ) , grouped by ( citizenship )", "question": "For each citizenship, what is the minimum net worth?", "label": 0, "remark": "logic"}
{"sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "translated_sql": "( name of department ) that belongs to ( ( people ) , and ( ( poker player ) satisfied that ( ( people id of department ) equal to ( people id of management ) ) ) ) , that have ( ( earnings of management ) greater than ( 300000 ) )", "question": "Give the names of poker players who have earnings above 300000.", "label": 1, "remark": "positive"}
{"sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "translated_sql": "( pixel aspect ratio par ) , ( country ) that belongs to ( tv channel ) , that have ( ( language ) not equal to ( 'english' ) )", "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "label": 1, "remark": "positive"}
{"sql": "SELECT line_1 ,  line_2 FROM addresses", "translated_sql": "( line 1 ) , ( line 2 ) that belongs to ( addresses )", "question": "what are all the addresses including line 1 and line 2?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "translated_sql": "( transcript date of management ) , ( transcript id of department ) that belongs to ( ( transcript contents ) , and ( ( transcripts ) satisfied that ( ( transcript id of department ) equal to ( transcript id of management ) ) ) ) , grouped by ( transcript id of department ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( 1 )", "question": "What is the date and id of the transcript with the least number of results?", "label": 1, "remark": "positive"}
{"sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "translated_sql": "( title ) , ( directed by ) that belongs to ( cartoon ) , ordered by ( ( original air date ) )", "question": "What is the name of all the cartoons that are ordered by air date?", "label": 0, "remark": "value col"}
{"sql": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC", "translated_sql": "( contestant number ) , ( contestant name ) that belongs to ( contestants ) , ordered by ( ( contestant name ) in descending order )", "question": "List the contestant numbers and names, ordered by contestant name ascending.", "label": 0, "remark": "logic"}
{"sql": "SELECT Name FROM country WHERE IndepYear  >  1950", "translated_sql": "( name ) that belongs to ( country ) , that have ( ( indepyear ) greater than ( 1950 ) )", "question": "Give the names of the nations that were founded after 1950.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( departments ) , and ( ( degree programs ) satisfied that ( ( department id of likes ) equal to ( department id of highschooler ) ) ) ) , that have ( ( department name of likes ) equal to ( 'engineer' ) )", "question": "How many degrees does each department has?", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10", "translated_sql": "( the number of ( all items ) ) that belongs to ( highschooler ) , that have ( ( ( grade ) equal to ( 9 ) ) or ( ( grade ) equal to ( 10 ) ) )", "question": "How many high schoolers are there in grade 9 or 10?", "label": 1, "remark": "positive"}
{"sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "translated_sql": "( role code ) , ( street ) , ( city ) , ( state ) that belongs to ( professionals ) , that have ( ( city ) like ( '%west%' ) )", "question": "Which professionals live in a city containing the substring 'South'? List his or her role, street, city and state.", "label": 0, "remark": "value str"}
{"sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "translated_sql": "( id ) that belongs to ( tv channel ), and except that ( ( channel ) that belongs to ( cartoon ) , that have ( ( directed by ) equal to ( 'ben jones' ) ))", "question": "find the names of tv channels that do not play any cartoon directed by Ben Jones.", "label": 0, "remark": "value col"}
{"sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "translated_sql": "( document id ) that belongs to ( paragraphs ) , grouped by ( document id ) , that have ( ( the number of ( all items ) ) between ( 1 ) and ( 2 ) )", "question": "Give the ids of documents that have except one and two paragraphs.", "label": 0, "remark": "logic"}
{"sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "translated_sql": "( last name of department ) that belongs to ( ( students ) , and ( ( addresses ) satisfied that ( ( current address id of department ) equal to ( address id of management ) ) ) ) , that have ( ( state province county of management ) equal to ( 'northcarolina' ) ), and except that ( ( distinct ( last name of head ) ) that belongs to ( ( students ) , and ( ( student enrolment ) satisfied that ( ( student id of head ) equal to ( student id of trip ) ) ) ))", "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "translated_sql": "( name of highschooler ) , ( the number of ( all items ) ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( student id of likes ) equal to ( id of highschooler ) ) ) ) , grouped by ( student id of likes )", "question": "Show the names of high schoolers who have likes.", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10", "translated_sql": "( the number of ( all items ) ) that belongs to ( highschooler ) , that have ( ( ( grade ) equal to ( 9 ) ) or ( ( grade ) equal to ( 10 ) ) )", "question": "Count the number of high schoolers in grades 9 or 10.", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id", "translated_sql": "( concert name of highschooler ) , ( theme of highschooler ) , ( the number of ( all items ) ) that belongs to ( ( singer in concert ) , and ( ( concert ) satisfied that ( ( concert id of likes ) equal to ( concert id of highschooler ) ) ) ) , grouped by ( concert id of highschooler )", "question": "Show the name for all concerts and the number of singers in each concert.", "label": 0, "remark": "value col"}
{"sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "translated_sql": "( the average of ( mpg ) ) that belongs to ( cars data ) , that have ( ( cylinders ) equal to ( 4 ) )", "question": "What is the average miles per gallon(mpg) of the cars with 8 cylinders?", "label": 0, "remark": "value int"}
{"sql": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"", "translated_sql": "all items that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( ( language of management ) equal to ( english ) ) and ( ( isofficial ) equal to ( t ) ) ) and all items that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( ( language of management ) equal to ( dutch ) ) and ( ( isofficial ) equal to ( t ) ) )", "question": "Which countries have either English or Dutch as an official language?", "label": 1, "remark": "positive"}
{"sql": "SELECT name FROM Dogs WHERE dog_id NOT IN( SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum(cost_of_treatment)  >  1000 )", "translated_sql": "( name ) that belongs to ( dogs ) , that have ( ( dog_id ) not in ( ( ( dog id ) that belongs to ( treatments ) , grouped by ( dog id ) , that have ( ( the sum of ( cost of treatment ) ) greater than ( 1000 ) ) ) ) )", "question": "Which dogs have not cost their owner more than 1000 for treatment? List the dog names.", "label": 1, "remark": "positive"}
{"sql": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "translated_sql": "( first name ) , ( birth date ) that belongs to ( players ) , that have ( ( country code ) equal to ( 'usa' ) )", "question": "List the first name and birth date of all players from the country with code USA.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of department ) equal to ( id of management ) ) ) ) , that have ( ( name of management ) equal to ( kyle ) )", "question": "How many friends does the high school student Kyle have?", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "translated_sql": "( name ) that belongs to ( people ) , that have ( ( nationality ) not equal to ( russia ) )", "question": "What are the names of people who are not from Russia?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( destairport of department ) equal to ( airportcode of management ) ) ) , and ( ( airlines ) satisfied that ( ( uid of head ) equal to ( airline of department ) ) ) ) , that have ( ( ( city of management ) equal to ( aberdeen ) ) and ( ( airline of head ) equal to ( united airlines ) ) )", "question": "Count the number of United Airlines flights that arrive in Aberdeen.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( flights ) , that have ( ( sourceairport ) equal to ( apg ) )", "question": "Count the number of flights departing from 'APG'.", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "translated_sql": "( language of management ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( governmentform of department ) equal to ( republic ) ) , grouped by ( language of management ) , that have ( ( the number of ( all items ) ) equal to ( 1 ) )", "question": "What languages are only used by a single country with a republic government?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( department name of management ) , ( department id of department ) that belongs to ( ( degree programs ) , and ( ( departments ) satisfied that ( ( department id of department ) equal to ( department id of management ) ) ) ) , grouped by ( department id of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Which department offers the most number of degrees? List department name and id.", "label": 1, "remark": "positive"}
{"sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "translated_sql": "( first name ) , ( country code ) that belongs to ( players ) , ordered by ( ( birth date ) ) , limited to the top ( 1 )", "question": "What is the first name and country code of the oldest player?", "label": 1, "remark": "positive"}
{"sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "translated_sql": "( other student details ) that belongs to ( students ) , ordered by ( ( other student details ) in descending order )", "question": "What other details can you tell me about students in alphabetical order?", "label": 0, "remark": "logic"}
{"sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "translated_sql": "( winner name ) that belongs to ( matches ) , that have ( ( tourney name ) equal to ( 'australian open' ) ) , ordered by ( ( winner rank points ) in descending order ) , limited to the top ( 1 )", "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "label": 1, "remark": "positive"}
{"sql": "SELECT section_name FROM Sections ORDER BY section_name DESC", "translated_sql": "( section name ) that belongs to ( sections ) , ordered by ( ( section name ) in descending order )", "question": "What are the names of the sections in reverse alphabetical order?", "label": 1, "remark": "positive"}
{"sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "translated_sql": "( record company ) that belongs to ( orchestra ) , ordered by ( ( year of founded ) in descending order )", "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(age) FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid)", "translated_sql": "( the average of ( age ) ) that belongs to ( student ) , that have ( ( stuid ) not in ( ( stuid of likes ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of likes ) equal to ( stuid of highschooler ) ) ) ) ) )", "question": "Find the average age of students who have some pets.", "label": 0, "remark": "logic"}
{"sql": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "translated_sql": "( the average of ( ranking ) ) , ( first name of likes ) that belongs to ( ( players ) , and ( ( rankings ) satisfied that ( ( player id of likes ) equal to ( player id of highschooler ) ) ) ) , grouped by ( first name of likes )", "question": "What are the first names of all players?", "label": 0, "remark": "value col"}
{"sql": "SELECT name FROM employee ORDER BY age", "translated_sql": "( name ) that belongs to ( employee ) , ordered by ( ( age ) )", "question": "Sort employee names by their age in ascending order.", "label": 1, "remark": "positive"}
{"sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "translated_sql": "( first name ) that belongs to ( professionals ) and ( first name ) that belongs to ( owners ), and except that ( ( name ) that belongs to ( dogs ))", "question": "Which first names are used for professionals or owners but also used as dog names?", "label": 0, "remark": "logic"}
{"sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )", "translated_sql": "( the average of ( age ) ) that belongs to ( dogs ) , that have ( ( dog_id ) in ( ( dog id ) that belongs to ( treatments ) ) )", "question": "Find the average age of the dogs who went through treatments.", "label": 0, "remark": "value table"}
{"sql": "SELECT avg(transcript_date) FROM Transcripts", "translated_sql": "( the average of ( transcript date ) ) that belongs to ( transcripts )", "question": "What is the average transcript date?", "label": 1, "remark": "positive"}
{"sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "translated_sql": "( document id ) that belongs to ( paragraphs ) , that have ( ( paragraph text ) equal to ( 'brazil' ) ), and intersect with ( ( document id ) that belongs to ( paragraphs ) , that have ( ( paragraph text ) equal to ( 'ireland' ) ))", "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "translated_sql": "( country code of department ) , ( first name of department ) that belongs to ( ( players ) , and ( ( matches ) satisfied that ( ( player id of department ) equal to ( winner id of management ) ) ) ) , that have ( ( tourney name of management ) equal to ( 'wta championships' ) ), and intersect with ( ( country code of department ) , ( first name of department ) that belongs to ( ( players ) , and ( ( matches ) satisfied that ( ( player id of department ) equal to ( winner id of management ) ) ) ) , that have ( ( tourney name of management ) equal to ( 'australian open' ) ))", "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "translated_sql": "( the number of ( distinct ( governmentform ) ) ) that belongs to ( country ) , that have ( ( continent ) equal to ( africa ) )", "question": "How many type of governments are in Europe?", "label": 0, "remark": "value col"}
{"sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "translated_sql": "( first name ) , ( last name ) that belongs to ( players ) , ordered by ( ( birth date ) )", "question": "What are the full names of all players, sorted by birth date?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(DISTINCT professional_id) FROM Treatments", "translated_sql": "( the number of ( distinct ( professional id ) ) ) that belongs to ( treatments )", "question": "How many professionals have performed any treatment to dogs?", "label": 1, "remark": "positive"}
{"sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC", "translated_sql": "( name ) , ( country ) , ( age ) that belongs to ( singer ) , ordered by ( ( age ) in descending order )", "question": "Show name, country, age for all singers ordered by age from the yongest to the oldest.", "label": 0, "remark": "logic"}
{"sql": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")", "translated_sql": "( name ) that belongs to ( country ) , that have ( ( ( continent ) equal to ( africa ) ) and ( ( population ) less than ( the minimum of ( population ) ) that belongs to ( country ) , that have ( ( continent ) equal to ( asia ) ) ) )", "question": "Which African countries have a smaller population than that of any country in Asia?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "translated_sql": "( birth date of department ) that belongs to ( ( people ) , and ( ( poker player ) satisfied that ( ( people id of department ) equal to ( people id of management ) ) ) ) , ordered by ( ( earnings of management ) in ascending order ) , limited to the top ( 1 )", "question": "What is the birth date of the poker player with the lowest earnings?", "label": 1, "remark": "positive"}
{"sql": "SELECT min(loser_rank) FROM matches", "translated_sql": "( the minimum of ( loser rank ) ) that belongs to ( matches )", "question": "Find the average rank of losers in all matches.", "label": 0, "remark": "logic"}
{"sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( orchestra ) , that have ( ( ( major record format ) equal to ( cd ) ) or ( ( major record format ) equal to ( dvd ) ) )", "question": "Count the number of orchestras that have CD or DVD as their record format.", "label": 1, "remark": "positive"}
{"sql": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")", "translated_sql": "( the number of ( all items ) ) that belongs to ( \"l ( name of department ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( language of management ) equal to ( english ) ), and intersect with ( ( name of department ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( language of management ) equal to ( dutch ) )) r\" )", "question": "How many countries speak both English and Dutch?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM CONTINENTS;", "translated_sql": "( the number of ( all items ) ) that belongs to ( continents )", "question": "How many continents are there?", "label": 1, "remark": "positive"}
{"sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "translated_sql": "( template type description ) that belongs to ( ref template types ) , that have ( ( template type code ) equal to ( ad ) )", "question": "Return the template type description of the template type with the code AD.", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM country WHERE IndepYear  >  1950", "translated_sql": "( name ) that belongs to ( country ) , that have ( ( indepyear ) greater than ( 1950 ) )", "question": "What are the names of all the countries that became independent after 1949?", "label": 0, "remark": "value int"}
{"sql": "SELECT Name FROM conductor ORDER BY Age ASC", "translated_sql": "( name ) that belongs to ( conductor ) , ordered by ( ( age ) in ascending order )", "question": "List the names of conductors in ascending order of age.", "label": 1, "remark": "positive"}
{"sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "translated_sql": "( name ) , ( population ) , ( lifeexpectancy ) that belongs to ( country ) , that have ( ( continent ) equal to ( asia ) ) , ordered by ( ( surfacearea ) in descending order ) , limited to the top ( 1 )", "question": "What are the name, population, and life expectancy of the largest Asian country by land?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "translated_sql": "( cost of treatment of likes ) , ( treatment type description of highschooler ) that belongs to ( ( treatments ) , and ( ( treatment types ) satisfied that ( ( treatment type code of likes ) equal to ( treatment type code of highschooler ) ) ) )", "question": "List the cost of each treatment and the corresponding treatment type code.", "label": 0, "remark": "value col"}
{"sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( name of management ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( student id of department ) equal to ( id of management ) ) ) ) , grouped by ( student id of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What is the name of the high schooler who has the greatest number of likes?", "label": 1, "remark": "positive"}
{"sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "translated_sql": "( the number of ( all items ) ) that belongs to ( cars data ) , that have ( ( cylinders ) greater than ( 6 ) )", "question": "How many cars has over 6 cylinders?", "label": 1, "remark": "positive"}
{"sql": "SELECT avg(transcript_date) FROM Transcripts", "translated_sql": "( the average of ( transcript date ) ) that belongs to ( transcripts )", "question": "On average, when were the transcripts printed?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "translated_sql": "( professional id of department ) , ( role code of department ) , ( first name of department ) that belongs to ( ( professionals ) , and ( ( treatments ) satisfied that ( ( professional id of department ) equal to ( professional id of management ) ) ) ) , grouped by ( professional id of department ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )", "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?", "label": 1, "remark": "positive"}
{"sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "translated_sql": "( manager name ) , ( district ) that belongs to ( shop ) , ordered by ( ( number products ) in descending order ) , limited to the top ( 1 )", "question": "Find the manager name and district of the shop whose number of products is the largest.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "translated_sql": "( lname of department ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of department ) equal to ( stuid of management ) ) ) , and ( ( pets ) satisfied that ( ( petid of head ) equal to ( petid of management ) ) ) ) , that have ( ( ( pet age of head ) equal to ( 3 ) ) and ( ( pettype of head ) equal to ( 'cat' ) ) )", "question": "Find the last name of the student who has a cat that is age 3.", "label": 1, "remark": "positive"}
{"sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"", "translated_sql": "( title ) that belongs to ( cartoon ) , that have ( ( directed by ) equal to ( ben jones ) )", "question": "What are the names of all cartoons not directed by Ben Jones?", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( destairport of likes ) equal to ( airportcode of highschooler ) ) ) , and ( ( airlines ) satisfied that ( ( uid of area code state ) equal to ( airline of likes ) ) ) ) , that have ( ( ( city of highschooler ) equal to ( aberdeen ) ) and ( ( airline of area code state ) equal to ( united airlines ) ) )", "question": "How many United Airlines flights come from City 'Aberdeen'?", "label": 0, "remark": "value col"}
{"sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( model ) that belongs to ( car names ) , grouped by ( model ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "What model has the least different versions?", "label": 0, "remark": "logic"}
{"sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "translated_sql": "( the minimum of ( number products ) ) , ( the maximum of ( number products ) ) that belongs to ( shop )", "question": "What are the minimum and maximum number of products across all the shops?", "label": 1, "remark": "positive"}
{"sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "translated_sql": "( name ) , ( birth date ) that belongs to ( people ) , ordered by ( ( name ) in ascending order )", "question": "List the names and birth dates of people in ascending alphabetical order of name.", "label": 1, "remark": "positive"}
{"sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "translated_sql": "( nationality ) , ( the number of ( all items ) ) that belongs to ( people ) , grouped by ( nationality )", "question": "What are different nationalities of people and the corresponding number of people from each nation?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;", "translated_sql": "( id of department ) , ( maker of department ) that belongs to ( ( car makers ) , and ( ( model list ) satisfied that ( ( id of department ) equal to ( maker of management ) ) ) ) , grouped by ( id of department ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) ), and intersect with ( ( id of department ) , ( maker of department ) that belongs to ( ( car makers ) , and ( ( model list ) satisfied that ( ( id of department ) equal to ( maker of management ) ) ) , and ( ( car names ) satisfied that ( ( model of management ) equal to ( model of head ) ) ) ) , grouped by ( id of department ) , that have ( ( the number of ( all items ) ) greater than ( 3 ) ))", "question": "Which are the car makers which produce at least 2 models and more than 3 car makes? List the id and the maker.", "label": 1, "remark": "positive"}
{"sql": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "translated_sql": "( name ) , ( population ) , ( headofstate ) that belongs to ( country ) , ordered by ( ( surfacearea ) in descending order ) , limited to the top ( 1 )", "question": "What are the population of the country with the largest area?", "label": 0, "remark": "value col"}
{"sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "translated_sql": "( template id ) that belongs to ( documents ) , grouped by ( template id ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )", "question": "Show ids for all templates that are used by more than three document.", "label": 0, "remark": "value int"}
{"sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype", "translated_sql": "( the average of ( weight ) ) , ( pettype ) that belongs to ( pets ) , grouped by ( pettype )", "question": "Find the maximum weight for each pet type.", "label": 0, "remark": "logic"}
{"sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "translated_sql": "( package option ) , ( series name ) that belongs to ( tv channel ) , that have ( ( hight definition tv ) equal to ( yes ) )", "question": "Find the package choice and series name of the TV channel that has high definition TV.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "translated_sql": "( model of likes ) that belongs to ( ( car names ) , and ( ( cars data ) satisfied that ( ( makeid of likes ) equal to ( id of highschooler ) ) ) ) , that have ( ( cylinders of highschooler ) equal to ( 4 ) ) , ordered by ( ( horsepower of highschooler ) in descending order ) , limited to the top ( 1 )", "question": "For all of the 8 cylinder cars, which model has the most horsepower?", "label": 0, "remark": "value int"}
{"sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( winner name ) , ( winner rank points ) that belongs to ( matches ) , grouped by ( winner name ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Find the name and rank points of the winner who won the least times.", "label": 0, "remark": "logic"}
{"sql": "SELECT min(loser_rank) FROM matches", "translated_sql": "( the minimum of ( loser rank ) ) that belongs to ( matches )", "question": "Find the highest rank of losers in all matches.", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "translated_sql": "( transcript date of highschooler ) , ( transcript id of likes ) that belongs to ( ( transcript contents ) , and ( ( transcripts ) satisfied that ( ( transcript id of likes ) equal to ( transcript id of highschooler ) ) ) ) , grouped by ( transcript id of likes ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( 1 )", "question": "What is the date and id of the transcript with the most number of results?", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) FROM singer", "translated_sql": "( the number of ( all items ) ) that belongs to ( singer )", "question": "How many singers are there?", "label": 1, "remark": "positive"}
{"sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "translated_sql": "( the sum of ( population ) ) , ( governmentform ) that belongs to ( country ) , grouped by ( governmentform ) , that have ( ( the average of ( lifeexpectancy ) ) greater than ( 72 ) )", "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?", "label": 1, "remark": "positive"}
{"sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "translated_sql": "( version number ) , ( template type code ) that belongs to ( templates ) , that have ( ( version number ) greater than ( 5 ) )", "question": "Return the version numbers and template type codes of templates with a version number greater than 10.", "label": 0, "remark": "value int"}
{"sql": "SELECT Weight FROM CARS_DATA WHERE Cylinders  =  4 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1", "translated_sql": "( weight ) that belongs to ( cars data ) , that have ( ( ( cylinders ) equal to ( 4 ) ) and ( ( year ) equal to ( 1974 ) ) ) , ordered by ( ( weight ) in ascending order ) , limited to the top ( 1 )", "question": "SELECT Weight FROM CARS_DATA WHERE Cylinders  =  4 AND YEAR  =  1985 ORDER BY Weight ASC LIMIT 1;", "label": 0, "remark": "value int"}
{"sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2", "translated_sql": "( contestant number of likes ) , ( contestant name of likes ) that belongs to ( ( contestants ) , and ( ( votes ) satisfied that ( ( contestant number of likes ) equal to ( contestant number of highschooler ) ) ) ) , grouped by ( contestant number of likes ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )", "question": "What are the contestant numbers and names of the contestants who had at least three votes?", "label": 0, "remark": "value int"}
{"sql": "SELECT avg(winner_rank) FROM matches", "translated_sql": "( the average of ( winner rank ) ) that belongs to ( matches )", "question": "Find the average rank of winners in all matches.", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "translated_sql": "( make of management ) , ( year of department ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of department ) equal to ( makeid of management ) ) ) ) , that have ( ( year of department ) equal to ( the minimum of ( year ) ) that belongs to ( cars data ) )", "question": "What is the maker of the carr produced in the earliest year and what year was it?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code", "translated_sql": "( the number of ( all items ) ) , ( country code ) that belongs to ( players ) , grouped by ( country code )", "question": "find the number of players for each country.", "label": 1, "remark": "positive"}
{"sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "translated_sql": "( airportcode ) , ( airportname ) that belongs to ( airports ) , that have ( ( city ) equal to ( anthony ) )", "question": "Give the airport code and airport name that is not corresponding to the city Anthony.", "label": 0, "remark": "logic"}
{"sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( template type code of department ) that belongs to ( ( templates ) , and ( ( documents ) satisfied that ( ( template id of department ) equal to ( template id of management ) ) ) ) , grouped by ( template type code of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Return the code of the template type that is most commonly used in documents.", "label": 1, "remark": "positive"}
{"sql": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'", "translated_sql": "( area code of area code state ) that belongs to ( ( contestants ) , and ( ( votes ) satisfied that ( ( contestant number of likes ) equal to ( contestant number of highschooler ) ) ) , and ( ( area code state ) satisfied that ( ( state of highschooler ) equal to ( state of area code state ) ) ) ) , that have ( ( contestant name of likes ) equal to ( 'tabatha gehling' ) ), and intersect with ( ( area code of area code state ) that belongs to ( ( contestants ) , and ( ( votes ) satisfied that ( ( contestant number of likes ) equal to ( contestant number of highschooler ) ) ) , and ( ( area code state ) satisfied that ( ( state of highschooler ) equal to ( state of area code state ) ) ) ) , that have ( ( contestant name of likes ) equal to ( 'kelly clauss' ) ))", "question": "List the area codes in which voters voted neither for the contestant 'Tabatha Gehling'  nor the contestant 'Kelly Clauss'.", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( country ) , that have ( ( governmentform ) equal to ( republic ) )", "question": "How many countries have a republic as their form of government?", "label": 1, "remark": "positive"}
{"sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "translated_sql": "( winner name ) , ( loser name ) that belongs to ( matches ) , ordered by ( ( minutes ) in descending order ) , limited to the top ( 1 )", "question": "find the names of loser and winner who played in the match with greatest number of minutes.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "translated_sql": "( the number of ( distinct ( series name ) ) ) , ( the number of ( distinct ( content ) ) ) that belongs to ( tv channel )", "question": "How many different series and contents are listed in the TV Channel table?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "translated_sql": "( name of department ) that belongs to ( ( people ) , and ( ( poker player ) satisfied that ( ( people id of department ) equal to ( people id of management ) ) ) )", "question": "What are the names of poker players?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\"", "translated_sql": "( series name of likes ) that belongs to ( ( tv channel ) , and ( ( cartoon ) satisfied that ( ( id of likes ) equal to ( channel of highschooler ) ) ) ) , that have ( ( title of highschooler ) equal to ( the rise of the blue beetle! ) )", "question": "What is the TV Channel that not shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "label": 0, "remark": "logic"}
{"sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "translated_sql": "( transcript date ) that belongs to ( transcripts ) , ordered by ( ( transcript date ) in descending order ) , limited to the top ( 1 )", "question": "What is the last transcript release date?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "translated_sql": "( first name of department ) , ( name of management ) that belongs to ( ( owners ) , and ( ( dogs ) satisfied that ( ( owner id of department ) equal to ( owner id of management ) ) ) )", "question": "List pairs of the owner's first name and the dogs's name.", "label": 1, "remark": "positive"}
{"sql": "SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980 ORDER BY mpg DESC LIMIT 1", "translated_sql": "( mpg ) that belongs to ( cars data ) , that have ( ( ( cylinders ) equal to ( 8 ) ) or ( ( year ) less than ( 1980 ) ) ) , ordered by ( ( mpg ) in descending order ) , limited to the top ( 1 )", "question": "What is the maximum mpg of the cars that had 7 cylinders or that were produced before 1980?", "label": 0, "remark": "value int"}
{"sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1", "translated_sql": "( contestant number of likes ) , ( contestant name of likes ) that belongs to ( ( contestants ) , and ( ( votes ) satisfied that ( ( contestant number of likes ) equal to ( contestant number of highschooler ) ) ) ) , grouped by ( contestant number of likes ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( 1 )", "question": "Of all the contestants who got voted, what is the name of the contestant who got most votes?", "label": 0, "remark": "logic"}
{"sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "translated_sql": "( name ) , ( capacity ) that belongs to ( stadium ) , ordered by ( ( average ) in descending order ) , limited to the top ( 1 )", "question": "What is the name and capacity for the stadium with lowest average attendance?", "label": 0, "remark": "logic"}
{"sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( language ) that belongs to ( countrylanguage ) , grouped by ( language ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Give the language that is spoken in the most countries.", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "translated_sql": "( name ) that belongs to ( singer ) , that have ( ( singer_id ) not in ( ( singer id ) that belongs to ( song ) ) )", "question": "List the name of singers that do not have any song.", "label": 1, "remark": "positive"}
{"sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "translated_sql": "( earnings ) that belongs to ( poker player ) , ordered by ( ( earnings ) in descending order )", "question": "What are the earnings of poker players, ordered descending by value?", "label": 1, "remark": "positive"}
{"sql": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "translated_sql": "( airportname ) that belongs to ( airports ) , that have ( ( city ) equal to ( aberdeen ) )", "question": "What are the names of airports in Aberdeen?", "label": 1, "remark": "positive"}
{"sql": "SELECT Weight FROM CARS_DATA WHERE Cylinders  =  4 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1;", "translated_sql": "( weight ) that belongs to ( cars data ) , that have ( ( ( cylinders ) equal to ( 4 ) ) and ( ( year ) equal to ( 1974 ) ) ) , ordered by ( ( weight ) in ascending order ) , limited to the top ( 1 )", "question": "What is the minimu weight of the car with 8 cylinders produced in 1974?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "translated_sql": "( the number of ( distinct ( winner name ) ) ) that belongs to ( matches ) , that have ( ( ( tourney name ) equal to ( 'wta championships' ) ) and ( ( winner hand ) equal to ( 'l' ) ) )", "question": "Find the number of left handed winners who participated in the WTA Championships.", "label": 1, "remark": "positive"}
{"sql": "SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1", "translated_sql": "( production code ) , ( channel ) that belongs to ( cartoon ) , ordered by ( ( original air date ) ) , limited to the top ( 1 )", "question": "Find the production code and channel of the most recently aired TV Series.", "label": 0, "remark": "value col"}
{"sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "translated_sql": "( language of management ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( ( headofstate of department ) equal to ( beatrix ) ) and ( ( isofficial of management ) equal to ( t ) ) )", "question": "What is the official language spoken in the country whose head of state is Beatrix?", "label": 1, "remark": "positive"}
{"sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "translated_sql": "( major record format ) that belongs to ( orchestra ) , grouped by ( major record format ) , ordered by ( ( the number of ( all items ) ) in ascending order )", "question": "What are the major record formats of orchestras, sorted by their frequency?", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "translated_sql": "( distinct ( winner name ) ) , ( winner rank ) that belongs to ( matches ) , ordered by ( ( winner age ) ) , limited to the top ( 3 )", "question": "What are the names and ranks of the three youngest winners across all matches?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM Paragraphs", "translated_sql": "( the number of ( all items ) ) that belongs to ( paragraphs )", "question": "How many paragraphs in total?", "label": 1, "remark": "positive"}
{"sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend", "translated_sql": "( id ) that belongs to ( highschooler ), and except that ( ( student id ) that belongs to ( friend ))", "question": "Show ids of all students who do not have any friends.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "translated_sql": "( airline of department ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of department ) equal to ( airline of management ) ) ) ) , that have ( ( sourceairport of management ) equal to ( ahd ) )", "question": "Which airlines have a flight with source airport AHD?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "translated_sql": "( airline of department ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of department ) equal to ( airline of management ) ) ) ) , that have ( ( destairport of management ) equal to ( ahd ) )", "question": "Which airlines have a flight with destination airport AHD?", "label": 1, "remark": "positive"}
{"sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4", "translated_sql": "( grade ) that belongs to ( highschooler ) , grouped by ( grade ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 4 ) )", "question": "Which grades have 4 or less high schoolers?", "label": 0, "remark": "logic"}
{"sql": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'", "translated_sql": "( the number of ( all items ) ) that belongs to ( votes ) , that have ( ( ( state ) equal to ( 'ny' ) ) or ( ( state ) equal to ( 'ca' ) ) )", "question": "What are the number of votes not from state 'NY' or 'CA'?", "label": 0, "remark": "logic"}
{"sql": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "translated_sql": "( continent ) that belongs to ( country ) , that have ( ( name ) equal to ( anguilla ) )", "question": "What is the continent name which Anguilla belongs to?", "label": 1, "remark": "positive"}
{"sql": "SELECT name FROM Dogs WHERE dog_id NOT IN( SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum(cost_of_treatment)  >  1000 )", "translated_sql": "( name ) that belongs to ( dogs ) , that have ( ( dog_id ) not in ( ( ( dog id ) that belongs to ( treatments ) , grouped by ( dog id ) , that have ( ( the sum of ( cost of treatment ) ) greater than ( 1000 ) ) ) ) )", "question": "What are the names of the dogs for which the owner spent more than 1000 for treatment?", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "translated_sql": "( distinct ( fname of department ) ) , ( age of department ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of department ) equal to ( stuid of management ) ) ) )", "question": "What are the different first names and ages of the students who do have pets?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( sourceairport of likes ) equal to ( airportcode of highschooler ) ) ) ) , that have ( ( city of highschooler ) equal to ( aberdeen ) )", "question": "Return the number of flights arriving in Aberdeen.", "label": 0, "remark": "logic"}
{"sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "translated_sql": "( city ) , ( country ) that belongs to ( airports ) , that have ( ( airportname ) equal to ( alton ) )", "question": "Give the city and country for the Alton airport.", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( department name of management ) , ( department id of department ) that belongs to ( ( degree programs ) , and ( ( departments ) satisfied that ( ( department id of department ) equal to ( department id of management ) ) ) ) , grouped by ( department id of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "For each department id, what is the name of the department with the most number of degrees?", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "translated_sql": "( distinct ( fname of likes ) ) , ( age of likes ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of likes ) equal to ( stuid of highschooler ) ) ) )", "question": "Find the first name of students who have a pet.", "label": 0, "remark": "value col"}
{"sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "translated_sql": "( pixel aspect ratio par ) , ( country ) that belongs to ( tv channel ) , that have ( ( language ) not equal to ( 'english' ) )", "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "label": 1, "remark": "positive"}
{"sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id", "translated_sql": "( student id ) , ( the number of ( all items ) ) that belongs to ( friend ) , grouped by ( student id )", "question": "How many friends does each student have?", "label": 1, "remark": "positive"}
{"sql": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "translated_sql": "( population ) , ( region ) that belongs to ( country ) , that have ( ( name ) equal to ( angola ) )", "question": "What are the region and population of Angola?", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"", "translated_sql": "( distinct ( region of department ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( ( language of management ) equal to ( english ) ) or ( ( language of management ) equal to ( dutch ) ) )", "question": "Which regions speak Dutch or English?", "label": 1, "remark": "positive"}
{"sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "translated_sql": "( distinct ( winner name ) ) , ( winner rank ) that belongs to ( matches ) , ordered by ( ( winner age ) ) , limited to the top ( 3 )", "question": "Find the name and rank of the 3 youngest winners across all matches.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "translated_sql": "( the number of ( all items ) ) that belongs to ( matches ) , that have ( ( ( year ) equal to ( 2013 ) ) or ( ( year ) equal to ( 2016 ) ) )", "question": "How many matches were played in 2013 or 2016?", "label": 1, "remark": "positive"}
{"sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "translated_sql": "( the number of ( distinct ( continent ) ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of likes ) equal to ( countrycode of highschooler ) ) ) ) , that have ( ( language of highschooler ) equal to ( chinese ) )", "question": "How many continents do not speak Chinese?", "label": 0, "remark": "logic"}
{"sql": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011", "translated_sql": "( name of catalogs ) that belongs to ( ( visitor ) , and ( ( visit ) satisfied that ( ( id of catalogs ) equal to ( visitor id of catalog structure ) ) ) , and ( ( museum ) satisfied that ( ( museum id of border info ) equal to ( museum id of catalog structure ) ) ) ) , that have ( ( open year of border info ) less than ( 2009 ) ), and intersect with ( ( name of catalogs ) that belongs to ( ( visitor ) , and ( ( visit ) satisfied that ( ( id of catalogs ) equal to ( visitor id of catalog structure ) ) ) , and ( ( museum ) satisfied that ( ( museum id of border info ) equal to ( museum id of catalog structure ) ) ) ) , that have ( ( open year of border info ) greater than ( 2011 ) ))", "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1", "translated_sql": "( fname of department ) , ( sex of department ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of department ) equal to ( stuid of management ) ) ) ) , grouped by ( stuid of department ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )", "question": "What is the first name and gender of the all the students who have more than one pet?", "label": 1, "remark": "positive"}
{"sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "translated_sql": "( tourney name ) that belongs to ( matches ) , grouped by ( tourney name ) , that have ( ( the number of ( all items ) ) greater than ( 10 ) )", "question": "What are the names of tournaments that have more than 10 matches?", "label": 1, "remark": "positive"}
{"sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "translated_sql": "( first name ) , ( last name ) that belongs to ( players ) , ordered by ( ( birth date ) )", "question": "List the first and last name of all players in the order of birth date.", "label": 1, "remark": "positive"}
{"sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id", "translated_sql": "( student id ) , ( the number of ( all items ) ) that belongs to ( likes ) , grouped by ( student id )", "question": "Count the number of likes for each student name.", "label": 0, "remark": "value col"}
{"sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "translated_sql": "( the sum of ( population ) ) , ( governmentform ) that belongs to ( country ) , grouped by ( governmentform ) , that have ( ( the average of ( lifeexpectancy ) ) greater than ( 72 ) )", "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.", "label": 1, "remark": "positive"}
{"sql": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "translated_sql": "( continent ) that belongs to ( country ) , that have ( ( name ) equal to ( anguilla ) )", "question": "Which continent is USA in?", "label": 0, "remark": "value str"}
{"sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( ( name of department ) equal to ( afghanistan ) ) and ( ( isofficial ) equal to ( t ) ) )", "question": "How many official languages does Afghanistan have?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "translated_sql": "( the number of ( all items ) ) , ( year ) that belongs to ( matches ) , grouped by ( year )", "question": "How many matches in average were played in each year?", "label": 0, "remark": "logic"}
{"sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "translated_sql": "( city of department ) that belongs to ( ( airports ) , and ( ( flights ) satisfied that ( ( airportcode of department ) equal to ( destairport of management ) ) ) ) , grouped by ( city of department ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )", "question": "Which city has most number of arriving flights?", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")", "translated_sql": "( name ) that belongs to ( country ) , that have ( ( ( continent ) equal to ( asia ) ) and ( ( population ) greater than ( the maximum of ( population ) ) that belongs to ( country ) , that have ( ( continent ) equal to ( africa ) ) ) )", "question": "Which Asian countries have a population that is larger than any country in Africa?", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "translated_sql": "( the number of ( all items ) ) that belongs to ( concert ) , that have ( ( ( year ) equal to ( 2014 ) ) or ( ( year ) equal to ( 2015 ) ) )", "question": "How many concerts are there in year 2014 or 2015?", "label": 1, "remark": "positive"}
{"sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "translated_sql": "( language ) , ( the number of ( all items ) ) that belongs to ( tv channel ) , grouped by ( language ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( 1 )", "question": "What are the languages used by the least number of TV Channels and how many channels use it?", "label": 1, "remark": "positive"}
{"sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "translated_sql": "( name ) that belongs to ( singer ) , ordered by ( ( net worth millions ) in descending order ) , limited to the top ( 1 )", "question": "What is the name of the singer who is worth the most?", "label": 1, "remark": "positive"}
{"sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "translated_sql": "( language of highschooler ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of likes ) equal to ( countrycode of highschooler ) ) ) ) , that have ( ( governmentform of likes ) equal to ( republic ) ) , grouped by ( language of highschooler ) , that have ( ( the number of ( all items ) ) equal to ( 1 ) )", "question": "What languages are only used by two countries with a republic government?", "label": 0, "remark": "value int"}
{"sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1", "translated_sql": "( countryname of likes ) , ( countryid of likes ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of likes ) equal to ( country of highschooler ) ) ) ) , grouped by ( countryid of likes ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 1 ) )", "question": "What are the countries having at most one car maker? List name and id.", "label": 0, "remark": "logic"}
{"sql": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"", "translated_sql": "( grade ) that belongs to ( highschooler ) , that have ( ( name ) equal to ( kyle ) )", "question": "What grade is Kyle in?", "label": 1, "remark": "positive"}
{"sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"", "translated_sql": "( the number of ( all items ) ) that belongs to ( orchestra ) , that have ( ( ( major record format ) equal to ( cd ) ) or ( ( major record format ) equal to ( dvd ) ) )", "question": "Count the number of orchestras that have CD as their record format.", "label": 0, "remark": "value str"}
{"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "translated_sql": "( airline of likes ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of likes ) equal to ( airline of highschooler ) ) ) ) , grouped by ( airline of likes ) , that have ( ( the number of ( all items ) ) less than ( 200 ) )", "question": "Which airlines have less than 100 flights?", "label": 0, "remark": "value int"}
{"sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "translated_sql": "( name ) that belongs to ( conductor ) , ordered by ( ( year of work ) in descending order )", "question": "List names of conductors in ascending order of years of work.", "label": 0, "remark": "logic"}
{"sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "translated_sql": "( role code ) , ( street ) , ( city ) , ( state ) that belongs to ( professionals ) , that have ( ( city ) like ( '%west%' ) )", "question": "Find the role, street, city and state of the professionals living in a city that does not contain the substring 'West'.", "label": 0, "remark": "logic"}
{"sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "translated_sql": "( package option ) that belongs to ( tv channel ) , that have ( ( series name ) equal to ( sky radio ) )", "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "translated_sql": "( professional id of department ) , ( cell number of department ) that belongs to ( ( professionals ) , and ( ( treatments ) satisfied that ( ( professional id of department ) equal to ( professional id of management ) ) ) ) , grouped by ( professional id of department ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )", "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.", "label": 1, "remark": "positive"}
{"sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "translated_sql": "( series name of department ) , ( country of department ) that belongs to ( ( tv channel ) , and ( ( cartoon ) satisfied that ( ( id of department ) equal to ( channel of management ) ) ) ) , that have ( ( directed by of management ) equal to ( 'michael chang' ) ), and intersect with ( ( series name of department ) , ( country of department ) that belongs to ( ( tv channel ) , and ( ( cartoon ) satisfied that ( ( id of department ) equal to ( channel of management ) ) ) ) , that have ( ( directed by of management ) equal to ( 'ben jones' ) ))", "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?", "label": 1, "remark": "positive"}
{"sql": "SELECT name ,  date FROM battle", "translated_sql": "( name ) , ( date ) that belongs to ( battle )", "question": "List the name, date and result of each battle.", "label": 1, "remark": "positive"}
{"sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "translated_sql": "( document id ) , ( template id ) , ( document description ) that belongs to ( documents ) , that have ( ( document name ) equal to ( robbin cv ) )", "question": "What is the document id, template id and description for document not named \"Robbin CV\"?", "label": 0, "remark": "logic"}
{"sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "translated_sql": "( first name ) that belongs to ( professionals ) and ( first name ) that belongs to ( owners ), and except that ( ( name ) that belongs to ( dogs ))", "question": "Find the first names that are used for professionals or owners but are not used as dog names.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM Transcripts", "translated_sql": "( the number of ( all items ) ) that belongs to ( transcripts )", "question": "What are transcripts listed?", "label": 0, "remark": "logic"}
{"sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "translated_sql": "( package option ) , ( series name ) that belongs to ( tv channel ) , that have ( ( hight definition tv ) equal to ( yes ) )", "question": "Find the package choice and series name of the TV channel that does not have high definition TV.", "label": 0, "remark": "logic"}
{"sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "translated_sql": "( first name ) , ( middle name ) , ( last name ) that belongs to ( students ) , ordered by ( ( date left ) in ascending order ) , limited to the top ( 1 )", "question": "Who is the latest graduate of the school? List the first name, middle name and last name.", "label": 0, "remark": "logic"}
{"sql": "SELECT avg(injured) FROM death", "translated_sql": "( the average of ( injured ) ) that belongs to ( death )", "question": "What is the minimum number of injuries caused each time?", "label": 0, "remark": "value col"}
{"sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"", "translated_sql": "( name of department ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( ( language of management ) equal to ( english ) ) and ( ( isofficial of management ) equal to ( t ) ) ), and intersect with ( ( name of department ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of department ) equal to ( countrycode of management ) ) ) ) , that have ( ( ( language of management ) equal to ( french ) ) and ( ( isofficial of management ) equal to ( t ) ) ))", "question": "What are the names of nations where both English and French are official languages?", "label": 1, "remark": "positive"}
{"sql": "SELECT * FROM hiring", "translated_sql": "all items that belongs to ( hiring )", "question": "Give me all the information about hiring.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(DISTINCT dog_id) FROM Treatments", "translated_sql": "( the number of ( distinct ( dog id ) ) ) that belongs to ( treatments )", "question": "Count the number of dogs that went through a treatment.", "label": 1, "remark": "positive"}
{"sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10", "translated_sql": "( the number of ( all items ) ) that belongs to ( highschooler ) , that have ( ( ( grade ) equal to ( 9 ) ) or ( ( grade ) equal to ( 10 ) ) )", "question": "Count the number of high schoolers in grades 8 or 10.", "label": 0, "remark": "value int"}
{"sql": "SELECT sum(bonus) FROM evaluation", "translated_sql": "( the sum of ( bonus ) ) that belongs to ( evaluation )", "question": "What is total bonus given in all evaluations?", "label": 1, "remark": "positive"}
