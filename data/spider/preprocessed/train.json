{
    "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1": "( how to get there ) that belongs to ( tourist attractions ) , grouped by ( how to get there ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT name FROM PersonFriend GROUP BY name HAVING count(*)  =  1": "( name ) that belongs to ( personfriend ) , grouped by ( name ) , that have ( ( the number of ( all items ) ) equal to ( 1 ) )",
    "SELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\"": "( date of birth ) that belongs to ( guests ) , that have ( ( gender code ) equal to ( male ) )",
    "SELECT Fname FROM Student WHERE Major  =  600": "( fname ) that belongs to ( student ) , that have ( ( major ) equal to ( 600 ) )",
    "SELECT customer_phone FROM available_policies": "( customer phone ) that belongs to ( available policies )",
    "SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1": "( stories ) that belongs to ( buildings ) , ordered by ( ( height ) in descending order ) , limited to the top ( 1 )",
    "SELECT service_type_code FROM services ORDER BY service_type_code": "( service type code ) that belongs to ( services ) , ordered by ( ( service type code ) )",
    "SELECT count(DISTINCT sportname) FROM Sportsinfo": "( the number of ( distinct ( sportname ) ) ) that belongs to ( sportsinfo )",
    "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = \"Damianfort\";": "( first name of staff ) , ( last name of staff ) that belongs to ( ( addresses ) , and ( ( staff ) satisfied that ( ( address id of addresses ) equal to ( staff address id of staff ) ) ) ) , that have ( ( city of addresses ) equal to ( damianfort ) )",
    "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'": "( hosts ) that belongs to ( farm competition ) , that have ( ( theme ) not equal to ( 'aliens' ) )",
    "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\"": "( cname ) that belongs to ( college ) , that have ( ( ( enr ) less than ( 13000 ) ) and ( ( state ) equal to ( az ) ) ) and ( cname ) that belongs to ( college ) , that have ( ( ( enr ) greater than ( 15000 ) ) and ( ( state ) equal to ( la ) ) )",
    "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;": "( first name of addresses ) , ( last name of addresses ) that belongs to ( ( customers ) , and ( ( invoices ) satisfied that ( ( customer id of staff ) equal to ( id of addresses ) ) ) ) , ordered by ( ( total ) ) , limited to the top ( 10 )",
    "SELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"": "( name ) that belongs to ( musical ) , that have ( ( nominee ) equal to ( bob fosse ) )",
    "SELECT price_range FROM HOTELS WHERE star_rating_code  =  \"5\"": "( price range ) that belongs to ( hotels ) , that have ( ( star rating code ) equal to ( 5 ) )",
    "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1": "( candidate id ) that belongs to ( candidate ) , ordered by ( ( oppose rate ) ) , limited to the top ( 1 )",
    "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1": "( name of addresses ) that belongs to ( ( airports ) , and ( ( routes ) satisfied that ( ( apid of addresses ) equal to ( src apid of staff ) ) ) ) , that have ( ( country of addresses ) equal to ( 'china' ) ) , grouped by ( name of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id  =  T2.id WHERE T2.season  >  2010": "( the number of ( distinct ( injury of addresses ) ) ) that belongs to ( ( injury accident ) , and ( ( game ) satisfied that ( ( game id of addresses ) equal to ( id of staff ) ) ) ) , that have ( ( season of staff ) greater than ( 2010 ) )",
    "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000": "( year opened ) that belongs to ( track ) , that have ( ( seating ) between ( 4000 ) and ( 5000 ) )",
    "SELECT avg(enrollment) ,  max(enrollment) ,  min(enrollment) FROM school": "( the average of ( enrollment ) ) , ( the maximum of ( enrollment ) ) , ( the minimum of ( enrollment ) ) that belongs to ( school )",
    "SELECT count(*) FROM services": "( the number of ( all items ) ) that belongs to ( services )",
    "SELECT avg(Population) FROM county": "( the average of ( population ) ) that belongs to ( county )",
    "SELECT id ,  name ,  market_share FROM browser": "( id ) , ( name ) , ( market share ) that belongs to ( browser )",
    "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1": "( country ) that belongs to ( airlines ) , grouped by ( country ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT lname FROM authors ORDER BY lname": "( lname ) that belongs to ( authors ) , ordered by ( ( lname ) )",
    "SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'": "( pname of addresses ) , ( hs of addresses ) that belongs to ( ( player ) , and ( ( tryout ) satisfied that ( ( pid of addresses ) equal to ( pid of staff ) ) ) ) , that have ( ( decision of staff ) equal to ( 'yes' ) )",
    "SELECT max(market_share) ,  min(market_share) ,  avg(market_share) FROM browser": "( the maximum of ( market share ) ) , ( the minimum of ( market share ) ) , ( the average of ( market share ) ) that belongs to ( browser )",
    "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'": "( interaction type of addresses ) that belongs to ( ( medicine enzyme interaction ) , and ( ( medicine ) satisfied that ( ( medicine id of addresses ) equal to ( id of staff ) ) ) , and ( ( enzyme ) satisfied that ( ( enzyme id of addresses ) equal to ( id of enzyme ) ) ) ) , that have ( ( ( name of enzyme ) equal to ( 'ala synthase' ) ) and ( ( name of staff ) equal to ( 'aripiprazole' ) ) )",
    "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t3.sex  =  \"M\"": "( fname of student ) , ( lname of student ) that belongs to ( ( club ) , and ( ( member of club ) satisfied that ( ( clubid of club ) equal to ( clubid of member of club ) ) ) , and ( ( student ) satisfied that ( ( stuid of member of club ) equal to ( stuid of student ) ) ) ) , that have ( ( ( clubname of club ) equal to ( hopkins student enterprises ) ) and ( ( sex of student ) equal to ( m ) ) )",
    "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID": "( name of staff ) that belongs to ( ( entrepreneur ) , and ( ( people ) satisfied that ( ( people id of addresses ) equal to ( people id of staff ) ) ) )",
    "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\";": "( composer ) that belongs to ( tracks ) , that have ( ( name ) equal to ( fast as a shark ) )",
    "SELECT POSITION FROM player WHERE Points  >  20 INTERSECT SELECT POSITION FROM player WHERE Points  <  10": "( position ) that belongs to ( player ) , that have ( ( points ) greater than ( 20 ) ), and intersect with ( ( position ) that belongs to ( player ) , that have ( ( points ) less than ( 10 ) ))",
    "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1": "( name of staff ) that belongs to ( ( body builder ) , and ( ( people ) satisfied that ( ( people id of addresses ) equal to ( people id of staff ) ) ) ) , ordered by ( ( weight of staff ) in descending order ) , limited to the top ( 1 )",
    "SELECT store_id FROM customer GROUP BY store_id ORDER BY count(*) DESC LIMIT 1": "( store id ) that belongs to ( customer ) , grouped by ( store id ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1": "( staff name of addresses ) that belongs to ( ( staff ) , and ( ( staff department assignments ) satisfied that ( ( staff id of addresses ) equal to ( staff id of staff ) ) ) ) , grouped by ( staff id of staff ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT role_description FROM ROLES WHERE role_code = \"ED\";": "( role description ) that belongs to ( roles ) , that have ( ( role code ) equal to ( ed ) )",
    "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"": "( catalog entry name of club ) that belongs to ( ( catalog contents ) , and ( ( catalog contents additional attributes ) satisfied that ( ( catalog entry id of club ) equal to ( catalog entry id of member of club ) ) ) ) , that have ( ( catalog level number of member of club ) equal to ( 8 ) )",
    "SELECT Enrollment FROM school WHERE Denomination != \"Catholic\"": "( enrollment ) that belongs to ( school ) , that have ( ( denomination ) not equal to ( catholic ) )",
    "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1": "( major ) that belongs to ( student ) , grouped by ( major ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID  =  T2.nurse": "( distinct ( name of addresses ) ) that belongs to ( ( nurse ) , and ( ( on call ) satisfied that ( ( employeeid of addresses ) equal to ( nurse of staff ) ) ) )",
    "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900": "( denomination ) that belongs to ( school ) , that have ( ( founded ) less than ( 1890 ) ), and intersect with ( ( denomination ) that belongs to ( school ) , that have ( ( founded ) greater than ( 1900 ) ))",
    "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'": "( the number of ( friend of staff ) ) that belongs to ( ( person ) , and ( ( personfriend ) satisfied that ( ( name of addresses ) equal to ( name of staff ) ) ) ) , that have ( ( name of addresses ) equal to ( 'dan' ) )",
    "SELECT Fname ,  Lname ,  phone FROM Faculty WHERE Sex  =  'F'": "( fname ) , ( lname ) , ( phone ) that belongs to ( faculty ) , that have ( ( sex ) equal to ( 'f' ) )",
    "SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*)  >  2": "( headquarters ) that belongs to ( companies ) , grouped by ( headquarters ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )",
    "SELECT count(*) FROM list": "( the number of ( all items ) ) that belongs to ( list )",
    "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\"": "( lname of student ) that belongs to ( ( club ) , and ( ( member of club ) satisfied that ( ( clubid of club ) equal to ( clubid of member of club ) ) ) , and ( ( student ) satisfied that ( ( stuid of member of club ) equal to ( stuid of student ) ) ) ) , that have ( ( clubname of club ) equal to ( hopkins student enterprises ) )",
    "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  1": "( denomination ) that belongs to ( school ) , grouped by ( denomination ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT title FROM film WHERE rating  =  'R'": "( title ) that belongs to ( film ) , that have ( ( rating ) equal to ( 'r' ) )",
    "SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code WHERE t1.document_name  =  \"David CV\"": "( section title of member of club ) that belongs to ( ( documents ) , and ( ( document sections ) satisfied that ( ( document code of club ) equal to ( document code of member of club ) ) ) ) , that have ( ( document name of club ) equal to ( david cv ) )",
    "SELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT 1": "( famous release date ) that belongs to ( artist ) , ordered by ( ( age ) in descending order ) , limited to the top ( 1 )",
    "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'": "( friend of staff ) that belongs to ( ( person ) , and ( ( personfriend ) satisfied that ( ( name of addresses ) equal to ( friend of staff ) ) ) ) , that have ( ( ( name of staff ) equal to ( 'alice' ) ) and ( ( gender of addresses ) equal to ( 'female' ) ) )",
    "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;": "( name of addresses ) , ( the number of ( all items ) ) that belongs to ( ( genres ) , and ( ( tracks ) satisfied that ( ( genre id of staff ) equal to ( id of addresses ) ) ) ) , grouped by ( id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 5 )",
    "SELECT T1.title ,  T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title": "( title of addresses ) , ( year of addresses ) that belongs to ( ( movie ) , and ( ( movie ) satisfied that ( ( director of addresses ) equal to ( director of staff ) ) ) ) , that have ( ( title of addresses ) not equal to ( title of staff ) )",
    "SELECT Hometown FROM people WHERE Age  >  23 INTERSECT SELECT Hometown FROM people WHERE Age  <  20": "( hometown ) that belongs to ( people ) , that have ( ( age ) greater than ( 23 ) ), and intersect with ( ( hometown ) that belongs to ( people ) , that have ( ( age ) less than ( 20 ) ))",
    "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2;": "( roomname ) , ( roomid ) that belongs to ( rooms ) , that have ( ( ( baseprice ) greater than ( 160 ) ) and ( ( maxoccupancy ) greater than ( 2 ) ) )",
    "SELECT name ,  member_id FROM member WHERE Membership_card  =  'Black' OR age  <  30": "( name ) , ( member id ) that belongs to ( member ) , that have ( ( ( membership card ) equal to ( 'black' ) ) or ( ( age ) less than ( 30 ) ) )",
    "SELECT company ,  headquarters FROM company ORDER BY market_value DESC": "( company ) , ( headquarters ) that belongs to ( company ) , ordered by ( ( market value ) in descending order )",
    "SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1": "( organisation type of addresses ) that belongs to ( ( organisations ) , and ( ( research staff ) satisfied that ( ( organisation id of addresses ) equal to ( employer organisation id of staff ) ) ) ) , grouped by ( organisation type of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT firstname FROM teachers WHERE classroom  =  110": "( firstname ) that belongs to ( teachers ) , that have ( ( classroom ) equal to ( 110 ) )",
    "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1": "( location code ) that belongs to ( document locations ) , grouped by ( location code ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT login_name ,  family_name FROM Course_Authors_and_Tutors": "( login name ) , ( family name ) that belongs to ( course authors and tutors )",
    "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC": "( status ) that belongs to ( city ) , grouped by ( status ) , ordered by ( ( the number of ( all items ) ) in ascending order )",
    "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance": "( ( balance of addresses ) add ( balance of staff ) ) that belongs to ( ( checking ) , and ( ( savings ) satisfied that ( ( custid of addresses ) equal to ( custid of staff ) ) ) ) , ordered by ( ( ( balance of addresses ) add ( balance of staff ) ) )",
    "SELECT county ,  count(*) ,  sum(enrollment) FROM school GROUP BY county": "( county ) , ( the number of ( all items ) ) , ( the sum of ( enrollment ) ) that belongs to ( school ) , grouped by ( county )",
    "SELECT RESULT ,  COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC": "( result ) , ( the number of ( all items ) ) that belongs to ( music festival ) , grouped by ( result ) , ordered by ( ( the number of ( all items ) ) in descending order )",
    "SELECT count(*) FROM club WHERE clublocation  =  \"HHH\"": "( the number of ( all items ) ) that belongs to ( club ) , that have ( ( clublocation ) equal to ( hhh ) )",
    "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)": "( name ) that belongs to ( mountain ) , that have ( ( mountain_id ) not in ( ( mountain id ) that belongs to ( climber ) ) )",
    "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"": "( name of staff ) that belongs to ( ( entrepreneur ) , and ( ( people ) satisfied that ( ( people id of addresses ) equal to ( people id of staff ) ) ) ) , that have ( ( investor of addresses ) not equal to ( rachel elnaugh ) )",
    "SELECT employee_name FROM Employees WHERE role_code  =  \"HR\"": "( employee name ) that belongs to ( employees ) , that have ( ( role code ) equal to ( hr ) )",
    "SELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\"": "( price ) that belongs to ( publication ) , that have ( ( ( publisher ) equal to ( person ) ) or ( ( publisher ) equal to ( wiley ) ) )",
    "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)": "( team name of member of club ) that belongs to ( ( university ) , and ( ( basketball match ) satisfied that ( ( school id of club ) equal to ( school id of member of club ) ) ) ) , that have ( ( enrollment ) less than ( the average of ( enrollment ) ) that belongs to ( university ) )",
    "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1": "( order id ) , ( customer id ) that belongs to ( orders ) , ordered by ( ( date order placed ) ) , limited to the top ( 1 )",
    "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance": "( student id ) that belongs to ( student course registrations ) and ( student id ) that belongs to ( student course attendance )",
    "SELECT County_name FROM county ORDER BY County_name DESC": "( county name ) that belongs to ( county ) , ordered by ( ( county name ) in descending order )",
    "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)": "( title of member of club ) that belongs to ( ( authorship ) , and ( ( papers ) satisfied that ( ( paperid of club ) equal to ( paperid of member of club ) ) ) ) , that have ( ( authorder of club ) equal to ( the maximum of ( authorder ) ) that belongs to ( authorship ) )",
    "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"": "( title ) that belongs to ( ( album ) , and ( ( artist ) satisfied that ( ( artistid of addresses ) equal to ( artistid of staff ) ) ) ) , that have ( ( name of staff ) equal to ( ac/dc ) )",
    "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions": "( the number of ( distinct ( transaction type ) ) ) that belongs to ( financial transactions )",
    "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"": "( the number of ( all items ) ) that belongs to ( ( courses ) , and ( ( student course attendance ) satisfied that ( ( course id of addresses ) equal to ( course id of staff ) ) ) ) , that have ( ( course name of addresses ) equal to ( english ) )",
    "SELECT count(*) FROM wrestler": "( the number of ( all items ) ) that belongs to ( wrestler )",
    "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1": "( name of club ) , ( age of club ) that belongs to ( ( pilot ) , and ( ( match ) satisfied that ( ( pilot id of club ) equal to ( winning pilot of member of club ) ) ) ) , that have ( ( age of club ) less than ( 30 ) ) , grouped by ( winning pilot of member of club ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;": "( payment method code ) , ( the number of ( all items ) ) that belongs to ( customer payments ) , grouped by ( payment method code )",
    "SELECT Major FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT 1": "( major ) that belongs to ( student ) , grouped by ( major ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"": "( the number of ( all items ) ) that belongs to ( ( genre ) , and ( ( track ) satisfied that ( ( genreid of addresses ) equal to ( genreid of staff ) ) ) ) , that have ( ( name of addresses ) equal to ( rock ) )",
    "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1": "( the average of ( price range ) ) that belongs to ( hotels ) , that have ( ( ( star rating code ) equal to ( 5 ) ) and ( ( pets allowed yn ) equal to ( 1 ) ) )",
    "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010": "( the number of ( distinct ( id ) ) ) that belongs to ( teaches ) , that have ( ( ( semester ) equal to ( 'spring' ) ) and ( ( year ) equal to ( 2010 ) ) )",
    "SELECT count(*) FROM submission": "( the number of ( all items ) ) that belongs to ( submission )",
    "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code JOIN Projects AS T3 ON T2.project_id  =  T3.project_id WHERE T3.project_details  =  'sint'": "( outcome description of addresses ) that belongs to ( ( research outcomes ) , and ( ( project outcomes ) satisfied that ( ( outcome code of addresses ) equal to ( outcome code of staff ) ) ) , and ( ( projects ) satisfied that ( ( project id of staff ) equal to ( project id of enzyme ) ) ) ) , that have ( ( project details of enzyme ) equal to ( 'sint' ) )",
    "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\" AND T1.StagePosition  =  \"back\"": "( firstname of staff ) , ( lastname of staff ) that belongs to ( ( performance ) , and ( ( band ) satisfied that ( ( bandmate of addresses ) equal to ( id of staff ) ) ) , and ( ( songs ) satisfied that ( ( songid of enzyme ) equal to ( songid of addresses ) ) ) ) , that have ( ( ( title of enzyme ) equal to ( badlands ) ) and ( ( stageposition of addresses ) equal to ( back ) ) )",
    "SELECT count(*) FROM country": "( the number of ( all items ) ) that belongs to ( country )",
    "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\";": "( kids ) that belongs to ( reservations ) , that have ( ( ( checkin ) equal to ( 2010-09-21 ) ) and ( ( firstname ) equal to ( damien ) ) and ( ( lastname ) equal to ( trachsel ) ) )",
    "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2": "( college ) that belongs to ( match season ) , grouped by ( college ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1": "( color description of member of club ) that belongs to ( ( products ) , and ( ( ref colors ) satisfied that ( ( color code of club ) equal to ( color code of member of club ) ) ) ) , grouped by ( color description of member of club ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM Ref_document_types": "( the number of ( all items ) ) that belongs to ( ref document types )",
    "SELECT clublocation FROM club WHERE clubname  =  \"Hopkins Student Enterprises\"": "( clublocation ) that belongs to ( club ) , that have ( ( clubname ) equal to ( hopkins student enterprises ) )",
    "SELECT count(DISTINCT allergy) FROM Allergy_type": "( the number of ( distinct ( allergy ) ) ) that belongs to ( allergy type )",
    "SELECT Fname FROM STUDENT ORDER BY Age DESC": "( fname ) that belongs to ( student ) , ordered by ( ( age ) in descending order )",
    "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")": "( fname ) , ( major ) that belongs to ( student ) , that have ( ( stuid ) not in ( ( stuid ) that belongs to ( has allergy ) , that have ( ( allergy ) equal to ( soy ) ) ) )",
    "SELECT COUNT (DISTINCT director) FROM movie": "( the number of ( distinct ( director ) ) ) that belongs to ( movie )",
    "SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Pass\"": "( date of enrolment of addresses ) that belongs to ( ( student course enrolment ) , and ( ( student tests taken ) satisfied that ( ( registration id of addresses ) equal to ( registration id of staff ) ) ) ) , that have ( ( test result of staff ) equal to ( pass ) )",
    "SELECT count(*) ,  country FROM airport GROUP BY country": "( the number of ( all items ) ) , ( country ) that belongs to ( airport ) , grouped by ( country )",
    "SELECT count(*) FROM Activity": "( the number of ( all items ) ) that belongs to ( activity )",
    "SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'": "( distinct ( pname ) ) that belongs to ( player ) , that have ( ( pname ) like ( '%a%' ) )",
    "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\"": "( the number of ( all items ) ) that belongs to ( ( station ) join ( ( trip ) ) join ( ( station ) ) , and ( ( trip ) satisfied that ( ( ( id of addresses ) equal to ( start station id of staff ) ) and ( ( id of staff ) equal to ( id of trip ) ) and ( ( id of enzyme ) equal to ( end station id of trip ) ) ) ) ) , that have ( ( ( city of addresses ) equal to ( mountain view ) ) and ( ( city of enzyme ) equal to ( palo alto ) ) )",
    "SELECT T1.Code ,  T1.Fate ,  T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID": "( code of addresses ) , ( fate of addresses ) , ( name of staff ) that belongs to ( ( mission ) , and ( ( ship ) satisfied that ( ( ship id of addresses ) equal to ( ship id of staff ) ) ) )",
    "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id JOIN products AS t3 ON t2.product_id  =  t3.product_id ORDER BY t3.product_price LIMIT 1": "( last name of club ) that belongs to ( ( staff ) , and ( ( complaints ) satisfied that ( ( staff id of club ) equal to ( staff id of member of club ) ) ) , and ( ( products ) satisfied that ( ( product id of member of club ) equal to ( product id of student ) ) ) ) , ordered by ( ( product price of student ) ) , limited to the top ( 1 )",
    "SELECT count(*) FROM team_franchise WHERE active = 'Y';": "( the number of ( all items ) ) that belongs to ( team franchise ) , that have ( ( active ) equal to ( 'y' ) )",
    "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'": "( name of addresses ) that belongs to ( ( enzyme ) , and ( ( medicine enzyme interaction ) satisfied that ( ( id of addresses ) equal to ( enzyme id of staff ) ) ) , and ( ( medicine ) satisfied that ( ( medicine id of staff ) equal to ( id of enzyme ) ) ) ) , that have ( ( ( name of enzyme ) equal to ( 'amisulpride' ) ) and ( ( interaction type of staff ) equal to ( 'inhibitor' ) ) )",
    "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'": "( i id ) that belongs to ( ( advisor ) , and ( ( student ) satisfied that ( ( s id of addresses ) equal to ( id of staff ) ) ) ) , that have ( ( dept name of staff ) equal to ( 'history' ) )",
    "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4": "( title of staff ) that belongs to ( ( rating ) , and ( ( movie ) satisfied that ( ( mid of addresses ) equal to ( mid of staff ) ) ) ) , that have ( ( stars of addresses ) equal to ( 3 ) ), and intersect with ( ( title of staff ) that belongs to ( ( rating ) , and ( ( movie ) satisfied that ( ( mid of addresses ) equal to ( mid of staff ) ) ) ) , that have ( ( stars of addresses ) equal to ( 4 ) ))",
    "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000": "( song name of staff ) that belongs to ( ( files ) , and ( ( song ) satisfied that ( ( f id of addresses ) equal to ( f id of staff ) ) ) ) , that have ( ( formats of addresses ) equal to ( mp3 ) ), and intersect with ( ( song name ) that belongs to ( song ) , that have ( ( resolution ) less than ( 1000 ) ))",
    "SELECT count(DISTINCT advisor) FROM Student": "( the number of ( distinct ( advisor ) ) ) that belongs to ( student )",
    "SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code": "( product type code ) , ( the maximum of ( product price ) ) , ( the minimum of ( product price ) ) that belongs to ( products ) , grouped by ( product type code )",
    "SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University';": "( the average of ( height of addresses ) ) that belongs to ( ( player ) , and ( ( player college ) satisfied that ( ( player id of addresses ) equal to ( player id of staff ) ) ) , and ( ( college ) satisfied that ( ( college id of enzyme ) equal to ( college id of staff ) ) ) ) , that have ( ( name full of enzyme ) equal to ( 'yale university' ) )",
    "SELECT name ,  TYPE ,  flag FROM ship ORDER BY built_year DESC LIMIT 1": "( name ) , ( type ) , ( flag ) that belongs to ( ship ) , ordered by ( ( built year ) in descending order ) , limited to the top ( 1 )",
    "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id": "( name of staff ) , ( the number of ( all items ) ) that belongs to ( ( race ) , and ( ( track ) satisfied that ( ( track id of addresses ) equal to ( track id of staff ) ) ) ) , grouped by ( track id of addresses )",
    "SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";": "( the sum of ( lesson time ) ) that belongs to ( ( lessons ) , and ( ( staff ) satisfied that ( ( staff id of addresses ) equal to ( staff id of staff ) ) ) ) , that have ( ( ( first name of staff ) equal to ( janessa ) ) and ( ( last name of staff ) equal to ( sawayn ) ) )",
    "SELECT avg(order_quantity) FROM order_items": "( the average of ( order quantity ) ) that belongs to ( order items )",
    "SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  \"James Cameron\")": "( title of staff ) , ( director of staff ) that belongs to ( ( rating ) , and ( ( movie ) satisfied that ( ( mid of addresses ) equal to ( mid of staff ) ) ) ) , that have ( ( stars of addresses ) greater than ( the average of ( stars of addresses ) ) that belongs to ( ( rating ) , and ( ( movie ) satisfied that ( ( mid of addresses ) equal to ( mid of staff ) ) ) ) , that have ( ( director of staff ) equal to ( james cameron ) ) )",
    "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.sex  =  \"F\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1": "( clubname of club ) that belongs to ( ( club ) , and ( ( member of club ) satisfied that ( ( clubid of club ) equal to ( clubid of member of club ) ) ) , and ( ( student ) satisfied that ( ( stuid of member of club ) equal to ( stuid of student ) ) ) ) , that have ( ( sex of student ) equal to ( f ) ) , grouped by ( clubname of club ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC": "( name ) that belongs to ( pilot ) , that have ( ( age ) less than or equal to ( 30 ) ) , ordered by ( ( name ) in descending order )",
    "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"USA\" AND t2.authorder  =  2 AND t1.lname  =  \"Turon\"": "( title of student ) that belongs to ( ( authors ) , and ( ( authorship ) satisfied that ( ( authid of club ) equal to ( authid of member of club ) ) ) , and ( ( papers ) satisfied that ( ( paperid of member of club ) equal to ( paperid of student ) ) ) , and ( ( inst ) satisfied that ( ( instid of member of club ) equal to ( instid of inst ) ) ) ) , that have ( ( ( country of inst ) equal to ( usa ) ) and ( ( authorder of member of club ) equal to ( 2 ) ) and ( ( lname of club ) equal to ( turon ) ) )",
    "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\"": "( distinct ( apt number of staff ) ) that belongs to ( ( apartment bookings ) , and ( ( apartments ) satisfied that ( ( apt id of addresses ) equal to ( apt id of staff ) ) ) ) , that have ( ( booking status code of addresses ) equal to ( confirmed ) )",
    "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1": "( dept name ) that belongs to ( course ) , grouped by ( dept name ) , ordered by ( ( the sum of ( credits ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  'PU_MAN' )": "( employee id ) , ( first name ) , ( last name ) , ( job id ) that belongs to ( employees ) , that have ( ( salary ) greater than ( the maximum of ( salary ) ) that belongs to ( employees ) , that have ( ( job id ) equal to ( 'pu man' ) ) )",
    "SELECT location_code ,  location_name FROM Ref_locations": "( location code ) , ( location name ) that belongs to ( ref locations )",
    "SELECT Song FROM volume ORDER BY Song": "( song ) that belongs to ( volume ) , ordered by ( ( song ) )",
    "SELECT headquarters ,  count(*) FROM company GROUP BY headquarters": "( headquarters ) , ( the number of ( all items ) ) that belongs to ( company ) , grouped by ( headquarters )",
    "SELECT CLASS FROM captain GROUP BY CLASS HAVING count(*)  >  2": "( class ) that belongs to ( captain ) , grouped by ( class ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )",
    "SELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000": "( aircraft of addresses ) , ( description of addresses ) that belongs to ( ( aircraft ) , and ( ( airport aircraft ) satisfied that ( ( aircraft id of addresses ) equal to ( aircraft id of staff ) ) ) , and ( ( airport ) satisfied that ( ( airport id of staff ) equal to ( airport id of enzyme ) ) ) ) , that have ( ( total passengers of enzyme ) greater than ( 10000000 ) )",
    "SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)": "( location ) , ( the number of ( all items ) ) that belongs to ( gas station ) , grouped by ( location ) , ordered by ( ( the number of ( all items ) ) )",
    "SELECT T3.Name FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID WHERE T2.Num_of_shops  >  50": "( name of enzyme ) that belongs to ( ( phone market ) , and ( ( market ) satisfied that ( ( market id of addresses ) equal to ( market id of staff ) ) ) , and ( ( phone ) satisfied that ( ( phone id of addresses ) equal to ( phone id of enzyme ) ) ) ) , that have ( ( num of shops of staff ) greater than ( 50 ) )",
    "SELECT Headquarters FROM company GROUP BY Headquarters ORDER BY COUNT(*) DESC LIMIT 1": "( headquarters ) that belongs to ( company ) , grouped by ( headquarters ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT product_name ,  product_id FROM products WHERE product_price BETWEEN 600 AND 700": "( product name ) , ( product id ) that belongs to ( products ) , that have ( ( product_price ) between ( 600 ) and ( 700 ) )",
    "SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)": "( role description ) that belongs to ( roles ) , that have ( ( role code ) equal to ( role code ) that belongs to ( users ) , that have ( ( user login ) equal to ( 1 ) ) , grouped by ( role code ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 ) )",
    "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)": "( title ) that belongs to ( movie ) , that have ( ( mid ) not in ( ( mid ) that belongs to ( rating ) ) )",
    "SELECT DISTINCT President_Vote ,  VICE_President_Vote FROM VOTING_RECORD": "( distinct ( president vote ) ) , ( vice president vote ) that belongs to ( voting record )",
    "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'": "( the number of ( all items ) ) that belongs to ( ( student ) , and ( ( lives in ) satisfied that ( ( stuid of addresses ) equal to ( stuid of staff ) ) ) , and ( ( dorm ) satisfied that ( ( dormid of enzyme ) equal to ( dormid of staff ) ) ) ) , that have ( ( gender of enzyme ) equal to ( 'm' ) )",
    "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num GROUP BY T2.stu_num HAVING count(*)  =  1": "( stu fname of addresses ) that belongs to ( ( student ) , and ( ( enroll ) satisfied that ( ( stu num of addresses ) equal to ( stu num of staff ) ) ) ) , grouped by ( stu num of staff ) , that have ( ( the number of ( all items ) ) equal to ( 1 ) )",
    "SELECT Name FROM city ORDER BY White DESC LIMIT 5": "( name ) that belongs to ( city ) , ordered by ( ( white ) in descending order ) , limited to the top ( 5 )",
    "SELECT T1.stu_fname ,  T1.stu_lname ,  T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code": "( stu fname of addresses ) , ( stu lname of addresses ) , ( crs description of trip ) that belongs to ( ( student ) , and ( ( enroll ) satisfied that ( ( stu num of addresses ) equal to ( stu num of staff ) ) ) , and ( ( class ) satisfied that ( ( class code of staff ) equal to ( class code of enzyme ) ) ) , and ( ( course ) satisfied that ( ( crs code of enzyme ) equal to ( crs code of trip ) ) ) )",
    "SELECT T1.statement_id ,  T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1": "( statement id of addresses ) , ( statement details of staff ) that belongs to ( ( accounts ) , and ( ( statements ) satisfied that ( ( statement id of addresses ) equal to ( statement id of staff ) ) ) ) , grouped by ( statement id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)": "( ssn of enzyme ) , ( name of enzyme ) that belongs to ( ( assignedto ) , and ( ( projects ) satisfied that ( ( project of addresses ) equal to ( code of staff ) ) ) , and ( ( scientists ) satisfied that ( ( scientist of addresses ) equal to ( ssn of enzyme ) ) ) ) , that have ( ( hours of staff ) equal to ( the maximum of ( hours ) ) that belongs to ( projects ) )",
    "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1": "( industry ) that belongs to ( companies ) , grouped by ( industry ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct": "( city of addresses ) that belongs to ( ( city ) , and ( ( temperature ) satisfied that ( ( city id of addresses ) equal to ( city id of staff ) ) ) ) , that have ( ( ( mar of staff ) less than ( jul of staff ) ) or ( ( mar of staff ) greater than ( oct of staff ) ) )",
    "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\"": "( the number of ( all items ) ) that belongs to ( ( mediatype ) , and ( ( track ) satisfied that ( ( mediatypeid of addresses ) equal to ( mediatypeid of staff ) ) ) ) , that have ( ( name of addresses ) equal to ( aac audio file ) )",
    "SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id": "( county name of addresses ) , ( the number of ( all items ) ) that belongs to ( ( county ) , and ( ( election ) satisfied that ( ( county id of addresses ) equal to ( district of staff ) ) ) ) , grouped by ( county id of addresses )",
    "SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION": "( position ) , ( the number of ( all items ) ) that belongs to ( match season ) , grouped by ( position )",
    "SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID WHERE T3.Age  <  34": "( fleet series of staff ) that belongs to ( ( pilot record ) , and ( ( aircraft ) satisfied that ( ( aircraft id of addresses ) equal to ( aircraft id of staff ) ) ) , and ( ( pilot ) satisfied that ( ( pilot id of addresses ) equal to ( pilot id of enzyme ) ) ) ) , that have ( ( age of enzyme ) less than ( 34 ) )",
    "SELECT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Nameless ,  Painless\"": "( fname of club ) , ( lname of club ) that belongs to ( ( authors ) , and ( ( authorship ) satisfied that ( ( authid of club ) equal to ( authid of member of club ) ) ) , and ( ( papers ) satisfied that ( ( paperid of member of club ) equal to ( paperid of student ) ) ) ) , that have ( ( title of student ) equal to ( nameless , painless ) )",
    "SELECT sum(revenue) FROM manufacturers WHERE headquarter  =  'Austin'": "( the sum of ( revenue ) ) that belongs to ( manufacturers ) , that have ( ( headquarter ) equal to ( 'austin' ) )",
    "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)": "( name ) that belongs to ( people ) , that have ( ( people_id ) not in ( ( people id ) that belongs to ( entrepreneur ) ) )",
    "SELECT customer_name FROM Customers ORDER BY date_became_customer LIMIT 5": "( customer name ) that belongs to ( customers ) , ordered by ( ( date became customer ) ) , limited to the top ( 5 )",
    "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Settlements": "( date claim made ) , ( date claim settled ) that belongs to ( settlements )",
    "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";": "( the number of ( all items ) ) that belongs to ( ( customers ) , and ( ( invoices ) satisfied that ( ( id of addresses ) equal to ( customer id of staff ) ) ) ) , that have ( ( ( first name of addresses ) equal to ( lucas ) ) and ( ( last name of addresses ) equal to ( mancini ) ) )",
    "SELECT product_name ,  product_category_code FROM products ORDER BY product_price DESC LIMIT 1": "( product name ) , ( product category code ) that belongs to ( products ) , ordered by ( ( product price ) in descending order ) , limited to the top ( 1 )",
    "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)": "( aircraft ) that belongs to ( aircraft ) , that have ( ( aircraft_id ) not in ( ( winning aircraft ) that belongs to ( match ) ) )",
    "SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')": "( name of addresses ) , ( age of addresses ) , ( job of addresses ) that belongs to ( ( person ) , and ( ( personfriend ) satisfied that ( ( name of addresses ) equal to ( name of staff ) ) ) ) , that have ( ( ( friend of staff ) equal to ( 'alice' ) ) and ( ( year of staff ) equal to ( the maximum of ( year ) ) that belongs to ( personfriend ) , that have ( ( friend ) equal to ( 'alice' ) ) ) )",
    "SELECT count(DISTINCT temporary_acting) FROM management": "( the number of ( distinct ( temporary acting ) ) ) that belongs to ( management )",
    "SELECT employee_id ,  first_name ,  last_name FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%T%' )": "( employee id ) , ( first name ) , ( last name ) that belongs to ( employees ) , that have ( ( department_id ) in ( ( department id ) that belongs to ( employees ) , that have ( ( first_name ) like ( '%t%' ) ) ) )",
    "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"": "( the number of ( all items ) ) that belongs to ( ( album ) , and ( ( artist ) satisfied that ( ( artistid of addresses ) equal to ( artistid of staff ) ) ) ) , that have ( ( name of staff ) equal to ( metallica ) )",
    "SELECT dorm_name FROM dorm WHERE gender  =  'F'": "( dorm name ) that belongs to ( dorm ) , that have ( ( gender ) equal to ( 'f' ) )",
    "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\"": "( customer name of club ) that belongs to ( ( customers ) , and ( ( first notification of loss ) satisfied that ( ( customer id of club ) equal to ( customer id of member of club ) ) ) , and ( ( services ) satisfied that ( ( service id of member of club ) equal to ( service id of student ) ) ) ) , that have ( ( ( service name of student ) equal to ( close a policy ) ) or ( ( service name of student ) equal to ( upgrade a policy ) ) )",
    "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*)  >  2": "( advisor ) that belongs to ( student ) , grouped by ( advisor ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )",
    "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"": "( the number of ( all items ) ) that belongs to ( has allergy ) , that have ( ( allergy ) equal to ( cat ) )",
    "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1": "( name of staff ) that belongs to ( ( race ) , and ( ( track ) satisfied that ( ( track id of addresses ) equal to ( track id of staff ) ) ) ) , grouped by ( track id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM performance": "( the number of ( all items ) ) that belongs to ( performance )",
    "SELECT StuID FROM Student WHERE Advisor  =  1121": "( stuid ) that belongs to ( student ) , that have ( ( advisor ) equal to ( 1121 ) )",
    "SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name": "( the average of ( price of addresses ) ) , ( name of staff ) that belongs to ( ( products ) , and ( ( manufacturers ) satisfied that ( ( manufacturer of addresses ) equal to ( code of staff ) ) ) ) , grouped by ( name of staff )",
    "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010": "( course id ) that belongs to ( section ) , that have ( ( ( semester ) equal to ( 'fall' ) ) and ( ( year ) equal to ( 2009 ) ) ), and except that ( ( course id ) that belongs to ( section ) , that have ( ( ( semester ) equal to ( 'spring' ) ) and ( ( year ) equal to ( 2010 ) ) ))",
    "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"": "( the average of ( age of student ) ) that belongs to ( ( club ) , and ( ( member of club ) satisfied that ( ( clubid of club ) equal to ( clubid of member of club ) ) ) , and ( ( student ) satisfied that ( ( stuid of member of club ) equal to ( stuid of student ) ) ) ) , that have ( ( clubname of club ) equal to ( tennis club ) )",
    "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)": "( name ) that belongs to ( technician ) , that have ( ( technician_id ) not in ( ( technician id ) that belongs to ( repair assignment ) ) )",
    "SELECT origin ,  count(*) FROM Flight GROUP BY origin": "( origin ) , ( the number of ( all items ) ) that belongs to ( flight ) , grouped by ( origin )",
    "SELECT product_type_code ,  product_name FROM products WHERE product_price  >  1000 OR product_price  <  500": "( product type code ) , ( product name ) that belongs to ( products ) , that have ( ( ( product price ) greater than ( 1000 ) ) or ( ( product price ) less than ( 500 ) ) )",
    "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1": "( payment method code ) that belongs to ( payments ) , grouped by ( payment method code ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( 1 )",
    "SELECT premises_type ,  count(*) FROM premises GROUP BY premises_type": "( premises type ) , ( the number of ( all items ) ) that belongs to ( premises ) , grouped by ( premises type )",
    "SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID": "( name of addresses ) , ( height of staff ) that belongs to ( ( climber ) , and ( ( mountain ) satisfied that ( ( mountain id of addresses ) equal to ( mountain id of staff ) ) ) )",
    "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1": "( company of addresses ) that belongs to ( ( entrepreneur ) , and ( ( people ) satisfied that ( ( people id of addresses ) equal to ( people id of staff ) ) ) ) , ordered by ( ( height of staff ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) ,  T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T2.dept_code  =  T3.dept_code GROUP BY T3.school_code": "( the number of ( all items ) ) , ( school code of enzyme ) that belongs to ( ( class ) , and ( ( course ) satisfied that ( ( crs code of addresses ) equal to ( crs code of staff ) ) ) , and ( ( department ) satisfied that ( ( dept code of staff ) equal to ( dept code of enzyme ) ) ) ) , grouped by ( school code of enzyme )",
    "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1": "( dname of addresses ) that belongs to ( ( department ) , and ( ( member of ) satisfied that ( ( dno of addresses ) equal to ( dno of staff ) ) ) ) , grouped by ( dno of staff ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( 1 )",
    "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  \"Clara\")": "( first name ) , ( last name ) , ( hire date ) that belongs to ( employees ) , that have ( ( department id ) equal to ( department id ) that belongs to ( employees ) , that have ( ( first name ) equal to ( clara ) ) )",
    "SELECT product_details FROM products WHERE product_details LIKE \"%Latte%\" OR product_details LIKE \"%Americano%\"": "( product details ) that belongs to ( products ) , that have ( ( ( product details ) like ( %latte% ) ) or ( ( product details ) like ( %americano% ) ) )",
    "SELECT phone ,  room ,  building FROM Faculty WHERE Fname  =  \"Jerry\" AND Lname  =  \"Prince\"": "( phone ) , ( room ) , ( building ) that belongs to ( faculty ) , that have ( ( ( fname ) equal to ( jerry ) ) and ( ( lname ) equal to ( prince ) ) )",
    "SELECT gname ,  gtype FROM Video_games ORDER BY gname": "( gname ) , ( gtype ) that belongs to ( video games ) , ordered by ( ( gname ) )",
    "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"lead\"": "( the number of ( distinct ( title ) ) ) that belongs to ( ( vocals ) , and ( ( songs ) satisfied that ( ( songid of addresses ) equal to ( songid of staff ) ) ) ) , that have ( ( type ) equal to ( lead ) )",
    "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1": "( county of addresses ) that belongs to ( ( appellations ) , and ( ( wine ) satisfied that ( ( appelation of addresses ) equal to ( appelation of staff ) ) ) ) , that have ( ( score of staff ) greater than ( 90 ) ) , grouped by ( county of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.onscholarship  =  'Y'": "( lname of staff ) that belongs to ( ( sportsinfo ) , and ( ( student ) satisfied that ( ( stuid of addresses ) equal to ( stuid of staff ) ) ) ) , that have ( ( onscholarship of addresses ) equal to ( 'y' ) )",
    "SELECT count(*) FROM chip_model WHERE wifi  =  'No'": "( the number of ( all items ) ) that belongs to ( chip model ) , that have ( ( wifi ) equal to ( 'no' ) )",
    "SELECT count(*) FROM Documents_with_expenses": "( the number of ( all items ) ) that belongs to ( documents with expenses )",
    "SELECT count(*) FROM Reviewer": "( the number of ( all items ) ) that belongs to ( reviewer )",
    "SELECT count(DISTINCT dept_address) ,  school_code FROM department GROUP BY school_code": "( the number of ( distinct ( dept address ) ) ) , ( school code ) that belongs to ( department ) , grouped by ( school code )",
    "SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )": "( name ) that belongs to ( person ) , that have ( ( ( gender ) equal to ( 'male' ) ) and ( ( age ) equal to ( the minimum of ( age ) ) that belongs to ( person ) , that have ( ( gender ) equal to ( 'male' ) ) ) )",
    "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  \"Orange\" AND T2.year  >=  2000 GROUP BY T1.campus": "( campus of addresses ) , ( the sum of ( degrees of staff ) ) that belongs to ( ( campuses ) , and ( ( degrees ) satisfied that ( ( id of addresses ) equal to ( campus of staff ) ) ) ) , that have ( ( ( county of addresses ) equal to ( orange ) ) and ( ( year of staff ) greater than or equal to ( 2000 ) ) ) , grouped by ( campus of addresses )",
    "SELECT count(*) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\";": "( the number of ( all items ) ) that belongs to ( student , and ( visits restaurant satisfied that ( ( stuid of student ) equal to ( stuid of visits restaurant ) ) ) , and ( restaurant satisfied that ( ( resid of visits restaurant ) equal to ( resid of restaurant ) ) ) ) , that have ( ( ( fname of student ) equal to ( linda ) ) and ( ( lname of student ) equal to ( smith ) ) and ( ( resname of restaurant ) equal to ( subway ) ) )",
    "SELECT count(DISTINCT product_type_code) FROM products_for_hire": "( the number of ( distinct ( product type code ) ) ) that belongs to ( products for hire )",
    "SELECT count(*) FROM customers": "( the number of ( all items ) ) that belongs to ( customers )",
    "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"": "( the number of ( all items ) ) that belongs to ( customer ) , that have ( ( email ) like ( %gmail.com% ) )",
    "SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  \"null\"": "( first name ) , ( last name ) , ( salary ) that belongs to ( employees ) , that have ( ( commission_pct ) is missing )",
    "SELECT Age FROM people ORDER BY Height DESC LIMIT 1": "( age ) that belongs to ( people ) , ordered by ( ( height ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1961": "( name first of addresses ) , ( name last of addresses ) that belongs to ( ( player ) join ( ( player award ) ) ) , that have ( ( year of staff ) equal to ( 1960 ) ), and intersect with ( ( name first of addresses ) , ( name last of addresses ) that belongs to ( ( player ) join ( ( player award ) ) ) , that have ( ( year of staff ) equal to ( 1961 ) ))",
    "SELECT Description FROM aircraft": "( description ) that belongs to ( aircraft )",
    "SELECT job_title FROM jobs WHERE min_salary  >  9000": "( job title ) that belongs to ( jobs ) , that have ( ( min salary ) greater than ( 9000 ) )",
    "SELECT avg(rating) ,  max(rating) FROM review": "( the average of ( rating ) ) , ( the maximum of ( rating ) ) that belongs to ( review )",
    "SELECT avg(Age) FROM STUDENT WHERE Sex  =  \"F\"": "( the average of ( age ) ) that belongs to ( student ) , that have ( ( sex ) equal to ( f ) )",
    "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"": "( the number of ( distinct ( instrument ) ) ) that belongs to ( ( instruments ) , and ( ( band ) satisfied that ( ( bandmateid of addresses ) equal to ( id of staff ) ) ) ) , that have ( ( lastname of staff ) equal to ( heilo ) )",
    "SELECT count(*) FROM products WHERE price >= 180": "( the number of ( all items ) ) that belongs to ( products ) , that have ( ( price ) greater than or equal to ( 180 ) )",
    "SELECT * FROM  departments WHERE department_name  =  'Marketing'": "all items that belongs to ( departments ) , that have ( ( department name ) equal to ( 'marketing' ) )",
    "SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.height  >  4000": "( id of addresses ) , ( name of addresses ) that belongs to ( ( mountain ) , and ( ( photos ) satisfied that ( ( id of addresses ) equal to ( mountain id of staff ) ) ) ) , that have ( ( height of addresses ) greater than ( 4000 ) )",
    "SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student": "( the number of ( distinct ( major ) ) ) , ( the number of ( distinct ( city code ) ) ) that belongs to ( student )",
    "SELECT count(*) FROM park WHERE city = 'Atlanta';": "( the number of ( all items ) ) that belongs to ( park ) , that have ( ( city ) equal to ( 'atlanta' ) )",
    "SELECT Date ,  Name ,  venue FROM event ORDER BY Event_Attendance DESC": "( date ) , ( name ) , ( venue ) that belongs to ( event ) , ordered by ( ( event attendance ) in descending order )",
    "SELECT Accreditation_level FROM phone GROUP BY Accreditation_level HAVING count(*)  >  3": "( accreditation level ) that belongs to ( phone ) , grouped by ( accreditation level ) , that have ( ( the number of ( all items ) ) greater than ( 3 ) )",
    "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1": "( customer id of addresses ) , ( customer first name of staff ) , ( customer last name of staff ) that belongs to ( ( accounts ) , and ( ( customers ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , grouped by ( customer id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid": "( name of staff ) , ( the number of ( all items ) ) that belongs to ( ( flight ) , and ( ( aircraft ) satisfied that ( ( aid of addresses ) equal to ( aid of staff ) ) ) ) , grouped by ( aid of addresses )",
    "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \"Suite 634\"": "( booking status code of addresses ) that belongs to ( ( apartment bookings ) , and ( ( apartments ) satisfied that ( ( apt id of addresses ) equal to ( apt id of staff ) ) ) ) , that have ( ( apt number of staff ) equal to ( suite 634 ) )",
    "SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT 1": "( publisher ) that belongs to ( book club ) , grouped by ( publisher ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT dept_name FROM department ORDER BY budget LIMIT 1": "( dept name ) that belongs to ( department ) , ordered by ( ( budget ) ) , limited to the top ( 1 )",
    "SELECT name FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')": "( name ) that belongs to ( manufacturers ) , that have ( ( revenue ) less than ( the minimum of ( revenue ) ) that belongs to ( manufacturers ) , that have ( ( headquarter ) equal to ( 'austin' ) ) )",
    "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_type_code  =  \"Duplex\"": "( booking start date of addresses ) , ( booking start date of addresses ) that belongs to ( ( apartment bookings ) , and ( ( apartments ) satisfied that ( ( apt id of addresses ) equal to ( apt id of staff ) ) ) ) , that have ( ( apt type code of staff ) equal to ( duplex ) )",
    "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Jeremy\" AND t1.lname  =  \"Gibbons\"": "( title of student ) that belongs to ( ( authors ) , and ( ( authorship ) satisfied that ( ( authid of club ) equal to ( authid of member of club ) ) ) , and ( ( papers ) satisfied that ( ( paperid of member of club ) equal to ( paperid of student ) ) ) ) , that have ( ( ( fname of club ) equal to ( jeremy ) ) and ( ( lname of club ) equal to ( gibbons ) ) )",
    "SELECT allergytype FROM Allergy_type WHERE allergy  =  \"Cat\"": "( allergytype ) that belongs to ( allergy type ) , that have ( ( allergy ) equal to ( cat ) )",
    "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1": "( the average of ( access count ) ) that belongs to ( documents ) , grouped by ( document structure code ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'": "( the number of ( all items ) ) that belongs to ( professor ) , that have ( ( ( prof high degree ) equal to ( 'ph.d.' ) ) or ( ( prof high degree ) equal to ( 'ma' ) ) )",
    "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1": "( name of addresses ) that belongs to ( ( accounts ) , and ( ( checking ) satisfied that ( ( custid of addresses ) equal to ( custid of staff ) ) ) , and ( ( savings ) satisfied that ( ( custid of addresses ) equal to ( custid of enzyme ) ) ) ) , ordered by ( ( ( balance of staff ) add ( balance of enzyme ) ) ) , limited to the top ( 1 )",
    "SELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1": "( claim id of addresses ) , ( date claim made of addresses ) , ( date claim settled of addresses ) that belongs to ( ( claims ) , and ( ( settlements ) satisfied that ( ( claim id of addresses ) equal to ( claim id of staff ) ) ) ) , grouped by ( claim id of addresses ) , that have ( ( the number of ( all items ) ) equal to ( 1 ) )",
    "SELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id": "( member name of addresses ) , ( party name of staff ) that belongs to ( ( member ) , and ( ( party ) satisfied that ( ( party id of addresses ) equal to ( party id of staff ) ) ) )",
    "SELECT payment_method_code ,  count(*) FROM customers GROUP BY payment_method_code": "( payment method code ) , ( the number of ( all items ) ) that belongs to ( customers ) , grouped by ( payment method code )",
    "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1": "( school code of addresses ) that belongs to ( ( department ) , and ( ( professor ) satisfied that ( ( dept code of addresses ) equal to ( dept code of staff ) ) ) ) , grouped by ( school code of addresses ) , ordered by ( ( the number of ( all items ) ) ) , limited to the top ( 1 )",
    "SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1": "( name of addresses ) , ( name of enzyme ) that belongs to ( ( physician ) , and ( ( affiliated with ) satisfied that ( ( employeeid of addresses ) equal to ( physician of staff ) ) ) , and ( ( department ) satisfied that ( ( department of staff ) equal to ( departmentid of enzyme ) ) ) ) , that have ( ( primaryaffiliation of staff ) equal to ( 1 ) )",
    "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'": "( the number of ( distinct ( course id ) ) ) that belongs to ( course ) , that have ( ( dept name ) equal to ( 'physics' ) )",
    "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems'": "( stu fname of addresses ) that belongs to ( ( student ) , and ( ( enroll ) satisfied that ( ( stu num of addresses ) equal to ( stu num of staff ) ) ) , and ( ( class ) satisfied that ( ( class code of staff ) equal to ( class code of enzyme ) ) ) , and ( ( course ) satisfied that ( ( crs code of enzyme ) equal to ( crs code of trip ) ) ) , and ( ( department ) satisfied that ( ( dept code of department ) equal to ( dept code of trip ) ) ) ) , that have ( ( dept name of department ) equal to ( 'accounting' ) ), and intersect with ( ( stu fname of addresses ) that belongs to ( ( student ) , and ( ( enroll ) satisfied that ( ( stu num of addresses ) equal to ( stu num of staff ) ) ) , and ( ( class ) satisfied that ( ( class code of staff ) equal to ( class code of enzyme ) ) ) , and ( ( course ) satisfied that ( ( crs code of enzyme ) equal to ( crs code of trip ) ) ) , and ( ( department ) satisfied that ( ( dept code of department ) equal to ( dept code of trip ) ) ) ) , that have ( ( dept name of department ) equal to ( 'computer info. systems' ) ))",
    "SELECT T1.party_name ,  T2.region_name FROM party AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id": "( party name of addresses ) , ( region name of staff ) that belongs to ( ( party ) , and ( ( region ) satisfied that ( ( region id of addresses ) equal to ( region id of staff ) ) ) )",
    "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  \"null\"": "( distinct ( name ) ) that belongs to ( ( reviewer ) , and ( ( rating ) satisfied that ( ( rid of addresses ) equal to ( rid of staff ) ) ) ) , that have ( ( ratingdate ) is missing )",
    "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;": "( first name of addresses ) , ( last name of addresses ) , ( the number of ( all items ) ) that belongs to ( ( customers ) , and ( ( invoices ) satisfied that ( ( customer id of staff ) equal to ( id of addresses ) ) ) ) , grouped by ( id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 10 )",
    "SELECT count(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.type  =  \"Studio\"": "( the number of ( distinct ( title of enzyme ) ) ) that belongs to ( ( albums ) , and ( ( tracklists ) satisfied that ( ( aid of addresses ) equal to ( albumid of staff ) ) ) , and ( ( songs ) satisfied that ( ( songid of staff ) equal to ( songid of enzyme ) ) ) ) , that have ( ( type of club ) equal to ( studio ) )",
    "SELECT name FROM projects WHERE hours  >  (SELECT avg(hours) FROM projects)": "( name ) that belongs to ( projects ) , that have ( ( hours ) greater than ( the average of ( hours ) ) that belongs to ( projects ) )",
    "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1": "( sex of club ) that belongs to ( ( people ) , and ( ( candidate ) satisfied that ( ( people id of club ) equal to ( people id of member of club ) ) ) ) , grouped by ( sex of club ) , ordered by ( ( the average of ( unsure rate of member of club ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id": "( student id of addresses ) , ( course name of staff ) that belongs to ( ( student course registrations ) , and ( ( courses ) satisfied that ( ( course id of addresses ) equal to ( course id of staff ) ) ) )",
    "SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC": "( apt type code ) , ( the number of ( all items ) ) that belongs to ( apartments ) , grouped by ( apt type code ) , ordered by ( ( the number of ( all items ) ) in ascending order )",
    "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";": "( address ) that belongs to ( employees ) , that have ( ( ( first name ) equal to ( nancy ) ) and ( ( last name ) equal to ( edwards ) ) )",
    "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1": "( department id ) that belongs to ( staff department assignments ) , grouped by ( department id ) , ordered by ( ( the number of ( all items ) ) ) , limited to the top ( 1 )",
    "SELECT DISTINCT product_details FROM products": "( distinct ( product details ) ) that belongs to ( products )",
    "SELECT yearid ,  count(*) FROM hall_of_fame GROUP BY yearid;": "( yearid ) , ( the number of ( all items ) ) that belongs to ( hall of fame ) , grouped by ( yearid )",
    "SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id": "( employee id ) , ( the maximum of ( end date ) ) that belongs to ( job history ) , grouped by ( employee id )",
    "SELECT T1.name ,  T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID": "( name of addresses ) , ( player id of staff ) that belongs to ( ( club ) , and ( ( player ) satisfied that ( ( club id of addresses ) equal to ( club id of staff ) ) ) )",
    "SELECT TYPE ,  count(*) FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1": "( type ) , ( the number of ( all items ) ) that belongs to ( mill ) , grouped by ( type ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT avg(salary) ,  max(salary) FROM Employee": "( the average of ( salary ) ) , ( the maximum of ( salary ) ) that belongs to ( employee )",
    "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\"": "( faculty ) that belongs to ( ( faculty ) , and ( ( campuses ) satisfied that ( ( campus of addresses ) equal to ( id of staff ) ) ) ) , that have ( ( ( year of addresses ) equal to ( 2002 ) ) and ( ( campus of staff ) equal to ( long beach state university ) ) )",
    "SELECT T1.staff_name ,  T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1": "( staff name of addresses ) , ( job title code of staff ) that belongs to ( ( staff ) , and ( ( staff department assignments ) satisfied that ( ( staff id of addresses ) equal to ( staff id of staff ) ) ) ) , ordered by ( ( date assigned to of staff ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5": "( director of addresses ) , ( title of addresses ) that belongs to ( ( movie ) , and ( ( rating ) satisfied that ( ( mid of addresses ) equal to ( mid of staff ) ) ) ) , that have ( ( stars of staff ) equal to ( 5 ) )",
    "SELECT organization_name FROM organizations WHERE organization_name LIKE \"%Party%\"": "( organization name ) that belongs to ( organizations ) , that have ( ( organization_name ) like ( %party% ) )",
    "SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"": "( the maximum of ( sales billion ) ) , ( the minimum of ( sales billion ) ) that belongs to ( companies ) , that have ( ( industry ) not equal to ( banking ) )",
    "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")": "( the number of ( all items ) ) that belongs to ( student ) , that have ( ( ( age ) greater than ( 18 ) ) and ( ( stuid ) not in ( ( stuid ) that belongs to ( ( has allergy ) , and ( ( allergy type ) satisfied that ( ( allergy of addresses ) equal to ( allergy of staff ) ) ) ) , that have ( ( ( allergytype of staff ) equal to ( food ) ) or ( ( allergytype of staff ) equal to ( animal ) ) ) ) ) )",
    "SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'A Puzzling Parallax'": "( name of enzyme ) that belongs to ( ( assignedto ) , and ( ( projects ) satisfied that ( ( project of addresses ) equal to ( code of staff ) ) ) , and ( ( scientists ) satisfied that ( ( scientist of addresses ) equal to ( ssn of enzyme ) ) ) ) , that have ( ( name of staff ) equal to ( 'matter of time' ) ), and intersect with ( ( name of enzyme ) that belongs to ( ( assignedto ) , and ( ( projects ) satisfied that ( ( project of addresses ) equal to ( code of staff ) ) ) , and ( ( scientists ) satisfied that ( ( scientist of addresses ) equal to ( ssn of enzyme ) ) ) ) , that have ( ( name of staff ) equal to ( 'a puzzling parallax' ) ))",
    "SELECT service_name FROM services ORDER BY service_name": "( service name ) that belongs to ( services ) , ordered by ( ( service name ) )",
    "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000": "( theme of staff ) that belongs to ( ( city ) , and ( ( farm competition ) satisfied that ( ( city id of addresses ) equal to ( host city id of staff ) ) ) ) , that have ( ( population of addresses ) greater than ( 1000 ) )",
    "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Initial Application'": "( grant start date of addresses ) that belongs to ( ( grants ) , and ( ( documents ) satisfied that ( ( grant id of addresses ) equal to ( grant id of staff ) ) ) , and ( ( document types ) satisfied that ( ( document type code of staff ) equal to ( document type code of enzyme ) ) ) ) , that have ( ( document description of enzyme ) equal to ( 'regular' ) ), and intersect with ( ( grant start date of addresses ) that belongs to ( ( grants ) , and ( ( documents ) satisfied that ( ( grant id of addresses ) equal to ( grant id of staff ) ) ) , and ( ( document types ) satisfied that ( ( document type code of staff ) equal to ( document type code of enzyme ) ) ) ) , that have ( ( document description of enzyme ) equal to ( 'initial application' ) ))",
    "SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" EXCEPT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";": "( document id ) that belongs to ( documents ) , that have ( ( ( document status code ) equal to ( done ) ) and ( ( document type code ) equal to ( paper ) ) ), and except that ( ( document id ) that belongs to ( documents , and ( ref shipping agents satisfied that ( ( shipping agent code of documents ) equal to ( shipping agent code of ref shipping agents ) ) ) ) , that have ( ( shipping agent name of ref shipping agents ) equal to ( usps ) ))",
    "SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id": "( member name ) that belongs to ( member ), and except that ( ( member name of addresses ) that belongs to ( ( member ) , and ( ( party events ) satisfied that ( ( member id of addresses ) equal to ( member in charge id of staff ) ) ) ))",
    "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*)  >  4": "( policy type code ) that belongs to ( available policies ) , grouped by ( policy type code ) , that have ( ( the number of ( all items ) ) greater than ( 4 ) )",
    "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'": "( name of addresses ) that belongs to ( ( instructor ) , and ( ( teaches ) satisfied that ( ( id of addresses ) equal to ( id of staff ) ) ) , and ( ( course ) satisfied that ( ( course id of staff ) equal to ( course id of enzyme ) ) ) ) , that have ( ( title of enzyme ) equal to ( 'c programming' ) )",
    "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'": "( the number of ( all items ) ) that belongs to ( ( airports ) , and ( ( routes ) satisfied that ( ( apid of addresses ) equal to ( dst apid of staff ) ) ) ) , that have ( ( country ) equal to ( 'canada' ) )",
    "SELECT Name FROM artwork ORDER BY Name ASC": "( name ) that belongs to ( artwork ) , ordered by ( ( name ) in ascending order )",
    "SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID": "( name of staff ) , ( elimination move of addresses ) that belongs to ( ( elimination ) , and ( ( wrestler ) satisfied that ( ( wrestler id of addresses ) equal to ( wrestler id of staff ) ) ) )",
    "SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\"": "( distinct ( nominee ) ) that belongs to ( musical ) , that have ( ( award ) not equal to ( tony award ) )",
    "SELECT count(DISTINCT POSITION) FROM player": "( the number of ( distinct ( position ) ) ) that belongs to ( player )",
    "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'striker'": "( state of addresses ) that belongs to ( ( college ) , and ( ( tryout ) satisfied that ( ( cname of addresses ) equal to ( cname of staff ) ) ) ) , that have ( ( ppos of staff ) equal to ( 'striker' ) )",
    "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  (SELECT avg(rating) FROM review)": "( title of addresses ) that belongs to ( ( item ) , and ( ( review ) satisfied that ( ( i id of addresses ) equal to ( i id of staff ) ) ) ) , that have ( ( rating of staff ) greater than ( the average of ( rating ) ) that belongs to ( review ) )",
    "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'": "( dorm name of addresses ) that belongs to ( ( dorm ) , and ( ( has amenity ) satisfied that ( ( dormid of addresses ) equal to ( dormid of staff ) ) ) , and ( ( dorm amenity ) satisfied that ( ( amenid of staff ) equal to ( amenid of enzyme ) ) ) ) , that have ( ( amenity name of enzyme ) equal to ( 'tv lounge' ) ), and except that ( ( dorm name of addresses ) that belongs to ( ( dorm ) , and ( ( has amenity ) satisfied that ( ( dormid of addresses ) equal to ( dormid of staff ) ) ) , and ( ( dorm amenity ) satisfied that ( ( amenid of staff ) equal to ( amenid of enzyme ) ) ) ) , that have ( ( amenity name of enzyme ) equal to ( 'study room' ) ))",
    "SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date  =  \"08/30/2015\"": "( distinct ( president vote ) ) that belongs to ( voting record ) , that have ( ( registration date ) equal to ( 08/30/2015 ) )",
    "SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1": "( eid ) , ( name ) that belongs to ( employee ) , ordered by ( ( salary ) in descending order ) , limited to the top ( 1 )",
    "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank": "( name of enzyme ) that belongs to ( ( repair assignment ) , and ( ( machine ) satisfied that ( ( machine id of addresses ) equal to ( machine id of staff ) ) ) , and ( ( technician ) satisfied that ( ( technician id of addresses ) equal to ( technician id of enzyme ) ) ) ) , ordered by ( ( quality rank of staff ) )",
    "SELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings": "( booking start date ) , ( booking end date ) that belongs to ( apartment bookings )",
    "SELECT rank ,  Fname ,  Lname FROM Faculty": "( rank ) , ( fname ) , ( lname ) that belongs to ( faculty )",
    "SELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE T1.EMP_LNAME  =  'Graztevski'": "( the number of ( all items ) ) that belongs to ( ( employee ) , and ( ( class ) satisfied that ( ( emp num of addresses ) equal to ( prof num of staff ) ) ) ) , that have ( ( emp lname of addresses ) equal to ( 'graztevski' ) )",
    "SELECT count(*) FROM enzyme": "( the number of ( all items ) ) that belongs to ( enzyme )",
    "SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720": "( f id ) that belongs to ( files ) , that have ( ( formats ) equal to ( mp4 ) ) and ( f id ) that belongs to ( song ) , that have ( ( resolution ) greater than ( 720 ) )",
    "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20": "( position ) that belongs to ( player ) , grouped by ( name ) , that have ( ( the average of ( points ) ) greater than or equal to ( 20 ) )",
    "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC": "( id of addresses ) , ( name of addresses ) , ( fda approved of addresses ) that belongs to ( ( medicine ) , and ( ( medicine enzyme interaction ) satisfied that ( ( medicine id of staff ) equal to ( id of addresses ) ) ) ) , grouped by ( id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order )",
    "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Brazil\"": "( distinct ( firstname of addresses ) ) that belongs to ( ( customer ) , and ( ( invoice ) satisfied that ( ( customerid of addresses ) equal to ( customerid of staff ) ) ) ) , that have ( ( country of addresses ) equal to ( brazil ) )",
    "SELECT Police_force ,  COUNT(*) FROM county_public_safety GROUP BY Police_force": "( police force ) , ( the number of ( all items ) ) that belongs to ( county public safety ) , grouped by ( police force )",
    "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)": "( catalog entry name of club ) that belongs to ( ( catalog contents ) , and ( ( catalog contents additional attributes ) satisfied that ( ( catalog entry id of club ) equal to ( catalog entry id of member of club ) ) ) ) , that have ( ( attribute value of member of club ) equal to ( attribute value ) that belongs to ( catalog contents additional attributes ) , grouped by ( attribute value ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 ) )",
    "SELECT Destroyed_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID": "( destroyed by employee id ) , ( the number of ( all items ) ) that belongs to ( documents to be destroyed ) , grouped by ( destroyed by employee id )",
    "SELECT first_name ,  last_name ,  department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)": "( first name ) , ( last name ) , ( department id ) that belongs to ( employees ) , that have ( ( salary ) in ( ( the minimum of ( salary ) ) that belongs to ( employees ) , grouped by ( department id ) ) )",
    "SELECT avg(age) ,  min(age) ,  CLASS FROM captain GROUP BY CLASS": "( the average of ( age ) ) , ( the minimum of ( age ) ) , ( class ) that belongs to ( captain ) , grouped by ( class )",
    "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation": "( the sum of ( enrollment ) ) , ( affiliation ) that belongs to ( university ) , that have ( ( founded ) greater than ( 1850 ) ) , grouped by ( affiliation )",
    "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8": "( the number of ( all items ) ) that belongs to ( weather ) , that have ( ( ( mean humidity ) greater than ( 50 ) ) and ( ( mean visibility miles ) greater than ( 8 ) ) )",
    "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'": "( roomname of staff ) that belongs to ( ( reservations ) , and ( ( rooms ) satisfied that ( ( room of addresses ) equal to ( roomid of staff ) ) ) ) , that have ( ( firstname ) like ( '%roy%' ) )",
    "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id": "( first name ) that belongs to ( staff ), and except that ( ( first name of staff ) that belongs to ( ( lessons ) , and ( ( staff ) satisfied that ( ( staff id of addresses ) equal to ( staff id of staff ) ) ) ))",
    "SELECT Name FROM editor WHERE Age  =  24 OR Age  =  25": "( name ) that belongs to ( editor ) , that have ( ( ( age ) equal to ( 24 ) ) or ( ( age ) equal to ( 25 ) ) )",
    "SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id": "( customer first name ) , ( customer last name ) that belongs to ( customers ), and except that ( ( customer first name of addresses ) , ( customer last name of addresses ) that belongs to ( ( customers ) , and ( ( accounts ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ))",
    "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)": "( the average of ( long ) ) that belongs to ( station ) , that have ( ( id ) not in ( ( station id ) that belongs to ( status ) , grouped by ( station id ) , that have ( ( the maximum of ( bikes available ) ) greater than ( 10 ) ) ) )",
    "SELECT count(*) FROM ( SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' );": "( the number of ( all items ) ) that belongs to ( \"l all items that belongs to ( ( postseason ) , and ( ( team ) satisfied that ( ( team id winner of addresses ) equal to ( team id br of staff ) ) ) ) , that have ( ( name of staff ) equal to ( 'boston red stockings' ) ) and all items that belongs to ( ( postseason ) , and ( ( team ) satisfied that ( ( team id loser of addresses ) equal to ( team id br of staff ) ) ) ) , that have ( ( name of staff ) equal to ( 'boston red stockings' ) ) r\" )",
    "SELECT name ,  email FROM user_profiles WHERE followers  >  1000": "( name ) , ( email ) that belongs to ( user profiles ) , that have ( ( followers ) greater than ( 1000 ) )",
    "SELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  \"Product Failure\" GROUP BY complaint_status_code": "( complaint status code ) , ( the number of ( all items ) ) that belongs to ( complaints ) , that have ( ( complaint type code ) equal to ( product failure ) ) , grouped by ( complaint status code )",
    "SELECT clubdesc FROM club WHERE clubname  =  \"Tennis Club\"": "( clubdesc ) that belongs to ( club ) , that have ( ( clubname ) equal to ( tennis club ) )",
    "SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1": "( patient ) that belongs to ( stay ) , that have ( ( room ) equal to ( 111 ) ) , ordered by ( ( staystart ) in descending order ) , limited to the top ( 1 )",
    "SELECT name ,  age FROM people WHERE is_male  =  'T' AND people_id NOT IN (SELECT male_id FROM wedding)": "( name ) , ( age ) that belongs to ( people ) , that have ( ( ( is male ) equal to ( 't' ) ) and ( ( people id ) not in ( ( male id ) that belongs to ( wedding ) ) ) )",
    "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY overall_rating DESC LIMIT 3": "( distinct ( player name of addresses ) ) that belongs to ( ( player ) , and ( ( player attributes ) satisfied that ( ( player api id of addresses ) equal to ( player api id of staff ) ) ) ) , ordered by ( ( overall rating ) in descending order ) , limited to the top ( 3 )",
    "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;": "( first name of addresses ) , ( last name of addresses ) that belongs to ( ( customers ) , and ( ( invoices ) satisfied that ( ( customer id of staff ) equal to ( id of addresses ) ) ) ) , ordered by ( ( invoice date of staff ) in descending order ) , limited to the top ( 5 )",
    "SELECT count(*) FROM All_documents WHERE document_type_code  =  \"CV\" OR document_type_code  =  \"BK\"": "( the number of ( all items ) ) that belongs to ( all documents ) , that have ( ( ( document type code ) equal to ( cv ) ) or ( ( document type code ) equal to ( bk ) ) )",
    "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)": "( the number of ( all items ) ) that belongs to ( city ) , that have ( ( county_id ) in ( ( county id ) that belongs to ( county public safety ) , that have ( ( population ) greater than ( 20000 ) ) ) )",
    "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;": "( the sum of ( games of addresses ) ) that belongs to ( ( home game ) , and ( ( team ) satisfied that ( ( team id of addresses ) equal to ( team id br of staff ) ) ) ) , that have ( ( ( name of staff ) equal to ( 'boston red stockings' ) ) and ( ( t1.year ) between ( 1990 ) and ( 2000 ) ) )",
    "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  'Alice' AND T4.name != 'Alice'": "( distinct ( name of trip ) ) that belongs to ( ( personfriend ) , and ( ( person ) satisfied that ( ( name of addresses ) equal to ( name of staff ) ) ) , and ( ( personfriend ) satisfied that ( ( friend of addresses ) equal to ( name of enzyme ) ) ) , and ( ( personfriend ) satisfied that ( ( friend of enzyme ) equal to ( name of trip ) ) ) ) , that have ( ( ( name of staff ) equal to ( 'alice' ) ) and ( ( name of trip ) not equal to ( 'alice' ) ) )",
    "SELECT name FROM projects WHERE hours BETWEEN 100 AND 300": "( name ) that belongs to ( projects ) , that have ( ( hours ) between ( 100 ) and ( 300 ) )",
    "SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype": "( allergytype ) , ( the number of ( all items ) ) that belongs to ( allergy type ) , grouped by ( allergytype )",
    "SELECT T1.Service_Type_Description ,  T2.Service_Type_Code ,  COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T2.Service_Type_Code": "( service type description of addresses ) , ( service type code of staff ) , ( the number of ( all items ) ) that belongs to ( ( ref service types ) , and ( ( services ) satisfied that ( ( service type code of addresses ) equal to ( service type code of staff ) ) ) ) , grouped by ( service type code of staff )",
    "SELECT T1.name ,  T1.team_id ,  max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id;": "( name of addresses ) , ( team id of addresses ) , ( the maximum of ( salary of staff ) ) that belongs to ( ( team ) , and ( ( salary ) satisfied that ( ( team id of addresses ) equal to ( team id of staff ) ) ) ) , grouped by ( team id of addresses )",
    "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night'": "( name of club ) that belongs to ( ( channel ) , and ( ( broadcast ) satisfied that ( ( channel id of club ) equal to ( channel id of member of club ) ) ) ) , that have ( ( time of day of member of club ) equal to ( 'morning' ) ), and intersect with ( ( name of club ) that belongs to ( ( channel ) , and ( ( broadcast ) satisfied that ( ( channel id of club ) equal to ( channel id of member of club ) ) ) ) , that have ( ( time of day of member of club ) equal to ( 'night' ) ))",
    "SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)": "( the minimum of ( salary ) ) , ( dept name ) that belongs to ( instructor ) , grouped by ( dept name ) , that have ( ( the average of ( salary ) ) greater than ( the average of ( salary ) ) that belongs to ( instructor ) )",
    "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Susan\"": "( f1 of staff ) that belongs to ( ( user profiles ) , and ( ( follows ) satisfied that ( ( uid of addresses ) equal to ( f2 of staff ) ) ) ) , that have ( ( name of addresses ) equal to ( mary ) ), and intersect with ( ( f1 of staff ) that belongs to ( ( user profiles ) , and ( ( follows ) satisfied that ( ( uid of addresses ) equal to ( f2 of staff ) ) ) ) , that have ( ( name of addresses ) equal to ( susan ) ))",
    "SELECT count(*) FROM Flight": "( the number of ( all items ) ) that belongs to ( flight )",
    "SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1": "( ppos ) that belongs to ( tryout ) , grouped by ( ppos ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT Name ,  birth_place FROM people EXCEPT SELECT T1.Name ,  T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id  =  T2.people_id": "( name ) , ( birth place ) that belongs to ( people ), and except that ( ( name of addresses ) , ( birth place of addresses ) that belongs to ( ( people ) , and ( ( body builder ) satisfied that ( ( people id of addresses ) equal to ( people id of staff ) ) ) ))",
    "SELECT max(followers) ,  sum(followers) FROM user_profiles": "( the maximum of ( followers ) ) , ( the sum of ( followers ) ) that belongs to ( user profiles )",
    "SELECT document_id ,  document_name FROM Documents": "( document id ) , ( document name ) that belongs to ( documents )",
    "SELECT T1.student_id ,  T2.first_name FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY AVG(monthly_rental) DESC LIMIT 1": "( student id of addresses ) , ( first name of staff ) that belongs to ( ( student addresses ) , and ( ( students ) satisfied that ( ( student id of addresses ) equal to ( student id of staff ) ) ) ) , grouped by ( student id of addresses ) , ordered by ( ( the average of ( monthly rental ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T3.booking_start_date ,   T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id  =  T2.product_id JOIN bookings AS T3 ON T2.booking_id  =  T3.booking_id WHERE T1.product_name  =  'Book collection A'": "( booking start date of enzyme ) , ( booking end date of enzyme ) that belongs to ( ( products for hire ) , and ( ( products booked ) satisfied that ( ( product id of addresses ) equal to ( product id of staff ) ) ) , and ( ( bookings ) satisfied that ( ( booking id of staff ) equal to ( booking id of enzyme ) ) ) ) , that have ( ( product name of addresses ) equal to ( 'book collection a' ) )",
    "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010": "( distinct ( name of addresses ) ) that belongs to ( ( student ) , and ( ( takes ) satisfied that ( ( id of addresses ) equal to ( id of staff ) ) ) ) , that have ( ( ( year ) equal to ( 2009 ) ) or ( ( year ) equal to ( 2010 ) ) )",
    "SELECT Name ,  Score FROM WINE": "( name ) , ( score ) that belongs to ( wine )",
    "SELECT T3.Shop_Name ,  T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID  =  T3.Shop_ID": "( shop name of enzyme ) , ( carrier of staff ) that belongs to ( ( stock ) , and ( ( device ) satisfied that ( ( device id of addresses ) equal to ( device id of staff ) ) ) , and ( ( shop ) satisfied that ( ( shop id of addresses ) equal to ( shop id of enzyme ) ) ) )",
    "SELECT T3.Fname ,  T3.LName ,  T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID": "( fname of enzyme ) , ( lname of enzyme ) , ( gradepoint of staff ) that belongs to ( ( enrolled in ) join ( ( gradeconversion ) ) , and ( ( student ) satisfied that ( ( ( grade of addresses ) equal to ( lettergrade of staff ) ) and ( ( stuid of addresses ) equal to ( stuid of enzyme ) ) ) ) )",
    "SELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1": "( carrier ) that belongs to ( phone ) , ordered by ( ( price ) in descending order ) , limited to the top ( 1 )",
    "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name": "( distinct ( name of enzyme ) ) , ( title of staff ) , ( stars of addresses ) that belongs to ( ( rating ) , and ( ( movie ) satisfied that ( ( mid of addresses ) equal to ( mid of staff ) ) ) , and ( ( reviewer ) satisfied that ( ( rid of addresses ) equal to ( rid of enzyme ) ) ) ) , that have ( ( director of staff ) equal to ( name of enzyme ) )",
    "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"": "( claim status description ) that belongs to ( claims processing stages ) , that have ( ( claim status name ) equal to ( open ) )",
    "SELECT fname ,  lname FROM student WHERE city_code != 'HKG' ORDER BY age": "( fname ) , ( lname ) that belongs to ( student ) , that have ( ( city code ) not equal to ( 'hkg' ) ) , ordered by ( ( age ) )",
    "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;": "( name ) that belongs to ( department ) , grouped by ( departmentid ) , ordered by ( ( the number of ( departmentid ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM Aircraft": "( the number of ( all items ) ) that belongs to ( aircraft )",
    "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2": "( employee id ) that belongs to ( job history ) , grouped by ( employee id ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1": "( year ) that belongs to ( section ) , grouped by ( year ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id": "( distinct ( city of addresses ) ) that belongs to ( ( addresses ) , and ( ( people addresses ) satisfied that ( ( address id of addresses ) equal to ( address id of staff ) ) ) , and ( ( students ) satisfied that ( ( person id of staff ) equal to ( student id of enzyme ) ) ) )",
    "SELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1": "( stu fname ) , ( stu lname ) , ( stu gpa ) that belongs to ( student ) , that have ( ( stu gpa ) greater than ( 3 ) ) , ordered by ( ( stu dob ) in descending order ) , limited to the top ( 1 )",
    "SELECT Product_Name FROM Products ORDER BY Product_Price ASC": "( product name ) that belongs to ( products ) , ordered by ( ( product price ) in ascending order )",
    "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"": "( the number of ( all items ) ) that belongs to ( ( customers cards ) , and ( ( customers ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , that have ( ( ( customer first name of staff ) equal to ( art ) ) and ( ( customer last name of staff ) equal to ( turcotte ) ) )",
    "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name\t =  \"Cathrine\"": "( address line 1 ) that belongs to ( course authors and tutors ) , that have ( ( personal name ) equal to ( cathrine ) )",
    "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2": "( region name of addresses ) that belongs to ( ( region ) , and ( ( affected region ) satisfied that ( ( region id of addresses ) equal to ( region id of staff ) ) ) ) , grouped by ( region id of addresses ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"": "( the number of ( all items ) ) that belongs to ( university ) , that have ( ( location ) like ( %ny% ) )",
    "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000": "( dept name ) , ( the average of ( salary ) ) that belongs to ( instructor ) , grouped by ( dept name ) , that have ( ( the average of ( salary ) ) greater than ( 42000 ) )",
    "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1": "( result ) that belongs to ( musical ) , grouped by ( result ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T2.product_type_code ,  T2.product_name ,  T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  3": "( product type code of staff ) , ( product name of staff ) , ( product price of staff ) that belongs to ( ( product suppliers ) , and ( ( products ) satisfied that ( ( product id of addresses ) equal to ( product id of staff ) ) ) ) , that have ( ( supplier id of addresses ) equal to ( 3 ) )",
    "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211' AND T1.stu_lname LIKE 'S%'": "( stu fname of addresses ) that belongs to ( ( student ) , and ( ( enroll ) satisfied that ( ( stu num of addresses ) equal to ( stu num of staff ) ) ) , and ( ( class ) satisfied that ( ( class code of staff ) equal to ( class code of enzyme ) ) ) ) , that have ( ( ( crs code of enzyme ) equal to ( 'acct-211' ) ) and ( ( t1.stu lname ) like ( 's%' ) ) )",
    "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate": "( eid ) that belongs to ( employee ), and except that ( ( eid ) that belongs to ( certificate ))",
    "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20": "( stuid ) that belongs to ( participates in ), and intersect with ( ( stuid ) that belongs to ( student ) , that have ( ( age ) less than ( 20 ) ))",
    "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1": "( governor of staff ) that belongs to ( ( election ) , and ( ( party ) satisfied that ( ( party of addresses ) equal to ( party id of staff ) ) ) ) , that have ( ( district of addresses ) equal to ( 1 ) )",
    "SELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\"": "( artist name ) that belongs to ( artist ) , that have ( ( ( country ) equal to ( uk ) ) and ( ( gender ) equal to ( male ) ) )",
    "SELECT name ,  LOCATION FROM station ORDER BY Annual_entry_exit ,  Annual_interchanges": "( name ) , ( location ) that belongs to ( station ) , ordered by ( ( annual entry exit ),( annual interchanges ) )",
    "SELECT T1.name ,  count(*) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id": "( name of addresses ) , ( the number of ( all items ) ) that belongs to ( ( useracct ) , and ( ( review ) satisfied that ( ( u id of addresses ) equal to ( u id of staff ) ) ) ) , grouped by ( u id of staff )",
    "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1": "( name of addresses ) that belongs to ( ( nurse ) , and ( ( appointment ) satisfied that ( ( employeeid of addresses ) equal to ( prepnurse of staff ) ) ) ) , grouped by ( employeeid of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name": "( country name ) , ( the number of ( all items ) ) that belongs to ( ( country ) , and ( ( match season ) satisfied that ( ( country id of addresses ) equal to ( country of staff ) ) ) ) , grouped by ( country name of addresses )",
    "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\"": "( distinct ( policy type code of student ) ) that belongs to ( ( customers ) , and ( ( customers policies ) satisfied that ( ( customer id of club ) equal to ( customer id of member of club ) ) ) , and ( ( available policies ) satisfied that ( ( policy id of member of club ) equal to ( policy id of student ) ) ) ) , that have ( ( customer name of club ) equal to ( dayana robel ) )",
    "SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1": "( title of addresses ) , ( inventory id of staff ) that belongs to ( ( film ) , and ( ( inventory ) satisfied that ( ( film id of addresses ) equal to ( film id of staff ) ) ) , and ( ( rental ) satisfied that ( ( inventory id of staff ) equal to ( inventory id of enzyme ) ) ) ) , grouped by ( inventory id of staff ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT 1": "( status code ) that belongs to ( bookings ) , grouped by ( status code ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1": "( origin ) that belongs to ( flight ) , grouped by ( origin ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"8741\"": "( distinct ( lname of addresses ) ) that belongs to ( ( student ) , and ( ( voting record ) satisfied that ( ( stuid of addresses ) equal to ( president vote ) ) ) ), and intersect with ( ( distinct ( lname ) ) that belongs to ( student ) , that have ( ( advisor ) equal to ( 8741 ) ))",
    "SELECT organization_name FROM organizations ORDER BY date_formed ASC": "( organization name ) that belongs to ( organizations ) , ordered by ( ( date formed ) in ascending order )",
    "SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.student_capacity  =  (SELECT max(student_capacity) FROM dorm)": "( the average of ( age of addresses ) ) that belongs to ( ( student ) , and ( ( lives in ) satisfied that ( ( stuid of addresses ) equal to ( stuid of staff ) ) ) , and ( ( dorm ) satisfied that ( ( dormid of enzyme ) equal to ( dormid of staff ) ) ) ) , that have ( ( student capacity of enzyme ) equal to ( the maximum of ( student capacity ) ) that belongs to ( dorm ) )",
    "SELECT count(*) FROM (SELECT * FROM endowment WHERE amount  >  8.5 GROUP BY school_id HAVING count(*)  >  1)": "( the number of ( all items ) ) that belongs to ( \"l all items that belongs to ( endowment ) , that have ( ( amount ) greater than ( 5 of 8 ) ) , grouped by ( school id ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) ) r\" )",
    "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1": "( budget type code ) that belongs to ( documents with expenses ) , grouped by ( budget type code ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )": "( the number of ( all items ) ) that belongs to ( patient ) , that have ( ( ssn ) not in ( ( patient of addresses ) that belongs to ( ( prescribes ) , and ( ( medication ) satisfied that ( ( medication of addresses ) equal to ( code of staff ) ) ) ) , that have ( ( name of staff ) equal to ( 'procrastin-x' ) ) ) )",
    "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50": "( name of staff ) that belongs to ( ( appellations ) , and ( ( wine ) satisfied that ( ( appelation of addresses ) equal to ( appelation of staff ) ) ) ) , that have ( ( ( county of addresses ) equal to ( monterey ) ) and ( ( price of staff ) less than ( 50 ) ) )",
    "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1": "( name of addresses ) that belongs to ( ( mediatype ) , and ( ( track ) satisfied that ( ( mediatypeid of addresses ) equal to ( mediatypeid of staff ) ) ) ) , grouped by ( mediatypeid of staff ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')": "( the number of ( all items ) ) that belongs to ( routes ) , that have ( ( ( dst apid ) in ( ( apid ) that belongs to ( airports ) , that have ( ( country ) equal to ( 'canada' ) ) ) ) and ( ( src apid ) in ( ( apid ) that belongs to ( airports ) , that have ( ( country ) equal to ( 'united states' ) ) ) ) )",
    "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;": "( first name ) , ( last name ) that belongs to ( employees ) , ordered by ( ( hire date ) in ascending order ) , limited to the top ( 10 )",
    "SELECT Adults FROM Reservations WHERE CheckIn  =  \"2010-10-23\" AND FirstName  =  \"CONRAD\" AND LastName  =  \"SELBIG\";": "( adults ) that belongs to ( reservations ) , that have ( ( ( checkin ) equal to ( 2010-10-23 ) ) and ( ( firstname ) equal to ( conrad ) ) and ( ( lastname ) equal to ( selbig ) ) )",
    "SELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT 3": "( the sum of ( city population ) ) that belongs to ( district ) , ordered by ( ( city area ) in descending order ) , limited to the top ( 3 )",
    "SELECT name FROM races ORDER BY date DESC LIMIT 1": "( name ) that belongs to ( races ) , ordered by ( ( date ) in descending order ) , limited to the top ( 1 )",
    "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";": "( name of staff ) that belongs to ( ( genres ) , and ( ( tracks ) satisfied that ( ( id of addresses ) equal to ( genre id of staff ) ) ) ) , that have ( ( name of addresses ) equal to ( rock ) )",
    "SELECT name FROM Companies WHERE Headquarters != 'USA'": "( name ) that belongs to ( companies ) , that have ( ( headquarters ) not equal to ( 'usa' ) )",
    "SELECT Hispanic FROM city WHERE Black  >  10": "( hispanic ) that belongs to ( city ) , that have ( ( black ) greater than ( 10 ) )",
    "SELECT avg(International_Passengers) FROM airport": "( the average of ( international passengers ) ) that belongs to ( airport )",
    "SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5": "( first name of club ) that belongs to ( ( staff ) , and ( ( complaints ) satisfied that ( ( staff id of club ) equal to ( staff id of member of club ) ) ) ) , grouped by ( staff id of member of club ) , ordered by ( ( the number of ( all items ) ) ) , limited to the top ( 5 )",
    "SELECT product_id ,  product_type_code FROM products ORDER BY product_price LIMIT 1": "( product id ) , ( product type code ) that belongs to ( products ) , ordered by ( ( product price ) ) , limited to the top ( 1 )",
    "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1": "( catalog entry name ) that belongs to ( catalog contents ) , ordered by ( ( capacity ) in ascending order ) , limited to the top ( 1 )",
    "SELECT avg(Product_Price) FROM Products": "( the average of ( product price ) ) that belongs to ( products )",
    "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3": "( date ) , ( mean temperature f ) , ( mean humidity ) that belongs to ( weather ) , ordered by ( ( max gust speed mph ) in descending order ) , limited to the top ( 3 )",
    "SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5": "( forename of addresses ) , ( surname of addresses ) , ( driverid of addresses ) that belongs to ( ( drivers ) , and ( ( pitstops ) satisfied that ( ( driverid of addresses ) equal to ( driverid of staff ) ) ) ) , grouped by ( driverid of addresses ) , that have ( ( the number of ( all items ) ) greater than ( 8 ) ) and ( forename of addresses ) , ( surname of addresses ) , ( driverid of addresses ) that belongs to ( ( drivers ) , and ( ( results ) satisfied that ( ( driverid of addresses ) equal to ( driverid of staff ) ) ) ) , grouped by ( driverid of addresses ) , that have ( ( the number of ( all items ) ) greater than ( 5 ) )",
    "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'": "( distinct ( director of staff ) ) that belongs to ( ( rating ) , and ( ( movie ) satisfied that ( ( mid of addresses ) equal to ( mid of staff ) ) ) , and ( ( reviewer ) satisfied that ( ( rid of addresses ) equal to ( rid of enzyme ) ) ) ) , that have ( ( name of enzyme ) equal to ( 'sarah martinez' ) )",
    "SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;": "( name of staff ) that belongs to ( ( home game ) , and ( ( team ) satisfied that ( ( team id of addresses ) equal to ( team id br of staff ) ) ) ) , that have ( ( year of addresses ) equal to ( 1980 ) ) , ordered by ( ( attendance of addresses ) in ascending order ) , limited to the top ( 1 )",
    "SELECT count(DISTINCT StuID) FROM Sportsinfo": "( the number of ( distinct ( stuid ) ) ) that belongs to ( sportsinfo )",
    "SELECT role_name ,  role_description FROM ROLES WHERE role_code  =  \"MG\"": "( role name ) , ( role description ) that belongs to ( roles ) , that have ( ( role code ) equal to ( mg ) )",
    "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id ORDER BY T2.rating DESC LIMIT 1": "( name of addresses ) that belongs to ( ( useracct ) , and ( ( review ) satisfied that ( ( u id of addresses ) equal to ( u id of staff ) ) ) ) , ordered by ( ( rating of staff ) in descending order ) , limited to the top ( 1 )",
    "SELECT avg(no_of_customers) FROM bank": "( the average of ( no of customers ) ) that belongs to ( bank )",
    "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'": "( dorm name of addresses ) that belongs to ( ( dorm ) , and ( ( has amenity ) satisfied that ( ( dormid of addresses ) equal to ( dormid of staff ) ) ) , and ( ( dorm amenity ) satisfied that ( ( amenid of staff ) equal to ( amenid of enzyme ) ) ) ) , that have ( ( amenity name of enzyme ) equal to ( 'tv lounge' ) ), and intersect with ( ( dorm name of addresses ) that belongs to ( ( dorm ) , and ( ( has amenity ) satisfied that ( ( dormid of addresses ) equal to ( dormid of staff ) ) ) , and ( ( dorm amenity ) satisfied that ( ( amenid of staff ) equal to ( amenid of enzyme ) ) ) ) , that have ( ( amenity name of enzyme ) equal to ( 'study room' ) ))",
    "SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\"": "( the average of ( rating of staff ) ) that belongs to ( ( artist ) , and ( ( song ) satisfied that ( ( artist name of addresses ) equal to ( artist name of staff ) ) ) ) , that have ( ( gender of addresses ) equal to ( female ) )",
    "SELECT average_attendance FROM stadium WHERE capacity_percentage  >  100": "( average attendance ) that belongs to ( stadium ) , that have ( ( capacity percentage ) greater than ( 100 ) )",
    "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)": "( store name of club ) that belongs to ( ( store ) , and ( ( store district ) satisfied that ( ( store id of club ) equal to ( store id of member of club ) ) ) ) , that have ( ( district id ) equal to ( district id ) that belongs to ( district ) , ordered by ( ( city population ) in descending order ) , limited to the top ( 1 ) )",
    "SELECT DISTINCT city FROM branch WHERE membership_amount  >=  100": "( distinct ( city ) ) that belongs to ( branch ) , that have ( ( membership amount ) greater than or equal to ( 100 ) )",
    "SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id": "( order id ) , ( the number of ( all items ) ) that belongs to ( invoices ) , grouped by ( order id )",
    "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1": "( distinct ( product name of club ) ) that belongs to ( ( products ) , and ( ( complaints ) satisfied that ( ( product id of club ) equal to ( product id of member of club ) ) ) join ( ( customers ) ) ) , grouped by ( customer id of student ) , ordered by ( ( the number of ( all items ) ) ) , limited to the top ( 1 )",
    "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city": "( the number of ( all items ) ) , ( city ) that belongs to ( employees ) , that have ( ( title ) equal to ( 'it staff' ) ) , grouped by ( city )",
    "SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Marketing_Region_Code  =  \"CA\"": "( state county of addresses ) that belongs to ( ( addresses ) , and ( ( stores ) satisfied that ( ( address id of addresses ) equal to ( address id of staff ) ) ) ) , that have ( ( marketing region code of staff ) equal to ( ca ) )",
    "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1": "( party email of club ) that belongs to ( ( parties ) , and ( ( party services ) satisfied that ( ( party id of club ) equal to ( customer id of member of club ) ) ) ) , grouped by ( party email of club ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta';": "( the number of ( all items ) ) that belongs to ( ( home game ) , and ( ( park ) satisfied that ( ( park id of addresses ) equal to ( park id of staff ) ) ) ) , that have ( ( ( year of addresses ) equal to ( 2000 ) ) and ( ( city of staff ) equal to ( 'atlanta' ) ) )",
    "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  >=  4 ORDER BY T1.year": "( distinct ( year ) ) that belongs to ( ( movie ) , and ( ( rating ) satisfied that ( ( mid of addresses ) equal to ( mid of staff ) ) ) ) , that have ( ( stars of staff ) greater than or equal to ( 4 ) ) , ordered by ( ( year of addresses ) )",
    "SELECT name ,  height ,  prominence FROM mountain WHERE range != 'Aberdare Range'": "( name ) , ( height ) , ( prominence ) that belongs to ( mountain ) , that have ( ( range ) not equal to ( 'aberdare range' ) )",
    "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code": "( card type code of staff ) , ( the number of ( all items ) ) that belongs to ( ( financial transactions ) , and ( ( customers cards ) satisfied that ( ( card id of addresses ) equal to ( card id of staff ) ) ) ) , grouped by ( card type code of staff )",
    "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY count(*) DESC LIMIT 1": "( lname of club ) that belongs to ( ( authors ) , and ( ( authorship ) satisfied that ( ( authid of club ) equal to ( authid of member of club ) ) ) , and ( ( papers ) satisfied that ( ( paperid of member of club ) equal to ( paperid of student ) ) ) ) , grouped by ( fname of club ) , ( lname of club ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT name ,  LOCATION FROM cinema WHERE capacity  >  (SELECT avg(capacity) FROM cinema)": "( name ) , ( location ) that belongs to ( cinema ) , that have ( ( capacity ) greater than ( the average of ( capacity ) ) that belongs to ( cinema ) )",
    "SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150": "( roomname ) that belongs to ( rooms ) , that have ( ( baseprice ) between ( 120 ) and ( 150 ) )",
    "SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";": "( the sum of ( total of staff ) ) that belongs to ( ( customers ) , and ( ( invoices ) satisfied that ( ( id of addresses ) equal to ( customer id of staff ) ) ) ) , that have ( ( ( first name of addresses ) equal to ( lucas ) ) and ( ( last name of addresses ) equal to ( mancini ) ) )",
    "SELECT count(*) FROM address WHERE district  =  'California'": "( the number of ( all items ) ) that belongs to ( address ) , that have ( ( district ) equal to ( 'california' ) )",
    "SELECT T1.course_name ,  T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id WHERE T2.subject_name  =  \"Computer Science\"": "( course name of addresses ) , ( course description of addresses ) that belongs to ( ( courses ) , and ( ( subjects ) satisfied that ( ( subject id of addresses ) equal to ( subject id of staff ) ) ) ) , that have ( ( subject name of staff ) equal to ( computer science ) )",
    "SELECT T1.date_in_location_from ,  T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Robin CV\"": "( date in location from of addresses ) , ( date in locaton to of addresses ) that belongs to ( ( document locations ) , and ( ( all documents ) satisfied that ( ( document id of addresses ) equal to ( document id of staff ) ) ) ) , that have ( ( document name of staff ) equal to ( robin cv ) )",
    "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3": "( attribute data type ) that belongs to ( attribute definitions ) , grouped by ( attribute data type ) , that have ( ( the number of ( all items ) ) greater than ( 3 ) )",
    "SELECT g_name ,  rating FROM genre ORDER BY g_name": "( g name ) , ( rating ) that belongs to ( genre ) , ordered by ( ( g name ) )",
    "SELECT distinct(catalog_entry_name) FROM catalog_contents": "( distinct ( catalog entry name ) ) that belongs to ( catalog contents )",
    "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  \"Computer Science\"": "( lname of staff ) that belongs to ( ( department ) , and ( ( faculty ) satisfied that ( ( dno of addresses ) equal to ( dno of enzyme ) ) ) , and ( ( member of ) satisfied that ( ( facid of staff ) equal to ( facid of enzyme ) ) ) ) , that have ( ( dname of addresses ) equal to ( computer science ) )",
    "SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000": "( the average of ( number cities of staff ) ) that belongs to ( ( film market estimation ) , and ( ( market ) satisfied that ( ( market id of addresses ) equal to ( market id of staff ) ) ) ) , that have ( ( low estimate of addresses ) greater than ( 10000 ) )",
    "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Marianne\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1": "( type ) that belongs to ( ( vocals ) , and ( ( band ) satisfied that ( ( bandmate of addresses ) equal to ( id of staff ) ) ) ) , that have ( ( firstname ) equal to ( marianne ) ) , grouped by ( type ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses": "( document id ) that belongs to ( documents ), and except that ( ( document id ) that belongs to ( documents with expenses ))",
    "SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count(*) DESC LIMIT 1": "( month ) that belongs to ( happy hour ) , grouped by ( month ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID": "( distinct ( hometown ) ) that belongs to ( people ), and except that ( ( distinct ( hometown of staff ) ) that belongs to ( ( gymnast ) , and ( ( people ) satisfied that ( ( gymnast id of addresses ) equal to ( people id of staff ) ) ) ))",
    "SELECT T2.Hardware_Model_name ,  T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\";": "( hardware model name of staff ) , ( company name of staff ) that belongs to ( ( screen mode ) , and ( ( phone ) satisfied that ( ( graphics mode of addresses ) equal to ( screen mode of staff ) ) ) ) , that have ( ( type of addresses ) equal to ( graphics ) )",
    "SELECT count(DISTINCT class_code) FROM CLASS": "( the number of ( distinct ( class code ) ) ) that belongs to ( class )",
    "SELECT DISTINCT building FROM Faculty": "( distinct ( building ) ) that belongs to ( faculty )",
    "SELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR": "( the average of ( price ) ) , ( year ) that belongs to ( wine ) , grouped by ( year )",
    "SELECT vehicle_details FROM Vehicles WHERE vehicle_id = 1;": "( vehicle details ) that belongs to ( vehicles ) , that have ( ( vehicle id ) equal to ( 1 ) )",
    "SELECT count(*) FROM INVESTORS": "( the number of ( all items ) ) that belongs to ( investors )",
    "SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1": "( fname of addresses ) , ( lname of addresses ) that belongs to ( ( student ) , and ( ( participates in ) satisfied that ( ( stuid of addresses ) equal to ( stuid of staff ) ) ) ) , grouped by ( stuid of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'": "( title of staff ) that belongs to ( ( artists ) , and ( ( albums ) satisfied that ( ( id of addresses ) equal to ( artist id of staff ) ) ) ) , that have ( ( t1.name ) like ( '%led%' ) )",
    "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5": "( date ) , ( cloud cover ) that belongs to ( weather ) , ordered by ( ( cloud cover ) in descending order ) , limited to the top ( 5 )",
    "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) DESC LIMIT 1": "( gtype ) that belongs to ( video games ) , grouped by ( gtype ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT Stuid ,  sum(hours_played) FROM Plays_games GROUP BY Stuid": "( stuid ) , ( the sum of ( hours played ) ) that belongs to ( plays games ) , grouped by ( stuid )",
    "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE lastname  =  \"Heilo\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1": "( type ) that belongs to ( ( vocals ) , and ( ( band ) satisfied that ( ( bandmate of addresses ) equal to ( id of staff ) ) ) ) , that have ( ( lastname ) equal to ( heilo ) ) , grouped by ( type ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC": "( total horses ) that belongs to ( farm ) , ordered by ( ( total horses ) in ascending order )",
    "SELECT count(*) FROM papers": "( the number of ( all items ) ) that belongs to ( papers )",
    "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'": "( the number of ( all items ) ) that belongs to ( ( class ) , and ( ( enroll ) satisfied that ( ( class code of addresses ) equal to ( class code of staff ) ) ) ) , that have ( ( crs code of addresses ) equal to ( 'acct-211' ) )",
    "SELECT max(T1.length_meters) ,  T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id  =  T2.id": "( the maximum of ( length meters of addresses ) ) , ( name of staff ) that belongs to ( ( bridge ) , and ( ( architect ) satisfied that ( ( architect id of addresses ) equal to ( id of staff ) ) ) )",
    "SELECT role_description FROM Staff_Roles WHERE role_code  =  'researcher'": "( role description ) that belongs to ( staff roles ) , that have ( ( role code ) equal to ( 'researcher' ) )",
    "SELECT image_name ,  image_url FROM images ORDER BY image_name": "( image name ) , ( image url ) that belongs to ( images ) , ordered by ( ( image name ) )",
    "SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*)  >=  2": "( birth place ) that belongs to ( people ) , grouped by ( birth place ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\"": "( circuitid ) , ( location ) that belongs to ( circuits ) , that have ( ( ( country ) equal to ( france ) ) or ( ( country ) equal to ( belgium ) ) )",
    "SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'": "( the number of ( distinct ( dst apid ) ) ) that belongs to ( ( airlines ) , and ( ( routes ) satisfied that ( ( alid of addresses ) equal to ( alid of staff ) ) ) ) , that have ( ( name of addresses ) equal to ( 'american airlines' ) )",
    "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3": "( support rate ) that belongs to ( candidate ) , ordered by ( ( support rate ) in descending order ) , limited to the top ( 3 )",
    "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1": "( bike id ) that belongs to ( trip ) , that have ( ( zip code ) equal to ( 94002 ) ) , grouped by ( bike id ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT max(years_working) ,  min(years_working) ,  avg(years_working) FROM school_bus": "( the maximum of ( years working ) ) , ( the minimum of ( years working ) ) , ( the average of ( years working ) ) that belongs to ( school bus )",
    "SELECT service_id ,  event_details FROM EVENTS": "( service id ) , ( event details ) that belongs to ( events )",
    "SELECT theme ,  YEAR FROM exhibition ORDER BY ticket_price DESC": "( theme ) , ( year ) that belongs to ( exhibition ) , ordered by ( ( ticket price ) in descending order )",
    "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1": "( product details of member of club ) that belongs to ( ( order items ) , and ( ( products ) satisfied that ( ( product id of club ) equal to ( product id of member of club ) ) ) ) , grouped by ( product id of club ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name": "( product name of staff ) , ( the number of ( all items ) ) that belongs to ( ( order items ) , and ( ( products ) satisfied that ( ( product id of addresses ) equal to ( product id of staff ) ) ) , and ( ( orders ) satisfied that ( ( order id of enzyme ) equal to ( order id of addresses ) ) ) ) , grouped by ( product name of staff )",
    "SELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1": "( title ) , ( rental rate ) that belongs to ( film ) , ordered by ( ( rental rate ) in descending order ) , limited to the top ( 1 )",
    "SELECT vehicle_id FROM Vehicles;": "( vehicle id ) that belongs to ( vehicles )",
    "SELECT country FROM people WHERE age  <  25 INTERSECT SELECT country FROM people WHERE age  >  30": "( country ) that belongs to ( people ) , that have ( ( age ) less than ( 25 ) ), and intersect with ( ( country ) that belongs to ( people ) , that have ( ( age ) greater than ( 30 ) ))",
    "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.personal_name  =  \"Karson\"": "( date of enrolment of addresses ) , ( date of completion of addresses ) that belongs to ( ( student course enrolment ) , and ( ( students ) satisfied that ( ( student id of addresses ) equal to ( student id of staff ) ) ) ) , that have ( ( personal name of staff ) equal to ( karson ) )",
    "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10": "( firstname of addresses ) , ( supportrepid of addresses ) that belongs to ( ( customer ) , and ( ( employee ) satisfied that ( ( supportrepid of addresses ) equal to ( employeeid of staff ) ) ) ) , grouped by ( supportrepid of addresses ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 10 ) )",
    "SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2": "( order id of staff ) , ( order details of staff ) that belongs to ( ( invoices ) , and ( ( orders ) satisfied that ( ( order id of addresses ) equal to ( order id of staff ) ) ) ) , grouped by ( order id of staff ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )",
    "SELECT count(*) FROM film": "( the number of ( all items ) ) that belongs to ( film )",
    "SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)": "( the average of ( followers ) ) that belongs to ( user profiles ) , that have ( ( uid ) not in ( ( uid ) that belongs to ( tweets ) ) )",
    "SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code JOIN Grants AS T3 ON T1.grant_id  =  T3.grant_id WHERE T2.document_description  =  'Regular' OR T3.grant_amount  >  100": "( response received date of addresses ) that belongs to ( ( documents ) , and ( ( document types ) satisfied that ( ( document type code of addresses ) equal to ( document type code of staff ) ) ) , and ( ( grants ) satisfied that ( ( grant id of addresses ) equal to ( grant id of enzyme ) ) ) ) , that have ( ( ( document description of staff ) equal to ( 'regular' ) ) or ( ( grant amount of enzyme ) greater than ( 100 ) ) )",
    "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC": "( distinct ( forename ) ) that belongs to ( drivers ) , ordered by ( ( forename ) in ascending order )",
    "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId": "( name ) that belongs to ( artist ), and except that ( ( name of staff ) that belongs to ( ( album ) , and ( ( artist ) satisfied that ( ( artistid of addresses ) equal to ( artistid of staff ) ) ) ))",
    "SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'": "( emp fname of staff ) , ( class room of addresses ) that belongs to ( ( class ) , and ( ( employee ) satisfied that ( ( prof num of addresses ) equal to ( emp num of staff ) ) ) , and ( ( professor ) satisfied that ( ( emp num of staff ) equal to ( emp num of enzyme ) ) ) , and ( ( department ) satisfied that ( ( dept code of trip ) equal to ( dept code of enzyme ) ) ) ) , that have ( ( dept name of trip ) equal to ( 'accounting' ) )",
    "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'": "( the number of ( all items ) ) that belongs to ( ( city ) , and ( ( country ) satisfied that ( ( country id of addresses ) equal to ( country id of staff ) ) ) ) , that have ( ( country of staff ) equal to ( 'australia' ) )",
    "SELECT max(stu_gpa) ,  avg(stu_gpa) ,  min(stu_gpa) ,  dept_code FROM student GROUP BY dept_code": "( the maximum of ( stu gpa ) ) , ( the average of ( stu gpa ) ) , ( the minimum of ( stu gpa ) ) , ( dept code ) that belongs to ( student ) , grouped by ( dept code )",
    "SELECT DISTINCT cName FROM tryout ORDER BY cName": "( distinct ( cname ) ) that belongs to ( tryout ) , ordered by ( ( cname ) )",
    "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1": "( forename of addresses ) , ( surname of addresses ) that belongs to ( ( drivers ) , and ( ( laptimes ) satisfied that ( ( driverid of addresses ) equal to ( driverid of staff ) ) ) ) , ordered by ( ( milliseconds of staff ) ) , limited to the top ( 1 )",
    "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010": "( course id ) that belongs to ( section ) , that have ( ( ( semester ) equal to ( 'fall' ) ) and ( ( year ) equal to ( 2009 ) ) ), and intersect with ( ( course id ) that belongs to ( section ) , that have ( ( ( semester ) equal to ( 'spring' ) ) and ( ( year ) equal to ( 2010 ) ) ))",
    "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000": "all items that belongs to ( ( job history ) , and ( ( employees ) satisfied that ( ( employee id of addresses ) equal to ( employee id of staff ) ) ) ) , that have ( ( salary of staff ) greater than or equal to ( 12000 ) )",
    "SELECT Investor_details FROM INVESTORS": "( investor details ) that belongs to ( investors )",
    "SELECT city FROM airports GROUP BY city HAVING count(*)  =  2": "( city ) that belongs to ( airports ) , grouped by ( city ) , that have ( ( the number of ( all items ) ) equal to ( 2 ) )",
    "SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15": "( the average of ( num employees ) ) that belongs to ( department ) , that have ( ( ranking ) between ( 10 ) and ( 15 ) )",
    "SELECT avg(total_passengers) ,  max(total_passengers) FROM station WHERE LOCATION  =  'London' OR LOCATION  =  'Glasgow'": "( the average of ( total passengers ) ) , ( the maximum of ( total passengers ) ) that belongs to ( station ) , that have ( ( ( location ) equal to ( 'london' ) ) or ( ( location ) equal to ( 'glasgow' ) ) )",
    "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id": "( distinct ( customer first name of addresses ) ) , ( customer last name of addresses ) , ( phone number of addresses ) that belongs to ( ( customers ) , and ( ( accounts ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) )",
    "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2": "( aircraft of addresses ) that belongs to ( ( aircraft ) , and ( ( match ) satisfied that ( ( aircraft id of addresses ) equal to ( winning aircraft of staff ) ) ) ) , grouped by ( winning aircraft of staff ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT city FROM city WHERE regional_population  >  10000000 UNION SELECT city FROM city WHERE regional_population  <  5000000": "( city ) that belongs to ( city ) , that have ( ( regional population ) greater than ( 10000000 ) ) and ( city ) that belongs to ( city ) , that have ( ( regional population ) less than ( 5000000 ) )",
    "SELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1": "( club id of addresses ) , ( gold of addresses ) that belongs to ( ( match result ) , and ( ( coach ) satisfied that ( ( club id of addresses ) equal to ( club id of staff ) ) ) ) , grouped by ( club id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)": "( name of addresses ) , ( ( balance of staff ) add ( balance of enzyme ) ) that belongs to ( ( accounts ) , and ( ( checking ) satisfied that ( ( custid of addresses ) equal to ( custid of staff ) ) ) , and ( ( savings ) satisfied that ( ( custid of addresses ) equal to ( custid of enzyme ) ) ) ) , that have ( ( balance of enzyme ) greater than ( the average of ( balance ) ) that belongs to ( savings ) )",
    "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Jose State University\" AND t1.year  =  2000": "( campusfee of club ) that belongs to ( ( csu fees ) , and ( ( campuses ) satisfied that ( ( campus of club ) equal to ( id of member of club ) ) ) ) , that have ( ( ( campus of member of club ) equal to ( san jose state university ) ) and ( ( year of club ) equal to ( 2000 ) ) )",
    "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"LORIA\" AND T2.lastname  =  \"ONDERSMA\"": "( the number of ( all items ) ) that belongs to ( ( list ) , and ( ( teachers ) satisfied that ( ( classroom of addresses ) equal to ( classroom of staff ) ) ) ) , that have ( ( ( firstname of staff ) equal to ( loria ) ) and ( ( lastname of staff ) equal to ( ondersma ) ) )",
    "SELECT Industry ,  COUNT(*) FROM Companies GROUP BY Industry": "( industry ) , ( the number of ( all items ) ) that belongs to ( companies ) , grouped by ( industry )",
    "SELECT title FROM albums ORDER BY title;": "( title ) that belongs to ( albums ) , ordered by ( ( title ) )",
    "SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"East\" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"West\"": "( police force ) that belongs to ( county public safety ) , that have ( ( location ) equal to ( east ) ), and intersect with ( ( police force ) that belongs to ( county public safety ) , that have ( ( location ) equal to ( west ) ))",
    "SELECT name FROM Person WHERE gender  =  'male' ORDER BY age": "( name ) that belongs to ( person ) , that have ( ( gender ) equal to ( 'male' ) ) , ordered by ( ( age ) )",
    "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)": "( stuid ) that belongs to ( student ) , that have ( ( age ) equal to ( the maximum of ( age ) ) that belongs to ( student ) )",
    "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'": "( first name ) , ( last name ) , ( salary ) that belongs to ( employees ) , that have ( ( first_name ) like ( '%m' ) )",
    "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)": "( name ) that belongs to ( employee ) , that have ( ( salary ) greater than ( the average of ( salary ) ) that belongs to ( employee ) )",
    "SELECT count(*) FROM airlines": "( the number of ( all items ) ) that belongs to ( airlines )",
    "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  \"F\"": "( distinct ( fname of addresses ) ) , ( lname of addresses ) that belongs to ( ( student ) , and ( ( voting record ) satisfied that ( ( stuid of addresses ) equal to ( president vote of staff ) ) ) ) , that have ( ( sex of addresses ) equal to ( f ) )",
    "SELECT Party FROM representative WHERE State  =  \"New York\" INTERSECT SELECT Party FROM representative WHERE State  =  \"Pennsylvania\"": "( party ) that belongs to ( representative ) , that have ( ( state ) equal to ( new york ) ), and intersect with ( ( party ) that belongs to ( representative ) , that have ( ( state ) equal to ( pennsylvania ) ))",
    "SELECT TIME FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\";": "( time ) that belongs to ( student , and ( visits restaurant satisfied that ( ( stuid of student ) equal to ( stuid of visits restaurant ) ) ) , and ( restaurant satisfied that ( ( resid of visits restaurant ) equal to ( resid of restaurant ) ) ) ) , that have ( ( ( fname of student ) equal to ( linda ) ) and ( ( lname of student ) equal to ( smith ) ) and ( ( resname of restaurant ) equal to ( subway ) ) )",
    "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';": "( roomname ) that belongs to ( rooms ) , that have ( ( ( baseprice ) less than ( 160 ) ) and ( ( beds ) equal to ( 2 ) ) and ( ( decor ) equal to ( 'modern' ) ) )",
    "SELECT count(*) ,  T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1": "( the number of ( all items ) ) , ( claim id of addresses ) that belongs to ( ( claims ) , and ( ( settlements ) satisfied that ( ( claim id of addresses ) equal to ( claim id of staff ) ) ) ) , grouped by ( claim id of addresses ) , ordered by ( ( date claim settled of addresses ) in descending order ) , limited to the top ( 1 )",
    "SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in": "( facid ) that belongs to ( faculty ), and except that ( ( facid ) that belongs to ( faculty participates in ))",
    "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  3.8": "( distinct ( fname of enzyme ) ) that belongs to ( ( enrolled in ) join ( ( gradeconversion ) ) , and ( ( student ) satisfied that ( ( ( grade of addresses ) equal to ( lettergrade of staff ) ) and ( ( stuid of addresses ) equal to ( stuid of enzyme ) ) ) ) ) , that have ( ( gradepoint of staff ) greater than or equal to ( 8 of 3 ) )",
    "SELECT LOCATION FROM station GROUP BY LOCATION HAVING count(*)  =  1": "( location ) that belongs to ( station ) , grouped by ( location ) , that have ( ( the number of ( all items ) ) equal to ( 1 ) )",
    "SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor": "( investor ) , ( the number of ( all items ) ) that belongs to ( entrepreneur ) , grouped by ( investor )",
    "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"": "( the number of ( all items ) ) that belongs to ( ( financial transactions ) , and ( ( accounts ) satisfied that ( ( account id of addresses ) equal to ( account id of staff ) ) ) ) , that have ( ( account name of staff ) equal to ( 337 ) )",
    "SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id": "( department id ) , ( the average of ( salary ) ) that belongs to ( employees ) , that have ( ( commission_pct ) is existed ) , grouped by ( department id )",
    "SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC": "( pname ) that belongs to ( player ) , that have ( ( ycard ) equal to ( 'yes' ) ) , ordered by ( ( hs ) in descending order )",
    "SELECT Age FROM artist": "( age ) that belongs to ( artist )",
    "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)": "( the number of ( all items ) ) that belongs to ( csu fees ) , that have ( ( campusfee ) greater than ( the average of ( campusfee ) ) that belongs to ( csu fees ) )",
    "SELECT DISTINCT transaction_type FROM Financial_Transactions": "( distinct ( transaction type ) ) that belongs to ( financial transactions )",
    "SELECT avg(prominence) FROM mountain WHERE country  =  'Morocco'": "( the average of ( prominence ) ) that belongs to ( mountain ) , that have ( ( country ) equal to ( 'morocco' ) )",
    "SELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night'": "( the number of ( distinct ( program id ) ) ) that belongs to ( broadcast ) , that have ( ( time of day ) equal to ( 'night' ) )",
    "SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year": "( the average of ( fastestlapspeed of staff ) ) , ( name of addresses ) , ( year of addresses ) that belongs to ( ( races ) , and ( ( results ) satisfied that ( ( raceid of addresses ) equal to ( raceid of staff ) ) ) ) , that have ( ( year of addresses ) greater than ( 2014 ) ) , grouped by ( name of addresses ) , ordered by ( ( year of addresses ) )",
    "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)": "( name ) that belongs to ( team ) , that have ( ( team_id ) not in ( ( team ) that belongs to ( match season ) ) )",
    "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3": "( country of staff ) that belongs to ( ( city ) , and ( ( country ) satisfied that ( ( country id of addresses ) equal to ( country id of staff ) ) ) ) , grouped by ( country id of staff ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 3 ) )",
    "SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'": "( name ) , ( trade name ) that belongs to ( medicine ), and except that ( ( name of addresses ) , ( trade name of addresses ) that belongs to ( ( medicine ) , and ( ( medicine enzyme interaction ) satisfied that ( ( medicine id of staff ) equal to ( id of addresses ) ) ) , and ( ( enzyme ) satisfied that ( ( id of enzyme ) equal to ( enzyme id of staff ) ) ) ) , that have ( ( product of enzyme ) equal to ( 'protoporphyrinogen ix' ) ))",
    "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;": "( city of staff ) that belongs to ( ( customers ) , and ( ( addresses ) satisfied that ( ( customer address id of addresses ) equal to ( address id of staff ) ) ) ) , grouped by ( city of staff ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT name FROM event ORDER BY YEAR DESC": "( name ) that belongs to ( event ) , ordered by ( ( year ) in descending order )",
    "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"": "( product name of club ) , ( typical buying price of club ) , ( typical selling price of club ) that belongs to ( ( products ) , and ( ( ref colors ) satisfied that ( ( color code of club ) equal to ( color code of member of club ) ) ) ) , that have ( ( color description of member of club ) equal to ( yellow ) )",
    "SELECT Major FROM STUDENT WHERE Sex  =  \"F\" GROUP BY major ORDER BY count(*) DESC LIMIT 1": "( major ) that belongs to ( student ) , that have ( ( sex ) equal to ( f ) ) , grouped by ( major ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT mID ,  avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\") GROUP BY mID": "( mid ) , ( the average of ( stars ) ) that belongs to ( rating ) , that have ( ( mid ) not in ( ( mid of addresses ) that belongs to ( ( rating ) , and ( ( reviewer ) satisfied that ( ( rid of addresses ) equal to ( rid of staff ) ) ) ) , that have ( ( name of staff ) equal to ( brittany harris ) ) ) ) , grouped by ( mid )",
    "SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  \"Fall\"": "( distinct ( age of addresses ) ) that belongs to ( ( student ) , and ( ( voting record ) satisfied that ( ( stuid of addresses ) equal to ( secretary vote of staff ) ) ) ) , that have ( ( election cycle of staff ) equal to ( fall ) )",
    "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'": "( first name ) , ( last name ) , ( hire date ) , ( salary ) , ( department id ) that belongs to ( employees ) , that have ( ( first_name ) not like ( '%m%' ) )",
    "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city": "( city of addresses ) that belongs to ( ( city ) , and ( ( temperature ) satisfied that ( ( city id of addresses ) equal to ( city id of staff ) ) ) ) , that have ( ( mar of staff ) less than ( dec of staff ) ), and except that ( ( city of enzyme ) that belongs to ( ( city ) , and ( ( hosting city ) satisfied that ( ( city id of enzyme ) equal to ( host city of trip ) ) ) ))",
    "SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1": "( comptroller ) , ( the number of ( all items ) ) that belongs to ( party ) , grouped by ( comptroller ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2": "( location ) that belongs to ( cinema ) , that have ( ( capacity ) greater than ( 300 ) ) , grouped by ( location ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT lot_details FROM Lots EXCEPT SELECT T1.lot_details FROM Lots AS T1 JOIN transactions_lots AS T2 ON T1.lot_id  =  T2.lot_id": "( lot details ) that belongs to ( lots ), and except that ( ( lot details of addresses ) that belongs to ( ( lots ) , and ( ( transactions lots ) satisfied that ( ( lot id of addresses ) equal to ( lot id of staff ) ) ) ))",
    "SELECT count(*) FROM users WHERE user_login  =  1": "( the number of ( all items ) ) that belongs to ( users ) , that have ( ( user login ) equal to ( 1 ) )",
    "SELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1": "( dorm name of addresses ) , ( student capacity of addresses ) that belongs to ( ( dorm ) , and ( ( has amenity ) satisfied that ( ( dormid of addresses ) equal to ( dormid of staff ) ) ) , and ( ( dorm amenity ) satisfied that ( ( amenid of staff ) equal to ( amenid of enzyme ) ) ) ) , grouped by ( dormid of staff ) , ordered by ( ( the number of ( all items ) ) ) , limited to the top ( 1 )",
    "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'": "( the sum of ( budget ) ) that belongs to ( department ) , that have ( ( ( dept name ) equal to ( 'marketing' ) ) or ( ( dept name ) equal to ( 'finance' ) ) )",
    "SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37": "( name ) that belongs to ( technician ) , that have ( ( ( age ) equal to ( 36 ) ) or ( ( age ) equal to ( 37 ) ) )",
    "SELECT Publication_Date FROM publication ORDER BY Price DESC": "( publication date ) that belongs to ( publication ) , ordered by ( ( price ) in descending order )",
    "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1": "( founded ) that belongs to ( university ) , ordered by ( ( enrollment ) in descending order ) , limited to the top ( 1 )",
    "SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1": "( denomination of staff ) that belongs to ( ( player ) , and ( ( school ) satisfied that ( ( school id of addresses ) equal to ( school id of staff ) ) ) ) , grouped by ( school id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'": "( name ) , ( trade name ) that belongs to ( medicine ) , that have ( ( fda approved ) equal to ( 'yes' ) )",
    "SELECT name FROM manufacturers WHERE revenue BETWEEN 100 AND 150": "( name ) that belongs to ( manufacturers ) , that have ( ( revenue ) between ( 100 ) and ( 150 ) )",
    "SELECT count(*) FROM Ref_budget_codes": "( the number of ( all items ) ) that belongs to ( ref budget codes )",
    "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"": "( country name of addresses ) that belongs to ( ( country ) , and ( ( match season ) satisfied that ( ( country id of addresses ) equal to ( country of staff ) ) ) ) , that have ( ( position of staff ) equal to ( forward ) ), and intersect with ( ( country name of addresses ) that belongs to ( ( country ) , and ( ( match season ) satisfied that ( ( country id of addresses ) equal to ( country of staff ) ) ) ) , that have ( ( position of staff ) equal to ( defender ) ))",
    "SELECT customer_status_code ,  cell_mobile_phone_number ,  email_address FROM Customers WHERE first_name = \"Marina\" OR last_name  =  \"Kohler\"": "( customer status code ) , ( cell mobile phone number ) , ( email address ) that belongs to ( customers ) , that have ( ( ( first name ) equal to ( marina ) ) or ( ( last name ) equal to ( kohler ) ) )",
    "SELECT count(*) FROM track": "( the number of ( all items ) ) that belongs to ( track )",
    "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\" GROUP BY T2.artist_name HAVING count(*)  >=  1": "( artist name of addresses ) , ( the number of ( all items ) ) that belongs to ( ( artist ) , and ( ( song ) satisfied that ( ( artist name of addresses ) equal to ( artist name of staff ) ) ) ) , that have ( ( languages of staff ) equal to ( english ) ) , grouped by ( artist name of staff ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 1 ) )",
    "SELECT avg(age) ,  city_code FROM student GROUP BY city_code": "( the average of ( age ) ) , ( city code ) that belongs to ( student ) , grouped by ( city code )",
    "SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  \"X\"": "( distinct ( name of addresses ) ) , ( position of addresses ) that belongs to ( ( physician ) , and ( ( prescribes ) satisfied that ( ( employeeid of addresses ) equal to ( physician of staff ) ) ) , and ( ( medication ) satisfied that ( ( code of enzyme ) equal to ( medication of staff ) ) ) ) , that have ( ( brand of enzyme ) equal to ( x ) )",
    "SELECT route_name FROM Delivery_Routes ORDER BY route_name": "( route name ) that belongs to ( delivery routes ) , ordered by ( ( route name ) )",
    "SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC": "( name ) , ( damage millions usd ) that belongs to ( storm ) , ordered by ( ( max speed ) in descending order )",
    "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;": "( first name ) , ( last name ) that belongs to ( employees ) , ordered by ( ( birth date ) in descending order ) , limited to the top ( 1 )",
    "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t2.position  =  \"CTO\"": "( fname of student ) , ( lname of student ) that belongs to ( ( club ) , and ( ( member of club ) satisfied that ( ( clubid of club ) equal to ( clubid of member of club ) ) ) , and ( ( student ) satisfied that ( ( stuid of member of club ) equal to ( stuid of student ) ) ) ) , that have ( ( ( clubname of club ) equal to ( hopkins student enterprises ) ) and ( ( position of member of club ) equal to ( cto ) ) )",
    "SELECT DISTINCT instrument FROM Instruments": "( distinct ( instrument ) ) that belongs to ( instruments )",
    "SELECT StuID FROM Sportsinfo GROUP BY StuID HAVING sum(hoursperweek)  >  10": "( stuid ) that belongs to ( sportsinfo ) , grouped by ( stuid ) , that have ( ( the sum of ( hoursperweek ) ) greater than ( 10 ) )",
    "SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*)  <=  5": "( competition type ) that belongs to ( competition ) , grouped by ( competition type ) , that have ( ( the number of ( all items ) ) less than or equal to ( 5 ) )",
    "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)": "( distinct ( policy type code of student ) ) that belongs to ( ( customers ) , and ( ( customers policies ) satisfied that ( ( customer id of club ) equal to ( customer id of member of club ) ) ) , and ( ( available policies ) satisfied that ( ( policy id of member of club ) equal to ( policy id of student ) ) ) ) , that have ( ( customer name of club ) equal to ( customer name of club ) that belongs to ( ( customers ) , and ( ( customers policies ) satisfied that ( ( customer id of club ) equal to ( customer id of member of club ) ) ) ) , grouped by ( customer name of club ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 ) )",
    "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC": "( industry ) that belongs to ( companies ) , grouped by ( industry ) , ordered by ( ( the number of ( all items ) ) in descending order )",
    "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'": "( amenity name of enzyme ) that belongs to ( ( dorm ) , and ( ( has amenity ) satisfied that ( ( dormid of addresses ) equal to ( dormid of staff ) ) ) , and ( ( dorm amenity ) satisfied that ( ( amenid of staff ) equal to ( amenid of enzyme ) ) ) , and ( ( lives in ) satisfied that ( ( dormid of trip ) equal to ( dormid of addresses ) ) ) , and ( ( student ) satisfied that ( ( stuid of department ) equal to ( stuid of trip ) ) ) ) , that have ( ( lname of department ) equal to ( 'smith' ) )",
    "SELECT Name FROM mountain ORDER BY Name ASC": "( name ) that belongs to ( mountain ) , ordered by ( ( name ) in ascending order )",
    "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype": "( allergytype of staff ) , ( the number of ( all items ) ) that belongs to ( ( has allergy ) , and ( ( allergy type ) satisfied that ( ( allergy of addresses ) equal to ( allergy of staff ) ) ) ) , grouped by ( allergytype of staff )",
    "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1": "( bname ) that belongs to ( bank ) , ordered by ( ( no of customers ) in descending order ) , limited to the top ( 1 )",
    "SELECT campus FROM campuses WHERE LOCATION  =  \"Chico\"": "( campus ) that belongs to ( campuses ) , that have ( ( location ) equal to ( chico ) )",
    "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50": "( the number of ( all items ) ) that belongs to ( classroom ) , that have ( ( ( building ) equal to ( 'lamberton' ) ) and ( ( capacity ) less than ( 50 ) ) )",
    "SELECT max(Silver) ,  min(Silver) FROM club_rank": "( the maximum of ( silver ) ) , ( the minimum of ( silver ) ) that belongs to ( club rank )",
    "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts": "( account id ) , ( date account opened ) , ( account name ) , ( other account details ) that belongs to ( accounts )",
    "SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*) ASC": "( subject id of addresses ) , ( subject name of staff ) , ( the number of ( all items ) ) that belongs to ( ( courses ) , and ( ( subjects ) satisfied that ( ( subject id of addresses ) equal to ( subject id of staff ) ) ) ) , grouped by ( subject id of addresses ) , ordered by ( ( the number of ( all items ) ) in ascending order )",
    "SELECT count(DISTINCT region_id) FROM affected_region": "( the number of ( distinct ( region id ) ) ) that belongs to ( affected region )",
    "SELECT count(*) FROM Financial_transactions": "( the number of ( all items ) ) that belongs to ( financial transactions )",
    "SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft": "( the minimum of ( distance ) ) , ( the average of ( distance ) ) , ( the maximum of ( distance ) ) that belongs to ( aircraft )",
    "SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)": "( title ) that belongs to ( film ) , that have ( ( film_id ) not in ( ( film id ) that belongs to ( film market estimation ) ) )",
    "SELECT DISTINCT T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.resolution  <  800": "( distinct ( file size of addresses ) ) , ( formats of addresses ) that belongs to ( ( files ) , and ( ( song ) satisfied that ( ( f id of addresses ) equal to ( f id of staff ) ) ) ) , that have ( ( resolution of staff ) less than ( 800 ) )",
    "SELECT name ,  distance FROM Aircraft WHERE aid  =  12": "( name ) , ( distance ) that belongs to ( aircraft ) , that have ( ( aid ) equal to ( 12 ) )",
    "SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1": "( dept name of enzyme ) that belongs to ( ( course ) , and ( ( class ) satisfied that ( ( crs code of addresses ) equal to ( crs code of staff ) ) ) , and ( ( department ) satisfied that ( ( dept code of addresses ) equal to ( dept code of enzyme ) ) ) ) , grouped by ( dept code of addresses ) , ordered by ( ( the sum of ( crs credit of addresses ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Loss'": "( name of club ) that belongs to ( ( swimmer ) , and ( ( record ) satisfied that ( ( id of club ) equal to ( swimmer id of member of club ) ) ) ) , that have ( ( result ) equal to ( 'win' ) ), and intersect with ( ( name of club ) that belongs to ( ( swimmer ) , and ( ( record ) satisfied that ( ( id of club ) equal to ( swimmer id of member of club ) ) ) ) , that have ( ( result ) equal to ( 'loss' ) ))",
    "SELECT count(patient) FROM stay WHERE room  =  112": "( the number of ( patient ) ) that belongs to ( stay ) , that have ( ( room ) equal to ( 112 ) )",
    "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee": "( nominee ) , ( the number of ( all items ) ) that belongs to ( musical ) , grouped by ( nominee )",
    "SELECT name ,  LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1": "( name ) , ( location ) that belongs to ( cinema ) , ordered by ( ( capacity ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID": "( store phone of addresses ) , ( store email address of addresses ) that belongs to ( ( drama workshop groups ) , and ( ( services ) satisfied that ( ( workshop group id of addresses ) equal to ( workshop group id of staff ) ) ) )",
    "SELECT name FROM club ORDER BY name DESC": "( name ) that belongs to ( club ) , ordered by ( ( name ) in descending order )",
    "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"": "( name of addresses ) that belongs to ( ( station ) , and ( ( status ) satisfied that ( ( id of addresses ) equal to ( station id of staff ) ) ) ) , grouped by ( station id of staff ) , that have ( ( the average of ( bikes available ) ) greater than ( 10 ) ), and except that ( ( name ) that belongs to ( station ) , that have ( ( city ) equal to ( san jose ) ))",
    "SELECT name FROM driver ORDER BY age DESC": "( name ) that belongs to ( driver ) , ordered by ( ( age ) in descending order )",
    "SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1": "( appointmentid ) that belongs to ( appointment ) , ordered by ( ( start ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1": "( name of addresses ) , ( balance of staff ) that belongs to ( ( accounts ) , and ( ( checking ) satisfied that ( ( custid of addresses ) equal to ( custid of staff ) ) ) , and ( ( savings ) satisfied that ( ( custid of addresses ) equal to ( custid of enzyme ) ) ) ) , ordered by ( ( balance of enzyme ) ) , limited to the top ( 1 )",
    "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8": "( distinct ( artist name ) ) that belongs to ( song ) , that have ( ( languages ) equal to ( english ) ), and except that ( ( distinct ( artist name ) ) that belongs to ( song ) , that have ( ( rating ) greater than ( 8 ) ))",
    "SELECT title FROM course WHERE dept_name  =  'Statistics' INTERSECT SELECT title FROM course WHERE dept_name  =  'Psychology'": "( title ) that belongs to ( course ) , that have ( ( dept name ) equal to ( 'statistics' ) ), and intersect with ( ( title ) that belongs to ( course ) , that have ( ( dept name ) equal to ( 'psychology' ) ))",
    "SELECT document_type_description FROM Ref_document_types WHERE document_type_name  =  \"Film\"": "( document type description ) that belongs to ( ref document types ) , that have ( ( document type name ) equal to ( film ) )",
    "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;": "( state province county of addresses ) that belongs to ( ( addresses ) , and ( ( staff ) satisfied that ( ( address id of addresses ) equal to ( staff address id of staff ) ) ) ) , grouped by ( state province county of addresses ) , that have ( ( the number of ( all items ) ) between ( 2 ) and ( 4 ) )",
    "SELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager\t =  \"Brenden\"": "( building address ) , ( building phone ) that belongs to ( apartment buildings ) , that have ( ( building manager ) equal to ( brenden ) )",
    "SELECT origin ,  destination FROM Flight WHERE price  >  300": "( origin ) , ( destination ) that belongs to ( flight ) , that have ( ( price ) greater than ( 300 ) )",
    "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  \"Wisconsin\"": "( first name of staff ) , ( last name of staff ) that belongs to ( ( addresses ) , and ( ( students ) satisfied that ( ( address id of addresses ) equal to ( address id of staff ) ) ) ) , that have ( ( state province county of addresses ) equal to ( wisconsin ) )",
    "SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1": "( physician ) , ( department ) that belongs to ( affiliated with ) , that have ( ( primaryaffiliation ) equal to ( 1 ) )",
    "SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID": "( name of addresses ) , ( name of staff ) that belongs to ( ( actor ) , and ( ( musical ) satisfied that ( ( musical id of addresses ) equal to ( musical id of staff ) ) ) )",
    "SELECT nationality ,  count(*) FROM swimmer GROUP BY nationality HAVING count(*)  >  1": "( nationality ) , ( the number of ( all items ) ) that belongs to ( swimmer ) , grouped by ( nationality ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT song_name FROM song WHERE rating  <  (SELECT max(rating) FROM song WHERE genre_is  =  \"blues\")": "( song name ) that belongs to ( song ) , that have ( ( rating ) less than ( the maximum of ( rating ) ) that belongs to ( song ) , that have ( ( genre is ) equal to ( blues ) ) )",
    "SELECT count(*) FROM HOTELS": "( the number of ( all items ) ) that belongs to ( hotels )",
    "SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7": "( distinct ( artist name ) ) that belongs to ( artist ) , that have ( ( country ) equal to ( bangladesh ) ), and except that ( ( distinct ( artist name ) ) that belongs to ( song ) , that have ( ( rating ) greater than ( 7 ) ))",
    "SELECT Name FROM WINE ORDER BY Score LIMIT 1": "( name ) that belongs to ( wine ) , ordered by ( ( score ) ) , limited to the top ( 1 )",
    "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\"": "( committee of addresses ) that belongs to ( ( election ) , and ( ( party ) satisfied that ( ( party of addresses ) equal to ( party id of staff ) ) ) ) , that have ( ( party of staff ) equal to ( democratic ) )",
    "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"BAL\"": "( distinct ( clubname of club ) ) that belongs to ( ( club ) , and ( ( member of club ) satisfied that ( ( clubid of club ) equal to ( clubid of member of club ) ) ) , and ( ( student ) satisfied that ( ( stuid of member of club ) equal to ( stuid of student ) ) ) ) , that have ( ( city code of student ) equal to ( bal ) )",
    "SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)": "( name ) that belongs to ( scientists ), and except that ( ( name of enzyme ) that belongs to ( ( assignedto ) , and ( ( projects ) satisfied that ( ( project of addresses ) equal to ( code of staff ) ) ) , and ( ( scientists ) satisfied that ( ( scientist of addresses ) equal to ( ssn of enzyme ) ) ) ) , that have ( ( hours of staff ) equal to ( the maximum of ( hours ) ) that belongs to ( projects ) ))",
    "SELECT song_name FROM song WHERE languages  =  \"english\"": "( song name ) that belongs to ( song ) , that have ( ( languages ) equal to ( english ) )",
    "SELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id": "( account name of staff ) , ( account id of addresses ) , ( the number of ( all items ) ) that belongs to ( ( financial transactions ) , and ( ( accounts ) satisfied that ( ( account id of addresses ) equal to ( account id of staff ) ) ) ) , grouped by ( account id of addresses )",
    "SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  \"Professor\"": "( stuid of staff ) that belongs to ( ( faculty ) , and ( ( student ) satisfied that ( ( facid of addresses ) equal to ( advisor of staff ) ) ) ) , that have ( ( rank of addresses ) equal to ( professor ) )",
    "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager\t =  \"Emma\"": "( building short name ) that belongs to ( apartment buildings ) , that have ( ( building manager ) equal to ( emma ) )",
    "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1": "( course name of addresses ) that belongs to ( ( courses ) , and ( ( student course registrations ) satisfied that ( ( course id of addresses ) equal to ( course id of staff ) ) ) ) , grouped by ( course id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT role_code ,  count(*) FROM Employees GROUP BY role_code": "( role code ) , ( the number of ( all items ) ) that belongs to ( employees ) , grouped by ( role code )",
    "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.uk_vat_number  =  (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1": "( individual last name of student ) that belongs to ( ( organizations ) , and ( ( organization contact individuals ) satisfied that ( ( organization id of club ) equal to ( organization id of member of club ) ) ) , and ( ( individuals ) satisfied that ( ( individual id of member of club ) equal to ( individual id of student ) ) ) ) , that have ( ( uk vat number of club ) equal to ( the maximum of ( uk vat number ) ) that belongs to ( organizations ) ) , ordered by ( ( date contact to of member of club ) in ascending order ) , limited to the top ( 1 )",
    "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1": "( activity name of addresses ) that belongs to ( ( activity ) , and ( ( faculty participates in ) satisfied that ( ( actid of addresses ) equal to ( actid of staff ) ) ) ) , grouped by ( actid of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id": "( first name ) , ( last name ) , ( hire date ) , ( salary ) , ( department id ) that belongs to ( employees ) , that have ( ( first_name ) not like ( '%m%' ) ) , ordered by ( ( department id ) )",
    "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1": "( country ) that belongs to ( mountain ) , grouped by ( country ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";": "( the average of ( price ) ) that belongs to ( ( lessons ) , and ( ( staff ) satisfied that ( ( staff id of addresses ) equal to ( staff id of staff ) ) ) ) , that have ( ( ( first name of staff ) equal to ( janessa ) ) and ( ( last name of staff ) equal to ( sawayn ) ) )",
    "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)": "( name ) that belongs to ( club ) , that have ( ( club_id ) not in ( ( club id ) that belongs to ( player ) ) )",
    "SELECT count(*) ,  T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' GROUP BY T1.year": "( the number of ( all items ) ) , ( year of addresses ) that belongs to ( ( postseason ) , and ( ( team ) satisfied that ( ( team id winner of addresses ) equal to ( team id br of staff ) ) ) ) , that have ( ( name of staff ) equal to ( 'boston red stockings' ) ) , grouped by ( year of addresses )",
    "SELECT count(DISTINCT LEVEL) FROM member": "( the number of ( distinct ( level ) ) ) that belongs to ( member )",
    "SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Meaghan\" AND T2.customer_last_name  =  \"Keeling\"": "( account name of addresses ) , ( other account details of addresses ) that belongs to ( ( accounts ) , and ( ( customers ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , that have ( ( ( customer first name of staff ) equal to ( meaghan ) ) and ( ( customer last name of staff ) equal to ( keeling ) ) )",
    "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\"": "( distinct ( customer details of member of club ) ) that belongs to ( ( policies ) , and ( ( customers ) satisfied that ( ( customer id of club ) equal to ( customer id of member of club ) ) ) ) , that have ( ( policy type code of club ) equal to ( deputy ) )",
    "SELECT lname FROM student WHERE sex  =  'F' AND city_code  =  'BAL' UNION SELECT lname FROM student WHERE sex  =  'M' AND age  <  20": "( lname ) that belongs to ( student ) , that have ( ( ( sex ) equal to ( 'f' ) ) and ( ( city code ) equal to ( 'bal' ) ) ) and ( lname ) that belongs to ( student ) , that have ( ( ( sex ) equal to ( 'm' ) ) and ( ( age ) less than ( 20 ) ) )",
    "SELECT DISTINCT grade FROM list WHERE classroom  =  103": "( distinct ( grade ) ) that belongs to ( list ) , that have ( ( classroom ) equal to ( 103 ) )",
    "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed": "( employee id ) that belongs to ( employees ), and except that ( ( destruction authorised by employee id ) that belongs to ( documents to be destroyed ))",
    "SELECT T2.Hardware_Model_name ,  T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB  >  32;": "( hardware model name of staff ) , ( company name of staff ) that belongs to ( ( chip model ) , and ( ( phone ) satisfied that ( ( model name of addresses ) equal to ( chip model of staff ) ) ) ) , that have ( ( ( launch year of addresses ) equal to ( 2002 ) ) or ( ( ram mib of addresses ) greater than ( 32 ) ) )",
    "SELECT project_id ,  count(*) FROM Documents GROUP BY project_id": "( project id ) , ( the number of ( all items ) ) that belongs to ( documents ) , grouped by ( project id )",
    "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\"": "( product name of addresses ) , ( color description of staff ) , ( product description of addresses ) that belongs to ( ( products ) , and ( ( ref colors ) satisfied that ( ( color code of addresses ) equal to ( color code of staff ) ) ) ) , that have ( ( product category code ) equal to ( herbs ) )",
    "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num": "( emp fname of staff ) , ( prof office of trip ) , ( crs description of enzyme ) that belongs to ( ( class ) , and ( ( employee ) satisfied that ( ( prof num of addresses ) equal to ( emp num of staff ) ) ) , and ( ( course ) satisfied that ( ( crs code of addresses ) equal to ( crs code of enzyme ) ) ) , and ( ( professor ) satisfied that ( ( emp num of staff ) equal to ( emp num of trip ) ) ) )",
    "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts": "( customer id ) that belongs to ( customers ), and except that ( ( customer id ) that belongs to ( accounts ))",
    "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1": "( start station name ) , ( start station id ) that belongs to ( trip ) , that have ( ( start_date ) like ( 8/% ) ) , grouped by ( start station name ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  2": "( facid of addresses ) that belongs to ( ( faculty ) , and ( ( student ) satisfied that ( ( facid of addresses ) equal to ( advisor of staff ) ) ) ) , grouped by ( facid of addresses ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID": "( name of addresses ) , ( name of staff ) that belongs to ( ( climber ) , and ( ( mountain ) satisfied that ( ( mountain id of addresses ) equal to ( mountain id of staff ) ) ) )",
    "SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id": "( guest first name of staff ) , ( booking start date of addresses ) , ( booking start date of addresses ) that belongs to ( ( apartment bookings ) , and ( ( guests ) satisfied that ( ( guest id of addresses ) equal to ( guest id of staff ) ) ) )",
    "SELECT DISTINCT TYPE FROM vocals": "( distinct ( type ) ) that belongs to ( vocals )",
    "SELECT Author FROM submission WHERE College  =  \"Florida\" OR College  =  \"Temple\"": "( author ) that belongs to ( submission ) , that have ( ( ( college ) equal to ( florida ) ) or ( ( college ) equal to ( temple ) ) )",
    "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\"": "( apt number ) that belongs to ( apartments ) , that have ( ( apt type code ) equal to ( flat ) )",
    "SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1;": "( customer status code ) that belongs to ( customers ) , grouped by ( customer status code ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( 1 )",
    "SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id": "( party name of staff ) , ( the number of ( all items ) ) that belongs to ( ( member ) , and ( ( party ) satisfied that ( ( party id of addresses ) equal to ( party id of staff ) ) ) ) , grouped by ( party id of addresses )",
    "SELECT age ,  count(*) FROM Student GROUP BY age": "( age ) , ( the number of ( all items ) ) that belongs to ( student ) , grouped by ( age )",
    "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Ray\"": "( the number of ( all items ) ) that belongs to ( ( lessons ) , and ( ( customers ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , that have ( ( first name of staff ) equal to ( ray ) )",
    "SELECT count(*) FROM Customers;": "( the number of ( all items ) ) that belongs to ( customers )",
    "SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'": "( name of addresses ) that belongs to ( ( products ) , and ( ( manufacturers ) satisfied that ( ( manufacturer of addresses ) equal to ( code of staff ) ) ) ) , that have ( ( name of staff ) equal to ( 'creative labs' ) ), and intersect with ( ( name of addresses ) that belongs to ( ( products ) , and ( ( manufacturers ) satisfied that ( ( manufacturer of addresses ) equal to ( code of staff ) ) ) ) , that have ( ( name of staff ) equal to ( 'sony' ) ))",
    "SELECT DISTINCT fname FROM student": "( distinct ( fname ) ) that belongs to ( student )",
    "SELECT name_first ,  name_last FROM player WHERE weight  >  220 OR height  <  75": "( name first ) , ( name last ) that belongs to ( player ) , that have ( ( ( weight ) greater than ( 220 ) ) or ( ( height ) less than ( 75 ) ) )",
    "SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2": "( driverid of addresses ) , ( forename of addresses ) , ( surname of addresses ) that belongs to ( ( drivers ) , and ( ( laptimes ) satisfied that ( ( driverid of addresses ) equal to ( driverid of staff ) ) ) ) , that have ( ( position ) equal to ( '1' ) ) , grouped by ( driverid of addresses ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  \"M\" AND T2.Election_Cycle  =  \"Fall\"": "( the number of ( all items ) ) that belongs to ( ( student ) , and ( ( voting record ) satisfied that ( ( stuid of addresses ) equal to ( class senator vote ) ) ) ) , that have ( ( ( sex of addresses ) equal to ( m ) ) and ( ( election cycle of staff ) equal to ( fall ) ) )",
    "SELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"Credit\"": "( customer id ) , ( customer first name ) that belongs to ( customers ), and except that ( ( customer id of addresses ) , ( customer first name of staff ) that belongs to ( ( customers cards ) , and ( ( customers ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , that have ( ( card type code ) equal to ( credit ) ))",
    "SELECT song_name FROM song ORDER BY resolution": "( song name ) that belongs to ( song ) , ordered by ( ( resolution ) )",
    "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)": "( title ) that belongs to ( course ) , that have ( ( course_id ) not in ( ( course id ) that belongs to ( prereq ) ) )",
    "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')": "( title ) that belongs to ( course ) , that have ( ( course_id ) in ( ( prereq id of addresses ) that belongs to ( ( prereq ) , and ( ( course ) satisfied that ( ( course id of addresses ) equal to ( course id of staff ) ) ) ) , that have ( ( title of staff ) equal to ( 'mobile computing' ) ) ) )",
    "SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1": "( amount ) , ( donator name ) that belongs to ( endowment ) , ordered by ( ( amount ) in descending order ) , limited to the top ( 1 )",
    "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num ORDER BY T2.emp_fname": "( emp fname of staff ) , ( prof office of addresses ) that belongs to ( ( professor ) , and ( ( employee ) satisfied that ( ( emp num of addresses ) equal to ( emp num of staff ) ) ) ) , ordered by ( ( emp fname of staff ) )",
    "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team": "( team ) , ( the number of ( all items ) ) that belongs to ( elimination ) , grouped by ( team )",
    "SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000": "( first name ) , ( last name ) , ( salary ) that belongs to ( employees ) , that have ( ( salary ) less than ( 6000 ) )",
    "SELECT Famous_Title FROM artist WHERE Artist  =  \"Triumfall\"": "( famous title ) that belongs to ( artist ) , that have ( ( artist ) equal to ( triumfall ) )",
    "SELECT title FROM course GROUP BY title HAVING count(*)  >  1": "( title ) that belongs to ( course ) , grouped by ( title ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000": "( cust name of addresses ) , ( acc type of addresses ) that belongs to ( ( customer ) , and ( ( loan ) satisfied that ( ( cust id of addresses ) equal to ( cust id of staff ) ) ) ) , grouped by ( cust name of addresses ) , that have ( ( the sum of ( amount of staff ) ) greater than ( 5000 ) )",
    "SELECT Theme FROM farm_competition ORDER BY YEAR ASC": "( theme ) that belongs to ( farm competition ) , ordered by ( ( year ) in ascending order )",
    "SELECT school_name FROM school ORDER BY enrollment LIMIT 1": "( school name ) that belongs to ( school ) , ordered by ( ( enrollment ) ) , limited to the top ( 1 )",
    "SELECT TYPE FROM film_market_estimation WHERE YEAR  =  1995": "( type ) that belongs to ( film market estimation ) , that have ( ( year ) equal to ( 1995 ) )",
    "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)": "( famous title ) that belongs to ( artist ) , that have ( ( artist_id ) not in ( ( ( artist id ) that belongs to ( volume ) ) ) )",
    "SELECT count(*) ,  POSITION FROM player WHERE points  <  30 GROUP BY POSITION": "( the number of ( all items ) ) , ( position ) that belongs to ( player ) , that have ( ( points ) less than ( 30 ) ) , grouped by ( position )",
    "SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;": "( name of staff ) , ( team id winner of addresses ) that belongs to ( ( postseason ) , and ( ( team ) satisfied that ( ( team id winner of addresses ) equal to ( team id br of staff ) ) ) ) , that have ( ( year of addresses ) equal to ( 2008 ) ) , grouped by ( team id winner of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.id ,  T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1": "( id of addresses ) , ( name of addresses ) , ( nationality of addresses ) that belongs to ( ( architect ) , and ( ( mill ) satisfied that ( ( id of addresses ) equal to ( architect id of staff ) ) ) ) , grouped by ( id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC": "( customer id ) , ( customer name ) that belongs to ( customers ) , ordered by ( ( customer id ) in ascending order )",
    "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452": "( date order placed of addresses ) that belongs to ( ( orders ) , and ( ( shipments ) satisfied that ( ( order id of addresses ) equal to ( order id of staff ) ) ) ) , that have ( ( shipment tracking number of staff ) equal to ( 3452 ) )",
    "SELECT name FROM building WHERE height_feet  >=  200 AND floors  >=  20": "( name ) that belongs to ( building ) , that have ( ( ( height feet ) greater than or equal to ( 200 ) ) and ( ( floors ) greater than or equal to ( 20 ) ) )",
    "SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  \"game1\"": "( name of staff ) that belongs to ( ( photos ) , and ( ( tourist attractions ) satisfied that ( ( tourist attraction id of addresses ) equal to ( tourist attraction id of staff ) ) ) ) , that have ( ( name of addresses ) equal to ( game1 ) )",
    "SELECT Team ,  Starting_Year FROM technician": "( team ) , ( starting year ) that belongs to ( technician )",
    "SELECT count(*) FROM instruments WHERE instrument  =  \"drums\"": "( the number of ( all items ) ) that belongs to ( instruments ) , that have ( ( instrument ) equal to ( drums ) )",
    "SELECT Product_Name FROM Products ORDER BY Product_Price DESC LIMIT 1": "( product name ) that belongs to ( products ) , ordered by ( ( product price ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"": "( the number of ( all items ) ) that belongs to ( appellations ) , that have ( ( county ) equal to ( napa ) )",
    "SELECT T1.Name ,  avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name": "( name of addresses ) , ( the average of ( speed of staff ) ) that belongs to ( ( country ) , and ( ( roller coaster ) satisfied that ( ( country id of addresses ) equal to ( country id of staff ) ) ) ) , grouped by ( name of addresses )",
    "SELECT LOCATION FROM gas_station ORDER BY open_year": "( location ) that belongs to ( gas station ) , ordered by ( ( open year ) )",
    "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"Khanewal District\"": "( store name of club ) that belongs to ( ( store ) , and ( ( store district ) satisfied that ( ( store id of club ) equal to ( store id of member of club ) ) ) , and ( ( district ) satisfied that ( ( district id of member of club ) equal to ( district id of student ) ) ) ) , that have ( ( district name of student ) equal to ( khanewal district ) )",
    "SELECT clubdesc FROM club WHERE clubname  =  \"Pen and Paper Gaming\"": "( clubdesc ) that belongs to ( club ) , that have ( ( clubname ) equal to ( pen and paper gaming ) )",
    "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id HAVING count(*)  >=  2": "( name of staff ) that belongs to ( ( train station ) , and ( ( station ) satisfied that ( ( station id of addresses ) equal to ( station id of staff ) ) ) ) , grouped by ( station id of addresses ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2": "( name of staff ) that belongs to ( ( flight ) , and ( ( aircraft ) satisfied that ( ( aid of addresses ) equal to ( aid of staff ) ) ) ) , grouped by ( aid of addresses ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT T1.emp_lname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History'": "( emp lname of addresses ) , ( prof office of staff ) that belongs to ( ( employee ) , and ( ( professor ) satisfied that ( ( emp num of addresses ) equal to ( emp num of staff ) ) ) , and ( ( department ) satisfied that ( ( dept code of staff ) equal to ( dept code of enzyme ) ) ) ) , that have ( ( dept name of enzyme ) equal to ( 'history' ) )",
    "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  >  ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Rylan\" AND T4.staff_last_name = \"Homenick\" )": "( problem id of addresses ) that belongs to ( ( problems ) , and ( ( staff ) satisfied that ( ( reported by staff id of addresses ) equal to ( staff id of staff ) ) ) ) , that have ( ( date problem reported ) greater than ( the maximum of ( date problem reported ) ) that belongs to ( ( problems ) , and ( ( staff ) satisfied that ( ( reported by staff id of enzyme ) equal to ( staff id of trip ) ) ) ) , that have ( ( ( staff first name of trip ) equal to ( rylan ) ) and ( ( staff last name of trip ) equal to ( homenick ) ) ) )",
    "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation  =  1": "( distinct ( name of staff ) ) that belongs to ( ( affiliated with ) , and ( ( department ) satisfied that ( ( department of addresses ) equal to ( departmentid of staff ) ) ) ) , that have ( ( primaryaffiliation ) equal to ( 1 ) )",
    "SELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9": "( distinct ( artist name of addresses ) ) , ( country of addresses ) that belongs to ( ( artist ) , and ( ( song ) satisfied that ( ( artist name of addresses ) equal to ( artist name of staff ) ) ) ) , that have ( ( rating of staff ) greater than ( 9 ) )",
    "SELECT Carrier FROM device WHERE Software_Platform != 'Android'": "( carrier ) that belongs to ( device ) , that have ( ( software platform ) not equal to ( 'android' ) )",
    "SELECT town_city FROM customers WHERE customer_type_code  =  \"Good Credit Rating\" GROUP BY town_city ORDER BY count(*) LIMIT 1": "( town city ) that belongs to ( customers ) , that have ( ( customer type code ) equal to ( good credit rating ) ) , grouped by ( town city ) , ordered by ( ( the number of ( all items ) ) ) , limited to the top ( 1 )",
    "SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE enroll_grade  =  'C'": "( distinct ( stu fname ) ) that belongs to ( ( student ) , and ( ( enroll ) satisfied that ( ( stu num of addresses ) equal to ( stu num of staff ) ) ) ) , that have ( ( enroll grade ) equal to ( 'c' ) )",
    "SELECT DISTINCT firstname ,  lastname FROM list": "( distinct ( firstname ) ) , ( lastname ) that belongs to ( list )",
    "SELECT T2.Delegate ,  T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District": "( delegate of staff ) , ( county name of addresses ) that belongs to ( ( county ) , and ( ( election ) satisfied that ( ( county id of addresses ) equal to ( district of staff ) ) ) )",
    "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)": "( customer name of club ) that belongs to ( ( customers ) , and ( ( customer orders ) satisfied that ( ( customer id of club ) equal to ( customer id of member of club ) ) ) , and ( ( order items ) satisfied that ( ( order id of member of club ) equal to ( order id of student ) ) ) ) , that have ( ( order quantity of student ) equal to ( the maximum of ( order quantity ) ) that belongs to ( order items ) )",
    "SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  \"photo\"": "( the sum of ( order quantity of addresses ) ) that belongs to ( ( order items ) , and ( ( products ) satisfied that ( ( product id of addresses ) equal to ( product id of staff ) ) ) ) , that have ( ( product name of staff ) equal to ( photo ) )",
    "SELECT distinct(BillingCountry) FROM INVOICE": "( distinct ( billingcountry ) ) that belongs to ( invoice )",
    "SELECT T2.role_name ,  T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T1.employee_name  =  \"Ebba\"": "( role name of staff ) , ( role description of staff ) that belongs to ( ( employees ) , and ( ( roles ) satisfied that ( ( role code of addresses ) equal to ( role code of staff ) ) ) ) , that have ( ( employee name of addresses ) equal to ( ebba ) )",
    "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20": "( lastname of addresses ) that belongs to ( ( customer ) , and ( ( employee ) satisfied that ( ( supportrepid of addresses ) equal to ( employeeid of staff ) ) ) ) , grouped by ( supportrepid of addresses ) , that have ( ( the number of ( all items ) ) less than or equal to ( 20 ) )",
    "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID WHERE T1.White  >  90": "( crime rate of staff ) that belongs to ( ( city ) , and ( ( county public safety ) satisfied that ( ( county id of addresses ) equal to ( county id of staff ) ) ) ) , that have ( ( white of addresses ) greater than ( 90 ) )",
    "SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1": "( interaction type ) , ( the number of ( all items ) ) that belongs to ( medicine enzyme interaction ) , grouped by ( interaction type ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM Video_games": "( the number of ( all items ) ) that belongs to ( video games )",
    "SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  \"Spring\"": "( distinct ( advisor of addresses ) ) that belongs to ( ( student ) , and ( ( voting record ) satisfied that ( ( stuid of addresses ) equal to ( treasurer vote of staff ) ) ) ) , that have ( ( election cycle of staff ) equal to ( spring ) )",
    "SELECT Title FROM book ORDER BY Issues ASC": "( title ) that belongs to ( book ) , ordered by ( ( issues ) in ascending order )",
    "SELECT Name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)": "( name ) that belongs to ( scientists ) , that have ( ( ssn ) not in ( ( scientist ) that belongs to ( assignedto ) ) )",
    "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15": "( city ) , ( the number of ( all items ) ) that belongs to ( station ) , grouped by ( city ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 15 ) )",
    "SELECT count(DISTINCT eid) FROM Certificate": "( the number of ( distinct ( eid ) ) ) that belongs to ( certificate )",
    "SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1": "( rank ) that belongs to ( faculty ) , grouped by ( rank ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM market WHERE Number_cities  <  300": "( the number of ( all items ) ) that belongs to ( market ) , that have ( ( number cities ) less than ( 300 ) )",
    "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2": "( event name ) that belongs to ( party events ) , grouped by ( event name ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )",
    "SELECT count(*) FROM stadium WHERE country != 'Russia'": "( the number of ( all items ) ) that belongs to ( stadium ) , that have ( ( country ) not equal to ( 'russia' ) )",
    "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'": "( all games of member of club ) , ( location of club ) that belongs to ( ( university ) , and ( ( basketball match ) satisfied that ( ( school id of club ) equal to ( school id of member of club ) ) ) ) , that have ( ( team name ) equal to ( 'clemson' ) )",
    "SELECT count(*) FROM tryout WHERE pPos  =  'goalie'": "( the number of ( all items ) ) that belongs to ( tryout ) , that have ( ( ppos ) equal to ( 'goalie' ) )",
    "SELECT sum(city_population) FROM district WHERE city_area  >  (SELECT avg(city_area) FROM district)": "( the sum of ( city population ) ) that belongs to ( district ) , that have ( ( city area ) greater than ( the average of ( city area ) ) that belongs to ( district ) )",
    "SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  3000": "( name of staff ) that belongs to ( ( journal committee ) , and ( ( editor ) satisfied that ( ( editor id of addresses ) equal to ( editor id of staff ) ) ) , and ( ( journal ) satisfied that ( ( journal id of addresses ) equal to ( journal id of enzyme ) ) ) ) , that have ( ( sales of enzyme ) greater than ( 3000 ) )",
    "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.firstname  =  \"Solveig\" AND T2.title  =  \"A Bar In Amsterdam\"": "( type ) that belongs to ( ( vocals ) , and ( ( songs ) satisfied that ( ( songid of addresses ) equal to ( songid of staff ) ) ) , and ( ( band ) satisfied that ( ( bandmate of addresses ) equal to ( id of enzyme ) ) ) ) , that have ( ( ( firstname of enzyme ) equal to ( solveig ) ) and ( ( title of staff ) equal to ( a bar in amsterdam ) ) )",
    "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"": "( the average of ( price ) ) that belongs to ( flight ) , that have ( ( ( origin ) equal to ( los angeles ) ) and ( ( destination ) equal to ( honolulu ) ) )",
    "SELECT Carrier FROM phone WHERE Memory_in_G  <  32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G  >  64": "( carrier ) that belongs to ( phone ) , that have ( ( memory in g ) less than ( 32 ) ), and intersect with ( ( carrier ) that belongs to ( phone ) , that have ( ( memory in g ) greater than ( 64 ) ))",
    "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\"": "( customer phone ) , ( customer email ) that belongs to ( customers ) , that have ( ( ( customer first name ) equal to ( aniyah ) ) and ( ( customer last name ) equal to ( feest ) ) )",
    "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1": "( name of club ) that belongs to ( ( ship ) , and ( ( captain ) satisfied that ( ( ship id of club ) equal to ( ship id of member of club ) ) ) ) , grouped by ( ship id of member of club ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211'": "( stu fname of enzyme ) that belongs to ( ( class ) , and ( ( enroll ) satisfied that ( ( class code of addresses ) equal to ( class code of staff ) ) ) , and ( ( student ) satisfied that ( ( stu num of staff ) equal to ( stu num of enzyme ) ) ) ) , that have ( ( crs code of addresses ) equal to ( 'acct-211' ) )",
    "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != \"San Francisco\"": "( the number of ( all items ) ) that belongs to ( ( trip ) , and ( ( station ) satisfied that ( ( end station id of addresses ) equal to ( id of staff ) ) ) ) , that have ( ( city of staff ) not equal to ( san francisco ) )",
    "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"": "( fname ) , ( lname ) that belongs to ( faculty ) , that have ( ( ( sex ) equal to ( m ) ) and ( ( building ) equal to ( neb ) ) )",
    "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')": "( song name ) that belongs to ( song ) , that have ( ( rating ) less than ( the minimum of ( rating ) ) that belongs to ( song ) , that have ( ( languages ) equal to ( 'english' ) ) )",
    "SELECT Country FROM manager WHERE Age  >  50 OR Age  <  46": "( country ) that belongs to ( manager ) , that have ( ( ( age ) greater than ( 50 ) ) or ( ( age ) less than ( 46 ) ) )",
    "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\";": "( the number of ( all items ) ) that belongs to ( rooms ) , that have ( ( bedtype ) equal to ( king ) )",
    "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"": "( player of addresses ) , ( years played of addresses ) that belongs to ( ( player ) , and ( ( team ) satisfied that ( ( team of addresses ) equal to ( team id of staff ) ) ) ) , that have ( ( name of staff ) equal to ( columbus crew ) )",
    "SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy": "( allergy ) , ( the number of ( all items ) ) that belongs to ( has allergy ) , grouped by ( allergy )",
    "SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1": "( title of staff ) , ( mid of addresses ) that belongs to ( ( rating ) , and ( ( movie ) satisfied that ( ( mid of addresses ) equal to ( mid of staff ) ) ) ) , grouped by ( mid of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1": "( allergy ) that belongs to ( has allergy ) , grouped by ( allergy ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT name ,  cost FROM procedures ORDER BY cost DESC": "( name ) , ( cost ) that belongs to ( procedures ) , ordered by ( ( cost ) in descending order )",
    "SELECT order_item_id FROM order_items WHERE product_id = 11": "( order item id ) that belongs to ( order items ) , that have ( ( product id ) equal to ( 11 ) )",
    "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma')": "( the average of ( price ) ) that belongs to ( wine ) , that have ( ( appelation ) not in ( ( appelation of addresses ) that belongs to ( ( appellations ) , and ( ( wine ) satisfied that ( ( appelation of addresses ) equal to ( appelation of staff ) ) ) ) , that have ( ( county of addresses ) equal to ( 'sonoma' ) ) ) )",
    "SELECT Tourist_Details FROM VISITORS": "( tourist details ) that belongs to ( visitors )",
    "SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"": "( the maximum of ( price ) ) , ( the maximum of ( score ) ) that belongs to ( wine ) , that have ( ( appelation ) equal to ( st. helena ) )",
    "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\"": "( staff first name of enzyme ) , ( staff last name of enzyme ) that belongs to ( ( problems ) join ( ( product ) ) , and ( ( staff ) satisfied that ( ( ( product id of addresses ) equal to ( product id of staff ) ) and ( ( reported by staff id of addresses ) equal to ( staff id of enzyme ) ) ) ) ) , that have ( ( product name of staff ) equal to ( rem ) ), and except that ( ( staff first name of enzyme ) , ( staff last name of enzyme ) that belongs to ( ( problems ) join ( ( product ) ) , and ( ( staff ) satisfied that ( ( ( product id of addresses ) equal to ( product id of staff ) ) and ( ( reported by staff id of addresses ) equal to ( staff id of enzyme ) ) ) ) ) , that have ( ( product name of staff ) equal to ( aut ) ))",
    "SELECT count(*) FROM Customers_cards": "( the number of ( all items ) ) that belongs to ( customers cards )",
    "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )": "( project details ) that belongs to ( projects ) , that have ( ( project_id ) not in ( ( project id ) that belongs to ( project outcomes ) ) )",
    "SELECT Status FROM roller_coaster GROUP BY Status HAVING COUNT(*)  >  2": "( status ) that belongs to ( roller coaster ) , grouped by ( status ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )",
    "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id": "( distinct ( cust name of addresses ) ) , ( credit score of addresses ) that belongs to ( ( customer ) , and ( ( loan ) satisfied that ( ( cust id of addresses ) equal to ( cust id of staff ) ) ) )",
    "SELECT count(DISTINCT Hometown) FROM people": "( the number of ( distinct ( hometown ) ) ) that belongs to ( people )",
    "SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100": "( city ) that belongs to ( branch ), and except that ( ( city ) that belongs to ( branch ) , that have ( ( membership amount ) greater than ( 100 ) ))",
    "SELECT T1.Customer_Event_ID  ,  T1.property_id FROM Customer_Events AS T1 JOIN Customer_Event_Notes AS T2 ON T1.Customer_Event_ID  =  T2.Customer_Event_ID GROUP BY T1.customer_event_id HAVING count(*) BETWEEN 1 AND 3": "( customer event id of addresses ) , ( property id of addresses ) that belongs to ( ( customer events ) , and ( ( customer event notes ) satisfied that ( ( customer event id of addresses ) equal to ( customer event id of staff ) ) ) ) , grouped by ( customer event id of addresses ) , that have ( ( the number of ( all items ) ) between ( 1 ) and ( 3 ) )",
    "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3": "( location code ) that belongs to ( document locations ) , grouped by ( location code ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 3 ) )",
    "SELECT country FROM airports ORDER BY elevation DESC LIMIT 1": "( country ) that belongs to ( airports ) , ordered by ( ( elevation ) in descending order ) , limited to the top ( 1 )",
    "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2": "( mid ) , ( the average of ( stars ) ) that belongs to ( rating ) , grouped by ( mid ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes": "( budget type code ) , ( budget type description ) that belongs to ( ref budget codes )",
    "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Le Pop\"": "( firstname of staff ) , ( lastname of staff ) that belongs to ( ( performance ) , and ( ( band ) satisfied that ( ( bandmate of addresses ) equal to ( id of staff ) ) ) , and ( ( songs ) satisfied that ( ( songid of enzyme ) equal to ( songid of addresses ) ) ) ) , that have ( ( title of enzyme ) equal to ( le pop ) )",
    "SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1": "( artist name of addresses ) that belongs to ( ( song ) , and ( ( files ) satisfied that ( ( f id of addresses ) equal to ( f id of staff ) ) ) ) , ordered by ( ( duration of staff ) ) , limited to the top ( 1 )",
    "SELECT T2.roomName ,  count(*) ,  T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room": "( roomname of staff ) , ( the number of ( all items ) ) , ( room of addresses ) that belongs to ( ( reservations ) , and ( ( rooms ) satisfied that ( ( room of addresses ) equal to ( roomid of staff ) ) ) ) , grouped by ( room of addresses )",
    "SELECT count(*) FROM Employees;": "( the number of ( all items ) ) that belongs to ( employees )",
    "SELECT T2.emp_fname ,  T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num": "( emp fname of staff ) , ( crs code of addresses ) that belongs to ( ( class ) , and ( ( employee ) satisfied that ( ( prof num of addresses ) equal to ( emp num of staff ) ) ) )",
    "SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T2.Weeks_on_Top  >  2": "( date of ceremony of addresses ) that belongs to ( ( music festival ) , and ( ( volume ) satisfied that ( ( volume of addresses ) equal to ( volume id of staff ) ) ) ) , that have ( ( weeks on top of staff ) greater than ( 2 ) )",
    "SELECT count(DISTINCT s_id) FROM advisor": "( the number of ( distinct ( s id ) ) ) that belongs to ( advisor )",
    "SELECT T2.Railway_ID ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID HAVING COUNT(*)  >  1": "( railway id of staff ) , ( location of addresses ) that belongs to ( ( railway ) , and ( ( train ) satisfied that ( ( railway id of addresses ) equal to ( railway id of staff ) ) ) ) , grouped by ( railway id of staff ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT Name FROM actor WHERE Age != 20": "( name ) that belongs to ( actor ) , that have ( ( age ) not equal to ( 20 ) )",
    "SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  \"King Book\"": "( project details of addresses ) that belongs to ( ( projects ) , and ( ( documents ) satisfied that ( ( project id of addresses ) equal to ( project id of staff ) ) ) ) , that have ( ( document name of staff ) equal to ( king book ) )",
    "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2": "( service name of member of club ) that belongs to ( ( first notification of loss ) , and ( ( services ) satisfied that ( ( service id of club ) equal to ( service id of member of club ) ) ) ) , grouped by ( service id of club ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )",
    "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1": "( country of addresses ) that belongs to ( ( artist ) , and ( ( song ) satisfied that ( ( artist name of addresses ) equal to ( artist name of staff ) ) ) ) , grouped by ( artist name of staff ) , ordered by ( ( the number of ( all items ) ) ) , limited to the top ( 1 )",
    "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1": "( time of addresses ) that belongs to ( ( elimination ) , and ( ( wrestler ) satisfied that ( ( wrestler id of addresses ) equal to ( wrestler id of staff ) ) ) ) , ordered by ( ( days held of staff ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1": "( department id of addresses ) , ( name of addresses ) , ( the number of ( all items ) ) that belongs to ( ( management ) , and ( ( department ) satisfied that ( ( department id of addresses ) equal to ( department id of staff ) ) ) ) , grouped by ( department id of addresses ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT count(*) FROM school": "( the number of ( all items ) ) that belongs to ( school )",
    "SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";": "( kids ) that belongs to ( reservations ) , that have ( ( ( firstname ) equal to ( roy ) ) and ( ( lastname ) equal to ( sweazy ) ) )",
    "SELECT destination ,  count(*) FROM Flight GROUP BY destination": "( destination ) , ( the number of ( all items ) ) that belongs to ( flight ) , grouped by ( destination )",
    "SELECT count(*) FROM program": "( the number of ( all items ) ) that belongs to ( program )",
    "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"flax\"": "( the number of ( all items ) ) that belongs to ( ( products ) , and ( ( product characteristics ) satisfied that ( ( product id of club ) equal to ( product id of member of club ) ) ) , and ( ( characteristics ) satisfied that ( ( characteristic id of member of club ) equal to ( characteristic id of student ) ) ) ) , that have ( ( product name of club ) equal to ( flax ) )",
    "SELECT count(*) ,  time_of_day FROM broadcast GROUP BY time_of_day": "( the number of ( all items ) ) , ( time of day ) that belongs to ( broadcast ) , grouped by ( time of day )",
    "SELECT Name FROM county_public_safety ORDER BY Population DESC": "( name ) that belongs to ( county public safety ) , ordered by ( ( population ) in descending order )",
    "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12": "( distinct ( id of addresses ) ) , ( name of addresses ) that belongs to ( ( station ) , and ( ( status ) satisfied that ( ( id of addresses ) equal to ( station id of staff ) ) ) ) , that have ( ( bikes available of staff ) greater than ( 12 ) )",
    "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Appropriations\" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Economic Matters\"": "( party of staff ) that belongs to ( ( election ) , and ( ( party ) satisfied that ( ( party of addresses ) equal to ( party id of staff ) ) ) ) , that have ( ( committee of addresses ) equal to ( appropriations ) ), and intersect with ( ( party of staff ) that belongs to ( ( election ) , and ( ( party ) satisfied that ( ( party of addresses ) equal to ( party id of staff ) ) ) ) , that have ( ( committee of addresses ) equal to ( economic matters ) ))",
    "SELECT T1.Team ,  T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID": "( team of addresses ) , ( location of staff ) that belongs to ( ( player ) , and ( ( school ) satisfied that ( ( school id of addresses ) equal to ( school id of staff ) ) ) )",
    "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1": "( customer id of addresses ) that belongs to ( ( customers ) , and ( ( orders ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , grouped by ( customer id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT Carrier FROM device WHERE Device_ID NOT IN (SELECT Device_ID FROM stock)": "( carrier ) that belongs to ( device ) , that have ( ( device_id ) not in ( ( device id ) that belongs to ( stock ) ) )",
    "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2": "( famous title of addresses ) that belongs to ( ( artist ) , and ( ( volume ) satisfied that ( ( artist id of addresses ) equal to ( artist id of staff ) ) ) ) , that have ( ( weeks on top of staff ) greater than ( 2 ) )",
    "SELECT Operating_system ,  count(*) FROM web_client_accelerator GROUP BY Operating_system": "( operating system ) , ( the number of ( all items ) ) that belongs to ( web client accelerator ) , grouped by ( operating system )",
    "SELECT count(*) FROM products WHERE product_category_code  =  \"Seeds\"": "( the number of ( all items ) ) that belongs to ( products ) , that have ( ( product category code ) equal to ( seeds ) )",
    "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\";": "( billing state ) , ( the number of ( all items ) ) , ( the sum of ( total ) ) that belongs to ( invoices ) , that have ( ( billing state ) equal to ( ca ) )",
    "SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000": "( location ) that belongs to ( track ) , that have ( ( seating ) greater than ( 90000 ) ), and intersect with ( ( location ) that belongs to ( track ) , that have ( ( seating ) less than ( 70000 ) ))",
    "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')": "( title ) that belongs to ( course ) , that have ( ( course_id ) in ( ( course id of addresses ) that belongs to ( ( prereq ) , and ( ( course ) satisfied that ( ( prereq id of addresses ) equal to ( course id of staff ) ) ) ) , that have ( ( title of staff ) equal to ( 'differential geometry' ) ) ) )",
    "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'": "( customer name ) that belongs to ( customers ), and except that ( ( customer name of club ) that belongs to ( ( customers ) , and ( ( customer orders ) satisfied that ( ( customer id of club ) equal to ( customer id of member of club ) ) ) , and ( ( order items ) satisfied that ( ( order id of member of club ) equal to ( order id of student ) ) ) , and ( ( products ) satisfied that ( ( product id of student ) equal to ( product id of inst ) ) ) ) , that have ( ( product details of inst ) equal to ( 'latte' ) ))",
    "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\"": "( appelation ) that belongs to ( wine ) , that have ( ( year ) greater than ( 2008 ) ), and except that ( ( appelation ) that belongs to ( appellations ) , that have ( ( area ) equal to ( central coast ) ))",
    "SELECT * FROM products WHERE price BETWEEN 60 AND 120": "all items that belongs to ( products ) , that have ( ( price ) between ( 60 ) and ( 120 ) )",
    "SELECT avg(transaction_amount) ,  min(transaction_amount) ,  max(transaction_amount) ,   sum(transaction_amount) FROM Financial_transactions": "( the average of ( transaction amount ) ) , ( the minimum of ( transaction amount ) ) , ( the maximum of ( transaction amount ) ) , ( the sum of ( transaction amount ) ) that belongs to ( financial transactions )",
    "SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num WHERE T3.stu_lname  =  'Smithson'": "( crs code of addresses ) that belongs to ( ( class ) , and ( ( enroll ) satisfied that ( ( class code of addresses ) equal to ( class code of staff ) ) ) , and ( ( student ) satisfied that ( ( stu num of enzyme ) equal to ( stu num of staff ) ) ) ) , that have ( ( stu lname of enzyme ) equal to ( 'smithson' ) )",
    "SELECT count(DISTINCT state) FROM bank": "( the number of ( distinct ( state ) ) ) that belongs to ( bank )",
    "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes DESC": "( name of staff ) that belongs to ( ( election ) , and ( ( representative ) satisfied that ( ( representative id of addresses ) equal to ( representative id of staff ) ) ) ) , ordered by ( ( votes ) in descending order )",
    "SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type": "( accreditation type ) , ( the number of ( all items ) ) that belongs to ( phone ) , grouped by ( accreditation type )",
    "SELECT count(*) ,  dept_code FROM professor WHERE prof_high_degree  =  'Ph.D.' GROUP BY dept_code": "( the number of ( all items ) ) , ( dept code ) that belongs to ( professor ) , that have ( ( prof high degree ) equal to ( 'ph.d.' ) ) , grouped by ( dept code )",
    "SELECT COUNT (DISTINCT Publication_Date) FROM publication": "( the number of ( distinct ( publication date ) ) ) that belongs to ( publication )",
    "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2": "( policy type code ) that belongs to ( policies ) , grouped by ( policy type code ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )",
    "SELECT STATEMENT_ID ,  statement_details FROM Statements": "( statement id ) , ( statement details ) that belongs to ( statements )",
    "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")": "( name ) that belongs to ( wine ) , that have ( ( year ) less than ( the minimum of ( year ) ) that belongs to ( wine ) , that have ( ( winery ) equal to ( brander ) ) )",
    "SELECT count(*) ,  classroom FROM list GROUP BY classroom": "( the number of ( all items ) ) , ( classroom ) that belongs to ( list ) , grouped by ( classroom )",
    "SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING count(*)  >  3": "( complaint status code ) that belongs to ( complaints ) , grouped by ( complaint status code ) , that have ( ( the number of ( all items ) ) greater than ( 3 ) )",
    "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'": "( distinct ( fname ) ) that belongs to ( student ) , that have ( ( fname ) like ( '%a%' ) )",
    "SELECT phone_number ,  email_address FROM Customers WHERE amount_outstanding  >  2000;": "( phone number ) , ( email address ) that belongs to ( customers ) , that have ( ( amount outstanding ) greater than ( 2000 ) )",
    "SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2;": "( first name of staff ) , ( last name of staff ) that belongs to ( ( customer payments ) , and ( ( customers ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , grouped by ( customer id of addresses ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )",
    "SELECT t1.name ,  t1.nationality FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' GROUP BY t2.swimmer_id HAVING count(*)  >  1": "( name of club ) , ( nationality of club ) that belongs to ( ( swimmer ) , and ( ( record ) satisfied that ( ( id of club ) equal to ( swimmer id of member of club ) ) ) ) , that have ( ( result ) equal to ( 'win' ) ) , grouped by ( swimmer id of member of club ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT DISTINCT firstname FROM list WHERE classroom  =  107": "( distinct ( firstname ) ) that belongs to ( list ) , that have ( ( classroom ) equal to ( 107 ) )",
    "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_President_VOTE": "( distinct ( lname of addresses ) ) that belongs to ( ( student ) , and ( ( voting record ) satisfied that ( ( stuid of addresses ) equal to ( class president vote of staff ) ) ) )",
    "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq": "( course id ) that belongs to ( course ), and except that ( ( course id ) that belongs to ( prereq ))",
    "SELECT LOCATION ,  sum(number_of_platforms) ,  sum(total_passengers) FROM station GROUP BY LOCATION": "( location ) , ( the sum of ( number of platforms ) ) , ( the sum of ( total passengers ) ) that belongs to ( station ) , grouped by ( location )",
    "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \"Simon Woodroffe\" OR T1.Investor  =  \"Peter Jones\"": "( date of birth of staff ) that belongs to ( ( entrepreneur ) , and ( ( people ) satisfied that ( ( people id of addresses ) equal to ( people id of staff ) ) ) ) , that have ( ( ( investor of addresses ) equal to ( simon woodroffe ) ) or ( ( investor of addresses ) equal to ( peter jones ) ) )",
    "SELECT account_id ,  customer_id ,  account_name FROM Accounts": "( account id ) , ( customer id ) , ( account name ) that belongs to ( accounts )",
    "SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T2.Age  >  50": "( location of enzyme ) that belongs to ( ( party host ) , and ( ( host ) satisfied that ( ( host id of addresses ) equal to ( host id of staff ) ) ) , and ( ( party ) satisfied that ( ( party id of addresses ) equal to ( party id of enzyme ) ) ) ) , that have ( ( age of staff ) greater than ( 50 ) )",
    "SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id": "( document name ) that belongs to ( documents ), and except that ( ( document name of club ) that belongs to ( ( documents ) , and ( ( document sections ) satisfied that ( ( document code of club ) equal to ( document code of member of club ) ) ) , and ( ( document sections images ) satisfied that ( ( section id of member of club ) equal to ( section id of student ) ) ) ))",
    "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90": "( first name ) , ( last name ) that belongs to ( employees ) , that have ( ( ( department id ) equal to ( 70 ) ) or ( ( department id ) equal to ( 90 ) ) )",
    "SELECT document_type_name ,  document_type_description FROM Ref_document_types WHERE document_type_code  =  \"RV\"": "( document type name ) , ( document type description ) that belongs to ( ref document types ) , that have ( ( document type code ) equal to ( rv ) )",
    "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC": "( party theme ) that belongs to ( party ) , ordered by ( ( number of hosts ) in ascending order )",
    "SELECT avg(Scores) FROM submission": "( the average of ( scores ) ) that belongs to ( submission )",
    "SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016": "( name of staff ) , ( hometown of staff ) that belongs to ( ( membership register branch ) , and ( ( member ) satisfied that ( ( member id of addresses ) equal to ( member id of staff ) ) ) ) , that have ( ( register year of addresses ) equal to ( 2016 ) )",
    "SELECT name FROM instructor WHERE name LIKE '%dar%'": "( name ) that belongs to ( instructor ) , that have ( ( name ) like ( '%dar%' ) )",
    "SELECT T1.season ,  T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.injury  =  'Foot injury' OR T3.injury  =  'Knee problem'": "( season of addresses ) , ( name of staff ) that belongs to ( ( game ) , and ( ( stadium ) satisfied that ( ( stadium id of addresses ) equal to ( id of staff ) ) ) , and ( ( injury accident ) satisfied that ( ( id of addresses ) equal to ( game id of enzyme ) ) ) ) , that have ( ( ( injury of enzyme ) equal to ( 'foot injury' ) ) or ( ( injury of enzyme ) equal to ( 'knee problem' ) ) )",
    "SELECT city ,  count(*) FROM airports GROUP BY city HAVING count(*)  >  1": "( city ) , ( the number of ( all items ) ) that belongs to ( airports ) , grouped by ( city ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT count(*) FROM COURSE": "( the number of ( all items ) ) that belongs to ( course )",
    "SELECT Name FROM WINE WHERE YEAR  =  \"2008\"": "( name ) that belongs to ( wine ) , that have ( ( year ) equal to ( 2008 ) )",
    "SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")": "( distinct ( song name ) ) that belongs to ( song ) , that have ( ( resolution ) greater than ( the minimum of ( resolution ) ) that belongs to ( song ) , that have ( ( languages ) equal to ( english ) ) )",
    "SELECT count(*) FROM claims_processing_stages": "( the number of ( all items ) ) that belongs to ( claims processing stages )",
    "SELECT state_province_county ,  country FROM addresses WHERE zip_postcode LIKE \"4%\"": "( state province county ) , ( country ) that belongs to ( addresses ) , that have ( ( zip_postcode ) like ( 4% ) )",
    "SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Success' INTERSECT SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Fail'": "( service type code of addresses ) that belongs to ( ( services ) , and ( ( events ) satisfied that ( ( service id of addresses ) equal to ( service id of staff ) ) ) ) , that have ( ( event details of staff ) equal to ( 'success' ) ), and intersect with ( ( service type code of addresses ) that belongs to ( ( services ) , and ( ( events ) satisfied that ( ( service id of addresses ) equal to ( service id of staff ) ) ) ) , that have ( ( event details of staff ) equal to ( 'fail' ) ))",
    "SELECT sum(no_of_customers) FROM bank": "( the sum of ( no of customers ) ) that belongs to ( bank )",
    "SELECT document_id ,  receipt_date FROM Documents;": "( document id ) , ( receipt date ) that belongs to ( documents )",
    "SELECT avg(Order_Quantity) FROM Invoices WHERE payment_method_code  =  \"MasterCard\"": "( the average of ( order quantity ) ) that belongs to ( invoices ) , that have ( ( payment method code ) equal to ( mastercard ) )",
    "SELECT count(*) FROM dorm_amenity": "( the number of ( all items ) ) that belongs to ( dorm amenity )",
    "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")": "( the sum of ( enr ) ) that belongs to ( college ) , that have ( ( cname ) not in ( ( cname ) that belongs to ( tryout ) , that have ( ( ppos ) equal to ( goalie ) ) ) )",
    "SELECT count(*) FROM ship": "( the number of ( all items ) ) that belongs to ( ship )",
    "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"": "( the number of ( all items ) ) that belongs to ( station ) , that have ( ( city ) equal to ( mountain view ) )",
    "SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010;": "( the sum of ( attendance of addresses ) ) that belongs to ( ( home game ) , and ( ( team ) satisfied that ( ( team id of addresses ) equal to ( team id br of staff ) ) ) ) , that have ( ( ( name of staff ) equal to ( 'boston red stockings' ) ) and ( ( t1.year ) between ( 2000 ) and ( 2010 ) ) )",
    "SELECT director FROM movie WHERE YEAR  =  1999 OR YEAR  =  2000": "( director ) that belongs to ( movie ) , that have ( ( ( year ) equal to ( 1999 ) ) or ( ( year ) equal to ( 2000 ) ) )",
    "SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'": "( name ) that belongs to ( user profiles ) , that have ( ( ( email ) like ( '%superstar%' ) ) or ( ( email ) like ( '%edu%' ) ) )",
    "SELECT T2.school ,  T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN driver AS T3 ON T1.driver_id  =  T3.driver_id": "( school of staff ) , ( name of enzyme ) that belongs to ( ( school bus ) , and ( ( school ) satisfied that ( ( school id of addresses ) equal to ( school id of staff ) ) ) , and ( ( driver ) satisfied that ( ( driver id of addresses ) equal to ( driver id of enzyme ) ) ) )",
    "SELECT count(*) FROM campuses": "( the number of ( all items ) ) that belongs to ( campuses )",
    "SELECT count(*) FROM customers WHERE city = \"Prague\";": "( the number of ( all items ) ) that belongs to ( customers ) , that have ( ( city ) equal to ( prague ) )",
    "SELECT campus FROM campuses WHERE YEAR  <  1800": "( campus ) that belongs to ( campuses ) , that have ( ( year ) less than ( 1800 ) )",
    "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"": "( customer details ) that belongs to ( customers ) , that have ( ( customer_details ) like ( %diana% ) )",
    "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex": "( the number of ( all items ) ) , ( sex ) that belongs to ( student ) , that have ( ( age ) greater than ( the average of ( age ) ) that belongs to ( student ) ) , grouped by ( sex )",
    "SELECT fname FROM student WHERE age  >  20": "( fname ) that belongs to ( student ) , that have ( ( age ) greater than ( 20 ) )",
    "SELECT count(*) FROM Companies": "( the number of ( all items ) ) that belongs to ( companies )",
    "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3": "( name of staff ) that belongs to ( ( rating ) , and ( ( reviewer ) satisfied that ( ( rid of addresses ) equal to ( rid of staff ) ) ) ) , that have ( ( stars of addresses ) greater than ( 3 ) )",
    "SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1": "( title of club ) that belongs to ( ( film ) , and ( ( film market estimation ) satisfied that ( ( film id of addresses ) equal to ( film id of staff ) ) ) ) , ordered by ( ( high estimate ) in descending order ) , limited to the top ( 1 )",
    "SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'": "( product ) , ( chromosome ) , ( porphyria ) that belongs to ( enzyme ) , that have ( ( location ) equal to ( 'cytosol' ) )",
    "SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  \"ORG\"": "( budget type description ) that belongs to ( ref budget codes ) , that have ( ( budget type code ) equal to ( org ) )",
    "SELECT T1.service_id ,  T1.service_details ,  count(*) FROM Services AS T1 JOIN Residents_Services AS T2 ON T1.service_id  =  T2.service_id GROUP BY T1.service_id ORDER BY count(*) DESC LIMIT 1": "( service id of addresses ) , ( service details of addresses ) , ( the number of ( all items ) ) that belongs to ( ( services ) , and ( ( residents services ) satisfied that ( ( service id of addresses ) equal to ( service id of staff ) ) ) ) , grouped by ( service id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'": "( name of club ) that belongs to ( ( channel ) , and ( ( broadcast ) satisfied that ( ( channel id of club ) equal to ( channel id of member of club ) ) ) ) , that have ( ( time of day of member of club ) equal to ( 'morning' ) )",
    "SELECT TYPE FROM institution WHERE founded  >  1990 AND enrollment  >=  1000": "( type ) that belongs to ( institution ) , that have ( ( ( founded ) greater than ( 1990 ) ) and ( ( enrollment ) greater than or equal to ( 1000 ) ) )",
    "SELECT count(*) ,  rank FROM captain GROUP BY rank": "( the number of ( all items ) ) , ( rank ) that belongs to ( captain ) , grouped by ( rank )",
    "SELECT city ,  state FROM bank WHERE bname  =  'morningside'": "( city ) , ( state ) that belongs to ( bank ) , that have ( ( bname ) equal to ( 'morningside' ) )",
    "SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result  =  \"Pass\"": "( date test taken ) that belongs to ( student tests taken ) , that have ( ( test result ) equal to ( pass ) )",
    "SELECT account_id ,  account_details FROM Accounts": "( account id ) , ( account details ) that belongs to ( accounts )",
    "SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation": "( low estimate ) , ( high estimate ) that belongs to ( film market estimation )",
    "SELECT employee_id ,  job_id FROM employees WHERE salary  <  ( SELECT min(salary) FROM employees WHERE job_id  =  'MK_MAN' )": "( employee id ) , ( job id ) that belongs to ( employees ) , that have ( ( salary ) less than ( the minimum of ( salary ) ) that belongs to ( employees ) , that have ( ( job id ) equal to ( 'mk man' ) ) )",
    "SELECT count(*) FROM train WHERE name LIKE \"%Express%\"": "( the number of ( all items ) ) that belongs to ( train ) , that have ( ( name ) like ( %express% ) )",
    "SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'": "( sent date of addresses ) that belongs to ( ( documents ) , and ( ( grants ) satisfied that ( ( grant id of addresses ) equal to ( grant id of staff ) ) ) , and ( ( organisations ) satisfied that ( ( organisation id of staff ) equal to ( organisation id of enzyme ) ) ) , and ( ( organisation types ) satisfied that ( ( organisation type of enzyme ) equal to ( organisation type of trip ) ) ) ) , that have ( ( ( grant amount of staff ) greater than ( 5000 ) ) and ( ( organisation type description of trip ) equal to ( 'research' ) ) )",
    "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)": "( name ) that belongs to ( artist ) , that have ( ( artist_id ) not in ( ( artist id ) that belongs to ( exhibition ) ) )",
    "SELECT Advisor FROM STUDENT WHERE city_code  =  \"BAL\"": "( advisor ) that belongs to ( student ) , that have ( ( city code ) equal to ( bal ) )",
    "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'": "( hire date ) that belongs to ( employees ) , that have ( ( first_name ) not like ( '%m%' ) )",
    "SELECT name FROM captain WHERE rank  =  'Midshipman' OR rank  =  'Lieutenant'": "( name ) that belongs to ( captain ) , that have ( ( ( rank ) equal to ( 'midshipman' ) ) or ( ( rank ) equal to ( 'lieutenant' ) ) )",
    "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T1.name": "( the number of ( all items ) ) , ( name of addresses ) that belongs to ( ( projects ) , and ( ( assignedto ) satisfied that ( ( code of addresses ) equal to ( project of staff ) ) ) ) , grouped by ( name of addresses )",
    "SELECT product_category_description FROM ref_product_categories WHERE product_category_code  =  \"Spices\"": "( product category description ) that belongs to ( ref product categories ) , that have ( ( product category code ) equal to ( spices ) )",
    "SELECT Lname FROM FACULTY WHERE Building  =  \"Barton\" ORDER BY Lname": "( lname ) that belongs to ( faculty ) , that have ( ( building ) equal to ( barton ) ) , ordered by ( ( lname ) )",
    "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rank  >  3 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id HAVING avg(T2.rating)  >  5": "( title of addresses ) that belongs to ( ( item ) , and ( ( review ) satisfied that ( ( i id of addresses ) equal to ( i id of staff ) ) ) ) , that have ( ( rank of staff ) greater than ( 3 ) ), and intersect with ( ( title of addresses ) that belongs to ( ( item ) , and ( ( review ) satisfied that ( ( i id of addresses ) equal to ( i id of staff ) ) ) ) , grouped by ( i id of staff ) , that have ( ( the average of ( rating of staff ) ) greater than ( 5 ) ))",
    "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";": "( name of staff ) that belongs to ( ( albums ) , and ( ( tracks ) satisfied that ( ( id of addresses ) equal to ( genre id of staff ) ) ) ) , that have ( ( title of addresses ) equal to ( balls to the wall ) )",
    "SELECT Nationality FROM journalist WHERE Years_working  >  10 INTERSECT SELECT Nationality FROM journalist WHERE Years_working  <  3": "( nationality ) that belongs to ( journalist ) , that have ( ( years working ) greater than ( 10 ) ), and intersect with ( ( nationality ) that belongs to ( journalist ) , that have ( ( years working ) less than ( 3 ) ))",
    "SELECT origin FROM program ORDER BY origin": "( origin ) that belongs to ( program ) , ordered by ( ( origin ) )",
    "SELECT T1.name_first ,  T1.name_last ,  T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1;": "( name first of addresses ) , ( name last of addresses ) , ( player id of staff ) that belongs to ( ( player ) , and ( ( manager award ) satisfied that ( ( player id of addresses ) equal to ( player id of staff ) ) ) ) , grouped by ( player id of staff ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code": "( emp fname of staff ) , ( prof office of trip ) , ( crs description of enzyme ) , ( dept name of department ) that belongs to ( ( class ) , and ( ( employee ) satisfied that ( ( prof num of addresses ) equal to ( emp num of staff ) ) ) , and ( ( course ) satisfied that ( ( crs code of addresses ) equal to ( crs code of enzyme ) ) ) , and ( ( professor ) satisfied that ( ( emp num of staff ) equal to ( emp num of trip ) ) ) , and ( ( department ) satisfied that ( ( dept code of trip ) equal to ( dept code of department ) ) ) )",
    "SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T1.range  =  'Toubkal Atlas' INTERSECT SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T1.range  =  'Lasta Massif'": "( brand of enzyme ) that belongs to ( ( mountain ) , and ( ( photos ) satisfied that ( ( id of addresses ) equal to ( mountain id of staff ) ) ) , and ( ( camera lens ) satisfied that ( ( camera lens id of staff ) equal to ( id of enzyme ) ) ) ) , that have ( ( range of addresses ) equal to ( 'toubkal atlas' ) ), and intersect with ( ( brand of enzyme ) that belongs to ( ( mountain ) , and ( ( photos ) satisfied that ( ( id of addresses ) equal to ( mountain id of staff ) ) ) , and ( ( camera lens ) satisfied that ( ( camera lens id of staff ) equal to ( id of enzyme ) ) ) ) , that have ( ( range of addresses ) equal to ( 'lasta massif' ) ))",
    "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10": "( department id ) that belongs to ( employees ) , grouped by ( department id ) , that have ( ( the number of ( commission pct ) ) greater than ( 10 ) )",
    "SELECT donator_name ,  sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC": "( donator name ) , ( the sum of ( amount ) ) that belongs to ( endowment ) , grouped by ( donator name ) , ordered by ( ( the sum of ( amount ) ) in descending order )",
    "SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex": "( the average of ( age ) ) , ( the maximum of ( age ) ) , ( sex ) that belongs to ( student ) , grouped by ( sex )",
    "SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)": "( name ) that belongs to ( wine ) , that have ( ( price ) greater than ( the maximum of ( price ) ) that belongs to ( wine ) , that have ( ( year ) equal to ( 2006 ) ) )",
    "SELECT email_address ,  phone_number FROM customers ORDER BY email_address ,  phone_number": "( email address ) , ( phone number ) that belongs to ( customers ) , ordered by ( ( email address ),( phone number ) )",
    "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"": "( customer id ) that belongs to ( customers ) , that have ( ( customer_name ) like ( %diana% ) )",
    "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1": "( color description of member of club ) that belongs to ( ( products ) , and ( ( ref colors ) satisfied that ( ( color code of club ) equal to ( color code of member of club ) ) ) ) , grouped by ( color description of member of club ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT avg(age) FROM Person": "( the average of ( age ) ) that belongs to ( person )",
    "SELECT minister FROM party WHERE took_office  >  1961 OR took_office  <  1959": "( minister ) that belongs to ( party ) , that have ( ( ( took office ) greater than ( 1961 ) ) or ( ( took office ) less than ( 1959 ) ) )",
    "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages  =  \"english\"": "( song name of staff ) that belongs to ( ( files ) , and ( ( song ) satisfied that ( ( f id of addresses ) equal to ( f id of staff ) ) ) ) , that have ( ( t1.duration ) like ( 4:% ) ) and ( song name ) that belongs to ( song ) , that have ( ( languages ) equal to ( english ) )",
    "SELECT allergy ,  allergytype FROM Allergy_type": "( allergy ) , ( allergytype ) that belongs to ( allergy type )",
    "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT 1": "( name of addresses ) that belongs to ( ( physician ) , and ( ( trained in ) satisfied that ( ( employeeid of addresses ) equal to ( physician of staff ) ) ) , and ( ( procedures ) satisfied that ( ( code of enzyme ) equal to ( treatment of staff ) ) ) ) , ordered by ( ( cost of enzyme ) in descending order ) , limited to the top ( 1 )",
    "SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'": "( first name ) , ( last name ) , ( salary ) that belongs to ( ( employees ) , and ( ( departments ) satisfied that ( ( department id of addresses ) equal to ( department id of staff ) ) ) , and ( ( locations ) satisfied that ( ( location id of staff ) equal to ( location id of enzyme ) ) ) ) , that have ( ( city of enzyme ) equal to ( 'london' ) )",
    "SELECT first_name ,  last_name FROM employees WHERE salary  >  (SELECT salary FROM employees WHERE employee_id = 163 )": "( first name ) , ( last name ) that belongs to ( employees ) , that have ( ( salary ) greater than ( salary ) that belongs to ( employees ) , that have ( ( employee id ) equal to ( 163 ) ) )",
    "SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1": "( dorm name ) that belongs to ( dorm ) , ordered by ( ( student capacity ) in descending order ) , limited to the top ( 1 )",
    "SELECT YEAR FROM festival_detail GROUP BY YEAR HAVING COUNT(*)  >  1": "( year ) that belongs to ( festival detail ) , grouped by ( year ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT count(DISTINCT affiliation) FROM university": "( the number of ( distinct ( affiliation ) ) ) that belongs to ( university )",
    "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  \"sesame\"": "( the number of ( all items ) ) that belongs to ( ( products ) , and ( ( product characteristics ) satisfied that ( ( product id of club ) equal to ( product id of member of club ) ) ) ) , that have ( ( product name of club ) equal to ( sesame ) )",
    "SELECT count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year = 2009;": "( the number of ( all items ) ) that belongs to ( ( postseason ) , and ( ( team ) satisfied that ( ( team id loser of addresses ) equal to ( team id br of staff ) ) ) ) , that have ( ( ( name of staff ) equal to ( 'boston red stockings' ) ) and ( ( year of addresses ) equal to ( 2009 ) ) )",
    "SELECT Competition_type ,  Country FROM competition": "( competition type ) , ( country ) that belongs to ( competition )",
    "SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1": "( address of staff ) that belongs to ( ( store ) , and ( ( address ) satisfied that ( ( address id of addresses ) equal to ( address id of staff ) ) ) ) , that have ( ( store id ) equal to ( 1 ) )",
    "SELECT T1.supplier_name ,  T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details": "( supplier name of addresses ) , ( supplier phone of addresses ) that belongs to ( ( suppliers ) , and ( ( supplier addresses ) satisfied that ( ( supplier id of addresses ) equal to ( supplier id of staff ) ) ) , and ( ( addresses ) satisfied that ( ( address id of staff ) equal to ( address id of enzyme ) ) ) ) , ordered by ( ( address details of enzyme ) )",
    "SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"": "( name ) that belongs to ( procedures ) , that have ( ( cost ) less than ( 5000 ) ), and intersect with ( ( name of enzyme ) that belongs to ( ( physician ) , and ( ( trained in ) satisfied that ( ( employeeid of addresses ) equal to ( physician of staff ) ) ) , and ( ( procedures ) satisfied that ( ( code of enzyme ) equal to ( treatment of staff ) ) ) ) , that have ( ( name of addresses ) equal to ( john wen ) ))",
    "SELECT DISTINCT staff_first_name ,  staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1": "( distinct ( staff first name ) ) , ( staff last name ) that belongs to ( ( staff ) , and ( ( problem log ) satisfied that ( ( staff id of addresses ) equal to ( assigned to staff id of staff ) ) ) ) , that have ( ( problem id of staff ) equal to ( 1 ) )",
    "SELECT T1.emp_lname ,  T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num WHERE T2.prof_office  =  'DRE 102'": "( emp lname of addresses ) , ( emp hiredate of addresses ) that belongs to ( ( employee ) , and ( ( professor ) satisfied that ( ( emp num of addresses ) equal to ( emp num of staff ) ) ) ) , that have ( ( prof office of staff ) equal to ( 'dre 102' ) )",
    "SELECT clubname FROM club": "( clubname ) that belongs to ( club )",
    "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE \"2016%\"": "( staff name of addresses ) , ( staff gender of addresses ) that belongs to ( ( staff ) , and ( ( staff department assignments ) satisfied that ( ( staff id of addresses ) equal to ( staff id of staff ) ) ) ) , that have ( ( t2.date_assigned_from ) like ( 2016% ) )",
    "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom": "( classroom ) , ( the number of ( all items ) ) that belongs to ( list ) , that have ( ( grade ) equal to ( 4 ) ) , grouped by ( classroom )",
    "SELECT name FROM program ORDER BY launch DESC LIMIT 1": "( name ) that belongs to ( program ) , ordered by ( ( launch ) in descending order ) , limited to the top ( 1 )",
    "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;": "( roomname ) that belongs to ( rooms ) , ordered by ( ( maxoccupancy ) in descending order ) , limited to the top ( 1 )",
    "SELECT * FROM CUSTOMER WHERE State  =  \"NY\"": "all items that belongs to ( customer ) , that have ( ( state ) equal to ( ny ) )",
    "SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1": "( fname of addresses ) , ( lname of addresses ) that belongs to ( ( faculty ) , and ( ( faculty participates in ) satisfied that ( ( facid of addresses ) equal to ( facid of staff ) ) ) ) , grouped by ( facid of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;": "( name full of addresses ) , ( college id of addresses ) that belongs to ( ( college ) , and ( ( player college ) satisfied that ( ( college id of addresses ) equal to ( college id of staff ) ) ) ) , grouped by ( college id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  'ExxonMobil'": "( manager name of enzyme ) that belongs to ( ( station company ) , and ( ( company ) satisfied that ( ( company id of addresses ) equal to ( company id of staff ) ) ) , and ( ( gas station ) satisfied that ( ( station id of addresses ) equal to ( station id of enzyme ) ) ) ) , that have ( ( company of staff ) equal to ( 'exxonmobil' ) )",
    "SELECT avg(weight) ,  min(weight) ,  sex FROM people GROUP BY sex": "( the average of ( weight ) ) , ( the minimum of ( weight ) ) , ( sex ) that belongs to ( people ) , grouped by ( sex )",
    "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000": "( investor ) that belongs to ( entrepreneur ) , that have ( ( money requested ) greater than ( 140000 ) ), and intersect with ( ( investor ) that belongs to ( entrepreneur ) , that have ( ( money requested ) less than ( 120000 ) ))",
    "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1": "( allergytype ) that belongs to ( allergy type ) , grouped by ( allergytype ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1": "( name of club ) that belongs to ( ( program ) , and ( ( broadcast ) satisfied that ( ( program id of club ) equal to ( program id of member of club ) ) ) ) , grouped by ( program id of member of club ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name": "( name of staff ) , ( the average of ( stars of addresses ) ) that belongs to ( ( rating ) , and ( ( reviewer ) satisfied that ( ( rid of addresses ) equal to ( rid of staff ) ) ) ) , grouped by ( name of staff )",
    "SELECT date_of_birth FROM Customers WHERE customer_status_code  =  'Good Customer'": "( date of birth ) that belongs to ( customers ) , that have ( ( customer status code ) equal to ( 'good customer' ) )",
    "SELECT count(*) FROM CHARACTERISTICS": "( the number of ( all items ) ) that belongs to ( characteristics )",
    "SELECT count(DISTINCT gtype) FROM Video_games": "( the number of ( distinct ( gtype ) ) ) that belongs to ( video games )",
    "SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"": "( country of staff ) that belongs to ( ( customers ) , and ( ( addresses ) satisfied that ( ( customer address id of addresses ) equal to ( address id of staff ) ) ) ) , that have ( ( ( first name of addresses ) equal to ( carole ) ) and ( ( last name of addresses ) equal to ( bernhard ) ) )",
    "SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10;": "( billing country ) , ( the average of ( total ) ) that belongs to ( invoices ) , grouped by ( billing country ) , ordered by ( ( the average of ( total ) ) in descending order ) , limited to the top ( 10 )",
    "SELECT name ,  salary FROM Employee WHERE eid  =  242518965": "( name ) , ( salary ) that belongs to ( employee ) , that have ( ( eid ) equal to ( 242518965 ) )",
    "SELECT Product_Name FROM PRODUCTS ORDER BY Product_Price DESC LIMIT 1": "( product name ) that belongs to ( products ) , ordered by ( ( product price ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1": "( name of addresses ) that belongs to ( ( airports ) , and ( ( routes ) satisfied that ( ( apid of addresses ) equal to ( dst apid of staff ) ) ) ) , that have ( ( country of addresses ) equal to ( 'china' ) ) , grouped by ( name of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT Software_Platform ,  COUNT(*) FROM device GROUP BY Software_Platform": "( software platform ) , ( the number of ( all items ) ) that belongs to ( device ) , grouped by ( software platform )",
    "SELECT count(*) FROM ref_colors": "( the number of ( all items ) ) that belongs to ( ref colors )",
    "SELECT headquarter FROM manufacturers WHERE founder  =  'James'": "( headquarter ) that belongs to ( manufacturers ) , that have ( ( founder ) equal to ( 'james' ) )",
    "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)": "( lname ) that belongs to ( student ) , that have ( ( age ) equal to ( the minimum of ( age ) ) that belongs to ( student ) )",
    "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Sportsinfo": "( stuid ) that belongs to ( student ), and except that ( ( stuid ) that belongs to ( sportsinfo ))",
    "SELECT name FROM camera_lens WHERE name LIKE \"%Digital%\"": "( name ) that belongs to ( camera lens ) , that have ( ( name ) like ( %digital% ) )",
    "SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000": "( job id ) that belongs to ( employees ) , grouped by ( job id ) , that have ( ( the average of ( salary ) ) greater than ( 8000 ) )",
    "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1": "( catalog entry name ) that belongs to ( catalog contents ) , ordered by ( ( height ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"white\" OR t3.characteristic_name  =  \"hot\"": "( the number of ( all items ) ) that belongs to ( ( products ) , and ( ( product characteristics ) satisfied that ( ( product id of club ) equal to ( product id of member of club ) ) ) , and ( ( characteristics ) satisfied that ( ( characteristic id of member of club ) equal to ( characteristic id of student ) ) ) , and ( ( ref colors ) satisfied that ( ( color code of club ) equal to ( color code of inst ) ) ) ) , that have ( ( ( color description of inst ) equal to ( white ) ) or ( ( characteristic name of student ) equal to ( hot ) ) )",
    "SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed": "( distinct ( order id ) ) that belongs to ( orders ) , ordered by ( ( date order placed ) )",
    "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id": "( course name of enzyme ) , ( the number of ( all items ) ) that belongs to ( ( students ) , and ( ( student course registrations ) satisfied that ( ( student id of addresses ) equal to ( student id of staff ) ) ) , and ( ( courses ) satisfied that ( ( course id of staff ) equal to ( course id of enzyme ) ) ) ) , grouped by ( course id of staff )",
    "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1": "( flno ) , ( distance ) that belongs to ( flight ) , ordered by ( ( price ) in descending order ) , limited to the top ( 1 )",
    "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2": "( nominee ) that belongs to ( musical ) , grouped by ( nominee ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )",
    "SELECT * FROM body_builder": "all items that belongs to ( body builder )",
    "SELECT count(course_id) FROM Student_Course_Enrolment": "( the number of ( course id ) ) that belongs to ( student course enrolment )",
    "SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code  =  T2.star_rating_code WHERE T1.price_range  >  10000": "( star rating description of staff ) that belongs to ( ( hotels ) , and ( ( ref hotel star ratings ) satisfied that ( ( star rating code of addresses ) equal to ( star rating code of staff ) ) ) ) , that have ( ( price range of addresses ) greater than ( 10000 ) )",
    "SELECT count(*) FROM county_public_safety": "( the number of ( all items ) ) that belongs to ( county public safety )",
    "SELECT city FROM city WHERE regional_population  >  10000000": "( city ) that belongs to ( city ) , that have ( ( regional population ) greater than ( 10000000 ) )",
    "SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1": "( problem log id ) , ( problem id ) that belongs to ( problem log ) , ordered by ( ( log entry date ) ) , limited to the top ( 1 )",
    "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year  >  2010": "( city of addresses ) that belongs to ( ( city ) , and ( ( hosting city ) satisfied that ( ( city id of addresses ) equal to ( host city of staff ) ) ) ) , that have ( ( year of staff ) greater than ( 2010 ) )",
    "SELECT * FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)": "all items that belongs to ( employees ) , that have ( ( department_id ) not in ( ( department id ) that belongs to ( departments ) , that have ( ( manager_id ) between ( 100 ) and ( 200 ) ) ) )",
    "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2": "( stuid ) that belongs to ( has allergy ) , grouped by ( stuid ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT date ,  theme ,  sales FROM journal EXCEPT SELECT T1.date ,  T1.theme ,  T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID": "( date ) , ( theme ) , ( sales ) that belongs to ( journal ), and except that ( ( date of addresses ) , ( theme of addresses ) , ( sales of addresses ) that belongs to ( ( journal ) , and ( ( journal committee ) satisfied that ( ( journal id of addresses ) equal to ( journal id of staff ) ) ) ))",
    "SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)": "( theme of addresses ) , ( name of staff ) that belongs to ( ( exhibition ) , and ( ( artist ) satisfied that ( ( artist id of addresses ) equal to ( artist id of staff ) ) ) ) , that have ( ( ticket price of addresses ) greater than ( the average of ( ticket price ) ) that belongs to ( exhibition ) )",
    "SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.amount  >  8.5 GROUP BY T1.school_id HAVING count(*)  >  1": "( school name of staff ) that belongs to ( ( endowment ) , and ( ( school ) satisfied that ( ( school id of addresses ) equal to ( school id of staff ) ) ) ) , that have ( ( amount of addresses ) greater than ( 5 of 8 ) ) , grouped by ( school id of addresses ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.age  <  20": "( the sum of ( hoursperweek ) ) , ( the sum of ( gamesplayed ) ) that belongs to ( ( sportsinfo ) , and ( ( student ) satisfied that ( ( stuid of addresses ) equal to ( stuid of staff ) ) ) ) , that have ( ( age of staff ) less than ( 20 ) )",
    "SELECT DISTINCT T1.Leader_Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID WHERE T2.Country  =  \"Canada\"": "( distinct ( leader name of addresses ) ) that belongs to ( ( college ) , and ( ( member ) satisfied that ( ( college id of addresses ) equal to ( college id of staff ) ) ) ) , that have ( ( country of staff ) equal to ( canada ) )",
    "SELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code": "( location code ) , ( the number of ( all items ) ) that belongs to ( document locations ) , grouped by ( location code )",
    "SELECT document_id FROM Documents_with_expenses WHERE budget_type_code  =  'SF'": "( document id ) that belongs to ( documents with expenses ) , that have ( ( budget type code ) equal to ( 'sf' ) )",
    "SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)": "( the average of ( stars of addresses ) ) , ( title of staff ) that belongs to ( ( rating ) , and ( ( movie ) satisfied that ( ( mid of addresses ) equal to ( mid of staff ) ) ) ) , that have ( ( year of staff ) equal to ( the minimum of ( year ) ) that belongs to ( movie ) )",
    "SELECT count(*) FROM Ref_calendar": "( the number of ( all items ) ) that belongs to ( ref calendar )",
    "SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1": "( name of addresses ) , ( hours of addresses ) that belongs to ( ( projects ) , and ( ( assignedto ) satisfied that ( ( code of addresses ) equal to ( project of staff ) ) ) ) , grouped by ( project of staff ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT avg(enr) FROM College": "( the average of ( enr ) ) that belongs to ( college )",
    "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay  =  T3.StayID WHERE T3.room  =  111": "( distinct ( name of staff ) ) that belongs to ( ( undergoes ) , and ( ( patient ) satisfied that ( ( patient of addresses ) equal to ( ssn of staff ) ) ) , and ( ( stay ) satisfied that ( ( stay of addresses ) equal to ( stayid of enzyme ) ) ) ) , that have ( ( room of enzyme ) equal to ( 111 ) )",
    "SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1": "( poll source ) that belongs to ( candidate ) , grouped by ( poll source ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Human Resource\" OR T2.role_name  =  \"Manager\"": "( employee id of addresses ) that belongs to ( ( employees ) , and ( ( roles ) satisfied that ( ( role code of addresses ) equal to ( role code of staff ) ) ) ) , that have ( ( ( role name of staff ) equal to ( human resource ) ) or ( ( role name of staff ) equal to ( manager ) ) )",
    "SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1": "( payment method code ) that belongs to ( invoices ) , grouped by ( payment method code ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4": "( distinct ( department id ) ) that belongs to ( employees ) , grouped by ( department id ) , ( manager id ) , that have ( ( the number of ( employee id ) ) greater than or equal to ( 4 ) )",
    "SELECT t2.state_province_county ,  count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id  =  t2.address_id GROUP BY t2.state_province_county": "( state province county of member of club ) , ( the number of ( all items ) ) that belongs to ( ( customer addresses ) , and ( ( addresses ) satisfied that ( ( address id of club ) equal to ( address id of member of club ) ) ) ) , grouped by ( state province county of member of club )",
    "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011": "( name ) that belongs to ( races ) , that have ( ( year ) between ( 2009 ) and ( 2011 ) )",
    "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'": "( the number of ( all items ) ) that belongs to ( ( airlines ) , and ( ( routes ) satisfied that ( ( alid of addresses ) equal to ( alid of staff ) ) ) ) , that have ( ( name of addresses ) equal to ( 'american airlines' ) )",
    "SELECT count(*) ,  major FROM student GROUP BY major": "( the number of ( all items ) ) , ( major ) that belongs to ( student ) , grouped by ( major )",
    "SELECT advisor ,  count(*) FROM Student GROUP BY advisor": "( advisor ) , ( the number of ( all items ) ) that belongs to ( student ) , grouped by ( advisor )",
    "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Stephanie\" AND t1.lname  =  \"Weirich\"": "( title of student ) that belongs to ( ( authors ) , and ( ( authorship ) satisfied that ( ( authid of club ) equal to ( authid of member of club ) ) ) , and ( ( papers ) satisfied that ( ( paperid of member of club ) equal to ( paperid of student ) ) ) ) , that have ( ( ( fname of club ) equal to ( stephanie ) ) and ( ( lname of club ) equal to ( weirich ) ) )",
    "SELECT t1.gdp ,  t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY t2.Host_City HAVING count(*)  >  1": "( gdp of club ) , ( regional population of club ) that belongs to ( ( city ) , and ( ( hosting city ) satisfied that ( ( city id of addresses ) equal to ( host city of staff ) ) ) ) , grouped by ( host city of member of club ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT title FROM Movie WHERE director = 'Steven Spielberg'": "( title ) that belongs to ( movie ) , that have ( ( director ) equal to ( 'steven spielberg' ) )",
    "SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1": "( service type description of addresses ) , ( service type code of addresses ) that belongs to ( ( ref service types ) , and ( ( services ) satisfied that ( ( service type code of addresses ) equal to ( service type code of staff ) ) ) ) , grouped by ( service type code of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"": "( distinct ( title of club ) ) that belongs to ( ( papers ) , and ( ( authorship ) satisfied that ( ( paperid of club ) equal to ( paperid of member of club ) ) ) , and ( ( inst ) satisfied that ( ( instid of member of club ) equal to ( instid of student ) ) ) ) , that have ( ( name of student ) equal to ( google ) )",
    "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid": "( balance of staff ) , ( balance of enzyme ) , ( name of addresses ) that belongs to ( ( accounts ) , and ( ( checking ) satisfied that ( ( custid of addresses ) equal to ( custid of staff ) ) ) , and ( ( savings ) satisfied that ( ( custid of addresses ) equal to ( custid of enzyme ) ) ) )",
    "SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id": "( line 1 of addresses ) that belongs to ( ( addresses ) , and ( ( students ) satisfied that ( ( address id of addresses ) equal to ( address id of staff ) ) ) ), and intersect with ( ( line 1 of addresses ) that belongs to ( ( addresses ) , and ( ( teachers ) satisfied that ( ( address id of addresses ) equal to ( address id of staff ) ) ) ))",
    "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";": "( title of addresses ) that belongs to ( ( albums ) , and ( ( tracks ) satisfied that ( ( id of addresses ) equal to ( genre id of staff ) ) ) ) , that have ( ( name of staff ) equal to ( balls to the wall ) )",
    "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;": "( roomid ) , ( roomname ) that belongs to ( rooms ) , ordered by ( ( baseprice ) in descending order ) , limited to the top ( 3 )",
    "SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id": "( account id ) , ( the number of ( all items ) ) that belongs to ( financial transactions ) , grouped by ( account id )",
    "SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC": "( name of staff ) , ( team of addresses ) that belongs to ( ( elimination ) , and ( ( wrestler ) satisfied that ( ( wrestler id of addresses ) equal to ( wrestler id of staff ) ) ) ) , ordered by ( ( days held of staff ) in descending order )",
    "SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2": "( customer name of staff ) , ( the number of ( all items ) ) that belongs to ( ( orders ) , and ( ( customers ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , grouped by ( customer id of staff ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3": "( winery of staff ) that belongs to ( ( grapes ) , and ( ( wine ) satisfied that ( ( grape of addresses ) equal to ( grape of staff ) ) ) ) , that have ( ( color of addresses ) equal to ( white ) ) , grouped by ( winery of staff ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 3 )",
    "SELECT Name FROM People ORDER BY Age DESC LIMIT 5": "( name ) that belongs to ( people ) , ordered by ( ( age ) in descending order ) , limited to the top ( 5 )",
    "SELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1": "( name ) , ( phone ) that belongs to ( ( appointment ) , and ( ( patient ) satisfied that ( ( patient of addresses ) equal to ( ssn of staff ) ) ) ) , grouped by ( patient of addresses ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT role_code FROM Employees GROUP BY role_code HAVING count(*)  >=  3": "( role code ) that belongs to ( employees ) , grouped by ( role code ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 3 ) )",
    "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000": "( degrees ) that belongs to ( ( campuses ) , and ( ( degrees ) satisfied that ( ( id of club ) equal to ( campus of member of club ) ) ) ) , that have ( ( ( campus of club ) equal to ( san jose state university ) ) and ( ( year of member of club ) equal to ( 2000 ) ) )",
    "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"shared\"": "( the number of ( distinct ( title ) ) ) that belongs to ( ( vocals ) , and ( ( songs ) satisfied that ( ( songid of addresses ) equal to ( songid of staff ) ) ) ) , that have ( ( type ) equal to ( shared ) )",
    "SELECT membership_card FROM member WHERE address  =  'Hartford' INTERSECT SELECT membership_card FROM member WHERE address  =  'Waterbury'": "( membership card ) that belongs to ( member ) , that have ( ( address ) equal to ( 'hartford' ) ), and intersect with ( ( membership card ) that belongs to ( member ) , that have ( ( address ) equal to ( 'waterbury' ) ))",
    "SELECT name FROM driver WHERE home_city  =  'Hartford' AND age  <  40": "( name ) that belongs to ( driver ) , that have ( ( ( home city ) equal to ( 'hartford' ) ) and ( ( age ) less than ( 40 ) ) )",
    "SELECT LName FROM STUDENT WHERE Sex  =  \"F\" ORDER BY Age DESC": "( lname ) that belongs to ( student ) , that have ( ( sex ) equal to ( f ) ) , ordered by ( ( age ) in descending order )",
    "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\"": "( the number of ( all items ) ) that belongs to ( ( customers cards ) , and ( ( customers ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , that have ( ( ( customer first name of staff ) equal to ( blanche ) ) and ( ( customer last name of staff ) equal to ( huels ) ) and ( ( card type code of addresses ) equal to ( credit ) ) )",
    "SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1": "( date from ) that belongs to ( project staff ) , ordered by ( ( date from ) in ascending order ) , limited to the top ( 1 )",
    "SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)": "( fname ) , ( lname ) that belongs to ( student ) , that have ( ( major ) not equal to ( major ) that belongs to ( student ) , grouped by ( major ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 ) )",
    "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\"": "( campus ) that belongs to ( campuses ) , that have ( ( ( location ) equal to ( northridge ) ) and ( ( county ) equal to ( los angeles ) ) ) and ( campus ) that belongs to ( campuses ) , that have ( ( ( location ) equal to ( san francisco ) ) and ( ( county ) equal to ( san francisco ) ) )",
    "SELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')": "( name ) , ( flag ) that belongs to ( ship ) , that have ( ( ship_id ) not in ( ( ship id ) that belongs to ( captain ) , that have ( ( rank ) equal to ( 'midshipman' ) ) ) )",
    "SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'": "( the average of ( no of customers ) ) that belongs to ( bank ) , that have ( ( state ) equal to ( 'utah' ) )",
    "SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.State_County  =  \"Alaska\"": "( store email address of staff ) that belongs to ( ( addresses ) , and ( ( drama workshop groups ) satisfied that ( ( address id of addresses ) equal to ( address id of staff ) ) ) ) , that have ( ( state county of addresses ) equal to ( alaska ) )",
    "SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"": "( name ) that belongs to ( procedures ) , that have ( ( cost ) greater than ( 1000 ) ) and ( name of enzyme ) that belongs to ( ( physician ) , and ( ( trained in ) satisfied that ( ( employeeid of addresses ) equal to ( physician of staff ) ) ) , and ( ( procedures ) satisfied that ( ( code of enzyme ) equal to ( treatment of staff ) ) ) ) , that have ( ( name of addresses ) equal to ( john wen ) )",
    "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1": "( name ) that belongs to ( instructor ) , ordered by ( ( salary ) in descending order ) , limited to the top ( 1 )",
    "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate": "( name of club ) that belongs to ( ( people ) , and ( ( candidate ) satisfied that ( ( people id of club ) equal to ( people id of member of club ) ) ) ) , that have ( ( support rate of member of club ) less than ( oppose rate of member of club ) )",
    "SELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"chervil\"": "( color code of club ) , ( color description of member of club ) that belongs to ( ( products ) , and ( ( ref colors ) satisfied that ( ( color code of club ) equal to ( color code of member of club ) ) ) ) , that have ( ( product name of club ) equal to ( chervil ) )",
    "SELECT name ,  CLASS ,  date FROM race": "( name ) , ( class ) , ( date ) that belongs to ( race )",
    "SELECT title ,  directed_by FROM film": "( title ) , ( directed by ) that belongs to ( film )",
    "SELECT T1.property_id ,  count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id": "( property id of addresses ) , ( the number of ( all items ) ) that belongs to ( ( properties ) , and ( ( residents ) satisfied that ( ( property id of addresses ) equal to ( property id of staff ) ) ) ) , grouped by ( property id of addresses )",
    "SELECT avg(age) ,  sex FROM Student GROUP BY sex": "( the average of ( age ) ) , ( sex ) that belongs to ( student ) , grouped by ( sex )",
    "SELECT gname FROM Video_games WHERE gtype  =  \"Collectible card game\"": "( gname ) that belongs to ( video games ) , that have ( ( gtype ) equal to ( collectible card game ) )",
    "SELECT Advisor FROM Student WHERE StuID  =  1004": "( advisor ) that belongs to ( student ) , that have ( ( stuid ) equal to ( 1004 ) )",
    "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20": "( distinct ( forename of addresses ) ) that belongs to ( ( drivers ) , and ( ( driverstandings ) satisfied that ( ( driverid of addresses ) equal to ( driverid of staff ) ) ) ) , that have ( ( ( position of staff ) equal to ( 1 ) ) and ( ( wins of staff ) equal to ( 1 ) ) and ( ( points of staff ) greater than ( 20 ) ) )",
    "SELECT problem_log_id FROM problem_log ORDER BY log_entry_date DESC LIMIT 1": "( problem log id ) that belongs to ( problem log ) , ordered by ( ( log entry date ) in descending order ) , limited to the top ( 1 )",
    "SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\"": "( international passengers ) , ( domestic passengers ) that belongs to ( airport ) , that have ( ( airport name ) equal to ( london heathrow ) )",
    "SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10": "( name of addresses ) , ( alid of staff ) that belongs to ( ( airlines ) , and ( ( routes ) satisfied that ( ( alid of addresses ) equal to ( alid of staff ) ) ) ) , grouped by ( alid of staff ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 10 )",
    "SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements": "( the sum of ( settlement amount ) ) , ( the average of ( settlement amount ) ) that belongs to ( settlements )",
    "SELECT email_address ,  date_of_birth FROM Customers WHERE first_name = \"Carole\"": "( email address ) , ( date of birth ) that belongs to ( customers ) , that have ( ( first name ) equal to ( carole ) )",
    "SELECT job_title ,  AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id GROUP BY T2.job_title": "( job title ) , ( the average of ( salary ) ) that belongs to ( ( employees ) , and ( ( jobs ) satisfied that ( ( job id of addresses ) equal to ( job id of staff ) ) ) ) , grouped by ( job title of staff )",
    "SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode": "( the number of ( all items ) ) , ( blockcode of addresses ) that belongs to ( ( block ) , and ( ( room ) satisfied that ( ( ( blockfloor of addresses ) equal to ( blockfloor of staff ) ) and ( ( blockcode of addresses ) equal to ( blockcode of staff ) ) ) ) ) , grouped by ( blockcode of addresses )",
    "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'": "( name of enzyme ) that belongs to ( ( course ) , and ( ( takes ) satisfied that ( ( course id of addresses ) equal to ( course id of staff ) ) ) , and ( ( student ) satisfied that ( ( id of staff ) equal to ( id of enzyme ) ) ) ) , that have ( ( dept name of addresses ) equal to ( 'statistics' ) )",
    "SELECT max(num_of_shops) ,  avg(Num_of_Factories) FROM manufacturer WHERE open_year  <  1990": "( the maximum of ( num of shops ) ) , ( the average of ( num of factories ) ) that belongs to ( manufacturer ) , that have ( ( open year ) less than ( 1990 ) )",
    "SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\"": "( name of staff ) , ( score of staff ) that belongs to ( ( grapes ) , and ( ( wine ) satisfied that ( ( grape of addresses ) equal to ( grape of staff ) ) ) ) , that have ( ( color of addresses ) equal to ( white ) )",
    "SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name HAVING sum(T1.Num_of_stock)  >=  2000 ORDER BY sum(T1.Num_of_stock) DESC": "( name of staff ) that belongs to ( ( phone market ) , and ( ( phone ) satisfied that ( ( phone id of addresses ) equal to ( phone id of staff ) ) ) ) , grouped by ( name of staff ) , that have ( ( the sum of ( num of stock of addresses ) ) greater than or equal to ( 2000 ) ) , ordered by ( ( the sum of ( num of stock of addresses ) ) in descending order )",
    "SELECT count(*) FROM party": "( the number of ( all items ) ) that belongs to ( party )",
    "SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2": "( comptroller of staff ) that belongs to ( ( election ) , and ( ( party ) satisfied that ( ( party of addresses ) equal to ( party id of staff ) ) ) ) , that have ( ( ( district of addresses ) equal to ( 1 ) ) or ( ( district of addresses ) equal to ( 2 ) ) )",
    "SELECT T2.lot_details FROM INVESTORS AS T1 JOIN LOTS AS T2 ON  T1.investor_id  =  T2.investor_id WHERE T1.Investor_details  =  \"l\"": "( lot details of staff ) that belongs to ( ( investors ) , and ( ( lots ) satisfied that ( ( investor id of addresses ) equal to ( investor id of staff ) ) ) ) , that have ( ( investor details of addresses ) equal to ( l ) )",
    "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1": "( student details of staff ) that belongs to ( ( student course registrations ) , and ( ( students ) satisfied that ( ( student id of addresses ) equal to ( student id of staff ) ) ) ) , ordered by ( ( registration date of addresses ) in descending order ) , limited to the top ( 1 )",
    "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1": "( individual last name of student ) that belongs to ( ( organizations ) , and ( ( organization contact individuals ) satisfied that ( ( organization id of club ) equal to ( organization id of member of club ) ) ) , and ( ( individuals ) satisfied that ( ( individual id of member of club ) equal to ( individual id of student ) ) ) ) , that have ( ( organization name of club ) equal to ( labour party ) ) , ordered by ( ( date contact to of member of club ) in descending order ) , limited to the top ( 1 )",
    "SELECT name FROM Companies ORDER BY Market_Value_billion DESC": "( name ) that belongs to ( companies ) , ordered by ( ( market value billion ) in descending order )",
    "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\";": "( first name of staff ) , ( last name of staff ) that belongs to ( ( employees ) , and ( ( employees ) satisfied that ( ( id of addresses ) equal to ( reports to of staff ) ) ) ) , that have ( ( ( first name of addresses ) equal to ( nancy ) ) and ( ( last name of addresses ) equal to ( edwards ) ) )",
    "SELECT Shop_Name ,  LOCATION FROM shop ORDER BY Shop_Name ASC": "( shop name ) , ( location ) that belongs to ( shop ) , ordered by ( ( shop name ) in ascending order )",
    "SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"": "( the number of ( all items ) ) that belongs to ( ( faculty ) , and ( ( faculty participates in ) satisfied that ( ( facid of addresses ) equal to ( facid of staff ) ) ) ) , that have ( ( ( fname of addresses ) equal to ( mark ) ) and ( ( lname of addresses ) equal to ( giuliano ) ) )",
    "SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'": "( statement details of addresses ) , ( document name of staff ) that belongs to ( ( statements ) , and ( ( documents ) satisfied that ( ( statement id of addresses ) equal to ( document id of staff ) ) ) ) , that have ( ( statement details of addresses ) equal to ( 'private project' ) )",
    "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)": "( student id ) that belongs to ( students ) , that have ( ( student_id ) not in ( ( student id ) that belongs to ( student course attendance ) ) )",
    "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" AND T3.name = \"MPEG audio file\";": "( name of staff ) that belongs to ( ( genres ) , and ( ( tracks ) satisfied that ( ( id of addresses ) equal to ( genre id of staff ) ) ) , and ( ( media types ) satisfied that ( ( id of enzyme ) equal to ( media type id of staff ) ) ) ) , that have ( ( ( name of addresses ) equal to ( rock ) ) and ( ( name of enzyme ) equal to ( mpeg audio file ) ) )",
    "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT 3": "( artist name of addresses ) , ( country of addresses ) that belongs to ( ( artist ) , and ( ( song ) satisfied that ( ( artist name of addresses ) equal to ( artist name of staff ) ) ) ) , ordered by ( ( rating of staff ) in descending order ) , limited to the top ( 3 )",
    "SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30": "( driverid of addresses ) , ( the number of ( all items ) ) that belongs to ( ( drivers ) , and ( ( results ) satisfied that ( ( driverid of addresses ) equal to ( driverid of staff ) ) ) , and ( ( races ) satisfied that ( ( raceid of staff ) equal to ( raceid of enzyme ) ) ) ) , grouped by ( driverid of addresses ) , that have ( ( the number of ( all items ) ) less than or equal to ( 30 ) )",
    "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) LIMIT 1": "( gtype ) that belongs to ( video games ) , grouped by ( gtype ) , ordered by ( ( the number of ( all items ) ) ) , limited to the top ( 1 )",
    "SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%'": "( head id ) , ( name ) that belongs to ( head ) , that have ( ( name ) like ( '%ha%' ) )",
    "SELECT Team FROM player ORDER BY Age DESC LIMIT 1": "( team ) that belongs to ( player ) , ordered by ( ( age ) in descending order ) , limited to the top ( 1 )",
    "SELECT sum(Num_of_Audience) FROM festival_detail": "( the sum of ( num of audience ) ) that belongs to ( festival detail )",
    "SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')": "( friend ) that belongs to ( personfriend ) , that have ( ( ( name ) equal to ( 'zach' ) ) and ( ( year ) equal to ( the maximum of ( year ) ) that belongs to ( personfriend ) , that have ( ( name ) equal to ( 'zach' ) ) ) )",
    "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1": "( customer name of addresses ) that belongs to ( ( customers ) , and ( ( orders ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , grouped by ( customer id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\"": "( name of addresses ) , ( id of addresses ) that belongs to ( ( station ) , and ( ( status ) satisfied that ( ( id of addresses ) equal to ( station id of staff ) ) ) ) , grouped by ( station id of staff ) , that have ( ( the average of ( bikes available of staff ) ) greater than ( 14 ) ) and ( name ) , ( id ) that belongs to ( station ) , that have ( ( installation_date ) like ( 12/% ) )",
    "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1": "( payment method code ) that belongs to ( payments ) , grouped by ( payment method code ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)": "( name ) that belongs to ( useracct ) , that have ( ( u_id ) not in ( ( u id ) that belongs to ( review ) ) )",
    "SELECT Country FROM market ORDER BY Number_cities DESC": "( country ) that belongs to ( market ) , ordered by ( ( number cities ) in descending order )",
    "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"": "( firstname of addresses ) , ( lastname of addresses ) that belongs to ( ( list ) , and ( ( teachers ) satisfied that ( ( classroom of addresses ) equal to ( classroom of staff ) ) ) ) , that have ( ( ( firstname of staff ) equal to ( otha ) ) and ( ( lastname of staff ) equal to ( moyer ) ) )",
    "SELECT * FROM employees WHERE hire_date  <  '2002-06-21'": "all items that belongs to ( employees ) , that have ( ( hire date ) less than ( '2002-06-21' ) )",
    "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID": "( name of addresses ) that belongs to ( ( people ) , and ( ( perpetrator ) satisfied that ( ( people id of addresses ) equal to ( people id of staff ) ) ) )",
    "SELECT main_industry ,  sum(market_value) FROM company GROUP BY main_industry": "( main industry ) , ( the sum of ( market value ) ) that belongs to ( company ) , grouped by ( main industry )",
    "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn": "( name of staff ) that belongs to ( ( assignedto ) , and ( ( scientists ) satisfied that ( ( scientist of addresses ) equal to ( ssn of staff ) ) ) )",
    "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC": "( crime rate ) that belongs to ( county public safety ) , ordered by ( ( police officers ) in ascending order )",
    "SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0": "( firstname of addresses ) , ( lastname of addresses ) that belongs to ( ( reservations ) , and ( ( rooms ) satisfied that ( ( room of addresses ) equal to ( roomid of staff ) ) ) ) , that have ( ( ( rate of addresses ) minus ( baseprice of staff ) ) greater than ( 0 ) )",
    "SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1": "( the number of ( all items ) ) , ( product name of addresses ) that belongs to ( ( product ) , and ( ( problems ) satisfied that ( ( product id of addresses ) equal to ( product id of staff ) ) ) ) , grouped by ( product name of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff": "( customer details ) that belongs to ( customers ) and ( staff details ) that belongs to ( staff )",
    "SELECT DISTINCT region_name FROM region ORDER BY Label": "( distinct ( region name ) ) that belongs to ( region ) , ordered by ( ( label ) )",
    "SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Cargo' INTERSECT SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Catering services'": "( pilot of staff ) that belongs to ( ( operate company ) , and ( ( flight ) satisfied that ( ( id of addresses ) equal to ( company id of staff ) ) ) ) , that have ( ( principal activities of addresses ) equal to ( 'cargo' ) ), and intersect with ( ( pilot of staff ) that belongs to ( ( operate company ) , and ( ( flight ) satisfied that ( ( id of addresses ) equal to ( company id of staff ) ) ) ) , that have ( ( principal activities of addresses ) equal to ( 'catering services' ) ))",
    "SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2000": "( the number of ( all items ) ) that belongs to ( ( salary ) , and ( ( team ) satisfied that ( ( team id of addresses ) equal to ( team id br of staff ) ) ) ) , that have ( ( ( name of staff ) equal to ( 'boston red stockings' ) ) and ( ( year of addresses ) equal to ( 2000 ) ) )",
    "SELECT count(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005": "( the number of ( all items ) ) that belongs to ( gas station ) , that have ( ( open_year ) between ( 2000 ) and ( 2005 ) )",
    "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1": "( faculty of staff ) that belongs to ( ( campuses ) , and ( ( faculty ) satisfied that ( ( id of addresses ) equal to ( campus of member of club ) ) ) , and ( ( degrees ) satisfied that ( ( ( id of addresses ) equal to ( campus of student ) ) and ( ( year of member of club ) equal to ( year of student ) ) ) ) ) , that have ( ( year of member of club ) equal to ( 2002 ) ) , ordered by ( ( degrees of student ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\"": "( the number of ( all items ) ) that belongs to ( ( student ) , and ( ( voting record ) satisfied that ( ( stuid of addresses ) equal to ( class senator vote ) ) ) ) , that have ( ( ( city code of addresses ) equal to ( nyc ) ) and ( ( election cycle of staff ) equal to ( spring ) ) )",
    "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"": "( candidate id ) that belongs to ( candidate assessments ) , that have ( ( asessment outcome code ) equal to ( pass ) )",
    "SELECT count(*) FROM accounts": "( the number of ( all items ) ) that belongs to ( accounts )",
    "SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year": "( the maximum of ( fastestlapspeed of staff ) ) , ( name of addresses ) , ( year of addresses ) that belongs to ( ( races ) , and ( ( results ) satisfied that ( ( raceid of addresses ) equal to ( raceid of staff ) ) ) ) , that have ( ( year of addresses ) greater than ( 2014 ) ) , grouped by ( name of addresses ) , ordered by ( ( year of addresses ) )",
    "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3": "( distinct ( customer name of addresses ) ) that belongs to ( ( customers ) , and ( ( customer orders ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) , and ( ( order items ) satisfied that ( ( order id of staff ) equal to ( order id of enzyme ) ) ) ) , grouped by ( customer id of addresses ) , that have ( ( the number of ( distinct ( product id of enzyme ) ) ) greater than or equal to ( 3 ) )",
    "SELECT T1.student_id ,  T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  >=  2": "( student id of addresses ) , ( personal name of staff ) that belongs to ( ( student course enrolment ) , and ( ( students ) satisfied that ( ( student id of addresses ) equal to ( student id of staff ) ) ) ) , grouped by ( student id of addresses ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers": "( customer phone ) that belongs to ( customers ) and ( supplier phone ) that belongs to ( suppliers )",
    "SELECT Name FROM climber ORDER BY Points DESC": "( name ) that belongs to ( climber ) , ordered by ( ( points ) in descending order )",
    "SELECT document_type_code FROM documents WHERE document_name  =  \"David CV\"": "( document type code ) that belongs to ( documents ) , that have ( ( document name ) equal to ( david cv ) )",
    "SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'": "( account id of addresses ) , ( date account opened of addresses ) , ( account name of addresses ) , ( other account details of addresses ) that belongs to ( ( accounts ) , and ( ( customers ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , that have ( ( customer first name of staff ) equal to ( 'meaghan' ) )",
    "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1": "( id of addresses ) , ( name of addresses ) , ( iata of addresses ) that belongs to ( ( airport ) , and ( ( flight ) satisfied that ( ( id of addresses ) equal to ( airport id of staff ) ) ) ) , grouped by ( id of staff ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"": "( distinct ( clubname of club ) ) that belongs to ( ( club ) , and ( ( member of club ) satisfied that ( ( clubid of club ) equal to ( clubid of member of club ) ) ) , and ( ( student ) satisfied that ( ( stuid of member of club ) equal to ( stuid of student ) ) ) ) , that have ( ( ( fname of student ) equal to ( davis ) ) and ( ( lname of student ) equal to ( steven ) ) )",
    "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name": "( the number of ( all items ) ) , ( name of staff ) that belongs to ( ( products ) , and ( ( manufacturers ) satisfied that ( ( manufacturer of addresses ) equal to ( code of staff ) ) ) ) , grouped by ( name of staff )",
    "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\"": "( the number of ( distinct ( clubname of club ) ) ) that belongs to ( ( club ) , and ( ( member of club ) satisfied that ( ( clubid of club ) equal to ( clubid of member of club ) ) ) , and ( ( student ) satisfied that ( ( stuid of member of club ) equal to ( stuid of student ) ) ) ) , that have ( ( ( fname of student ) equal to ( eric ) ) and ( ( lname of student ) equal to ( tai ) ) )",
    "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3": "( name of staff ) that belongs to ( ( actor ) , and ( ( musical ) satisfied that ( ( musical id of addresses ) equal to ( musical id of staff ) ) ) ) , grouped by ( musical id of addresses ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 3 ) )",
    "SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom": "( classroom ) , ( the number of ( distinct ( grade ) ) ) that belongs to ( list ) , grouped by ( classroom )",
    "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'": "( name of staff ) , ( salary of staff ) that belongs to ( ( advisor ) , and ( ( instructor ) satisfied that ( ( i id of addresses ) equal to ( id of staff ) ) ) , and ( ( student ) satisfied that ( ( s id of addresses ) equal to ( id of enzyme ) ) ) ) , that have ( ( dept name of enzyme ) equal to ( 'math' ) )",
    "SELECT T1.id ,  T1.score ,  T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2": "( id of addresses ) , ( score of addresses ) , ( date of addresses ) that belongs to ( ( game ) , and ( ( injury accident ) satisfied that ( ( game id of staff ) equal to ( id of addresses ) ) ) ) , grouped by ( id of addresses ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING count(*)  >  2": "( advisor ) that belongs to ( student ) , grouped by ( advisor ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )",
    "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100": "( building ) , ( room number ) that belongs to ( classroom ) , that have ( ( capacity ) between ( 50 ) and ( 100 ) )",
    "SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.City_Town  =  \"Feliciaberg\"": "( store name of staff ) that belongs to ( ( addresses ) , and ( ( drama workshop groups ) satisfied that ( ( address id of addresses ) equal to ( address id of staff ) ) ) ) , that have ( ( city town of addresses ) equal to ( feliciaberg ) )",
    "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1": "( title of staff ) , ( the average of ( stars of addresses ) ) that belongs to ( ( rating ) , and ( ( movie ) satisfied that ( ( mid of addresses ) equal to ( mid of staff ) ) ) ) , grouped by ( mid of addresses ) , ordered by ( ( the average of ( stars of addresses ) ) ) , limited to the top ( 1 )",
    "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1": "( headquartered city of student ) that belongs to ( ( store ) , and ( ( store district ) satisfied that ( ( store id of club ) equal to ( store id of member of club ) ) ) , and ( ( district ) satisfied that ( ( district id of member of club ) equal to ( district id of student ) ) ) ) , grouped by ( headquartered city of student ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM DEPARTMENT WHERE Division  =  \"AS\"": "( the number of ( all items ) ) that belongs to ( department ) , that have ( ( division ) equal to ( as ) )",
    "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"": "( the number of ( all items ) ) that belongs to ( ( vocals ) , and ( ( songs ) satisfied that ( ( songid of addresses ) equal to ( songid of staff ) ) ) ) , that have ( ( title ) equal to ( le pop ) )",
    "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1": "( manager name ) that belongs to ( gas station ) , that have ( ( open year ) greater than ( 2000 ) ) , grouped by ( manager name ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT t1.name FROM driver AS t1 JOIN school_bus AS t2 ON t1.driver_id  =  t2.driver_id ORDER BY years_working DESC LIMIT 1": "( name of club ) that belongs to ( ( driver ) , and ( ( school bus ) satisfied that ( ( driver id of club ) equal to ( driver id of member of club ) ) ) ) , ordered by ( ( years working ) in descending order ) , limited to the top ( 1 )",
    "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939": "( campus ) that belongs to ( campuses ) , that have ( ( ( year ) greater than or equal to ( 1935 ) ) and ( ( year ) less than or equal to ( 1939 ) ) )",
    "SELECT COUNT (DISTINCT id) FROM teaches": "( the number of ( distinct ( id ) ) ) that belongs to ( teaches )",
    "SELECT count(*) FROM Employees": "( the number of ( all items ) ) that belongs to ( employees )",
    "SELECT * FROM COURSE ORDER BY Credits": "all items that belongs to ( course ) , ordered by ( ( credits ) )",
    "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Year DESC": "( name of addresses ) that belongs to ( ( people ) , and ( ( perpetrator ) satisfied that ( ( people id of addresses ) equal to ( people id of staff ) ) ) ) , ordered by ( ( year of staff ) in descending order )",
    "SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3": "( other hotel details ) , ( star rating code ) that belongs to ( hotels ) , ordered by ( ( price range ) in ascending order ) , limited to the top ( 3 )",
    "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2": "( id of addresses ) , ( name of addresses ) that belongs to ( ( medicine ) , and ( ( medicine enzyme interaction ) satisfied that ( ( medicine id of staff ) equal to ( id of addresses ) ) ) ) , grouped by ( id of addresses ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname  =  \"Football\" AND onscholarship  =  'Y'": "( the sum of ( gamesplayed ) ) that belongs to ( sportsinfo ) , that have ( ( ( sportname ) equal to ( football ) ) and ( ( onscholarship ) equal to ( 'y' ) ) )",
    "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1": "( class ) that belongs to ( race ) , grouped by ( class ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking'": "( stuid of addresses ) that belongs to ( ( participates in ) , and ( ( activity ) satisfied that ( ( actid of staff ) equal to ( actid of staff ) ) ) ) , that have ( ( activity name of staff ) equal to ( 'canoeing' ) ), and intersect with ( ( stuid of addresses ) that belongs to ( ( participates in ) , and ( ( activity ) satisfied that ( ( actid of staff ) equal to ( actid of staff ) ) ) ) , that have ( ( activity name of staff ) equal to ( 'kayaking' ) ))",
    "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1": "( hometown of staff ) that belongs to ( ( gymnast ) , and ( ( people ) satisfied that ( ( gymnast id of addresses ) equal to ( people id of staff ) ) ) ) , grouped by ( hometown of staff ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count(*) DESC LIMIT 3": "( product name of staff ) that belongs to ( ( problems ) , and ( ( product ) satisfied that ( ( product id of addresses ) equal to ( product id of staff ) ) ) ) , grouped by ( product name of staff ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 3 )",
    "SELECT T3.Name ,  COUNT(*) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID GROUP BY T3.Name": "( name of enzyme ) , ( the number of ( all items ) ) that belongs to ( ( employment ) , and ( ( people ) satisfied that ( ( people id of addresses ) equal to ( people id of staff ) ) ) , and ( ( company ) satisfied that ( ( company id of addresses ) equal to ( company id of enzyme ) ) ) ) , grouped by ( name of enzyme )",
    "SELECT count(DISTINCT FacID) FROM Faculty_participates_in": "( the number of ( distinct ( facid ) ) ) that belongs to ( faculty participates in )",
    "SELECT count(*) FROM Ref_locations": "( the number of ( all items ) ) that belongs to ( ref locations )",
    "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id": "( customer details ) that belongs to ( customers ), and except that ( ( customer details of member of club ) that belongs to ( ( policies ) , and ( ( customers ) satisfied that ( ( customer id of club ) equal to ( customer id of member of club ) ) ) ))",
    "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate": "( support rate ) , ( consider rate ) , ( oppose rate ) that belongs to ( candidate ) , ordered by ( ( unsure rate ) )",
    "SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*)  >  3": "( max page size ) that belongs to ( product ) , grouped by ( max page size ) , that have ( ( the number of ( all items ) ) greater than ( 3 ) )",
    "SELECT T1.editor_id ,  T1.Name ,  COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.editor_id": "( editor id of addresses ) , ( name of addresses ) , ( the number of ( all items ) ) that belongs to ( ( editor ) , and ( ( journal committee ) satisfied that ( ( editor id of addresses ) equal to ( editor id of staff ) ) ) ) , grouped by ( editor id of addresses )",
    "SELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  \"Paper\"": "( document type code ) that belongs to ( ref document types ) , that have ( ( document type name ) equal to ( paper ) )",
    "SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'C' OR T2.enroll_grade  =  'A'": "( stu fname of addresses ) , ( stu lname of addresses ) that belongs to ( ( student ) , and ( ( enroll ) satisfied that ( ( stu num of addresses ) equal to ( stu num of staff ) ) ) ) , that have ( ( ( enroll grade of staff ) equal to ( 'c' ) ) or ( ( enroll grade of staff ) equal to ( 'a' ) ) )",
    "SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT 1": "( marketing region code ) that belongs to ( drama workshop groups ) , grouped by ( marketing region code ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM VOTING_RECORD": "( the number of ( all items ) ) that belongs to ( voting record )",
    "SELECT T1.Museum_Details ,  T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID  =  T2.Tourist_Attraction_ID": "( museum details of addresses ) , ( opening hours of staff ) that belongs to ( ( museums ) , and ( ( tourist attractions ) satisfied that ( ( museum id of addresses ) equal to ( tourist attraction id of staff ) ) ) )",
    "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing": "( the number of ( distinct ( claim outcome code ) ) ) that belongs to ( claims processing )",
    "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\";": "( decor ) that belongs to ( rooms ) , that have ( ( roomname ) equal to ( recluse and defiance ) )",
    "SELECT first_name ,  department_id FROM employees WHERE last_name  =  'McEwen'": "( first name ) , ( department id ) that belongs to ( employees ) , that have ( ( last name ) equal to ( 'mcewen' ) )",
    "SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"cumin\"": "( unit of measure of member of club ) that belongs to ( ( products ) , and ( ( ref product categories ) satisfied that ( ( product category code of club ) equal to ( product category code of member of club ) ) ) ) , that have ( ( product name of club ) equal to ( cumin ) )",
    "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)": "( f id ) that belongs to ( song ) , that have ( ( resolution ) greater than ( the maximum of ( resolution ) ) that belongs to ( song ) , that have ( ( rating ) less than ( 8 ) ) )",
    "SELECT player ,  number_of_matches ,  SOURCE FROM injury_accident WHERE injury != 'Knee problem'": "( player ) , ( number of matches ) , ( source ) that belongs to ( injury accident ) , that have ( ( injury ) not equal to ( 'knee problem' ) )",
    "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC": "( college ) that belongs to ( match season ) , grouped by ( college ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) ) , ordered by ( ( college ) in descending order )",
    "SELECT customer_details FROM customers ORDER BY customer_details": "( customer details ) that belongs to ( customers ) , ordered by ( ( customer details ) )",
    "SELECT first_name ,  last_name FROM Customers;": "( first name ) , ( last name ) that belongs to ( customers )",
    "SELECT avg(access_count) FROM documents": "( the average of ( access count ) ) that belongs to ( documents )",
    "SELECT count(*) FROM Rooms;": "( the number of ( all items ) ) that belongs to ( rooms )",
    "SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"": "( zip postcode of staff ) that belongs to ( ( customers ) , and ( ( addresses ) satisfied that ( ( customer address id of addresses ) equal to ( address id of staff ) ) ) ) , that have ( ( ( first name of addresses ) equal to ( carole ) ) and ( ( last name of addresses ) equal to ( bernhard ) ) )",
    "SELECT dept_name FROM department ORDER BY dept_name": "( dept name ) that belongs to ( department ) , ordered by ( ( dept name ) )",
    "SELECT stu_fname ,  stu_gpa FROM student WHERE stu_gpa  <  (SELECT avg(stu_gpa) FROM student)": "( stu fname ) , ( stu gpa ) that belongs to ( student ) , that have ( ( stu gpa ) less than ( the average of ( stu gpa ) ) that belongs to ( student ) )",
    "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800": "( the average of ( duration of addresses ) ) that belongs to ( ( files ) , and ( ( song ) satisfied that ( ( f id of addresses ) equal to ( f id of staff ) ) ) ) , that have ( ( ( formats of addresses ) equal to ( mp3 ) ) and ( ( resolution of staff ) less than ( 800 ) ) )",
    "SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1": "( the average of ( salary of addresses ) ) , ( the number of ( all items ) ) that belongs to ( ( instructor ) , and ( ( department ) satisfied that ( ( dept name of addresses ) equal to ( dept name of staff ) ) ) ) , ordered by ( ( budget of staff ) in descending order ) , limited to the top ( 1 )",
    "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"": "( the maximum of ( active to date of member of club ) ) that belongs to ( ( customers ) , and ( ( customer contact channels ) satisfied that ( ( customer id of club ) equal to ( customer id of member of club ) ) ) ) , that have ( ( customer name of club ) equal to ( tillman ernser ) )",
    "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested": "( name of staff ) , ( company of addresses ) that belongs to ( ( entrepreneur ) , and ( ( people ) satisfied that ( ( people id of addresses ) equal to ( people id of staff ) ) ) ) , ordered by ( ( money requested of addresses ) )",
    "SELECT category FROM book_club WHERE YEAR  >  1989 GROUP BY category HAVING count(*)  >=  2": "( category ) that belongs to ( book club ) , that have ( ( year ) greater than ( 1989 ) ) , grouped by ( category ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1": "( song ) that belongs to ( volume ) , ordered by ( ( weeks on top ) in descending order ) , limited to the top ( 1 )",
    "SELECT pName ,  HS FROM Player WHERE HS  <  1500": "( pname ) , ( hs ) that belongs to ( player ) , that have ( ( hs ) less than ( 1500 ) )",
    "SELECT mascot FROM school WHERE enrollment  >  (SELECT avg(enrollment) FROM school)": "( mascot ) that belongs to ( school ) , that have ( ( enrollment ) greater than ( the average of ( enrollment ) ) that belongs to ( school ) )",
    "SELECT max(Market_Value_in_Billion) ,  min(Market_Value_in_Billion) FROM company": "( the maximum of ( market value in billion ) ) , ( the minimum of ( market value in billion ) ) that belongs to ( company )",
    "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Claims WHERE Amount_Claimed  >  ( SELECT avg(Amount_Claimed) FROM Claims )": "( date claim made ) , ( date claim settled ) that belongs to ( claims ) , that have ( ( amount claimed ) greater than ( the average of ( amount claimed ) ) that belongs to ( claims ) )",
    "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC": "( the number of ( all items ) ) , ( name of addresses ) that belongs to ( ( airports ) , and ( ( routes ) satisfied that ( ( apid of addresses ) equal to ( src apid of staff ) ) ) ) , grouped by ( name of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order )",
    "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance": "( name of addresses ) that belongs to ( ( accounts ) , and ( ( checking ) satisfied that ( ( custid of addresses ) equal to ( custid of staff ) ) ) , and ( ( savings ) satisfied that ( ( custid of addresses ) equal to ( custid of enzyme ) ) ) ) , that have ( ( balance of staff ) greater than ( balance of enzyme ) )",
    "SELECT count(DISTINCT Party) FROM representative": "( the number of ( distinct ( party ) ) ) that belongs to ( representative )",
    "SELECT customer_name FROM customers": "( customer name ) that belongs to ( customers )",
    "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"": "( customer id of addresses ) that belongs to ( ( customers ) , and ( ( orders ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , that have ( ( order status of staff ) equal to ( on road ) ), and intersect with ( ( customer id of addresses ) that belongs to ( ( customers ) , and ( ( orders ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , that have ( ( order status of staff ) equal to ( shipped ) ))",
    "SELECT name FROM captain ORDER BY age DESC": "( name ) that belongs to ( captain ) , ordered by ( ( age ) in descending order )",
    "SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1": "( dept name of staff ) , ( dept address of staff ) that belongs to ( ( student ) , and ( ( department ) satisfied that ( ( dept code of addresses ) equal to ( dept code of staff ) ) ) ) , grouped by ( dept code of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT name ,  year_join FROM artist WHERE country != 'United States'": "( name ) , ( year join ) that belongs to ( artist ) , that have ( ( country ) not equal to ( 'united states' ) )",
    "SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id JOIN artist AS T3 ON T3.artist_id  =  T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance)  >  200": "( name of enzyme ) that belongs to ( ( exhibition record ) , and ( ( exhibition ) satisfied that ( ( exhibition id of addresses ) equal to ( exhibition id of staff ) ) ) , and ( ( artist ) satisfied that ( ( artist id of enzyme ) equal to ( artist id of staff ) ) ) ) , grouped by ( artist id of enzyme ) , that have ( ( the average of ( attendance of addresses ) ) greater than ( 200 ) )",
    "SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2": "( name of addresses ) , ( tourist attraction id of staff ) that belongs to ( ( tourist attractions ) , and ( ( visits ) satisfied that ( ( tourist attraction id of addresses ) equal to ( tourist attraction id of staff ) ) ) ) , grouped by ( tourist attraction id of staff ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"": "( the sum of ( room count of staff ) ) that belongs to ( ( apartment buildings ) , and ( ( apartments ) satisfied that ( ( building id of addresses ) equal to ( building id of staff ) ) ) ) , that have ( ( building short name of addresses ) equal to ( columbus square ) )",
    "SELECT Country_name ,  Capital FROM country": "( country name ) , ( capital ) that belongs to ( country )",
    "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";": "( phone ) that belongs to ( employees ) , that have ( ( ( first name ) equal to ( nancy ) ) and ( ( last name ) equal to ( edwards ) ) )",
    "SELECT staff_details FROM Research_Staff ORDER BY staff_details ASC": "( staff details ) that belongs to ( research staff ) , ordered by ( ( staff details ) in ascending order )",
    "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING sum(access_count)  >  10000": "( document type code ) that belongs to ( documents ) , grouped by ( document type code ) , that have ( ( the sum of ( access count ) ) greater than ( 10000 ) )",
    "SELECT student_id FROM student_course_attendance WHERE course_id  =  301": "( student id ) that belongs to ( student course attendance ) , that have ( ( course id ) equal to ( 301 ) )",
    "SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1": "( name ) that belongs to ( ship ) , ordered by ( ( tonnage ) in descending order ) , limited to the top ( 1 )",
    "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996": "( campusfee ) that belongs to ( ( campuses ) , and ( ( csu fees ) satisfied that ( ( id of addresses ) equal to ( campus of member of club ) ) ) ) , that have ( ( ( campus of club ) equal to ( san jose state university ) ) and ( ( year of staff ) equal to ( 1996 ) ) )",
    "SELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000": "( the average of ( budget million ) ) , ( the maximum of ( budget million ) ) , ( the minimum of ( budget million ) ) that belongs to ( movie ) , that have ( ( year ) less than ( 2000 ) )",
    "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy": "( stuid ) that belongs to ( student ), and except that ( ( stuid ) that belongs to ( has allergy ))",
    "SELECT T1.thing_id ,  T1.type_of_Thing_Code ,  T2.organization_details FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id  =  T2.organization_id": "( thing id of addresses ) , ( type of thing code of addresses ) , ( organization details of staff ) that belongs to ( ( things ) , and ( ( organizations ) satisfied that ( ( organization id of addresses ) equal to ( organization id of staff ) ) ) )",
    "SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID": "( activity name of addresses ) , ( the number of ( all items ) ) that belongs to ( ( activity ) , and ( ( faculty participates in ) satisfied that ( ( actid of addresses ) equal to ( actid of staff ) ) ) ) , grouped by ( actid of addresses )",
    "SELECT Fname FROM STUDENT WHERE Age  >  22": "( fname ) that belongs to ( student ) , that have ( ( age ) greater than ( 22 ) )",
    "SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1": "( birth place ) that belongs to ( people ) , grouped by ( birth place ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT ResTypeName FROM Restaurant_Type;": "( restypename ) that belongs to ( restaurant type )",
    "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3": "( major ) that belongs to ( student ) , grouped by ( major ) , that have ( ( the number of ( all items ) ) less than ( 3 ) )",
    "SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination)": "( name ) that belongs to ( wrestler ) , that have ( ( wrestler_id ) not in ( ( wrestler id ) that belongs to ( elimination ) ) )",
    "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code": "( the number of ( all items ) ) , ( the average of ( age ) ) , ( city code ) that belongs to ( student ) , that have ( ( sex ) equal to ( 'm' ) ) , grouped by ( city code )",
    "SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%'": "( cname of addresses ) that belongs to ( ( tryout ) , and ( ( player ) satisfied that ( ( pid of addresses ) equal to ( pid of staff ) ) ) ) , that have ( ( t2.pname ) like ( 'd%' ) )",
    "SELECT grant_id ,  count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1": "( grant id ) , ( the number of ( all items ) ) that belongs to ( documents ) , grouped by ( grant id ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT sum(grant_amount) ,  organisation_id FROM Grants GROUP BY organisation_id": "( the sum of ( grant amount ) ) , ( organisation id ) that belongs to ( grants ) , grouped by ( organisation id )",
    "SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100": "( distinct ( winery ) ) that belongs to ( wine ) , that have ( ( price ) between ( 50 ) and ( 100 ) )",
    "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1": "( name of addresses ) that belongs to ( ( user profiles ) , and ( ( tweets ) satisfied that ( ( uid of addresses ) equal to ( uid of staff ) ) ) ) , grouped by ( uid of staff ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4": "( facility code of addresses ) that belongs to ( ( apartment facilities ) , and ( ( apartments ) satisfied that ( ( apt id of addresses ) equal to ( apt id of staff ) ) ) ) , that have ( ( bedroom count of staff ) greater than ( 4 ) )",
    "SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers": "( the sum of ( amount piad ) ) , ( the average of ( amount piad ) ) that belongs to ( claim headers )",
    "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Solveig\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1": "( type ) that belongs to ( ( vocals ) , and ( ( band ) satisfied that ( ( bandmate of addresses ) equal to ( id of staff ) ) ) ) , that have ( ( firstname ) equal to ( solveig ) ) , grouped by ( type ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\"": "( position of addresses ) that belongs to ( ( match season ) , and ( ( team ) satisfied that ( ( team of addresses ) equal to ( team id of staff ) ) ) ) , that have ( ( name of staff ) equal to ( ryley goldner ) )",
    "SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count(*) DESC LIMIT 1": "( event id ) that belongs to ( participants in events ) , grouped by ( event id ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1": "( flag ) that belongs to ( ship ) , grouped by ( flag ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))": "( balance of staff ) that belongs to ( ( accounts ) , and ( ( checking ) satisfied that ( ( custid of addresses ) equal to ( custid of staff ) ) ) ) , that have ( ( t1.name ) in ( ( name of addresses ) that belongs to ( ( accounts ) , and ( ( savings ) satisfied that ( ( custid of addresses ) equal to ( custid of staff ) ) ) ) , that have ( ( balance of staff ) greater than ( the average of ( balance ) ) that belongs to ( savings ) ) ) )",
    "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson'": "( company name of addresses ) that belongs to ( ( culture company ) , and ( ( book club ) satisfied that ( ( book club id of addresses ) equal to ( book club id of staff ) ) ) ) , that have ( ( publisher of staff ) equal to ( 'alyson' ) )",
    "SELECT DISTINCT premises_type FROM premises": "( distinct ( premises type ) ) that belongs to ( premises )",
    "SELECT title FROM item WHERE i_id NOT IN (SELECT i_id FROM review)": "( title ) that belongs to ( item ) , that have ( ( i_id ) not in ( ( i id ) that belongs to ( review ) ) )",
    "SELECT LName FROM STUDENT WHERE Major  =  50": "( lname ) that belongs to ( student ) , that have ( ( major ) equal to ( 50 ) )",
    "SELECT * FROM employees WHERE department_id  =  \"null\"": "all items that belongs to ( employees ) , that have ( ( department_id ) is missing )",
    "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName": "( distinct ( state ) ) that belongs to ( ( college ) , and ( ( tryout ) satisfied that ( ( cname of addresses ) equal to ( cname of staff ) ) ) )",
    "SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1": "( name ) , ( city ) , ( country ) that belongs to ( airports ) , ordered by ( ( elevation ) ) , limited to the top ( 1 )",
    "SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1": "( invoice number of staff ) , ( invoice date of staff ) that belongs to ( ( financial transactions ) , and ( ( invoices ) satisfied that ( ( invoice number of addresses ) equal to ( invoice number of staff ) ) ) ) , grouped by ( invoice number of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID": "( name of staff ) , ( the number of ( all items ) ) that belongs to ( ( actor ) , and ( ( musical ) satisfied that ( ( musical id of addresses ) equal to ( musical id of staff ) ) ) ) , grouped by ( musical id of addresses )",
    "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\"": "( flno ) that belongs to ( flight ) , that have ( ( origin ) equal to ( los angeles ) )",
    "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1": "( status of addresses ) that belongs to ( ( city ) , and ( ( farm competition ) satisfied that ( ( city id of addresses ) equal to ( host city id of staff ) ) ) ) , grouped by ( host city id of staff ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200": "( start station id ) , ( start station name ) that belongs to ( trip ) , grouped by ( start station name ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 200 ) )",
    "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Packing\"": "( distinct ( customer name of addresses ) ) that belongs to ( ( customers ) , and ( ( orders ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , that have ( ( order status of staff ) equal to ( packing ) )",
    "SELECT name FROM media_types;": "( name ) that belongs to ( media types )",
    "SELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"Fail\"": "( the number of ( all items ) ) that belongs to ( student tests taken ) , that have ( ( test result ) equal to ( fail ) )",
    "SELECT name ,  street_address ,  floors FROM building ORDER BY floors": "( name ) , ( street address ) , ( floors ) that belongs to ( building ) , ordered by ( ( floors ) )",
    "SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')": "( the number of ( all items ) ) that belongs to ( \"l ( cname ) that belongs to ( tryout ) , that have ( ( ppos ) equal to ( 'goalie' ) ), and intersect with ( ( cname ) that belongs to ( tryout ) , that have ( ( ppos ) equal to ( 'mid' ) )) r\" )",
    "SELECT email_address ,  phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)": "( email address ) , ( phone number ) that belongs to ( customers ) , that have ( ( customer_id ) not in ( ( customer id ) that belongs to ( complaints ) ) )",
    "SELECT match_id FROM MATCH WHERE competition = \"1994 FIFA World Cup qualification\"": "( match id ) that belongs to ( match ) , that have ( ( competition ) equal to ( 1994 fifa world cup qualification ) )",
    "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1": "( name of staff ) , ( location of staff ) that belongs to ( ( race ) , and ( ( track ) satisfied that ( ( track id of addresses ) equal to ( track id of staff ) ) ) ) , grouped by ( track id of addresses ) , that have ( ( the number of ( all items ) ) equal to ( 1 ) )",
    "SELECT open_date ,  count(*) FROM church GROUP BY open_date": "( open date ) , ( the number of ( all items ) ) that belongs to ( church ) , grouped by ( open date )",
    "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;": "( decor of staff ) that belongs to ( ( reservations ) , and ( ( rooms ) satisfied that ( ( room of addresses ) equal to ( roomid of staff ) ) ) ) , grouped by ( decor of staff ) , ordered by ( ( the number of ( decor of staff ) ) in ascending order ) , limited to the top ( 1 )",
    "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)": "( region name ) that belongs to ( region ) , that have ( ( region_id ) not in ( ( region id ) that belongs to ( affected region ) ) )",
    "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3": "( artist name of addresses ) , ( the number of ( all items ) ) that belongs to ( ( artist ) , and ( ( song ) satisfied that ( ( artist name of addresses ) equal to ( artist name of staff ) ) ) ) , grouped by ( artist name of staff ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 3 )",
    "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'male' AND T1.job  =  'doctor'": "( friend of staff ) that belongs to ( ( person ) , and ( ( personfriend ) satisfied that ( ( name of addresses ) equal to ( friend of staff ) ) ) ) , that have ( ( ( name of staff ) equal to ( 'alice' ) ) and ( ( gender of addresses ) equal to ( 'male' ) ) and ( ( job of addresses ) equal to ( 'doctor' ) ) )",
    "SELECT avg(weight) FROM Player": "( the average of ( weight ) ) that belongs to ( player )",
    "SELECT partitionid FROM user_profiles WHERE name  =  'Iron Man'": "( partitionid ) that belongs to ( user profiles ) , that have ( ( name ) equal to ( 'iron man' ) )",
    "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85": "( player api id ) that belongs to ( player ) , that have ( ( height ) greater than or equal to ( 180 ) ), and intersect with ( ( player api id ) that belongs to ( player attributes ) , that have ( ( overall rating ) greater than ( 85 ) ))",
    "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Latin\" OR T1.Name  =  \"Pop\"": "( the average of ( milliseconds ) ) that belongs to ( ( genre ) , and ( ( track ) satisfied that ( ( genreid of addresses ) equal to ( genreid of staff ) ) ) ) , that have ( ( ( name of addresses ) equal to ( latin ) ) or ( ( name of addresses ) equal to ( pop ) ) )",
    "SELECT count(*) FROM perpetrator": "( the number of ( all items ) ) that belongs to ( perpetrator )",
    "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"slow\"": "( the number of ( all items ) ) that belongs to ( ( products ) , and ( ( product characteristics ) satisfied that ( ( product id of club ) equal to ( product id of member of club ) ) ) , and ( ( characteristics ) satisfied that ( ( characteristic id of member of club ) equal to ( characteristic id of student ) ) ) , and ( ( ref colors ) satisfied that ( ( color code of club ) equal to ( color code of inst ) ) ) ) , that have ( ( ( color description of inst ) equal to ( red ) ) and ( ( characteristic name of student ) equal to ( slow ) ) )",
    "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;": "( the number of ( all items ) ) that belongs to ( ( reservations ) , and ( ( rooms ) satisfied that ( ( room of addresses ) equal to ( roomid of staff ) ) ) ) , that have ( ( maxoccupancy of staff ) equal to ( ( adults of addresses ) add ( kids of addresses ) ) )",
    "SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  'Research'": "( the sum of ( grant amount ) ) that belongs to ( ( grants ) , and ( ( organisations ) satisfied that ( ( organisation id of addresses ) equal to ( organisation id of staff ) ) ) , and ( ( organisation types ) satisfied that ( ( organisation type of staff ) equal to ( organisation type of enzyme ) ) ) ) , that have ( ( organisation type description of enzyme ) equal to ( 'research' ) )",
    "SELECT count(*) FROM ADDRESSES WHERE zip_postcode  =  \"197\"": "( the number of ( all items ) ) that belongs to ( addresses ) , that have ( ( zip postcode ) equal to ( 197 ) )",
    "SELECT course_name FROM courses ORDER BY course_name": "( course name ) that belongs to ( courses ) , ordered by ( ( course name ) )",
    "SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id": "( company of staff ) , ( the number of ( all items ) ) that belongs to ( ( station company ) , and ( ( company ) satisfied that ( ( company id of addresses ) equal to ( company id of staff ) ) ) ) , grouped by ( company id of addresses )",
    "SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200": "( country ) that belongs to ( mountain ) , that have ( ( height ) greater than ( 5600 ) ), and intersect with ( ( country ) that belongs to ( mountain ) , that have ( ( height ) less than ( 5200 ) ))",
    "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005": "( the average of ( campusfee ) ) that belongs to ( csu fees ) , that have ( ( year ) equal to ( 2005 ) )",
    "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\"": "( lieutenant governor ) , ( comptroller ) that belongs to ( party ) , that have ( ( party ) equal to ( democratic ) )",
    "SELECT count(*) FROM wedding WHERE YEAR  =  2016": "( the number of ( all items ) ) that belongs to ( wedding ) , that have ( ( year ) equal to ( 2016 ) )",
    "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion": "( rank ) , ( company ) , ( market value ) that belongs to ( company ) , that have ( ( main industry ) equal to ( 'banking' ) ) , ordered by ( ( sales billion ),( profits billion ) )",
    "SELECT sum(Share_in_percent) FROM channel WHERE OWNER  =  'CCTV'": "( the sum of ( share in percent ) ) that belongs to ( channel ) , that have ( ( owner ) equal to ( 'cctv' ) )",
    "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1": "( party of staff ) that belongs to ( ( election ) , and ( ( party ) satisfied that ( ( party of addresses ) equal to ( party id of staff ) ) ) ) , grouped by ( party of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"": "( the average of ( fastestlapspeed of staff ) ) that belongs to ( ( races ) , and ( ( results ) satisfied that ( ( raceid of addresses ) equal to ( raceid of staff ) ) ) ) , that have ( ( ( year of addresses ) equal to ( 2008 ) ) and ( ( name of addresses ) equal to ( monaco grand prix ) ) )",
    "SELECT Festival_Name ,  LOCATION FROM festival_detail": "( festival name ) , ( location ) that belongs to ( festival detail )",
    "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1": "( name of staff ) that belongs to ( ( office locations ) , and ( ( buildings ) satisfied that ( ( building id of addresses ) equal to ( id of staff ) ) ) , and ( ( companies ) satisfied that ( ( company id of addresses ) equal to ( id of enzyme ) ) ) ) , grouped by ( building id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) ,  Grape FROM WINE GROUP BY Grape": "( the number of ( all items ) ) , ( grape ) that belongs to ( wine ) , grouped by ( grape )",
    "SELECT other_details FROM Residents WHERE other_details LIKE '%Miss%'": "( other details ) that belongs to ( residents ) , that have ( ( other_details ) like ( '%miss%' ) )",
    "SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE T2.color_description  =  'yellow'": "( product name of addresses ) that belongs to ( ( products ) , and ( ( ref colors ) satisfied that ( ( color code of addresses ) equal to ( color code of staff ) ) ) ) , that have ( ( color description of staff ) equal to ( 'yellow' ) )",
    "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id": "( customer name ) that belongs to ( customers ), and except that ( ( customer name of club ) that belongs to ( ( customers ) , and ( ( customer orders ) satisfied that ( ( customer id of club ) equal to ( customer id of member of club ) ) ) ))",
    "SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T1.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211'": "( the average of ( stu gpa of staff ) ) that belongs to ( ( enroll ) , and ( ( student ) satisfied that ( ( stu num of addresses ) equal to ( stu num of staff ) ) ) , and ( ( class ) satisfied that ( ( class code of addresses ) equal to ( class code of enzyme ) ) ) ) , that have ( ( crs code of enzyme ) equal to ( 'acct-211' ) )",
    "SELECT name_first ,  name_last FROM player WHERE death_year = '';": "( name first ) , ( name last ) that belongs to ( player ) , that have ( ( death year ) equal to ( '' ) )",
    "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.sex  =  \"F\"": "( fname of student ) , ( lname of student ) that belongs to ( ( club ) , and ( ( member of club ) satisfied that ( ( clubid of club ) equal to ( clubid of member of club ) ) ) , and ( ( student ) satisfied that ( ( stuid of member of club ) equal to ( stuid of student ) ) ) ) , that have ( ( ( clubname of club ) equal to ( bootup baltimore ) ) and ( ( sex of student ) equal to ( f ) ) )",
    "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1": "( party name of staff ) that belongs to ( ( member ) , and ( ( party ) satisfied that ( ( party id of addresses ) equal to ( party id of staff ) ) ) ) , grouped by ( party id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT gtype ,  count(*) FROM Video_games GROUP BY gtype": "( gtype ) , ( the number of ( all items ) ) that belongs to ( video games ) , grouped by ( gtype )",
    "SELECT Name FROM pilot ORDER BY Age DESC": "( name ) that belongs to ( pilot ) , ordered by ( ( age ) in descending order )",
    "SELECT count(*) FROM College WHERE enr  >  15000": "( the number of ( all items ) ) that belongs to ( college ) , that have ( ( enr ) greater than ( 15000 ) )",
    "SELECT name ,  Assets_billion FROM Companies ORDER BY name ASC": "( name ) , ( assets billion ) that belongs to ( companies ) , ordered by ( ( name ) in ascending order )",
    "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2": "( name of addresses ) , ( partitionid of addresses ) that belongs to ( ( user profiles ) , and ( ( tweets ) satisfied that ( ( uid of addresses ) equal to ( uid of staff ) ) ) ) , grouped by ( uid of staff ) , that have ( ( the number of ( all items ) ) less than ( 2 ) )",
    "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99": "( name of staff ) that belongs to ( ( flight ) , and ( ( aircraft ) satisfied that ( ( aid of addresses ) equal to ( aid of staff ) ) ) ) , that have ( ( flno of addresses ) equal to ( 99 ) )",
    "SELECT count(*) FROM Faculty WHERE Rank  =  \"Professor\" AND building  =  \"NEB\"": "( the number of ( all items ) ) that belongs to ( faculty ) , that have ( ( ( rank ) equal to ( professor ) ) and ( ( building ) equal to ( neb ) ) )",
    "SELECT name FROM stadium WHERE id NOT IN (SELECT stadium_id FROM event)": "( name ) that belongs to ( stadium ) , that have ( ( id ) not in ( ( stadium id ) that belongs to ( event ) ) )",
    "SELECT Name FROM city ORDER BY Name ASC": "( name ) that belongs to ( city ) , ordered by ( ( name ) in ascending order )",
    "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Louisville ,  Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Hiram ,  Georgia'": "( name of staff ) that belongs to ( ( membership register branch ) , and ( ( branch ) satisfied that ( ( branch id of addresses ) equal to ( branch id of staff ) ) ) , and ( ( member ) satisfied that ( ( member id of addresses ) equal to ( member id of enzyme ) ) ) ) , that have ( ( hometown of enzyme ) equal to ( 'louisville , kentucky' ) ), and intersect with ( ( name of staff ) that belongs to ( ( membership register branch ) , and ( ( branch ) satisfied that ( ( branch id of addresses ) equal to ( branch id of staff ) ) ) , and ( ( member ) satisfied that ( ( member id of addresses ) equal to ( member id of enzyme ) ) ) ) , that have ( ( hometown of enzyme ) equal to ( 'hiram , georgia' ) ))",
    "SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*)  >=  2": "( product type code ) that belongs to ( products ) , grouped by ( product type code ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT T1.name ,  T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  >  1880 GROUP BY T1.building_id HAVING count(*)  >=  2": "( name of addresses ) , ( height feet of addresses ) that belongs to ( ( building ) , and ( ( institution ) satisfied that ( ( building id of addresses ) equal to ( building id of staff ) ) ) ) , that have ( ( founded of staff ) greater than ( 1880 ) ) , grouped by ( building id of addresses ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT T2.Name ,  T1.Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID": "( name of staff ) , ( name of addresses ) that belongs to ( ( college ) , and ( ( member ) satisfied that ( ( college id of addresses ) equal to ( college id of staff ) ) ) )",
    "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'": "( emp fname of staff ) , ( prof office of addresses ) that belongs to ( ( professor ) , and ( ( employee ) satisfied that ( ( emp num of addresses ) equal to ( emp num of staff ) ) ) , and ( ( department ) satisfied that ( ( dept code of addresses ) equal to ( dept code of enzyme ) ) ) ) , that have ( ( ( dept name of enzyme ) equal to ( 'history' ) ) and ( ( prof high degree of addresses ) not equal to ( 'ph.d.' ) ) )",
    "SELECT count(*) FROM Accounts": "( the number of ( all items ) ) that belongs to ( accounts )",
    "SELECT DISTINCT product_name FROM products ORDER BY product_name": "( distinct ( product name ) ) that belongs to ( products ) , ordered by ( ( product name ) )",
    "SELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"": "( instrument ) that belongs to ( ( instruments ) , and ( ( band ) satisfied that ( ( bandmateid of addresses ) equal to ( id of staff ) ) ) ) , that have ( ( lastname of staff ) equal to ( heilo ) )",
    "SELECT code ,  name ,  min(price) FROM products GROUP BY name": "( code ) , ( name ) , ( the minimum of ( price ) ) that belongs to ( products ) , grouped by ( name )",
    "SELECT forename ,  surname FROM drivers WHERE nationality = \"German\"": "( forename ) , ( surname ) that belongs to ( drivers ) , that have ( ( nationality ) equal to ( german ) )",
    "SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  \"Leonie\"": "( firstname of staff ) , ( lastname of staff ) that belongs to ( ( customer ) , and ( ( employee ) satisfied that ( ( supportrepid of addresses ) equal to ( employeeid of staff ) ) ) ) , that have ( ( firstname of addresses ) equal to ( leonie ) )",
    "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\" OR t2.Company_name  =  \"Nokia Corporation\"": "( distinct ( hardware model name of staff ) ) that belongs to ( ( screen mode ) , and ( ( phone ) satisfied that ( ( graphics mode of addresses ) equal to ( screen mode of staff ) ) ) ) , that have ( ( ( type of addresses ) equal to ( graphics ) ) or ( ( company name of member of club ) equal to ( nokia corporation ) ) )",
    "SELECT DISTINCT building_description FROM Apartment_Buildings": "( distinct ( building description ) ) that belongs to ( apartment buildings )",
    "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"": "( aircraft of addresses ) that belongs to ( ( aircraft ) , and ( ( airport aircraft ) satisfied that ( ( aircraft id of addresses ) equal to ( aircraft id of staff ) ) ) , and ( ( airport ) satisfied that ( ( airport id of staff ) equal to ( airport id of enzyme ) ) ) ) , that have ( ( airport name of enzyme ) equal to ( london gatwick ) )",
    "SELECT name FROM projects ORDER BY hours DESC LIMIT 1": "( name ) that belongs to ( projects ) , ordered by ( ( hours ) in descending order ) , limited to the top ( 1 )",
    "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1": "( name of staff ) that belongs to ( ( certificate ) , and ( ( aircraft ) satisfied that ( ( aid of staff ) equal to ( aid of addresses ) ) ) ) , grouped by ( aid of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT city_code FROM Student WHERE LName  =  \"Kim\"": "( city code ) that belongs to ( student ) , that have ( ( lname ) equal to ( kim ) )",
    "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate": "( the maximum of ( support rate ) ) , ( the minimum of ( consider rate ) ) , ( the minimum of ( oppose rate ) ) that belongs to ( candidate )",
    "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3": "( apt type code ) that belongs to ( apartments ) , grouped by ( apt type code ) , ordered by ( ( the average of ( room count ) ) in descending order ) , limited to the top ( 3 )",
    "SELECT count(*) FROM Movie WHERE YEAR  <  2000": "( the number of ( all items ) ) that belongs to ( movie ) , that have ( ( year ) less than ( 2000 ) )",
    "SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\";": "( unit price ) that belongs to ( tracks ) , that have ( ( name ) equal to ( fast as a shark ) )",
    "SELECT name FROM enzyme WHERE name LIKE \"%ALA%\"": "( name ) that belongs to ( enzyme ) , that have ( ( name ) like ( %ala% ) )",
    "SELECT Builder FROM railway GROUP BY Builder ORDER BY COUNT(*) DESC LIMIT 1": "( builder ) that belongs to ( railway ) , grouped by ( builder ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT founder FROM manufacturers WHERE name  =  'Sony'": "( founder ) that belongs to ( manufacturers ) , that have ( ( name ) equal to ( 'sony' ) )",
    "SELECT DISTINCT city FROM addresses": "( distinct ( city ) ) that belongs to ( addresses )",
    "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Badlands\"": "( the number of ( distinct ( instrument ) ) ) that belongs to ( ( instruments ) , and ( ( songs ) satisfied that ( ( songid of addresses ) equal to ( songid of staff ) ) ) ) , that have ( ( title ) equal to ( badlands ) )",
    "SELECT DISTINCT label FROM Albums": "( distinct ( label ) ) that belongs to ( albums )",
    "SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Store_Name  =  \"FJA Filming\"": "( city town of addresses ) that belongs to ( ( addresses ) , and ( ( stores ) satisfied that ( ( address id of addresses ) equal to ( address id of staff ) ) ) ) , that have ( ( store name of staff ) equal to ( fja filming ) )",
    "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1": "( firstname of staff ) , ( lastname of staff ) that belongs to ( ( list ) , and ( ( teachers ) satisfied that ( ( classroom of addresses ) equal to ( classroom of staff ) ) ) ) , grouped by ( firstname of staff ) , ( lastname of staff ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)": "( the maximum of ( stars of addresses ) ) , ( year of staff ) that belongs to ( ( rating ) , and ( ( movie ) satisfied that ( ( mid of addresses ) equal to ( mid of staff ) ) ) ) , that have ( ( year of staff ) equal to ( the maximum of ( year ) ) that belongs to ( movie ) )",
    "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1": "( driverid of addresses ) , ( surname of addresses ) that belongs to ( ( drivers ) , and ( ( results ) satisfied that ( ( driverid of addresses ) equal to ( driverid of staff ) ) ) , and ( ( races ) satisfied that ( ( raceid of staff ) equal to ( raceid of enzyme ) ) ) ) , grouped by ( driverid of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  2 UNION SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  1": "( id of addresses ) , ( name of addresses ) , ( gender of addresses ) that belongs to ( ( architect ) , and ( ( bridge ) satisfied that ( ( id of addresses ) equal to ( architect id of staff ) ) ) ) , grouped by ( id of addresses ) , that have ( ( the number of ( all items ) ) equal to ( 2 ) ) and ( id of addresses ) , ( name of addresses ) , ( gender of addresses ) that belongs to ( ( architect ) , and ( ( mill ) satisfied that ( ( id of addresses ) equal to ( architect id of staff ) ) ) ) , grouped by ( id of addresses ) , that have ( ( the number of ( all items ) ) equal to ( 1 ) )",
    "SELECT count(*) FROM Songs": "( the number of ( all items ) ) that belongs to ( songs )",
    "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4": "( rid ) that belongs to ( rating ), and except that ( ( rid ) that belongs to ( rating ) , that have ( ( stars ) equal to ( 4 ) ))",
    "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10": "( id ) that belongs to ( station ) , that have ( ( city ) equal to ( san francisco ) ), and intersect with ( ( station id ) that belongs to ( status ) , grouped by ( station id ) , that have ( ( the average of ( bikes available ) ) greater than ( 10 ) ))",
    "SELECT fname ,  lname FROM Faculty WHERE Rank  =  \"Instructor\"": "( fname ) , ( lname ) that belongs to ( faculty ) , that have ( ( rank ) equal to ( instructor ) )",
    "SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID": "( title of staff ) , ( rid of addresses ) , ( stars of addresses ) , ( the minimum of ( stars of addresses ) ) that belongs to ( ( rating ) , and ( ( movie ) satisfied that ( ( mid of addresses ) equal to ( mid of staff ) ) ) ) , grouped by ( rid of addresses )",
    "SELECT count(DISTINCT OWNER) FROM channel": "( the number of ( distinct ( owner ) ) ) that belongs to ( channel )",
    "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3": "( name of addresses ) , ( balance of staff ) that belongs to ( ( accounts ) , and ( ( savings ) satisfied that ( ( custid of addresses ) equal to ( custid of staff ) ) ) ) , ordered by ( ( balance of staff ) in descending order ) , limited to the top ( 3 )",
    "SELECT shop_id ,  count(*) FROM happy_hour GROUP BY shop_id ORDER BY count(*) DESC LIMIT 1": "( shop id ) , ( the number of ( all items ) ) that belongs to ( happy hour ) , grouped by ( shop id ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT DISTINCT publisher FROM book_club": "( distinct ( publisher ) ) that belongs to ( book club )",
    "SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID ORDER BY T1.Year_working": "( name of enzyme ) , ( name of staff ) that belongs to ( ( employment ) , and ( ( people ) satisfied that ( ( people id of addresses ) equal to ( people id of staff ) ) ) , and ( ( company ) satisfied that ( ( company id of addresses ) equal to ( company id of enzyme ) ) ) ) , ordered by ( ( year working of addresses ) )",
    "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1": "( name of addresses ) that belongs to ( ( airlines ) , and ( ( routes ) satisfied that ( ( alid of addresses ) equal to ( alid of staff ) ) ) ) , grouped by ( name of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT minister FROM party ORDER BY left_office DESC LIMIT 1": "( minister ) that belongs to ( party ) , ordered by ( ( left office ) in descending order ) , limited to the top ( 1 )",
    "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1": "( max page size ) that belongs to ( product ) , grouped by ( max page size ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) ,  T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id  =  T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id": "( the number of ( all items ) ) , ( maintenance contract id of addresses ) that belongs to ( ( maintenance contracts ) , and ( ( assets ) satisfied that ( ( maintenance contract id of addresses ) equal to ( maintenance contract id of staff ) ) ) ) , grouped by ( maintenance contract id of addresses )",
    "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Sonoma\"": "( the average of ( price of staff ) ) that belongs to ( ( appellations ) , and ( ( wine ) satisfied that ( ( appelation of addresses ) equal to ( appelation of staff ) ) ) ) , that have ( ( county of addresses ) equal to ( sonoma ) )",
    "SELECT min(T1.duration) ,  min(T2.rating) ,  T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is": "( the minimum of ( duration of addresses ) ) , ( the minimum of ( rating of staff ) ) , ( genre is of staff ) that belongs to ( ( files ) , and ( ( song ) satisfied that ( ( f id of addresses ) equal to ( f id of staff ) ) ) ) , grouped by ( genre is of staff ) , ordered by ( ( genre is of staff ) )",
    "SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID": "( facid of addresses ) , ( the number of ( all items ) ) that belongs to ( ( faculty ) , and ( ( student ) satisfied that ( ( facid of addresses ) equal to ( advisor of staff ) ) ) ) , grouped by ( facid of addresses )",
    "SELECT origin FROM Flight WHERE destination  =  \"Honolulu\"": "( origin ) that belongs to ( flight ) , that have ( ( destination ) equal to ( honolulu ) )",
    "SELECT fname ,  lname FROM authors ORDER BY lname": "( fname ) , ( lname ) that belongs to ( authors ) , ordered by ( ( lname ) )",
    "SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T2.Nationality  =  \"United States\"": "( distinct ( fate of addresses ) ) that belongs to ( ( mission ) , and ( ( ship ) satisfied that ( ( ship id of addresses ) equal to ( ship id of staff ) ) ) ) , that have ( ( nationality of staff ) equal to ( united states ) )",
    "SELECT Name FROM GENRE": "( name ) that belongs to ( genre )",
    "SELECT T2.dept_name ,  avg(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY avg(T1.stu_gpa) DESC LIMIT 1": "( dept name of staff ) , ( the average of ( stu gpa of addresses ) ) that belongs to ( ( student ) , and ( ( department ) satisfied that ( ( dept code of addresses ) equal to ( dept code of staff ) ) ) ) , grouped by ( dept code of addresses ) , ordered by ( ( the average of ( stu gpa of addresses ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT LOCATION FROM railway GROUP BY LOCATION HAVING COUNT(*)  >  1": "( location ) that belongs to ( railway ) , grouped by ( location ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT bname FROM bank WHERE state  =  'New York'": "( bname ) that belongs to ( bank ) , that have ( ( state ) equal to ( 'new york' ) )",
    "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8": "( catalog entry name ) that belongs to ( catalog contents ) , that have ( ( next entry id ) greater than ( 8 ) )",
    "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"": "( customer name of addresses ) that belongs to ( ( customers ) , and ( ( orders ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , that have ( ( ( date order placed of staff ) greater than or equal to ( 2009-01-01 ) ) and ( ( date order placed of staff ) less than or equal to ( 2010-01-01 ) ) )",
    "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"": "( distinct ( reign ) ) that belongs to ( wrestler ) , that have ( ( location ) not equal to ( tokyo , japan ) )",
    "SELECT Gender ,  Occupation FROM player": "( gender ) , ( occupation ) that belongs to ( player )",
    "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"": "( the number of ( all items ) ) that belongs to ( ( accounts ) , and ( ( customers ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , that have ( ( ( customer first name of staff ) equal to ( art ) ) and ( ( customer last name of staff ) equal to ( turcotte ) ) )",
    "SELECT count(*) FROM Products_for_hire WHERE product_id NOT IN ( SELECT product_id FROM products_booked WHERE booked_amount  >  200 )": "( the number of ( all items ) ) that belongs to ( products for hire ) , that have ( ( product_id ) not in ( ( product id ) that belongs to ( products booked ) , that have ( ( booked amount ) greater than ( 200 ) ) ) )",
    "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140": "( fname of staff ) , ( lname of staff ) that belongs to ( ( minor in ) , and ( ( student ) satisfied that ( ( stuid of addresses ) equal to ( stuid of staff ) ) ) ) , that have ( ( dno of addresses ) equal to ( 140 ) )",
    "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"laurel\"": "( the number of ( all items ) ) that belongs to ( ( products ) , and ( ( product characteristics ) satisfied that ( ( product id of club ) equal to ( product id of member of club ) ) ) , and ( ( characteristics ) satisfied that ( ( characteristic id of member of club ) equal to ( characteristic id of student ) ) ) ) , that have ( ( product name of club ) equal to ( laurel ) )",
    "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001": "( the number of ( all items ) ) that belongs to ( budget ) , that have ( ( ( budgeted ) greater than ( 3000 ) ) and ( ( year ) less than or equal to ( 2001 ) ) )",
    "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1": "( software platform ) that belongs to ( device ) , grouped by ( software platform ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'": "( the average of ( hs of addresses ) ) that belongs to ( ( player ) , and ( ( tryout ) satisfied that ( ( pid of addresses ) equal to ( pid of staff ) ) ) ) , that have ( ( decision of staff ) equal to ( 'no' ) )",
    "SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'": "( stuid ) that belongs to ( sportsinfo ) , that have ( ( onscholarship ) equal to ( 'y' ) )",
    "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1": "( driverid of addresses ) , ( surname of addresses ) that belongs to ( ( drivers ) , and ( ( laptimes ) satisfied that ( ( driverid of addresses ) equal to ( driverid of staff ) ) ) ) , ordered by ( ( milliseconds of staff ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1": "( staff id of addresses ) , ( staff name of addresses ) that belongs to ( ( staff ) , and ( ( staff department assignments ) satisfied that ( ( staff id of addresses ) equal to ( staff id of staff ) ) ) ) , ordered by ( ( ( date assigned to ) minus ( date assigned from ) ) ) , limited to the top ( 1 )",
    "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\"": "( the number of ( all items ) ) that belongs to ( ( customers ) , and ( ( customers policies ) satisfied that ( ( customer id of club ) equal to ( customer id of member of club ) ) ) ) , that have ( ( customer name of club ) equal to ( dayana robel ) )",
    "SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\";": "( the sum of ( lesson time of addresses ) ) that belongs to ( ( lessons ) , and ( ( customers ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , that have ( ( ( first name of staff ) equal to ( rylan ) ) and ( ( last name of staff ) equal to ( goodwin ) ) )",
    "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO": "( dname ) that belongs to ( department ), and except that ( ( dname of addresses ) that belongs to ( ( department ) , and ( ( minor in ) satisfied that ( ( dno of addresses ) equal to ( dno of staff ) ) ) ))",
    "SELECT name FROM program WHERE origin != 'Beijing'": "( name ) that belongs to ( program ) , that have ( ( origin ) not equal to ( 'beijing' ) )",
    "SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1": "( id of addresses ) , ( name of addresses ) that belongs to ( ( browser ) , and ( ( accelerator compatible browser ) satisfied that ( ( id of addresses ) equal to ( browser id of staff ) ) ) ) , grouped by ( id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.name ,  count(*) FROM camera_lens AS T1 JOIN photos AS T2 ON T1.id  =  T2.camera_lens_id GROUP BY T1.id ORDER BY count(*)": "( name of addresses ) , ( the number of ( all items ) ) that belongs to ( ( camera lens ) , and ( ( photos ) satisfied that ( ( id of addresses ) equal to ( camera lens id of staff ) ) ) ) , grouped by ( id of addresses ) , ordered by ( ( the number of ( all items ) ) )",
    "SELECT count(*) FROM club_rank WHERE Total  <  10": "( the number of ( all items ) ) that belongs to ( club rank ) , that have ( ( total ) less than ( 10 ) )",
    "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)": "all items that belongs to ( student course registrations ) , that have ( ( student_id ) not in ( ( student id ) that belongs to ( student course attendance ) ) )",
    "SELECT TYPE ,  count(*) FROM store GROUP BY TYPE": "( type ) , ( the number of ( all items ) ) that belongs to ( store ) , grouped by ( type )",
    "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')": "( name of addresses ) that belongs to ( ( student ) , and ( ( takes ) satisfied that ( ( id of addresses ) equal to ( id of staff ) ) ) ) , that have ( ( t2.course_id ) in ( ( prereq id of trip ) that belongs to ( ( course ) , and ( ( prereq ) satisfied that ( ( course id of enzyme ) equal to ( course id of trip ) ) ) ) , that have ( ( title of enzyme ) equal to ( 'international finance' ) ) ) )",
    "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2": "( document type code ) that belongs to ( documents ) , grouped by ( document type code ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )",
    "SELECT count(DISTINCT role_code) FROM Project_Staff": "( the number of ( distinct ( role code ) ) ) that belongs to ( project staff )",
    "SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)": "( document name ) that belongs to ( documents ) , that have ( ( document_code ) not in ( ( document code ) that belongs to ( document sections ) ) )",
    "SELECT T1.teacher_id ,  T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T1.detention_type_code  =  \"AFTER\" GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1": "( teacher id of addresses ) , ( last name of staff ) that belongs to ( ( detention ) , and ( ( teachers ) satisfied that ( ( teacher id of addresses ) equal to ( teacher id of staff ) ) ) ) , that have ( ( detention type code of addresses ) equal to ( after ) ) , grouped by ( teacher id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1": "( allergytype ) that belongs to ( allergy type ) , grouped by ( allergytype ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( 1 )",
    "SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = \"John Dorian\"": "( the number of ( ssn of addresses ) ) that belongs to ( ( patient ) , and ( ( prescribes ) satisfied that ( ( ssn of addresses ) equal to ( patient of staff ) ) ) , and ( ( physician ) satisfied that ( ( physician of staff ) equal to ( employeeid of enzyme ) ) ) ) , that have ( ( name of enzyme ) equal to ( john dorian ) )",
    "SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" INTERSECT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";": "( document id ) that belongs to ( documents ) , that have ( ( ( document status code ) equal to ( done ) ) and ( ( document type code ) equal to ( paper ) ) ), and intersect with ( ( document id ) that belongs to ( documents , and ( ref shipping agents satisfied that ( ( shipping agent code of documents ) equal to ( shipping agent code of ref shipping agents ) ) ) ) , that have ( ( shipping agent name of ref shipping agents ) equal to ( usps ) ))",
    "SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Computer Info. Systems'": "( distinct ( emp fname of staff ) ) , ( prof high degree of enzyme ) that belongs to ( ( class ) , and ( ( employee ) satisfied that ( ( prof num of addresses ) equal to ( emp num of staff ) ) ) , and ( ( professor ) satisfied that ( ( emp num of staff ) equal to ( emp num of enzyme ) ) ) , and ( ( department ) satisfied that ( ( dept code of trip ) equal to ( dept code of enzyme ) ) ) ) , that have ( ( dept name of trip ) equal to ( 'computer info. systems' ) )",
    "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'": "( document type code ) that belongs to ( document types ) , that have ( ( document_description ) like ( 'initial%' ) )",
    "SELECT T2.company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id WHERE T1.year  =  1999": "( company name of staff ) that belongs to ( ( movie ) , and ( ( culture company ) satisfied that ( ( movie id of addresses ) equal to ( movie id of staff ) ) ) ) , that have ( ( year of addresses ) equal to ( 1999 ) )",
    "SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"": "( forename of enzyme ) , ( surname of enzyme ) that belongs to ( ( races ) , and ( ( results ) satisfied that ( ( raceid of addresses ) equal to ( raceid of staff ) ) ) , and ( ( drivers ) satisfied that ( ( driverid of staff ) equal to ( driverid of enzyme ) ) ) ) , that have ( ( name of addresses ) equal to ( australian grand prix ) ), and except that ( ( forename of enzyme ) , ( surname of enzyme ) that belongs to ( ( races ) , and ( ( results ) satisfied that ( ( raceid of addresses ) equal to ( raceid of staff ) ) ) , and ( ( drivers ) satisfied that ( ( driverid of staff ) equal to ( driverid of enzyme ) ) ) ) , that have ( ( name of addresses ) equal to ( chinese grand prix ) ))",
    "SELECT Competition_type ,  COUNT(*) FROM competition GROUP BY Competition_type": "( competition type ) , ( the number of ( all items ) ) that belongs to ( competition ) , grouped by ( competition type )",
    "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1": "( transaction type ) that belongs to ( financial transactions ) , grouped by ( transaction type ) , ordered by ( ( the sum of ( transaction amount ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT How_to_Get_There ,  COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There": "( how to get there ) , ( the number of ( all items ) ) that belongs to ( tourist attractions ) , grouped by ( how to get there )",
    "SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)": "( the number of ( all items ) ) that belongs to ( branch ) , that have ( ( membership amount ) greater than ( the average of ( membership amount ) ) that belongs to ( branch ) )",
    "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id": "( distinct ( city of addresses ) ) that belongs to ( ( addresses ) , and ( ( people addresses ) satisfied that ( ( address id of addresses ) equal to ( address id of staff ) ) ) )",
    "SELECT DISTINCT YEAR FROM party WHERE Governor  =  \"Eliot Spitzer\"": "( distinct ( year ) ) that belongs to ( party ) , that have ( ( governor ) equal to ( eliot spitzer ) )",
    "SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4": "( country ) that belongs to ( addresses ) , grouped by ( country ) , that have ( ( the number of ( address id ) ) greater than ( 4 ) )",
    "SELECT DISTINCT Product_Name FROM PRODUCTS WHERE Product_Price  >  (SELECT avg(Product_Price) FROM PRODUCTS)": "( distinct ( product name ) ) that belongs to ( products ) , that have ( ( product price ) greater than ( the average of ( product price ) ) that belongs to ( products ) )",
    "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'": "( the sum of ( amount of staff ) ) that belongs to ( ( bank ) , and ( ( loan ) satisfied that ( ( branch id of addresses ) equal to ( branch id of staff ) ) ) ) , that have ( ( state of addresses ) equal to ( 'new york' ) )",
    "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1": "( first name of addresses ) , ( last name of addresses ) that belongs to ( ( employees ) , and ( ( customers ) satisfied that ( ( id of addresses ) equal to ( support rep id of staff ) ) ) ) , grouped by ( id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT country ,  count(*) FROM airlines GROUP BY country ORDER BY count(*) DESC": "( country ) , ( the number of ( all items ) ) that belongs to ( airlines ) , grouped by ( country ) , ordered by ( ( the number of ( all items ) ) in descending order )",
    "SELECT T3.Party_Theme ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID": "( party theme of enzyme ) , ( name of staff ) that belongs to ( ( party host ) , and ( ( host ) satisfied that ( ( host id of addresses ) equal to ( host id of staff ) ) ) , and ( ( party ) satisfied that ( ( party id of addresses ) equal to ( party id of enzyme ) ) ) )",
    "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'": "( headquarters ) that belongs to ( company ) , that have ( ( main industry ) equal to ( 'banking' ) ), and intersect with ( ( headquarters ) that belongs to ( company ) , that have ( ( main industry ) equal to ( 'oil and gas' ) ))",
    "SELECT Name ,  Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\" OR How_to_Get_There  =  \"walk\"": "( name ) , ( opening hours ) that belongs to ( tourist attractions ) , that have ( ( ( how to get there ) equal to ( bus ) ) or ( ( how to get there ) equal to ( walk ) ) )",
    "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id JOIN building AS T3 ON T3.building_id  =  T1.building_id WHERE T3.floors  >=  20": "( the number of ( all items ) ) that belongs to ( ( institution ) , and ( ( protein ) satisfied that ( ( institution id of addresses ) equal to ( institution id of staff ) ) ) , and ( ( building ) satisfied that ( ( building id of enzyme ) equal to ( building id of addresses ) ) ) ) , that have ( ( floors of enzyme ) greater than or equal to ( 20 ) )",
    "SELECT T2.Author ,  T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID": "( author of staff ) , ( result of addresses ) that belongs to ( ( acceptance ) , and ( ( submission ) satisfied that ( ( submission id of addresses ) equal to ( submission id of staff ) ) ) )",
    "SELECT count(*) FROM browser WHERE market_share  >=  5": "( the number of ( all items ) ) that belongs to ( browser ) , that have ( ( market share ) greater than or equal to ( 5 ) )",
    "SELECT count(*) ,  nationality FROM constructors GROUP BY nationality": "( the number of ( all items ) ) , ( nationality ) that belongs to ( constructors ) , grouped by ( nationality )",
    "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"": "( the number of ( all items ) ) that belongs to ( student ) , that have ( ( ( city code ) equal to ( hkg ) ) or ( ( city code ) equal to ( chi ) ) )",
    "SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1": "( height of staff ) that belongs to ( ( climber ) , and ( ( mountain ) satisfied that ( ( mountain id of addresses ) equal to ( mountain id of staff ) ) ) ) , ordered by ( ( points of addresses ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM storm WHERE Number_Deaths  >  0": "( the number of ( all items ) ) that belongs to ( storm ) , that have ( ( number deaths ) greater than ( 0 ) )",
    "SELECT DISTINCT card_type_code FROM Customers_Cards": "( distinct ( card type code ) ) that belongs to ( customers cards )",
    "SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient  =  T2.SSN JOIN Prescribes AS T3 ON T3.Patient  =  T2.SSN JOIN Medication AS T4 ON T3.Medication  =  T4.Code WHERE room  =  111": "( name of trip ) that belongs to ( ( stay ) , and ( ( patient ) satisfied that ( ( patient of addresses ) equal to ( ssn of staff ) ) ) , and ( ( prescribes ) satisfied that ( ( patient of enzyme ) equal to ( ssn of staff ) ) ) , and ( ( medication ) satisfied that ( ( medication of enzyme ) equal to ( code of trip ) ) ) ) , that have ( ( room ) equal to ( 111 ) )",
    "SELECT T1.name ,  T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id": "( name of addresses ) , ( type of addresses ) that belongs to ( ( operate company ) , and ( ( flight ) satisfied that ( ( id of addresses ) equal to ( company id of staff ) ) ) )",
    "SELECT T1.fault_description ,  T2.fault_status FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id": "( fault description of addresses ) , ( fault status of staff ) that belongs to ( ( fault log ) , and ( ( fault log parts ) satisfied that ( ( fault log entry id of addresses ) equal to ( fault log entry id of staff ) ) ) )",
    "SELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2": "( the number of ( all items ) ) , ( class room ) that belongs to ( class ) , grouped by ( class room ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT T1.White ,  T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID": "( white of addresses ) , ( crime rate of staff ) that belongs to ( ( city ) , and ( ( county public safety ) satisfied that ( ( county id of addresses ) equal to ( county id of staff ) ) ) )",
    "SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1": "( rank ) that belongs to ( faculty ) , grouped by ( rank ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( 1 )",
    "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1": "( order id ) that belongs to ( orders ) , ordered by ( ( date order placed ) in descending order ) , limited to the top ( 1 )",
    "SELECT Date ,  LOCATION FROM performance": "( date ) , ( location ) that belongs to ( performance )",
    "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3": "( document type code ) that belongs to ( documents ) , grouped by ( document type code ) , that have ( ( the number of ( all items ) ) less than ( 3 ) )",
    "SELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1": "( college ) that belongs to ( submission ) , grouped by ( college ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT Team FROM player ORDER BY Age DESC LIMIT 5": "( team ) that belongs to ( player ) , ordered by ( ( age ) in descending order ) , limited to the top ( 5 )",
    "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC": "( company ) that belongs to ( entrepreneur ) , ordered by ( ( money requested ) in descending order )",
    "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1": "( primary conference of club ) that belongs to ( ( university ) , and ( ( basketball match ) satisfied that ( ( school id of club ) equal to ( school id of member of club ) ) ) ) , ordered by ( ( acc percent of member of club ) ) , limited to the top ( 1 )",
    "SELECT count(*) ,  dept_code FROM student GROUP BY dept_code": "( the number of ( all items ) ) , ( dept code ) that belongs to ( student ) , grouped by ( dept code )",
    "SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1": "( level ) that belongs to ( member ) , grouped by ( level ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT DISTINCT asset_model FROM Assets": "( distinct ( asset model ) ) that belongs to ( assets )",
    "SELECT DISTINCT product_name FROM product ORDER BY product_name": "( distinct ( product name ) ) that belongs to ( product ) , ordered by ( ( product name ) )",
    "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\"": "( document id of addresses ) that belongs to ( ( documents with expenses ) , and ( ( ref budget codes ) satisfied that ( ( budget type code of addresses ) equal to ( budget type code of staff ) ) ) ) , that have ( ( budget type description of staff ) equal to ( government ) )",
    "SELECT count(*) FROM authors": "( the number of ( all items ) ) that belongs to ( authors )",
    "SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Thiago Motta'": "( name of staff ) that belongs to ( ( game ) , and ( ( stadium ) satisfied that ( ( stadium id of addresses ) equal to ( id of staff ) ) ) , and ( ( injury accident ) satisfied that ( ( id of addresses ) equal to ( game id of enzyme ) ) ) ) , that have ( ( player of enzyme ) equal to ( 'walter samuel' ) ), and intersect with ( ( name of staff ) that belongs to ( ( game ) , and ( ( stadium ) satisfied that ( ( stadium id of addresses ) equal to ( id of staff ) ) ) , and ( ( injury accident ) satisfied that ( ( id of addresses ) equal to ( game id of enzyme ) ) ) ) , that have ( ( player of enzyme ) equal to ( 'thiago motta' ) ))",
    "SELECT T1.Name ,  T2.Tourist_Attraction_ID ,   COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID": "( name of addresses ) , ( tourist attraction id of staff ) , ( the number of ( all items ) ) that belongs to ( ( tourist attractions ) , and ( ( visits ) satisfied that ( ( tourist attraction id of addresses ) equal to ( tourist attraction id of staff ) ) ) ) , grouped by ( tourist attraction id of staff )",
    "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')": "( name ) that belongs to ( personfriend ) , that have ( ( ( friend ) equal to ( 'alice' ) ) and ( ( year ) equal to ( the minimum of ( year ) ) that belongs to ( personfriend ) , that have ( ( friend ) equal to ( 'alice' ) ) ) )",
    "SELECT email FROM employees WHERE commission_pct  =  \"null\" AND salary BETWEEN 7000 AND 12000 AND department_id = 50": "( email ) that belongs to ( employees ) , that have ( ( ( commission pct ) is missing ) and ( ( salary ) between ( 7000 ) and ( 12000 ) ) and ( ( department id ) equal to ( 50 ) ) )",
    "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1": "( apt type code ) that belongs to ( apartments ) , grouped by ( apt type code ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";": "( email ) , ( phone ) that belongs to ( customers ) , that have ( ( ( first name ) equal to ( astrid ) ) and ( ( last name ) equal to ( gruber ) ) )",
    "SELECT dept_name ,  building FROM department ORDER BY budget DESC": "( dept name ) , ( building ) that belongs to ( department ) , ordered by ( ( budget ) in descending order )",
    "SELECT T1.first_name ,  T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Finance'": "( first name of addresses ) , ( job id of addresses ) that belongs to ( ( employees ) , and ( ( departments ) satisfied that ( ( department id of addresses ) equal to ( department id of staff ) ) ) ) , that have ( ( department name of staff ) equal to ( 'finance' ) )",
    "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)": "( the number of ( all items ) ) that belongs to ( \"l ( city ) that belongs to ( airports ) , grouped by ( city ) , that have ( ( the number of ( all items ) ) greater than ( 3 ) ) r\" )",
    "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  <  18": "( the number of ( all items ) ) that belongs to ( ( club ) , and ( ( member of club ) satisfied that ( ( clubid of club ) equal to ( clubid of member of club ) ) ) , and ( ( student ) satisfied that ( ( stuid of member of club ) equal to ( stuid of student ) ) ) ) , that have ( ( ( clubname of club ) equal to ( bootup baltimore ) ) and ( ( age of student ) less than ( 18 ) ) )",
    "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"": "( the average of ( room count ) ) that belongs to ( apartments ) , that have ( ( apt type code ) equal to ( studio ) )",
    "SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid": "( name of addresses ) , ( the number of ( all items ) ) that belongs to ( ( physician ) , and ( ( patient ) satisfied that ( ( employeeid of addresses ) equal to ( pcp of staff ) ) ) ) , grouped by ( employeeid of addresses )",
    "SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name": "( the sum of ( credits ) ) , ( dept name ) that belongs to ( course ) , grouped by ( dept name )",
    "SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code": "( the number of ( all items ) ) , ( the average of ( age ) ) , ( city code ) that belongs to ( student ) , grouped by ( city code )",
    "SELECT count(*) ,  rank FROM captain WHERE age  <  50 GROUP BY rank": "( the number of ( all items ) ) , ( rank ) that belongs to ( captain ) , that have ( ( age ) less than ( 50 ) ) , grouped by ( rank )",
    "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building": "( the number of ( all items ) ) , ( building ) that belongs to ( classroom ) , that have ( ( capacity ) greater than ( 50 ) ) , grouped by ( building )",
    "SELECT document_id ,  count(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id;": "( document id ) , ( the number of ( distinct ( employee id ) ) ) that belongs to ( circulation history ) , grouped by ( document id )",
    "SELECT TYPE ,  COUNT(*) FROM artwork GROUP BY TYPE": "( type ) , ( the number of ( all items ) ) that belongs to ( artwork ) , grouped by ( type )",
    "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\"": "( player of staff ) that belongs to ( ( country ) , and ( ( match season ) satisfied that ( ( country id of addresses ) equal to ( country of staff ) ) ) ) , that have ( ( country name of addresses ) equal to ( indonesia ) )",
    "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;": "( bedtype ) , ( the average of ( baseprice ) ) that belongs to ( rooms ) , grouped by ( bedtype )",
    "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1": "( member name of addresses ) that belongs to ( ( member ) , and ( ( party events ) satisfied that ( ( member id of addresses ) equal to ( member in charge id of staff ) ) ) ) , grouped by ( member in charge id of staff ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT DISTINCT name FROM genres;": "( distinct ( name ) ) that belongs to ( genres )",
    "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80": "( date ) , ( zip code ) that belongs to ( weather ) , that have ( ( max temperature f ) greater than or equal to ( 80 ) )",
    "SELECT count(*) FROM dorm": "( the number of ( all items ) ) that belongs to ( dorm )",
    "SELECT district FROM address GROUP BY district HAVING count(*)  >=  2": "( district ) that belongs to ( address ) , grouped by ( district ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'": "( the average of ( student capacity ) ) , ( the sum of ( student capacity ) ) that belongs to ( dorm ) , that have ( ( gender ) equal to ( 'x' ) )",
    "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"": "( type ) that belongs to ( ( vocals ) , and ( ( songs ) satisfied that ( ( songid of addresses ) equal to ( songid of staff ) ) ) ) , that have ( ( title ) equal to ( le pop ) )",
    "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid": "( name of addresses ) , ( the number of ( all items ) ) that belongs to ( ( user profiles ) , and ( ( tweets ) satisfied that ( ( uid of addresses ) equal to ( uid of staff ) ) ) ) , grouped by ( uid of staff )",
    "SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"North Coast\"": "( distinct ( name of staff ) ) that belongs to ( ( appellations ) , and ( ( wine ) satisfied that ( ( appelation of addresses ) equal to ( appelation of staff ) ) ) ) , that have ( ( area of addresses ) equal to ( north coast ) )",
    "SELECT title FROM Movie WHERE director  =  \"James Cameron\" OR YEAR   <  1980": "( title ) that belongs to ( movie ) , that have ( ( ( director ) equal to ( james cameron ) ) or ( ( year ) less than ( 1980 ) ) )",
    "SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1": "( member name ) that belongs to ( member ) , that have ( ( party id ) equal to ( 3 ) ), and intersect with ( ( member name ) that belongs to ( member ) , that have ( ( party id ) equal to ( 1 ) ))",
    "SELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id": "( name of addresses ) , ( the number of ( all items ) ) that belongs to ( ( storm ) , and ( ( affected region ) satisfied that ( ( storm id of addresses ) equal to ( storm id of staff ) ) ) ) , grouped by ( storm id of addresses )",
    "SELECT truck_details FROM trucks ORDER BY truck_licence_number": "( truck details ) that belongs to ( trucks ) , ordered by ( ( truck licence number ) )",
    "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)": "( name ) that belongs to ( track ) , that have ( ( track_id ) not in ( ( track id ) that belongs to ( race ) ) )",
    "SELECT Order_Date FROM BOOKINGS": "( order date ) that belongs to ( bookings )",
    "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id": "( name of addresses ) , ( date of addresses ) , ( name of staff ) that belongs to ( ( race ) , and ( ( track ) satisfied that ( ( track id of addresses ) equal to ( track id of staff ) ) ) )",
    "SELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC": "( card number ) , ( name ) , ( hometown ) that belongs to ( member ) , ordered by ( ( level ) in descending order )",
    "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student": "( facid ) that belongs to ( faculty participates in ), and intersect with ( ( advisor ) that belongs to ( student ))",
    "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age": "( name ) that belongs to ( person ) , that have ( ( age ) greater than ( the minimum of ( age ) ) that belongs to ( person ) , that have ( ( job ) equal to ( 'engineer' ) ) ) , ordered by ( ( age ) )",
    "SELECT name FROM player WHERE points  >  (SELECT avg(points) FROM player)": "( name ) that belongs to ( player ) , that have ( ( points ) greater than ( the average of ( points ) ) that belongs to ( player ) )",
    "SELECT Song FROM volume WHERE Weeks_on_Top  >  1": "( song ) that belongs to ( volume ) , that have ( ( weeks on top ) greater than ( 1 ) )",
    "SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000": "( studio ) that belongs to ( film ) , grouped by ( studio ) , that have ( ( the average of ( gross in dollar ) ) greater than or equal to ( 4500000 ) )",
    "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\"": "( the number of ( all items ) ) that belongs to ( customers cards ) , that have ( ( card type code ) equal to ( debit ) )",
    "SELECT count(*) FROM Staff WHERE first_name = \"Ludie\";": "( the number of ( all items ) ) that belongs to ( staff ) , that have ( ( first name ) equal to ( ludie ) )",
    "SELECT name ,  CLASS ,  rank FROM captain": "( name ) , ( class ) , ( rank ) that belongs to ( captain )",
    "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1": "( balance of enzyme ) that belongs to ( ( accounts ) , and ( ( checking ) satisfied that ( ( custid of addresses ) equal to ( custid of staff ) ) ) , and ( ( savings ) satisfied that ( ( custid of addresses ) equal to ( custid of enzyme ) ) ) ) , ordered by ( ( balance of staff ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'": "( title of addresses ) , ( book title of enzyme ) that belongs to ( ( movie ) , and ( ( culture company ) satisfied that ( ( movie id of addresses ) equal to ( movie id of staff ) ) ) , and ( ( book club ) satisfied that ( ( book club id of enzyme ) equal to ( book club id of staff ) ) ) ) , that have ( ( incorporated in of staff ) equal to ( 'china' ) )",
    "SELECT T1.vehicle_id ,  T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) DESC LIMIT 1": "( vehicle id of addresses ) , ( vehicle details of addresses ) that belongs to ( ( vehicles ) , and ( ( lessons ) satisfied that ( ( vehicle id of addresses ) equal to ( vehicle id of staff ) ) ) ) , grouped by ( vehicle id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade  =  \"B\"": "( the number of ( distinct ( stuid ) ) ) that belongs to ( enrolled in ) , that have ( ( grade ) equal to ( b ) )",
    "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000": "( distinct ( name of addresses ) ) that belongs to ( ( races ) , and ( ( circuits ) satisfied that ( ( circuitid of addresses ) equal to ( circuitid of staff ) ) ) ) , that have ( ( ( country of staff ) equal to ( spain ) ) and ( ( year of addresses ) greater than ( 2000 ) ) )",
    "SELECT StuID FROM Student WHERE age  >  20": "( stuid ) that belongs to ( student ) , that have ( ( age ) greater than ( 20 ) )",
    "SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'": "( name of staff ) that belongs to ( ( film ) , and ( ( language ) satisfied that ( ( language id of addresses ) equal to ( language id of staff ) ) ) ) , that have ( ( title of addresses ) equal to ( 'airport pollock' ) )",
    "SELECT count(*) FROM Video_games WHERE gtype  =  \"Massively multiplayer online game\"": "( the number of ( all items ) ) that belongs to ( video games ) , that have ( ( gtype ) equal to ( massively multiplayer online game ) )",
    "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"": "( the number of ( distinct ( instrument ) ) ) that belongs to ( ( instruments ) , and ( ( songs ) satisfied that ( ( songid of addresses ) equal to ( songid of staff ) ) ) ) , that have ( ( title ) equal to ( le pop ) )",
    "SELECT product FROM product WHERE max_page_size  =  \"A4\" OR pages_per_minute_color  <  5": "( product ) that belongs to ( product ) , that have ( ( ( max page size ) equal to ( a4 ) ) or ( ( pages per minute color ) less than ( 5 ) ) )",
    "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1": "( student id ) that belongs to ( student course attendance ) , that have ( ( course id ) equal to ( 301 ) ) , ordered by ( ( date of attendance ) in descending order ) , limited to the top ( 1 )",
    "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\"": "( policy type code ) that belongs to ( ( policies ) , and ( ( customers ) satisfied that ( ( customer id of club ) equal to ( customer id of member of club ) ) ) ) , that have ( ( customer details of member of club ) equal to ( dayana robel ) )",
    "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1": "( name of addresses ) , ( salary of addresses ) that belongs to ( ( employee ) , and ( ( certificate ) satisfied that ( ( eid of addresses ) equal to ( eid of staff ) ) ) ) , grouped by ( eid of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"US museum\"": "( name of addresses ) that belongs to ( ( staff ) , and ( ( tourist attractions ) satisfied that ( ( tourist attraction id of addresses ) equal to ( tourist attraction id of staff ) ) ) ) , that have ( ( name of staff ) equal to ( us museum ) )",
    "SELECT roomName FROM Rooms WHERE bedType  =  \"King\" OR bedType  =  \"Queen\";": "( roomname ) that belongs to ( rooms ) , that have ( ( ( bedtype ) equal to ( king ) ) or ( ( bedtype ) equal to ( queen ) ) )",
    "SELECT T1.staff_name ,  T1.staff_id FROM Staff AS T1 JOIN Fault_Log AS T2 ON T1.staff_id  =  T2.recorded_by_staff_id EXCEPT SELECT T3.staff_name ,  T3.staff_id FROM Staff AS T3 JOIN Engineer_Visits AS T4 ON T3.staff_id  =  T4.contact_staff_id": "( staff name of addresses ) , ( staff id of addresses ) that belongs to ( ( staff ) , and ( ( fault log ) satisfied that ( ( staff id of addresses ) equal to ( recorded by staff id of staff ) ) ) ), and except that ( ( staff name of enzyme ) , ( staff id of enzyme ) that belongs to ( ( staff ) , and ( ( engineer visits ) satisfied that ( ( staff id of enzyme ) equal to ( contact staff id of trip ) ) ) ))",
    "SELECT * FROM item": "all items that belongs to ( item )",
    "SELECT * FROM Assessment_Notes ORDER BY date_of_notes ASC": "all items that belongs to ( assessment notes ) , ordered by ( ( date of notes ) in ascending order )",
    "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;": "( roomname ) , ( decor ) that belongs to ( rooms ) , that have ( ( bedtype ) equal to ( 'king' ) ) , ordered by ( ( baseprice ) )",
    "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5": "( name of addresses ) that belongs to ( ( constructors ) , and ( ( constructorstandings ) satisfied that ( ( constructorid of addresses ) equal to ( constructorid of staff ) ) ) ) , that have ( ( ( nationality of addresses ) equal to ( japanese ) ) and ( ( points of staff ) greater than ( 5 ) ) )",
    "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1": "( author of staff ) that belongs to ( ( acceptance ) , and ( ( submission ) satisfied that ( ( submission id of addresses ) equal to ( submission id of staff ) ) ) ) , grouped by ( author of staff ) , that have ( ( the number of ( distinct ( workshop id of addresses ) ) ) greater than ( 1 ) )",
    "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID": "( title of addresses ) , ( albumid of staff ) , ( the number of ( all items ) ) that belongs to ( ( album ) , and ( ( track ) satisfied that ( ( albumid of addresses ) equal to ( albumid of staff ) ) ) ) , grouped by ( albumid of staff )",
    "SELECT count(*) FROM student": "( the number of ( all items ) ) that belongs to ( student )",
    "SELECT date_of_transaction ,  share_count FROM TRANSACTIONS": "( date of transaction ) , ( share count ) that belongs to ( transactions )",
    "SELECT origin FROM train GROUP BY origin HAVING count(*)  >  1": "( origin ) that belongs to ( train ) , grouped by ( origin ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT lastname FROM teachers WHERE classroom  =  109": "( lastname ) that belongs to ( teachers ) , that have ( ( classroom ) equal to ( 109 ) )",
    "SELECT T1.id ,  count(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id GROUP BY T1.id": "( id of addresses ) , ( the number of ( all items ) ) that belongs to ( ( stadium ) , and ( ( game ) satisfied that ( ( id of addresses ) equal to ( stadium id of staff ) ) ) ) , grouped by ( id of addresses )",
    "SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3": "( title of staff ) , ( year of staff ) that belongs to ( ( rating ) , and ( ( movie ) satisfied that ( ( mid of addresses ) equal to ( mid of staff ) ) ) ) , ordered by ( ( stars of addresses ) in descending order ) , limited to the top ( 3 )",
    "SELECT Player ,  Years_Played FROM player": "( player ) , ( years played ) that belongs to ( player )",
    "SELECT Name ,  Other_Details FROM Staff": "( name ) , ( other details ) that belongs to ( staff )",
    "SELECT avg(amount_due) FROM payments": "( the average of ( amount due ) ) that belongs to ( payments )",
    "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3": "( location of enzyme ) , ( representative name of enzyme ) that belongs to ( ( station company ) , and ( ( company ) satisfied that ( ( company id of addresses ) equal to ( company id of staff ) ) ) , and ( ( gas station ) satisfied that ( ( station id of addresses ) equal to ( station id of enzyme ) ) ) ) , ordered by ( ( assets billion of staff ) in descending order ) , limited to the top ( 3 )",
    "SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand": "( the number of ( all items ) ) , ( name of addresses ) that belongs to ( ( medication ) , and ( ( prescribes ) satisfied that ( ( code of addresses ) equal to ( medication of staff ) ) ) ) , grouped by ( brand of addresses )",
    "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.city  =  \"Lake Geovannyton\"": "( the number of ( all items ) ) that belongs to ( ( customers ) , and ( ( customer addresses ) satisfied that ( ( customer id of club ) equal to ( customer id of member of club ) ) ) , and ( ( addresses ) satisfied that ( ( address id of member of club ) equal to ( address id of student ) ) ) ) , that have ( ( city of student ) equal to ( lake geovannyton ) )",
    "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)": "( the number of ( all items ) ) that belongs to ( university ) , that have ( ( school_id ) not in ( ( school id ) that belongs to ( basketball match ) ) )",
    "SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)": "( dorm name ) that belongs to ( dorm ) , that have ( ( dormid ) not in ( ( dormid ) that belongs to ( has amenity ) ) )",
    "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1": "( name of addresses ) that belongs to ( ( physician ) , and ( ( patient ) satisfied that ( ( employeeid of addresses ) equal to ( pcp of staff ) ) ) ) , grouped by ( employeeid of addresses ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse  =  T2.EmployeeID": "( distinct ( name of staff ) ) that belongs to ( ( undergoes ) , and ( ( nurse ) satisfied that ( ( assistingnurse of addresses ) equal to ( employeeid of staff ) ) ) )",
    "SELECT count(*) FROM player WHERE birth_country = 'USA' AND bats  =  'R';": "( the number of ( all items ) ) that belongs to ( player ) , that have ( ( ( birth country ) equal to ( 'usa' ) ) and ( ( bats ) equal to ( 'r' ) ) )",
    "SELECT sum(revenue) FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')": "( the sum of ( revenue ) ) that belongs to ( manufacturers ) , that have ( ( revenue ) greater than ( the minimum of ( revenue ) ) that belongs to ( manufacturers ) , that have ( ( headquarter ) equal to ( 'austin' ) ) )",
    "SELECT fname FROM authors WHERE lname  =  \"Ueno\"": "( fname ) that belongs to ( authors ) , that have ( ( lname ) equal to ( ueno ) )",
    "SELECT sum(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first  =  'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990;": "( the sum of ( salary of addresses ) ) that belongs to ( ( salary ) , and ( ( player ) satisfied that ( ( player id of addresses ) equal to ( player id of staff ) ) ) ) , that have ( ( ( name first of staff ) equal to ( 'len' ) ) and ( ( name last of staff ) equal to ( 'barker' ) ) and ( ( t1.year ) between ( 1985 ) and ( 1990 ) ) )",
    "SELECT DISTINCT characteristic_name FROM CHARACTERISTICS": "( distinct ( characteristic name ) ) that belongs to ( characteristics )",
    "SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town": "( city town of addresses ) , ( the number of ( all items ) ) that belongs to ( ( addresses ) , and ( ( drama workshop groups ) satisfied that ( ( address id of addresses ) equal to ( address id of staff ) ) ) ) , grouped by ( city town of addresses )",
    "SELECT address ,  num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour)": "( address ) , ( num of staff ) that belongs to ( shop ) , that have ( ( shop_id ) not in ( ( shop id ) that belongs to ( happy hour ) ) )",
    "SELECT Height ,  Weight FROM people ORDER BY Height DESC": "( height ) , ( weight ) that belongs to ( people ) , ordered by ( ( height ) in descending order )",
    "SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\"": "( the number of ( all items ) ) that belongs to ( ( region ) , and ( ( party ) satisfied that ( ( region id of club ) equal to ( region id of member of club ) ) ) , and ( ( party events ) satisfied that ( ( party id of member of club ) equal to ( party id of student ) ) ) ) , that have ( ( ( region name of club ) equal to ( united kingdom ) ) and ( ( event name of student ) equal to ( annaual meeting ) ) )",
    "SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings'": "( the average of ( salary of addresses ) ) that belongs to ( ( salary ) , and ( ( team ) satisfied that ( ( team id of addresses ) equal to ( team id br of staff ) ) ) ) , that have ( ( name of staff ) equal to ( 'boston red stockings' ) )",
    "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.label  =  \"Universal Music Group\"": "( title of enzyme ) that belongs to ( ( albums ) , and ( ( tracklists ) satisfied that ( ( aid of addresses ) equal to ( albumid of staff ) ) ) , and ( ( songs ) satisfied that ( ( songid of staff ) equal to ( songid of enzyme ) ) ) ) , that have ( ( label of club ) equal to ( universal music group ) )",
    "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id": "( name of addresses ) , ( lat of addresses ) , ( the minimum of ( duration of staff ) ) that belongs to ( ( station ) , and ( ( trip ) satisfied that ( ( id of addresses ) equal to ( end station id of staff ) ) ) ) , grouped by ( end station id of staff )",
    "SELECT count(DISTINCT cName) FROM tryout": "( the number of ( distinct ( cname ) ) ) that belongs to ( tryout )",
    "SELECT count(*) FROM store": "( the number of ( all items ) ) that belongs to ( store )",
    "SELECT payment_method_code ,  party_phone FROM parties WHERE party_email  =  \"enrico09@example.com\"": "( payment method code ) , ( party phone ) that belongs to ( parties ) , that have ( ( party email ) equal to ( enrico09@example.com ) )",
    "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1": "( catalog entry name ) that belongs to ( catalog contents ) , ordered by ( ( price in dollars ) in descending order ) , limited to the top ( 1 )",
    "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')": "( name ) that belongs to ( instructor ) , that have ( ( salary ) greater than ( the maximum of ( salary ) ) that belongs to ( instructor ) , that have ( ( dept name ) equal to ( 'biology' ) ) )",
    "SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination": "( denomination ) , ( the number of ( all items ) ) that belongs to ( school ) , grouped by ( denomination )",
    "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = \"Bosco\"": "( problem id of addresses ) that belongs to ( ( problems ) , and ( ( staff ) satisfied that ( ( reported by staff id of addresses ) equal to ( staff id of staff ) ) ) ) , that have ( ( staff last name of staff ) equal to ( bosco ) )",
    "SELECT DISTINCT detention_type_code FROM Detention": "( distinct ( detention type code ) ) that belongs to ( detention )",
    "SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1": "( organization name of club ) that belongs to ( ( organizations ) , and ( ( organization contact individuals ) satisfied that ( ( organization id of club ) equal to ( organization id of member of club ) ) ) ) , grouped by ( organization name of club ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM Customers": "( the number of ( all items ) ) that belongs to ( customers )",
    "SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1": "( name ) , ( email ) that belongs to ( user profiles ) , ordered by ( ( followers ) ) , limited to the top ( 1 )",
    "SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\"": "( rid ) that belongs to ( reviewer ) , that have ( ( name ) like ( %mike% ) )",
    "SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1": "( name of staff ) , ( open year of staff ) that belongs to ( ( membership register branch ) , and ( ( branch ) satisfied that ( ( branch id of addresses ) equal to ( branch id of staff ) ) ) ) , that have ( ( register year of addresses ) equal to ( 2016 ) ) , grouped by ( branch id of staff ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id": "( characteristic name ) , ( other characteristic details ) , ( characteristic data type ) that belongs to ( characteristics ), and except that ( ( characteristic name of club ) , ( other characteristic details of club ) , ( characteristic data type of club ) that belongs to ( ( characteristics ) , and ( ( product characteristics ) satisfied that ( ( characteristic id of club ) equal to ( characteristic id of member of club ) ) ) ))",
    "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed": "( employee id ) that belongs to ( employees ), and except that ( ( destroyed by employee id ) that belongs to ( documents to be destroyed ))",
    "SELECT preferred_foot ,  count(*) FROM Player_Attributes WHERE overall_rating  >  80 GROUP BY preferred_foot": "( preferred foot ) , ( the number of ( all items ) ) that belongs to ( player attributes ) , that have ( ( overall rating ) greater than ( 80 ) ) , grouped by ( preferred foot )",
    "SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'": "( cust name ) , ( acc bal ) that belongs to ( customer ) , that have ( ( cust_name ) like ( '%a%' ) )",
    "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31": "( date ) that belongs to ( weather ) , that have ( ( mean_sea_level_pressure_inches ) between ( 30.3 ) and ( 31 ) )",
    "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1": "( official name ) , ( status ) that belongs to ( city ) , ordered by ( ( population ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1": "( id of addresses ) , ( name of addresses ) that belongs to ( ( stadium ) , and ( ( game ) satisfied that ( ( id of addresses ) equal to ( stadium id of staff ) ) ) , and ( ( injury accident ) satisfied that ( ( id of staff ) equal to ( game id of enzyme ) ) ) ) , grouped by ( id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"3:%\"": "( the maximum of ( resolution of staff ) ) , ( the minimum of ( resolution of staff ) ) that belongs to ( ( files ) , and ( ( song ) satisfied that ( ( f id of addresses ) equal to ( f id of staff ) ) ) ) , that have ( ( t1.duration ) like ( 3:% ) )",
    "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"": "( the number of ( all items ) ) that belongs to ( ( has allergy ) , and ( ( student ) satisfied that ( ( stuid of addresses ) equal to ( stuid of staff ) ) ) ) , that have ( ( ( ( sex of staff ) equal to ( f ) ) and ( ( allergy of addresses ) equal to ( milk ) ) ) or ( ( allergy of addresses ) equal to ( eggs ) ) )",
    "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100)": "( name ) that belongs to ( city ) , that have ( ( county_id ) in ( ( county id ) that belongs to ( county public safety ) , that have ( ( crime rate ) less than ( 100 ) ) ) )",
    "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1": "( founded ) that belongs to ( university ) , that have ( ( affiliation ) not equal to ( 'public' ) ) , ordered by ( ( founded ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM game WHERE season  >  2007": "( the number of ( all items ) ) that belongs to ( game ) , that have ( ( season ) greater than ( 2007 ) )",
    "SELECT Headquarters ,  COUNT(*) FROM company GROUP BY Headquarters": "( headquarters ) , ( the number of ( all items ) ) that belongs to ( company ) , grouped by ( headquarters )",
    "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1": "( document type code ) that belongs to ( documents ) , grouped by ( document type code ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT TYPE ,  COUNT(*) FROM ship GROUP BY TYPE": "( type ) , ( the number of ( all items ) ) that belongs to ( ship ) , grouped by ( type )",
    "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";": "( the number of ( all items ) ) that belongs to ( reservations ) , that have ( ( ( firstname ) equal to ( roy ) ) and ( ( lastname ) equal to ( sweazy ) ) )",
    "SELECT Fname FROM FACULTY WHERE Rank  =  \"Professor\" ORDER BY Fname": "( fname ) that belongs to ( faculty ) , that have ( ( rank ) equal to ( professor ) ) , ordered by ( ( fname ) )",
    "SELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses": "( document id ) that belongs to ( documents ) , that have ( ( document type code ) equal to ( cv ) ), and except that ( ( document id ) that belongs to ( documents with expenses ))",
    "SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1": "( event id of addresses ) , ( event details of addresses ) that belongs to ( ( events ) , and ( ( participants in events ) satisfied that ( ( event id of addresses ) equal to ( event id of staff ) ) ) ) , grouped by ( event id of addresses ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)": "( the number of ( all items ) ) that belongs to ( item ) , that have ( ( i_id ) not in ( ( i id ) that belongs to ( review ) ) )",
    "SELECT Name FROM ship WHERE Nationality  =  \"United States\" OR Nationality  =  \"United Kingdom\"": "( name ) that belongs to ( ship ) , that have ( ( ( nationality ) equal to ( united states ) ) or ( ( nationality ) equal to ( united kingdom ) ) )",
    "SELECT avg(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.name  =  \"AIB\"": "( the average of ( points of staff ) ) that belongs to ( ( club ) , and ( ( player ) satisfied that ( ( club id of addresses ) equal to ( club id of staff ) ) ) ) , that have ( ( name of addresses ) equal to ( aib ) )",
    "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3": "( dept name ) that belongs to ( course ) , grouped by ( dept name ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 3 )",
    "SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1": "( song name ) , ( releasedate ) that belongs to ( song ) , ordered by ( ( releasedate ) in descending order ) , limited to the top ( 1 )",
    "SELECT College FROM submission WHERE Scores  >  90 INTERSECT SELECT College FROM submission WHERE Scores  <  80": "( college ) that belongs to ( submission ) , that have ( ( scores ) greater than ( 90 ) ), and intersect with ( ( college ) that belongs to ( submission ) , that have ( ( scores ) less than ( 80 ) ))",
    "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"": "( campus ) that belongs to ( campuses ) , that have ( ( county ) equal to ( los angeles ) )",
    "SELECT count(*) FROM club": "( the number of ( all items ) ) that belongs to ( club )",
    "SELECT name ,  origin ,  OWNER FROM program": "( name ) , ( origin ) , ( owner ) that belongs to ( program )",
    "SELECT Author ,  College FROM submission": "( author ) , ( college ) that belongs to ( submission )",
    "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id": "( season of addresses ) , ( player of addresses ) , ( name of staff ) that belongs to ( ( match season ) , and ( ( team ) satisfied that ( ( team of addresses ) equal to ( team id of staff ) ) ) )",
    "SELECT firstname FROM list WHERE classroom  =  108": "( firstname ) that belongs to ( list ) , that have ( ( classroom ) equal to ( 108 ) )",
    "SELECT test_result ,  COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC": "( test result ) , ( the number of ( all items ) ) that belongs to ( student tests taken ) , grouped by ( test result ) , ordered by ( ( the number of ( all items ) ) in descending order )",
    "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1": "( customer first name of staff ) , ( customer last name of staff ) , ( customer id of addresses ) that belongs to ( ( accounts ) , and ( ( customers ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , grouped by ( customer id of addresses ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( 1 )",
    "SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1": "( form name of club ) that belongs to ( ( forms ) , and ( ( party forms ) satisfied that ( ( form id of club ) equal to ( form id of member of club ) ) ) ) , grouped by ( form id of member of club ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT avg(T1.ROM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";": "( the average of ( rom mib of addresses ) ) that belongs to ( ( chip model ) , and ( ( phone ) satisfied that ( ( model name of addresses ) equal to ( chip model of staff ) ) ) ) , that have ( ( company name of staff ) equal to ( nokia corporation ) )",
    "SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1": "( winery ) that belongs to ( wine ) , ordered by ( ( score ) ) , limited to the top ( 1 )",
    "SELECT name FROM ship ORDER BY built_year ,  CLASS": "( name ) that belongs to ( ship ) , ordered by ( ( built year ),( class ) )",
    "SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\"": "( customer id ) , ( customer name ) that belongs to ( customers ) , that have ( ( ( customer address ) like ( %wy% ) ) and ( ( payment method code ) not equal to ( credit card ) ) )",
    "SELECT name FROM airports WHERE country  =  'Cuba' OR country  =  'Argentina'": "( name ) that belongs to ( airports ) , that have ( ( ( country ) equal to ( 'cuba' ) ) or ( ( country ) equal to ( 'argentina' ) ) )",
    "SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1": "( product name ) that belongs to ( products ) , that have ( ( product type code ) equal to ( 'hardware' ) ) , ordered by ( ( product price ) in descending order ) , limited to the top ( 1 )",
    "SELECT Pilot_name FROM pilot ORDER BY Rank ASC": "( pilot name ) that belongs to ( pilot ) , ordered by ( ( rank ) in ascending order )",
    "SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college)": "( the number of ( distinct ( state ) ) ) that belongs to ( college ) , that have ( ( enr ) greater than ( the average of ( enr ) ) that belongs to ( college ) )",
    "SELECT max(t1.low_temperature) ,  avg(t1.precipitation) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id WHERE t2.network_name  =  \"Amersham\"": "( the maximum of ( low temperature of club ) ) , ( the average of ( precipitation of club ) ) that belongs to ( ( weekly weather ) , and ( ( station ) satisfied that ( ( station id of club ) equal to ( id of member of club ) ) ) ) , that have ( ( network name of member of club ) equal to ( amersham ) )",
    "SELECT T1.Name ,  T2.Decoration_Theme FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID": "( name of addresses ) , ( decoration theme of staff ) that belongs to ( ( member ) , and ( ( round ) satisfied that ( ( member id of addresses ) equal to ( member id of staff ) ) ) )",
    "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000": "( distinct ( forename of addresses ) ) , ( surname of addresses ) that belongs to ( ( drivers ) , and ( ( laptimes ) satisfied that ( ( driverid of addresses ) equal to ( driverid of staff ) ) ) ) , that have ( ( milliseconds of staff ) less than ( 93000 ) )",
    "SELECT avg(price) FROM products WHERE Manufacturer  =  2": "( the average of ( price ) ) that belongs to ( products ) , that have ( ( manufacturer ) equal to ( 2 ) )",
    "SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2": "( project id of addresses ) , ( project details of addresses ) that belongs to ( ( projects ) , and ( ( documents ) satisfied that ( ( project id of addresses ) equal to ( project id of staff ) ) ) ) , grouped by ( project id of addresses ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )",
    "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1": "( customer id of addresses ) , ( customer first name of staff ) , ( customer last name of staff ) that belongs to ( ( customers cards ) , and ( ( customers ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , grouped by ( customer id of addresses ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM county": "( the number of ( all items ) ) that belongs to ( county )",
    "SELECT count(*) FROM climber": "( the number of ( all items ) ) that belongs to ( climber )",
    "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC": "( weight of staff ) that belongs to ( ( entrepreneur ) , and ( ( people ) satisfied that ( ( people id of addresses ) equal to ( people id of staff ) ) ) ) , ordered by ( ( money requested of addresses ) in descending order )",
    "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name": "( the average of ( price of addresses ) ) , ( name of staff ) that belongs to ( ( products ) , and ( ( manufacturers ) satisfied that ( ( manufacturer of addresses ) equal to ( code of staff ) ) ) ) , grouped by ( name of staff )",
    "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'": "( dept name ) that belongs to ( instructor ) , that have ( ( name ) like ( '%soisalon%' ) )",
    "SELECT count(DISTINCT student_id) FROM Student_Course_Enrolment": "( the number of ( distinct ( student id ) ) ) that belongs to ( student course enrolment )",
    "SELECT TYPE ,  Nationality FROM ship": "( type ) , ( nationality ) that belongs to ( ship )",
    "SELECT Studio ,  COUNT(*) FROM film GROUP BY Studio": "( studio ) , ( the number of ( all items ) ) that belongs to ( film ) , grouped by ( studio )",
    "SELECT product_name FROM products ORDER BY product_price DESC LIMIT 1": "( product name ) that belongs to ( products ) , ordered by ( ( product price ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"TARRING\" AND T2.lastname  =  \"LEIA\"": "( the number of ( all items ) ) that belongs to ( ( list ) , and ( ( teachers ) satisfied that ( ( classroom of addresses ) equal to ( classroom of staff ) ) ) ) , that have ( ( ( firstname of staff ) equal to ( tarring ) ) and ( ( lastname of staff ) equal to ( leia ) ) )",
    "SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1": "( title of staff ) , ( film id of staff ) , ( description of staff ) that belongs to ( ( film actor ) , and ( ( film ) satisfied that ( ( film id of addresses ) equal to ( film id of staff ) ) ) ) , grouped by ( film id of staff ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)": "( name of addresses ) that belongs to ( ( accounts ) , and ( ( checking ) satisfied that ( ( custid of addresses ) equal to ( custid of staff ) ) ) ) , that have ( ( balance of staff ) less than ( the average of ( balance ) ) that belongs to ( checking ) )",
    "SELECT avg(high_temperature) ,  day_of_week FROM weekly_weather GROUP BY day_of_week": "( the average of ( high temperature ) ) , ( day of week ) that belongs to ( weekly weather ) , grouped by ( day of week )",
    "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\"": "( artist name ) that belongs to ( artist ) , that have ( ( country ) equal to ( uk ) ), and intersect with ( ( artist name of addresses ) that belongs to ( ( artist ) , and ( ( song ) satisfied that ( ( artist name of addresses ) equal to ( artist name of staff ) ) ) ) , that have ( ( languages of staff ) equal to ( english ) ))",
    "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"": "( the average of ( unitprice of staff ) ) that belongs to ( ( genre ) , and ( ( track ) satisfied that ( ( genreid of addresses ) equal to ( genreid of staff ) ) ) ) , that have ( ( name of addresses ) equal to ( rock ) )",
    "SELECT count(DISTINCT crs_code) FROM CLASS": "( the number of ( distinct ( crs code ) ) ) that belongs to ( class )",
    "SELECT school_code FROM department WHERE dept_name  =  \"Accounting\"": "( school code ) that belongs to ( department ) , that have ( ( dept name ) equal to ( accounting ) )",
    "SELECT Party FROM party WHERE Party_ID NOT IN (SELECT Party FROM election)": "( party ) that belongs to ( party ) , that have ( ( party_id ) not in ( ( party ) that belongs to ( election ) ) )",
    "SELECT max(stars) ,  min(stars) FROM Rating": "( the maximum of ( stars ) ) , ( the minimum of ( stars ) ) that belongs to ( rating )",
    "SELECT Name FROM climber WHERE Country != \"Switzerland\"": "( name ) that belongs to ( climber ) , that have ( ( country ) not equal to ( switzerland ) )",
    "SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id  =  T2.customer_id": "( customer details ) that belongs to ( customers ), and except that ( ( customer details of addresses ) that belongs to ( ( customers ) , and ( ( customer policies ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ))",
    "SELECT id FROM instructor EXCEPT SELECT id FROM teaches": "( id ) that belongs to ( instructor ), and except that ( ( id ) that belongs to ( teaches ))",
    "SELECT TYPE ,  avg(Tonnage) FROM ship GROUP BY TYPE": "( type ) , ( the average of ( tonnage ) ) that belongs to ( ship ) , grouped by ( type )",
    "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2": "( building address of addresses ) that belongs to ( ( apartment buildings ) , and ( ( apartments ) satisfied that ( ( building id of addresses ) equal to ( building id of staff ) ) ) ) , that have ( ( bathroom count of staff ) greater than ( 2 ) )",
    "SELECT DISTINCT name FROM races ORDER BY name DESC": "( distinct ( name ) ) that belongs to ( races ) , ordered by ( ( name ) in descending order )",
    "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;": "( title ) that belongs to ( albums ) , that have ( ( title ) like ( 'a%' ) ) , ordered by ( ( title ) )",
    "SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country": "( season of staff ) , ( player of staff ) , ( country name of addresses ) that belongs to ( ( country ) , and ( ( match season ) satisfied that ( ( country id of addresses ) equal to ( country of staff ) ) ) )",
    "SELECT venue FROM MATCH ORDER BY date DESC": "( venue ) that belongs to ( match ) , ordered by ( ( date ) in descending order )",
    "SELECT T2.emp_fname ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code": "( emp fname of staff ) , ( crs description of enzyme ) that belongs to ( ( class ) , and ( ( employee ) satisfied that ( ( prof num of addresses ) equal to ( emp num of staff ) ) ) , and ( ( course ) satisfied that ( ( crs code of addresses ) equal to ( crs code of enzyme ) ) ) )",
    "SELECT min(snatch) FROM body_builder": "( the minimum of ( snatch ) ) that belongs to ( body builder )",
    "SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T2.customer_id  =  10": "( address details of addresses ) that belongs to ( ( addresses ) , and ( ( customer addresses ) satisfied that ( ( address id of addresses ) equal to ( address id of staff ) ) ) ) , that have ( ( customer id of staff ) equal to ( 10 ) )",
    "SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID": "( fname of addresses ) , ( lname of addresses ) , ( the number of ( all items ) ) , ( facid of addresses ) that belongs to ( ( faculty ) , and ( ( faculty participates in ) satisfied that ( ( facid of addresses ) equal to ( facid of staff ) ) ) ) , grouped by ( facid of addresses )",
    "SELECT label FROM albums GROUP BY label ORDER BY count(*) DESC LIMIT 1": "( label ) that belongs to ( albums ) , grouped by ( label ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT state_province_county FROM addresses WHERE address_id NOT IN (SELECT employee_address_id FROM Employees)": "( state province county ) that belongs to ( addresses ) , that have ( ( address_id ) not in ( ( employee address id ) that belongs to ( employees ) ) )",
    "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code": "( card type code ) , ( the number of ( distinct ( customer id ) ) ) that belongs to ( customers cards ) , grouped by ( card type code )",
    "SELECT Residence FROM player WHERE gender  =  \"M\" INTERSECT SELECT Residence FROM player WHERE gender  =  \"F\"": "( residence ) that belongs to ( player ) , that have ( ( gender ) equal to ( m ) ), and intersect with ( ( residence ) that belongs to ( player ) , that have ( ( gender ) equal to ( f ) ))",
    "SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)": "( product ) that belongs to ( product ) , that have ( ( product ) not equal to ( max page size ) that belongs to ( product ) , grouped by ( max page size ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 ) )",
    "SELECT campus FROM campuses WHERE YEAR  =  1958": "( campus ) that belongs to ( campuses ) , that have ( ( year ) equal to ( 1958 ) )",
    "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \"Green\"": "( attribute data type ) that belongs to ( attribute definitions ) , that have ( ( attribute name ) equal to ( green ) )",
    "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1": "( phone number of club ) that belongs to ( ( customers ) , and ( ( complaints ) satisfied that ( ( customer id of club ) equal to ( customer id of member of club ) ) ) ) , ordered by ( ( date complaint raised of member of club ) in descending order ) , limited to the top ( 1 )",
    "SELECT cName FROM college ORDER BY enr DESC LIMIT 3": "( cname ) that belongs to ( college ) , ordered by ( ( enr ) in descending order ) , limited to the top ( 3 )",
    "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC": "( total points ) that belongs to ( gymnast ) , ordered by ( ( total points ) in descending order )",
    "SELECT name FROM building WHERE building_id NOT IN (SELECT building_id FROM institution)": "( name ) that belongs to ( building ) , that have ( ( building_id ) not in ( ( building id ) that belongs to ( institution ) ) )",
    "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000": "( title ) that belongs to ( movie ) , that have ( ( ( director ) equal to ( 'james cameron' ) ) and ( ( year ) greater than ( 2000 ) ) )",
    "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.major  =  \"600\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1": "( clubname of club ) that belongs to ( ( club ) , and ( ( member of club ) satisfied that ( ( clubid of club ) equal to ( clubid of member of club ) ) ) , and ( ( student ) satisfied that ( ( stuid of member of club ) equal to ( stuid of student ) ) ) ) , that have ( ( major of student ) equal to ( 600 ) ) , grouped by ( clubname of club ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements": "( the maximum of ( settlement amount ) ) , ( the minimum of ( settlement amount ) ) that belongs to ( settlements )",
    "SELECT document_name ,  access_count FROM documents ORDER BY access_count DESC LIMIT 1": "( document name ) , ( access count ) that belongs to ( documents ) , ordered by ( ( access count ) in descending order ) , limited to the top ( 1 )",
    "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"": "( name of enzyme ) that belongs to ( ( employee ) , and ( ( certificate ) satisfied that ( ( eid of addresses ) equal to ( eid of staff ) ) ) , and ( ( aircraft ) satisfied that ( ( aid of enzyme ) equal to ( aid of staff ) ) ) ) , that have ( ( name of addresses ) equal to ( john williams ) )",
    "SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = \"Koby\";": "( role description of addresses ) that belongs to ( ( roles ) , and ( ( employees ) satisfied that ( ( role code of addresses ) equal to ( role code of staff ) ) ) ) , that have ( ( employee name of staff ) equal to ( koby ) )",
    "SELECT name FROM channel ORDER BY rating_in_percent DESC": "( name ) that belongs to ( channel ) , ordered by ( ( rating in percent ) in descending order )",
    "SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events": "( customer event id ) , ( date moved in ) , ( property id ) that belongs to ( customer events )",
    "SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id": "( party name of staff ) , ( the number of ( all items ) ) that belongs to ( ( party events ) , and ( ( party ) satisfied that ( ( party id of addresses ) equal to ( party id of staff ) ) ) ) , grouped by ( party id of addresses )",
    "SELECT count(*) FROM actor": "( the number of ( all items ) ) that belongs to ( actor )",
    "SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'bad'": "( coupon amount of addresses ) that belongs to ( ( discount coupons ) , and ( ( customers ) satisfied that ( ( coupon id of addresses ) equal to ( coupon id of staff ) ) ) ) , that have ( ( good or bad customer of staff ) equal to ( 'good' ) ), and intersect with ( ( coupon amount of addresses ) that belongs to ( ( discount coupons ) , and ( ( customers ) satisfied that ( ( coupon id of addresses ) equal to ( coupon id of staff ) ) ) ) , that have ( ( good or bad customer of staff ) equal to ( 'bad' ) ))",
    "SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'": "( the average of ( product price ) ) that belongs to ( products ) , that have ( ( product type code ) equal to ( 'clothes' ) )",
    "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"": "( artist name of addresses ) , ( country of addresses ) that belongs to ( ( artist ) , and ( ( song ) satisfied that ( ( artist name of addresses ) equal to ( artist name of staff ) ) ) ) , that have ( ( t2.song_name ) like ( %love% ) )",
    "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'": "( state of addresses ) that belongs to ( ( college ) , and ( ( tryout ) satisfied that ( ( cname of addresses ) equal to ( cname of staff ) ) ) ) , that have ( ( ppos of staff ) equal to ( 'mid' ) ), and except that ( ( state of addresses ) that belongs to ( ( college ) , and ( ( tryout ) satisfied that ( ( cname of addresses ) equal to ( cname of staff ) ) ) ) , that have ( ( ppos of staff ) equal to ( 'goalie' ) ))",
    "SELECT color_description FROM ref_colors": "( color description ) that belongs to ( ref colors )",
    "SELECT count(*) FROM journalist": "( the number of ( all items ) ) that belongs to ( journalist )",
    "SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1": "( nationality ) that belongs to ( host ) , grouped by ( nationality ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)": "( name ) that belongs to ( host ) , that have ( ( host_id ) not in ( ( host id ) that belongs to ( party host ) ) )",
    "SELECT DISTINCT form_type_code FROM forms": "( distinct ( form type code ) ) that belongs to ( forms )",
    "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*)  >  1": "( shop name of staff ) that belongs to ( ( stock ) , and ( ( shop ) satisfied that ( ( shop id of addresses ) equal to ( shop id of staff ) ) ) ) , grouped by ( shop id of addresses ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT DISTINCT LOCATION FROM cinema": "( distinct ( location ) ) that belongs to ( cinema )",
    "SELECT product_name FROM products WHERE product_category_code  =  \"Spices\"": "( product name ) that belongs to ( products ) , that have ( ( product category code ) equal to ( spices ) )",
    "SELECT TIME FROM elimination WHERE Eliminated_By  =  \"Punk\" OR Eliminated_By  =  \"Orton\"": "( time ) that belongs to ( elimination ) , that have ( ( ( eliminated by ) equal to ( punk ) ) or ( ( eliminated by ) equal to ( orton ) ) )",
    "SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)": "( name ) that belongs to ( buildings ) , that have ( ( id ) not in ( ( building id ) that belongs to ( office locations ) ) )",
    "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin": "( flno ) , ( origin ) , ( destination ) that belongs to ( flight ) , ordered by ( ( origin ) )",
    "SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1": "( document structure description of member of club ) that belongs to ( ( documents ) , and ( ( document structures ) satisfied that ( ( document structure code of club ) equal to ( document structure code of member of club ) ) ) ) , grouped by ( document structure code of club ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"": "( card number ) that belongs to ( member ) , that have ( ( hometown ) like ( %kentucky% ) )",
    "SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1": "( city code ) that belongs to ( student ) , grouped by ( city code ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT outcome_code ,  count(*) FROM mailshot_customers GROUP BY outcome_code": "( outcome code ) , ( the number of ( all items ) ) that belongs to ( mailshot customers ) , grouped by ( outcome code )",
    "SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*)  >  1": "( category ) that belongs to ( music festival ) , grouped by ( category ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'": "( lname of addresses ) that belongs to ( ( faculty ) , and ( ( faculty participates in ) satisfied that ( ( facid of addresses ) equal to ( facid of staff ) ) ) , and ( ( activity ) satisfied that ( ( actid of staff ) equal to ( actid of staff ) ) ) ) , that have ( ( activity name of enzyme ) equal to ( 'canoeing' ) ), and intersect with ( ( lname of addresses ) that belongs to ( ( faculty ) , and ( ( faculty participates in ) satisfied that ( ( facid of addresses ) equal to ( facid of staff ) ) ) , and ( ( activity ) satisfied that ( ( actid of staff ) equal to ( actid of staff ) ) ) ) , that have ( ( activity name of enzyme ) equal to ( 'kayaking' ) ))",
    "SELECT DISTINCT fault_status FROM Fault_Log_Parts": "( distinct ( fault status ) ) that belongs to ( fault log parts )",
    "SELECT Name FROM editor ORDER BY Age ASC": "( name ) that belongs to ( editor ) , ordered by ( ( age ) in ascending order )",
    "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1": "( lastname of staff ) that belongs to ( ( performance ) , and ( ( band ) satisfied that ( ( bandmate of addresses ) equal to ( id of staff ) ) ) , and ( ( songs ) satisfied that ( ( songid of enzyme ) equal to ( songid of addresses ) ) ) ) , grouped by ( lastname ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1": "( competition type ) that belongs to ( competition ) , grouped by ( competition type ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT Fname ,  Lname FROM Student": "( fname ) , ( lname ) that belongs to ( student )",
    "SELECT T1.department_name ,  T2.city ,  T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id  =  T1.location_id": "( department name of addresses ) , ( city of staff ) , ( state province of staff ) that belongs to ( ( departments ) , and ( ( locations ) satisfied that ( ( location id of staff ) equal to ( location id of addresses ) ) ) )",
    "SELECT name ,  nationality ,  id FROM architect WHERE gender  =  'male' ORDER BY name": "( name ) , ( nationality ) , ( id ) that belongs to ( architect ) , that have ( ( gender ) equal to ( 'male' ) ) , ordered by ( ( name ) )",
    "SELECT count(*) FROM company WHERE Headquarters  =  'USA'": "( the number of ( all items ) ) that belongs to ( company ) , that have ( ( headquarters ) equal to ( 'usa' ) )",
    "SELECT Date FROM perpetrator ORDER BY Killed DESC": "( date ) that belongs to ( perpetrator ) , ordered by ( ( killed ) in descending order )",
    "SELECT name FROM captain ORDER BY age LIMIT 1": "( name ) that belongs to ( captain ) , ordered by ( ( age ) ) , limited to the top ( 1 )",
    "SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Chinese Grand Prix\"": "( driverid of staff ) , ( forename of enzyme ) that belongs to ( ( races ) , and ( ( results ) satisfied that ( ( raceid of addresses ) equal to ( raceid of staff ) ) ) , and ( ( drivers ) satisfied that ( ( driverid of staff ) equal to ( driverid of enzyme ) ) ) ) , that have ( ( name of addresses ) equal to ( australian grand prix ) ), and intersect with ( ( driverid of staff ) , ( forename of enzyme ) that belongs to ( ( races ) , and ( ( results ) satisfied that ( ( raceid of addresses ) equal to ( raceid of staff ) ) ) , and ( ( drivers ) satisfied that ( ( driverid of staff ) equal to ( driverid of enzyme ) ) ) ) , that have ( ( name of addresses ) equal to ( chinese grand prix ) ))",
    "SELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = \"Lockmanfurt\";": "( first name of addresses ) , ( last name of addresses ) that belongs to ( ( customers ) , and ( ( addresses ) satisfied that ( ( customer address id of addresses ) equal to ( address id of staff ) ) ) ) , that have ( ( city of staff ) equal to ( lockmanfurt ) )",
    "SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code ORDER BY stu_gpa LIMIT 1": "( dept name of staff ) that belongs to ( ( student ) , and ( ( department ) satisfied that ( ( dept code of addresses ) equal to ( dept code of staff ) ) ) ) , ordered by ( ( stu gpa ) ) , limited to the top ( 1 )",
    "SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1;": "( yearid ) that belongs to ( hall of fame ) , grouped by ( yearid ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM inst": "( the number of ( all items ) ) that belongs to ( inst )",
    "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name": "( pilot name of staff ) , ( the number of ( all items ) ) that belongs to ( ( pilot record ) , and ( ( pilot ) satisfied that ( ( pilot id of addresses ) equal to ( pilot id of staff ) ) ) ) , grouped by ( pilot name of staff )",
    "SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code  =  T2.Marketing_Region_Code WHERE T2.Store_Name  =  \"Rob Dinning\"": "( marketing region name of addresses ) that belongs to ( ( marketing regions ) , and ( ( stores ) satisfied that ( ( marketing region code of addresses ) equal to ( marketing region code of staff ) ) ) ) , that have ( ( store name of staff ) equal to ( rob dinning ) )",
    "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\"": "( firstname of staff ) , ( lastname of staff ) that belongs to ( ( performance ) , and ( ( band ) satisfied that ( ( bandmate of addresses ) equal to ( id of staff ) ) ) , and ( ( songs ) satisfied that ( ( songid of enzyme ) equal to ( songid of addresses ) ) ) ) , that have ( ( title of enzyme ) equal to ( badlands ) )",
    "SELECT region_name FROM region WHERE region_name != 'Denmark'": "( region name ) that belongs to ( region ) , that have ( ( region name ) not equal to ( 'denmark' ) )",
    "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4": "( name of staff ) that belongs to ( ( rating ) , and ( ( reviewer ) satisfied that ( ( rid of addresses ) equal to ( rid of staff ) ) ) ) , that have ( ( stars of addresses ) equal to ( 3 ) ), and intersect with ( ( name of staff ) that belongs to ( ( rating ) , and ( ( reviewer ) satisfied that ( ( rid of addresses ) equal to ( rid of staff ) ) ) ) , that have ( ( stars of addresses ) equal to ( 4 ) ))",
    "SELECT DISTINCT payment_method FROM customers": "( distinct ( payment method ) ) that belongs to ( customers )",
    "SELECT count(DISTINCT bike_id) FROM trip": "( the number of ( distinct ( bike id ) ) ) that belongs to ( trip )",
    "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != \"Santo Domingo\"": "( name of staff ) that belongs to ( ( gymnast ) , and ( ( people ) satisfied that ( ( gymnast id of addresses ) equal to ( people id of staff ) ) ) ) , that have ( ( hometown of staff ) not equal to ( santo domingo ) )",
    "SELECT T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID ORDER BY T2.Scores DESC LIMIT 1": "( result of addresses ) that belongs to ( ( acceptance ) , and ( ( submission ) satisfied that ( ( submission id of addresses ) equal to ( submission id of staff ) ) ) ) , ordered by ( ( scores of staff ) in descending order ) , limited to the top ( 1 )",
    "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name": "( the sum of ( balance of staff ) ) , ( name of addresses ) that belongs to ( ( accounts ) , and ( ( savings ) satisfied that ( ( custid of addresses ) equal to ( custid of staff ) ) ) ) , grouped by ( name of addresses )",
    "SELECT count(*) ,  gender FROM Person WHERE age  <  40 GROUP BY gender": "( the number of ( all items ) ) , ( gender ) that belongs to ( person ) , that have ( ( age ) less than ( 40 ) ) , grouped by ( gender )",
    "SELECT count(DISTINCT job) FROM Person": "( the number of ( distinct ( job ) ) ) that belongs to ( person )",
    "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\"": "( the maximum of ( milliseconds ) ) , ( the minimum of ( milliseconds ) ) that belongs to ( ( genre ) , and ( ( track ) satisfied that ( ( genreid of addresses ) equal to ( genreid of staff ) ) ) ) , that have ( ( name of addresses ) equal to ( pop ) )",
    "SELECT Famous_Title ,  Age FROM artist ORDER BY Age DESC": "( famous title ) , ( age ) that belongs to ( artist ) , ordered by ( ( age ) in descending order )",
    "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\" OR t1.policy_type_code  =  \"Uniform\"": "( distinct ( customer details of member of club ) ) that belongs to ( ( policies ) , and ( ( customers ) satisfied that ( ( customer id of club ) equal to ( customer id of member of club ) ) ) ) , that have ( ( ( policy type code of club ) equal to ( deputy ) ) or ( ( policy type code of club ) equal to ( uniform ) ) )",
    "SELECT T1.institution ,  count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T1.institution_id": "( institution of addresses ) , ( the number of ( all items ) ) that belongs to ( ( institution ) , and ( ( protein ) satisfied that ( ( institution id of addresses ) equal to ( institution id of staff ) ) ) ) , grouped by ( institution id of addresses )",
    "SELECT address_line_1 FROM Course_Authors_and_Tutors": "( address line 1 ) that belongs to ( course authors and tutors )",
    "SELECT count(*) FROM Companies WHERE Industry  =  \"Banking\" OR Industry  =  \"Conglomerate\"": "( the number of ( all items ) ) that belongs to ( companies ) , that have ( ( ( industry ) equal to ( banking ) ) or ( ( industry ) equal to ( conglomerate ) ) )",
    "SELECT state_province_county ,  count(*) FROM addresses GROUP BY state_province_county": "( state province county ) , ( the number of ( all items ) ) that belongs to ( addresses ) , grouped by ( state province county )",
    "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2": "( party name of staff ) that belongs to ( ( party events ) , and ( ( party ) satisfied that ( ( party id of addresses ) equal to ( party id of staff ) ) ) ) , grouped by ( party id of addresses ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT avg(Gross_in_dollar) FROM film": "( the average of ( gross in dollar ) ) that belongs to ( film )",
    "SELECT YEAR ,  avg(attendance) FROM home_game GROUP BY YEAR;": "( year ) , ( the average of ( attendance ) ) that belongs to ( home game ) , grouped by ( year )",
    "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Psychiatry'": "( name of addresses ) that belongs to ( ( physician ) , and ( ( affiliated with ) satisfied that ( ( employeeid of addresses ) equal to ( physician of staff ) ) ) , and ( ( department ) satisfied that ( ( department of staff ) equal to ( departmentid of enzyme ) ) ) ) , that have ( ( name of enzyme ) equal to ( 'surgery' ) ), and intersect with ( ( name of addresses ) that belongs to ( ( physician ) , and ( ( affiliated with ) satisfied that ( ( employeeid of addresses ) equal to ( physician of staff ) ) ) , and ( ( department ) satisfied that ( ( department of staff ) equal to ( departmentid of enzyme ) ) ) ) , that have ( ( name of enzyme ) equal to ( 'psychiatry' ) ))",
    "SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id;": "( employee name of staff ) , ( employee name of enzyme ) that belongs to ( ( documents to be destroyed ) , and ( ( employees ) satisfied that ( ( destruction authorised by employee id of addresses ) equal to ( employee id of staff ) ) ) , and ( ( employees ) satisfied that ( ( destroyed by employee id of addresses ) equal to ( employee id of enzyme ) ) ) )",
    "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171": "( the number of ( all items ) ) that belongs to ( ( courses ) , and ( ( student course attendance ) satisfied that ( ( course id of addresses ) equal to ( course id of staff ) ) ) ) , that have ( ( student id of staff ) equal to ( 171 ) )",
    "SELECT rank FROM captain GROUP BY rank ORDER BY count(*) DESC LIMIT 1": "( rank ) that belongs to ( captain ) , grouped by ( rank ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students": "( login name ) that belongs to ( course authors and tutors ), and intersect with ( ( login name ) that belongs to ( students ))",
    "SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1": "( type ) that belongs to ( ship ) , grouped by ( type ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"KAWA\" AND T2.lastname  =  \"GORDON\"": "( the number of ( all items ) ) that belongs to ( ( list ) , and ( ( teachers ) satisfied that ( ( classroom of addresses ) equal to ( classroom of staff ) ) ) ) , that have ( ( ( firstname of staff ) equal to ( kawa ) ) and ( ( lastname of staff ) equal to ( gordon ) ) )",
    "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name": "( the number of ( distinct ( id of staff ) ) ) , ( the number of ( distinct ( id of enzyme ) ) ) , ( dept name of enzyme ) that belongs to ( ( department ) , and ( ( student ) satisfied that ( ( dept name of addresses ) equal to ( dept name of staff ) ) ) , and ( ( instructor ) satisfied that ( ( dept name of addresses ) equal to ( dept name of enzyme ) ) ) ) , grouped by ( dept name of enzyme )",
    "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)": "( company ) , ( main industry ) that belongs to ( company ) , that have ( ( company_id ) not in ( ( company id ) that belongs to ( station company ) ) )",
    "SELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer)": "( cust name ) that belongs to ( customer ) , that have ( ( credit score ) less than ( the average of ( credit score ) ) that belongs to ( customer ) )",
    "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\"": "( distinct ( name of staff ) ) that belongs to ( ( grapes ) , and ( ( wine ) satisfied that ( ( grape of addresses ) equal to ( grape of staff ) ) ) ) , that have ( ( color of addresses ) equal to ( red ) )",
    "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1": "( project id ) that belongs to ( documents ) , grouped by ( project id ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( 1 )",
    "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1": "( nominee ) that belongs to ( musical ) , grouped by ( nominee ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM Employee": "( the number of ( all items ) ) that belongs to ( employee )",
    "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3": "( fname of staff ) , ( lname of staff ) that belongs to ( ( course ) , and ( ( faculty ) satisfied that ( ( instructor of addresses ) equal to ( facid of staff ) ) ) ) , grouped by ( instructor of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 3 )",
    "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2": "( distinct ( product name of enzyme ) ) that belongs to ( ( customer orders ) , and ( ( order items ) satisfied that ( ( order id of addresses ) equal to ( order id of staff ) ) ) , and ( ( products ) satisfied that ( ( product id of staff ) equal to ( product id of enzyme ) ) ) ) , grouped by ( product id of enzyme ) , that have ( ( the number of ( distinct ( customer id of addresses ) ) ) greater than or equal to ( 2 ) )",
    "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000": "( distinct ( title of staff ) ) that belongs to ( ( rating ) , and ( ( movie ) satisfied that ( ( mid of addresses ) equal to ( mid of staff ) ) ) , and ( ( reviewer ) satisfied that ( ( rid of addresses ) equal to ( rid of enzyme ) ) ) ) , that have ( ( ( name of enzyme ) equal to ( 'brittany harris' ) ) or ( ( year of staff ) greater than ( 2000 ) ) )",
    "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id": "( service name ) that belongs to ( services ), and except that ( ( service name of club ) that belongs to ( ( services ) , and ( ( party services ) satisfied that ( ( service id of club ) equal to ( service id of member of club ) ) ) ))",
    "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1": "( title of staff ) , ( the average of ( stars of addresses ) ) that belongs to ( ( rating ) , and ( ( movie ) satisfied that ( ( mid of addresses ) equal to ( mid of staff ) ) ) ) , grouped by ( mid of addresses ) , ordered by ( ( the average of ( stars of addresses ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";": "( date joined staff ) that belongs to ( staff ) , that have ( ( ( first name ) equal to ( janessa ) ) and ( ( last name ) equal to ( sawayn ) ) )",
    "SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1": "( document name of club ) that belongs to ( ( documents ) , and ( ( document sections ) satisfied that ( ( document code of club ) equal to ( document code of member of club ) ) ) ) , grouped by ( document code of club ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM phone WHERE Company_name = \"Nokia Corporation\";": "( the number of ( all items ) ) that belongs to ( phone ) , that have ( ( company name ) equal to ( nokia corporation ) )",
    "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';": "( the sum of ( beds ) ) that belongs to ( rooms ) , that have ( ( bedtype ) equal to ( 'king' ) )",
    "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18": "( distinct ( fname of addresses ) ) , ( lname of addresses ) that belongs to ( ( student ) , and ( ( voting record ) satisfied that ( ( stuid of addresses ) equal to ( vice president vote of staff ) ) ) ) , that have ( ( age of addresses ) equal to ( 18 ) )",
    "SELECT Official_Name FROM city ORDER BY Population DESC": "( official name ) that belongs to ( city ) , ordered by ( ( population ) in descending order )",
    "SELECT DISTINCT home_city FROM driver": "( distinct ( home city ) ) that belongs to ( driver )",
    "SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = 1;": "( employee name of employees ) that belongs to ( employees , and ( circulation history satisfied that ( ( employee id of circulation history ) equal to ( employee id of employees ) ) ) ) , that have ( ( document id of circulation history ) equal to ( 1 ) )",
    "SELECT model_name FROM chip_model ORDER BY launch_year": "( model name ) that belongs to ( chip model ) , ordered by ( ( launch year ) )",
    "SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)": "( shop name ) that belongs to ( shop ) , that have ( ( shop_id ) not in ( ( shop id ) that belongs to ( stock ) ) )",
    "SELECT count(*) ,  T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockfloor": "( the number of ( all items ) ) , ( blockfloor of addresses ) that belongs to ( ( block ) , and ( ( room ) satisfied that ( ( ( blockfloor of addresses ) equal to ( blockfloor of staff ) ) and ( ( blockcode of addresses ) equal to ( blockcode of staff ) ) ) ) ) , grouped by ( blockfloor of addresses )",
    "SELECT avg(enr) FROM College WHERE state  =  'FL'": "( the average of ( enr ) ) that belongs to ( college ) , that have ( ( state ) equal to ( 'fl' ) )",
    "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1": "( name of staff ) , ( country of staff ) that belongs to ( ( exhibition ) , and ( ( artist ) satisfied that ( ( artist id of addresses ) equal to ( artist id of staff ) ) ) ) , grouped by ( artist id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1": "( catalog publisher ) that belongs to ( catalogs ) , grouped by ( catalog publisher ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T2.Name ,  T1.Date FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID": "( name of staff ) , ( date of addresses ) that belongs to ( ( election ) , and ( ( representative ) satisfied that ( ( representative id of addresses ) equal to ( representative id of staff ) ) ) )",
    "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1": "( publisher ) that belongs to ( publication ) , grouped by ( publisher ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 1": "( investor id of staff ) , ( investor details of addresses ) that belongs to ( ( investors ) , and ( ( transactions ) satisfied that ( ( investor id of addresses ) equal to ( investor id of staff ) ) ) ) , grouped by ( investor id of staff ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT District_name ,  City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000": "( district name ) , ( city population ) that belongs to ( district ) , that have ( ( city_population ) between ( 200000 ) and ( 2000000 ) )",
    "SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID": "( country of staff ) , ( year of addresses ) that belongs to ( ( film market estimation ) , and ( ( market ) satisfied that ( ( market id of addresses ) equal to ( market id of staff ) ) ) )",
    "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id": "( order id ) , ( the number of ( all items ) ) that belongs to ( order items ) , grouped by ( order id )",
    "SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date ASC LIMIT 1": "( asset acquired date ) that belongs to ( assets ) , ordered by ( ( asset acquired date ) in ascending order ) , limited to the top ( 1 )",
    "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\"": "( title of student ) that belongs to ( ( authors ) , and ( ( authorship ) satisfied that ( ( authid of club ) equal to ( authid of member of club ) ) ) , and ( ( papers ) satisfied that ( ( paperid of member of club ) equal to ( paperid of student ) ) ) ) , that have ( ( ( fname of club ) equal to ( aaron ) ) and ( ( lname of club ) equal to ( turon ) ) )",
    "SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";": "( the sum of ( total ) ) that belongs to ( invoices ) , that have ( ( ( billing city ) equal to ( chicago ) ) and ( ( billing state ) equal to ( il ) ) )",
    "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211' AND T2.enroll_grade  =  'C'": "( stu fname of enzyme ) that belongs to ( ( class ) , and ( ( enroll ) satisfied that ( ( class code of addresses ) equal to ( class code of staff ) ) ) , and ( ( student ) satisfied that ( ( stu num of staff ) equal to ( stu num of enzyme ) ) ) ) , that have ( ( ( crs code of addresses ) equal to ( 'acct-211' ) ) and ( ( enroll grade of staff ) equal to ( 'c' ) ) )",
    "SELECT Country FROM manager WHERE Age  >  50 INTERSECT SELECT Country FROM manager WHERE Age  <  46": "( country ) that belongs to ( manager ) , that have ( ( age ) greater than ( 50 ) ), and intersect with ( ( country ) that belongs to ( manager ) , that have ( ( age ) less than ( 46 ) ))",
    "SELECT count(DISTINCT T1.name) ,  T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.Headquarter": "( the number of ( distinct ( name of addresses ) ) ) , ( headquarter of staff ) that belongs to ( ( products ) , and ( ( manufacturers ) satisfied that ( ( manufacturer of addresses ) equal to ( code of staff ) ) ) ) , grouped by ( headquarter of staff )",
    "SELECT FacID FROM Faculty WHERE Sex  =  'M'": "( facid ) that belongs to ( faculty ) , that have ( ( sex ) equal to ( 'm' ) )",
    "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1": "( name of addresses ) that belongs to ( ( instructor ) , and ( ( advisor ) satisfied that ( ( id of addresses ) equal to ( i id of staff ) ) ) ) , grouped by ( i id of staff ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT Player_name FROM player ORDER BY Votes ASC": "( player name ) that belongs to ( player ) , ordered by ( ( votes ) in ascending order )",
    "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)": "( cust name of addresses ) that belongs to ( ( customer ) , and ( ( loan ) satisfied that ( ( cust id of addresses ) equal to ( cust id of staff ) ) ) ) , grouped by ( cust name of addresses ) , ordered by ( ( the sum of ( amount of staff ) ) )",
    "SELECT T2.name ,  avg(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend GROUP BY T2.name ORDER BY avg(T1.age) DESC LIMIT 1": "( name of staff ) , ( the average of ( age of addresses ) ) that belongs to ( ( person ) , and ( ( personfriend ) satisfied that ( ( name of addresses ) equal to ( friend of staff ) ) ) ) , grouped by ( name of staff ) , ordered by ( ( the average of ( age of addresses ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1": "( name ) that belongs to ( user profiles ) , ordered by ( ( followers ) in descending order ) , limited to the top ( 1 )",
    "SELECT T2.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id HAVING COUNT(*)  >=  2": "( investor id of staff ) that belongs to ( ( investors ) , and ( ( transactions ) satisfied that ( ( investor id of addresses ) equal to ( investor id of staff ) ) ) ) , grouped by ( investor id of staff ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT problem_log_id ,  log_entry_description FROM problem_log": "( problem log id ) , ( log entry description ) that belongs to ( problem log )",
    "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)": "( fname of addresses ) that belongs to ( ( student ) , and ( ( lives in ) satisfied that ( ( stuid of addresses ) equal to ( stuid of staff ) ) ) ) , that have ( ( t2.dormid ) in ( ( dormid of staff ) that belongs to ( ( dorm ) , and ( ( has amenity ) satisfied that ( ( dormid of enzyme ) equal to ( dormid of trip ) ) ) , and ( ( dorm amenity ) satisfied that ( ( amenid of trip ) equal to ( amenid of department ) ) ) ) , grouped by ( dormid of enzyme ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 ) ) )",
    "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1": "( type ) that belongs to ( vocals ) , grouped by ( type ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(DISTINCT dept_name) FROM course": "( the number of ( distinct ( dept name ) ) ) that belongs to ( course )",
    "SELECT count(*) ,  t1.network_name ,  t1.services FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id": "( the number of ( all items ) ) , ( network name of club ) , ( services of club ) that belongs to ( ( station ) , and ( ( route ) satisfied that ( ( id of club ) equal to ( station id of member of club ) ) ) ) , grouped by ( station id of member of club )",
    "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1": "( aircraft of addresses ) that belongs to ( ( aircraft ) , and ( ( match ) satisfied that ( ( aircraft id of addresses ) equal to ( winning aircraft of staff ) ) ) ) , grouped by ( winning aircraft of staff ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id  =  T2.Market_ID WHERE country  =  'China')": "( title ) , ( director ) that belongs to ( film ) , that have ( ( film_id ) not in ( ( film id ) that belongs to ( ( film market estimation ) , and ( ( market ) satisfied that ( ( market id of addresses ) equal to ( market id of staff ) ) ) ) , that have ( ( country ) equal to ( 'china' ) ) ) )",
    "SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC": "( name ) , ( headquarter ) that belongs to ( manufacturers ) , ordered by ( ( revenue ) in descending order )",
    "SELECT count(*) FROM gymnast": "( the number of ( all items ) ) that belongs to ( gymnast )",
    "SELECT document_type_code ,  document_type_name ,  document_type_description FROM Ref_document_types": "( document type code ) , ( document type name ) , ( document type description ) that belongs to ( ref document types )",
    "SELECT count(*) FROM Vehicles;": "( the number of ( all items ) ) that belongs to ( vehicles )",
    "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE T1.title  =  \"A Kiss Before You Go: Live in Hamburg\"": "( title of enzyme ) that belongs to ( ( albums ) , and ( ( tracklists ) satisfied that ( ( aid of addresses ) equal to ( albumid of staff ) ) ) , and ( ( songs ) satisfied that ( ( songid of staff ) equal to ( songid of enzyme ) ) ) ) , that have ( ( title of addresses ) equal to ( a kiss before you go: live in hamburg ) )",
    "SELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80": "( employee id of addresses ) , ( job title of staff ) that belongs to ( ( employees ) , and ( ( jobs ) satisfied that ( ( job id of addresses ) equal to ( job id of staff ) ) ) ) , that have ( ( department id of addresses ) equal to ( 80 ) )",
    "SELECT title FROM albums;": "( title ) that belongs to ( albums )",
    "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Binders Unbound\"": "( lname of club ) that belongs to ( ( authors ) , and ( ( authorship ) satisfied that ( ( authid of club ) equal to ( authid of member of club ) ) ) , and ( ( papers ) satisfied that ( ( paperid of member of club ) equal to ( paperid of student ) ) ) ) , that have ( ( title of student ) equal to ( binders unbound ) )",
    "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Liberal\"": "( committee of addresses ) that belongs to ( ( election ) , and ( ( party ) satisfied that ( ( party of addresses ) equal to ( party id of staff ) ) ) ) , that have ( ( party of staff ) equal to ( democratic ) ), and intersect with ( ( committee of addresses ) that belongs to ( ( election ) , and ( ( party ) satisfied that ( ( party of addresses ) equal to ( party id of staff ) ) ) ) , that have ( ( party of staff ) equal to ( liberal ) ))",
    "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID": "( city town of addresses ) that belongs to ( ( addresses ) , and ( ( customers ) satisfied that ( ( address id of addresses ) equal to ( address id of staff ) ) ) ), and except that ( ( city town of addresses ) that belongs to ( ( addresses ) , and ( ( performers ) satisfied that ( ( address id of addresses ) equal to ( address id of staff ) ) ) ))",
    "SELECT count(*) FROM Project_outcomes WHERE outcome_code  =  'Patent'": "( the number of ( all items ) ) that belongs to ( project outcomes ) , that have ( ( outcome code ) equal to ( 'patent' ) )",
    "SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1": "( artist name ) that belongs to ( song ) , that have ( ( resolution ) greater than ( 500 ) ) , grouped by ( languages ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC": "( name ) , ( headquarter ) , ( revenue ) that belongs to ( manufacturers ) , ordered by ( ( revenue ) in descending order )",
    "SELECT DISTINCT T2.problem_id ,  T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = \"Rylan\" AND T1.staff_last_name = \"Homenick\"": "( distinct ( problem id of staff ) ) , ( problem log id of staff ) that belongs to ( ( staff ) , and ( ( problem log ) satisfied that ( ( staff id of addresses ) equal to ( assigned to staff id of staff ) ) ) ) , that have ( ( ( staff first name of addresses ) equal to ( rylan ) ) and ( ( staff last name of addresses ) equal to ( homenick ) ) )",
    "SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id": "( distinct ( department name of staff ) ) that belongs to ( ( employees ) , and ( ( departments ) satisfied that ( ( department id of addresses ) equal to ( department id of staff ) ) ) )",
    "SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR  =  1989": "( publisher ) that belongs to ( book club ), and except that ( ( publisher ) that belongs to ( book club ) , that have ( ( year ) equal to ( 1989 ) ))",
    "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1": "( customer name of club ) that belongs to ( ( customers ) , and ( ( customers policies ) satisfied that ( ( customer id of club ) equal to ( customer id of member of club ) ) ) ) , grouped by ( customer name of club ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT Nickname FROM school_details WHERE Division != \"Division 1\"": "( nickname ) that belongs to ( school details ) , that have ( ( division ) not equal to ( division 1 ) )",
    "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id": "( first name of staff ) , ( last name of staff ) that belongs to ( ( candidates ) , and ( ( people ) satisfied that ( ( candidate id of addresses ) equal to ( person id of staff ) ) ) )",
    "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\";": "( the number of ( all items ) ) that belongs to ( ( employees ) , and ( ( customers ) satisfied that ( ( support rep id of staff ) equal to ( id of addresses ) ) ) ) , that have ( ( ( first name of addresses ) equal to ( steve ) ) and ( ( last name of addresses ) equal to ( johnson ) ) )",
    "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC": "( city ) that belongs to ( station ) , grouped by ( city ) , ordered by ( ( the maximum of ( lat ) ) in descending order )",
    "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  <  2": "( famous title of addresses ) that belongs to ( ( artist ) , and ( ( volume ) satisfied that ( ( artist id of addresses ) equal to ( artist id of staff ) ) ) ) , that have ( ( weeks on top of staff ) greater than ( 2 ) ), and intersect with ( ( famous title of addresses ) that belongs to ( ( artist ) , and ( ( volume ) satisfied that ( ( artist id of addresses ) equal to ( artist id of staff ) ) ) ) , that have ( ( weeks on top of staff ) less than ( 2 ) ))",
    "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Der Kapitan\" AND T1.StagePosition  =  \"back\"": "( firstname of staff ) , ( lastname of staff ) that belongs to ( ( performance ) , and ( ( band ) satisfied that ( ( bandmate of addresses ) equal to ( id of staff ) ) ) , and ( ( songs ) satisfied that ( ( songid of enzyme ) equal to ( songid of addresses ) ) ) ) , that have ( ( ( title of enzyme ) equal to ( der kapitan ) ) and ( ( stageposition of addresses ) equal to ( back ) ) )",
    "SELECT cName ,  state ,  min(enr) FROM college GROUP BY state": "( cname ) , ( state ) , ( the minimum of ( enr ) ) that belongs to ( college ) , grouped by ( state )",
    "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  \"Accounting\"": "( the number of ( all items ) ) that belongs to ( ( professor ) , and ( ( department ) satisfied that ( ( dept code of addresses ) equal to ( dept code of staff ) ) ) ) , that have ( ( dept name ) equal to ( accounting ) )",
    "SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id": "( order id ) , ( the sum of ( product quantity ) ) that belongs to ( order items ) , grouped by ( order id )",
    "SELECT DISTINCT T2.thing_id ,  T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.Status_of_Thing_Code  =  'Close' OR T1.Date_and_Date  <  '2017-06-19 02:59:21'": "( distinct ( thing id of staff ) ) , ( type of thing code of staff ) that belongs to ( ( timed status of things ) , and ( ( things ) satisfied that ( ( thing id of addresses ) equal to ( thing id of staff ) ) ) ) , that have ( ( ( status of thing code of addresses ) equal to ( 'close' ) ) or ( ( date and date of addresses ) less than ( '2017-06-19 02:59:21' ) ) )",
    "SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1": "( name ) , ( nationality ) that belongs to ( host ) , ordered by ( ( age ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM Student": "( the number of ( all items ) ) that belongs to ( student )",
    "SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id WHERE T2.nationality  =  'American' OR T2.nationality  =  'Canadian'": "( distinct ( type of addresses ) ) that belongs to ( ( mill ) , and ( ( architect ) satisfied that ( ( architect id of addresses ) equal to ( id of staff ) ) ) ) , that have ( ( ( nationality of staff ) equal to ( 'american' ) ) or ( ( nationality of staff ) equal to ( 'canadian' ) ) )",
    "SELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id": "( country id ) , ( the number of ( all items ) ) that belongs to ( locations ) , grouped by ( country id )",
    "SELECT Country ,  COUNT(*) FROM climber GROUP BY Country": "( country ) , ( the number of ( all items ) ) that belongs to ( climber ) , grouped by ( country )",
    "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1": "( advisor ) that belongs to ( student ) , grouped by ( advisor ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT actual_order_id FROM actual_orders WHERE order_status_code  =  'Success'": "( actual order id ) that belongs to ( actual orders ) , that have ( ( order status code ) equal to ( 'success' ) )",
    "SELECT T3.Name ,  T2.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID ORDER BY T2.Event_Attendance ASC": "( name of enzyme ) , ( name of staff ) that belongs to ( ( news report ) , and ( ( event ) satisfied that ( ( event id of addresses ) equal to ( event id of staff ) ) ) , and ( ( journalist ) satisfied that ( ( journalist id of addresses ) equal to ( journalist id of enzyme ) ) ) ) , ordered by ( ( event attendance of staff ) in ascending order )",
    "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004": "( name ) that belongs to ( artist ), and except that ( ( name of staff ) that belongs to ( ( exhibition ) , and ( ( artist ) satisfied that ( ( artist id of addresses ) equal to ( artist id of staff ) ) ) ) , that have ( ( year of addresses ) equal to ( 2004 ) ))",
    "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)": "( the sum of ( amount claimed of club ) ) that belongs to ( ( claim headers ) , and ( ( claims documents ) satisfied that ( ( claim header id of club ) equal to ( claim id of member of club ) ) ) ) , that have ( ( created date of member of club ) equal to ( created date ) that belongs to ( claims documents ) , ordered by ( ( created date ) ) , limited to the top ( 1 ) )",
    "SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  \"John Anthony\")": "( distinct ( name ) ) that belongs to ( wine ) , that have ( ( price ) greater than ( the minimum of ( price ) ) that belongs to ( wine ) , that have ( ( winery ) equal to ( john anthony ) ) )",
    "SELECT count(DISTINCT city) FROM airports WHERE country  =  'Greenland'": "( the number of ( distinct ( city ) ) ) that belongs to ( airports ) , that have ( ( country ) equal to ( 'greenland' ) )",
    "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID": "( title of addresses ) , ( albumid of staff ) that belongs to ( ( album ) , and ( ( track ) satisfied that ( ( albumid of addresses ) equal to ( albumid of staff ) ) ) ) , that have ( ( unitprice of staff ) greater than ( 1 ) ) , grouped by ( albumid of staff )",
    "SELECT count(*) FROM book": "( the number of ( all items ) ) that belongs to ( book )",
    "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4": "( cname ) that belongs to ( course ) , that have ( ( credits ) equal to ( 3 ) ) and ( cname ) that belongs to ( course ) , that have ( ( ( credits ) equal to ( 1 ) ) and ( ( hours ) equal to ( 4 ) ) )",
    "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1": "( distinct ( forename of addresses ) ) that belongs to ( ( drivers ) , and ( ( driverstandings ) satisfied that ( ( driverid of addresses ) equal to ( driverid of staff ) ) ) ) , that have ( ( ( position of staff ) equal to ( 1 ) ) and ( ( wins of staff ) equal to ( 1 ) ) )",
    "SELECT count(*) ,  dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY dept_code": "( the number of ( all items ) ) , ( dept code ) that belongs to ( ( class ) , and ( ( course ) satisfied that ( ( crs code of addresses ) equal to ( crs code of staff ) ) ) ) , grouped by ( dept code )",
    "SELECT school_name FROM school WHERE school_id NOT IN (SELECT school_id FROM endowment)": "( school name ) that belongs to ( school ) , that have ( ( school_id ) not in ( ( school id ) that belongs to ( endowment ) ) )",
    "SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000": "( product id ) that belongs to ( order items ) , grouped by ( product id ) , that have ( ( the number of ( all items ) ) greater than ( 3 ) ) and ( product id ) that belongs to ( product suppliers ) , grouped by ( product id ) , that have ( ( the sum of ( total amount purchased ) ) greater than ( 80000 ) )",
    "SELECT DISTINCT product_size FROM Products": "( distinct ( product size ) ) that belongs to ( products )",
    "SELECT course_description FROM COURSES WHERE course_name  =  \"database\"": "( course description ) that belongs to ( courses ) , that have ( ( course name ) equal to ( database ) )",
    "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'": "( the number of ( all items ) ) that belongs to ( ( airports ) , and ( ( routes ) satisfied that ( ( apid of addresses ) equal to ( dst apid of staff ) ) ) ) , that have ( ( name of addresses ) equal to ( 'john f kennedy international airport' ) )",
    "SELECT Payment_Method_Code ,  Date_Payment_Made ,  Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC": "( payment method code ) , ( date payment made ) , ( amount payment ) that belongs to ( payments ) , ordered by ( ( date payment made ) in ascending order )",
    "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60": "( id of addresses ) that belongs to ( ( trip ) , and ( ( weather ) satisfied that ( ( zip code of addresses ) equal to ( zip code of staff ) ) ) ) , grouped by ( zip code of staff ) , that have ( ( the average of ( mean temperature f of staff ) ) greater than ( 60 ) )",
    "SELECT TYPE FROM ship WHERE Tonnage  >  6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage  <  4000": "( type ) that belongs to ( ship ) , that have ( ( tonnage ) greater than ( 6000 ) ), and intersect with ( ( type ) that belongs to ( ship ) , that have ( ( tonnage ) less than ( 4000 ) ))",
    "SELECT Name FROM Team": "( name ) that belongs to ( team )",
    "SELECT count(DISTINCT bedType) FROM Rooms;": "( the number of ( distinct ( bedtype ) ) ) that belongs to ( rooms )",
    "SELECT count(*) FROM Documents WHERE document_status_code = \"done\";": "( the number of ( all items ) ) that belongs to ( documents ) , that have ( ( document status code ) equal to ( done ) )",
    "SELECT location_code FROM Ref_locations WHERE location_name  =  \"Canada\"": "( location code ) that belongs to ( ref locations ) , that have ( ( location name ) equal to ( canada ) )",
    "SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);": "( the number of ( all items ) ) that belongs to ( department ) , that have ( ( department_id ) not in ( ( department id ) that belongs to ( management ) ) )",
    "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\"": "( distinct ( product id of staff ) ) that belongs to ( ( orders ) , and ( ( order items ) satisfied that ( ( order id of addresses ) equal to ( order id of staff ) ) ) ) , that have ( ( ( date order placed of addresses ) greater than or equal to ( 1975-01-01 ) ) and ( ( date order placed of addresses ) less than or equal to ( 1976-01-01 ) ) )",
    "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id ORDER BY count(*) DESC LIMIT 1": "( name of staff ) that belongs to ( ( train station ) , and ( ( station ) satisfied that ( ( station id of addresses ) equal to ( station id of staff ) ) ) ) , grouped by ( station id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"": "( the average of ( unitprice ) ) that belongs to ( ( genre ) , and ( ( track ) satisfied that ( ( genreid of addresses ) equal to ( genreid of staff ) ) ) ) , that have ( ( name of addresses ) equal to ( jazz ) )",
    "SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989": "( book title ) , ( author or editor ) that belongs to ( book club ) , that have ( ( year ) greater than ( 1989 ) )",
    "SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'": "( lname ) that belongs to ( faculty ) , that have ( ( rank ) equal to ( 'professor' ) ), and except that ( ( distinct ( lname of addresses ) ) that belongs to ( ( faculty ) , and ( ( faculty participates in ) satisfied that ( ( facid of addresses ) equal to ( facid of staff ) ) ) , and ( ( activity ) satisfied that ( ( actid of staff ) equal to ( actid of staff ) ) ) ) , that have ( ( ( activity name of enzyme ) equal to ( 'canoeing' ) ) or ( ( activity name of enzyme ) equal to ( 'kayaking' ) ) ))",
    "SELECT sum(revenue) ,  founder FROM manufacturers GROUP BY founder": "( the sum of ( revenue ) ) , ( founder ) that belongs to ( manufacturers ) , grouped by ( founder )",
    "SELECT clublocation FROM club WHERE clubname  =  \"Pen and Paper Gaming\"": "( clublocation ) that belongs to ( club ) , that have ( ( clubname ) equal to ( pen and paper gaming ) )",
    "SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3": "( id of addresses ) , ( trade name of addresses ) that belongs to ( ( medicine ) , and ( ( medicine enzyme interaction ) satisfied that ( ( medicine id of staff ) equal to ( id of addresses ) ) ) ) , grouped by ( id of addresses ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 3 ) )",
    "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building": "( the maximum of ( capacity ) ) , ( the average of ( capacity ) ) , ( building ) that belongs to ( classroom ) , grouped by ( building )",
    "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";": "( title ) , ( phone ) , ( hire date ) that belongs to ( employees ) , that have ( ( ( first name ) equal to ( nancy ) ) and ( ( last name ) equal to ( edwards ) ) )",
    "SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name": "( the number of ( all items ) ) , ( name of addresses ) that belongs to ( ( scientists ) , and ( ( assignedto ) satisfied that ( ( ssn of addresses ) equal to ( scientist of staff ) ) ) ) , grouped by ( name of addresses )",
    "SELECT count(*) FROM artist": "( the number of ( all items ) ) that belongs to ( artist )",
    "SELECT party FROM driver WHERE home_city  =  'Hartford' AND age  >  40": "( party ) that belongs to ( driver ) , that have ( ( ( home city ) equal to ( 'hartford' ) ) and ( ( age ) greater than ( 40 ) ) )",
    "SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'": "( name of addresses ) , ( age of addresses ) that belongs to ( ( person ) , and ( ( personfriend ) satisfied that ( ( name of addresses ) equal to ( name of staff ) ) ) ) , that have ( ( friend of staff ) equal to ( 'dan' ) ), and intersect with ( ( name of addresses ) , ( age of addresses ) that belongs to ( ( person ) , and ( ( personfriend ) satisfied that ( ( name of addresses ) equal to ( name of staff ) ) ) ) , that have ( ( friend of staff ) equal to ( 'alice' ) ))",
    "SELECT COUNT(DISTINCT city) FROM EMPLOYEE": "( the number of ( distinct ( city ) ) ) that belongs to ( employee )",
    "SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID": "( name of staff ) that belongs to ( ( appointment ) , and ( ( physician ) satisfied that ( ( physician of addresses ) equal to ( employeeid of staff ) ) ) )",
    "SELECT T1.organisation_id ,  count(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1": "( organisation id of addresses ) , ( the number of ( all items ) ) that belongs to ( ( projects ) , and ( ( project outcomes ) satisfied that ( ( project id of addresses ) equal to ( project id of staff ) ) ) ) , grouped by ( organisation id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT city FROM addresses WHERE zip_postcode  =  255": "( city ) that belongs to ( addresses ) , that have ( ( zip postcode ) equal to ( 255 ) )",
    "SELECT name FROM club ORDER BY Start_year ASC": "( name ) that belongs to ( club ) , ordered by ( ( start year ) in ascending order )",
    "SELECT Carrier FROM device ORDER BY Carrier ASC": "( carrier ) that belongs to ( device ) , ordered by ( ( carrier ) in ascending order )",
    "SELECT max(elevation) FROM airports WHERE country  =  'Iceland'": "( the maximum of ( elevation ) ) that belongs to ( airports ) , that have ( ( country ) equal to ( 'iceland' ) )",
    "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"": "( distinct ( name of student ) ) that belongs to ( ( authors ) , and ( ( authorship ) satisfied that ( ( authid of club ) equal to ( authid of member of club ) ) ) , and ( ( inst ) satisfied that ( ( instid of member of club ) equal to ( instid of student ) ) ) ) , that have ( ( ( fname of club ) equal to ( matthias ) ) and ( ( lname of club ) equal to ( blume ) ) )",
    "SELECT school_name ,  LOCATION ,  mascot FROM school": "( school name ) , ( location ) , ( mascot ) that belongs to ( school )",
    "SELECT min(Order_Quantity) ,  avg(Order_Quantity) ,  max(Order_Quantity) FROM INVOICES": "( the minimum of ( order quantity ) ) , ( the average of ( order quantity ) ) , ( the maximum of ( order quantity ) ) that belongs to ( invoices )",
    "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  2": "( name of addresses ) that belongs to ( ( editor ) , and ( ( journal committee ) satisfied that ( ( editor id of addresses ) equal to ( editor id of staff ) ) ) ) , grouped by ( name of addresses ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1": "( organisation type of addresses ) , ( organisation id of addresses ) that belongs to ( ( organisations ) , and ( ( research staff ) satisfied that ( ( organisation id of addresses ) equal to ( employer organisation id of staff ) ) ) ) , grouped by ( organisation id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT Name FROM WINE WHERE score  >  90": "( name ) that belongs to ( wine ) , that have ( ( score ) greater than ( 90 ) )",
    "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)": "( custid of addresses ) , ( name of addresses ) that belongs to ( ( accounts ) , and ( ( checking ) satisfied that ( ( custid of addresses ) equal to ( custid of staff ) ) ) ) , that have ( ( balance of staff ) less than ( the maximum of ( balance ) ) that belongs to ( checking ) )",
    "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10": "( catalog level name ) , ( catalog level number ) that belongs to ( catalog structure ) , that have ( ( catalog_level_number ) between ( 5 ) and ( 10 ) )",
    "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'": "( state of addresses ) that belongs to ( ( college ) , and ( ( tryout ) satisfied that ( ( cname of addresses ) equal to ( cname of staff ) ) ) , and ( ( player ) satisfied that ( ( pid of staff ) equal to ( pid of enzyme ) ) ) ) , that have ( ( pname of enzyme ) equal to ( 'charles' ) )",
    "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1": "( location name of staff ) , ( location code of addresses ) that belongs to ( ( document locations ) , and ( ( ref locations ) satisfied that ( ( location code of addresses ) equal to ( location code of staff ) ) ) ) , grouped by ( location code of addresses ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( 1 )",
    "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1": "( status ) that belongs to ( city ) , grouped by ( status ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100": "( city ) that belongs to ( branch ) , that have ( ( ( open year ) equal to ( 2001 ) ) and ( ( membership amount ) greater than ( 100 ) ) )",
    "SELECT count(*) FROM farm": "( the number of ( all items ) ) that belongs to ( farm )",
    "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1": "( team ) that belongs to ( technician ) , grouped by ( team ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\"": "( name ) that belongs to ( program ), and except that ( ( name of club ) that belongs to ( ( program ) , and ( ( broadcast ) satisfied that ( ( program id of club ) equal to ( program id of member of club ) ) ) ) , that have ( ( time of day of member of club ) equal to ( morning ) ))",
    "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1": "( id of addresses ) that belongs to ( ( trip ) , and ( ( station ) satisfied that ( ( start station id of addresses ) equal to ( id of staff ) ) ) ) , ordered by ( ( dock count of staff ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name": "( name of addresses ) , ( name of enzyme ) , ( hours of enzyme ) that belongs to ( ( scientists ) , and ( ( assignedto ) satisfied that ( ( ssn of addresses ) equal to ( scientist of staff ) ) ) , and ( ( projects ) satisfied that ( ( project of staff ) equal to ( code of enzyme ) ) ) ) , ordered by ( ( name of enzyme ),( name of addresses ) )",
    "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2": "( characteristic name of student ) that belongs to ( ( products ) , and ( ( product characteristics ) satisfied that ( ( product id of club ) equal to ( product id of member of club ) ) ) , and ( ( characteristics ) satisfied that ( ( characteristic id of member of club ) equal to ( characteristic id of student ) ) ) ) , grouped by ( characteristic name of student ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT sum(total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.city  =  'London' AND T1.year  =  2018": "( the sum of ( total pounds ) ) that belongs to ( ( purchase ) , and ( ( branch ) satisfied that ( ( branch id of addresses ) equal to ( branch id of staff ) ) ) ) , that have ( ( ( city of staff ) equal to ( 'london' ) ) and ( ( year of addresses ) equal to ( 2018 ) ) )",
    "SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment": "( date of enrolment ) , ( date of completion ) that belongs to ( student course enrolment )",
    "SELECT T2.Name ,  T1.College_Location FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID ORDER BY T2.Name ASC": "( name of staff ) , ( college location of addresses ) that belongs to ( ( college ) , and ( ( member ) satisfied that ( ( college id of addresses ) equal to ( college id of staff ) ) ) ) , ordered by ( ( name of staff ) in ascending order )",
    "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1": "( email address of club ) that belongs to ( ( customers ) , and ( ( complaints ) satisfied that ( ( customer id of club ) equal to ( customer id of member of club ) ) ) ) , grouped by ( customer id of club ) , ordered by ( ( the number of ( all items ) ) ) , limited to the top ( 1 )",
    "SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\"": "( distinct ( customer details of addresses ) ) that belongs to ( ( customers ) , and ( ( orders ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , that have ( ( order status of staff ) equal to ( on road ) )",
    "SELECT DISTINCT name FROM nurse ORDER BY name": "( distinct ( name ) ) that belongs to ( nurse ) , ordered by ( ( name ) )",
    "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010": "( id ) that belongs to ( teaches ) , that have ( ( ( semester ) equal to ( 'fall' ) ) and ( ( year ) equal to ( 2009 ) ) ), and except that ( ( id ) that belongs to ( teaches ) , that have ( ( ( semester ) equal to ( 'spring' ) ) and ( ( year ) equal to ( 2010 ) ) ))",
    "SELECT avg(age) ,  job FROM Person GROUP BY job": "( the average of ( age ) ) , ( job ) that belongs to ( person ) , grouped by ( job )",
    "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'": "( the sum of ( acc bal ) ) that belongs to ( customer ) , that have ( ( ( state ) equal to ( 'utah' ) ) or ( ( state ) equal to ( 'texas' ) ) )",
    "SELECT College ,  COUNT(*) FROM submission GROUP BY College": "( college ) , ( the number of ( all items ) ) that belongs to ( submission ) , grouped by ( college )",
    "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC": "( total points ) that belongs to ( gymnast ) , ordered by ( ( floor exercise points ) in descending order )",
    "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1": "( city of student ) that belongs to ( ( customers ) , and ( ( customer addresses ) satisfied that ( ( customer id of club ) equal to ( customer id of member of club ) ) ) , and ( ( addresses ) satisfied that ( ( address id of member of club ) equal to ( address id of student ) ) ) ) , grouped by ( city of student ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT StuID FROM Student WHERE Sex  =  'M'": "( stuid ) that belongs to ( student ) , that have ( ( sex ) equal to ( 'm' ) )",
    "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'": "( title ) that belongs to ( film ) , that have ( ( special_features ) like ( '%deleted scenes%' ) )",
    "SELECT apt_number ,  room_count FROM Apartments": "( apt number ) , ( room count ) that belongs to ( apartments )",
    "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"": "( date of enrolment of addresses ) , ( date of completion of addresses ) that belongs to ( ( student course enrolment ) , and ( ( students ) satisfied that ( ( student id of addresses ) equal to ( student id of staff ) ) ) ) , that have ( ( ( family name of staff ) equal to ( zieme ) ) and ( ( personal name of staff ) equal to ( bernie ) ) )",
    "SELECT T2.name ,  T1.category_id ,  count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id  =  T2.category_id GROUP BY T1.category_id": "( name of staff ) , ( category id of addresses ) , ( the number of ( all items ) ) that belongs to ( ( film category ) , and ( ( category ) satisfied that ( ( category id of addresses ) equal to ( category id of staff ) ) ) ) , grouped by ( category id of addresses )",
    "SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id": "( order id ) , ( the number of ( distinct ( product id ) ) ) that belongs to ( order items ) , grouped by ( order id )",
    "SELECT creation ,  name ,  budget_in_billions FROM department": "( creation ) , ( name ) , ( budget in billions ) that belongs to ( department )",
    "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'": "( name ) that belongs to ( person ), and except that ( ( name of staff ) that belongs to ( ( person ) , and ( ( personfriend ) satisfied that ( ( name of addresses ) equal to ( friend of staff ) ) ) ) , that have ( ( job of addresses ) equal to ( 'student' ) ))",
    "SELECT avg(enrollment) FROM university WHERE founded  <  1850": "( the average of ( enrollment ) ) that belongs to ( university ) , that have ( ( founded ) less than ( 1850 ) )",
    "SELECT T1.country ,  T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";": "( country of addresses ) , ( state province county of addresses ) that belongs to ( ( addresses ) , and ( ( staff ) satisfied that ( ( address id of addresses ) equal to ( staff address id of staff ) ) ) ) , that have ( ( ( first name of staff ) equal to ( janessa ) ) and ( ( last name of staff ) equal to ( sawayn ) ) )",
    "SELECT count(DISTINCT allergytype) FROM Allergy_type": "( the number of ( distinct ( allergytype ) ) ) that belongs to ( allergy type )",
    "SELECT DISTINCT T2.source_system_code FROM customer_master_index AS T1 JOIN cmi_cross_references AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T1.cmi_details  =  'Gottlieb ,  Becker and Wyman'": "( distinct ( source system code of staff ) ) that belongs to ( ( customer master index ) , and ( ( cmi cross references ) satisfied that ( ( master customer id of addresses ) equal to ( master customer id of staff ) ) ) ) , that have ( ( cmi details of addresses ) equal to ( 'gottlieb , becker and wyman' ) )",
    "SELECT T1.School_name ,  T1.Mascot ,  T1.IHSAA_Football_Class FROM school AS T1 JOIN budget AS T2 ON T1.school_id  =  T2.school_id WHERE Budgeted  >  6000 OR YEAR  <  2003 ORDER BY T2.total_budget_percent_invested ,  T2.total_budget_percent_budgeted": "( school name of addresses ) , ( mascot of addresses ) , ( ihsaa football class of addresses ) that belongs to ( ( school ) , and ( ( budget ) satisfied that ( ( school id of addresses ) equal to ( school id of staff ) ) ) ) , that have ( ( ( budgeted ) greater than ( 6000 ) ) or ( ( year ) less than ( 2003 ) ) ) , ordered by ( ( total budget percent invested of staff ),( total budget percent budgeted of staff ) )",
    "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1": "( amount settled ) , ( amount claimed ) that belongs to ( claims ) , ordered by ( ( amount settled ) in ascending order ) , limited to the top ( 1 )",
    "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"": "( distinct ( fname of club ) ) , ( lname of club ) that belongs to ( ( authors ) , and ( ( authorship ) satisfied that ( ( authid of club ) equal to ( authid of member of club ) ) ) , and ( ( inst ) satisfied that ( ( instid of member of club ) equal to ( instid of student ) ) ) ) , that have ( ( name of student ) equal to ( google ) )",
    "SELECT T2.budget_type_code ,  T2.budget_type_description ,  T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code  =  T2.budget_type_code": "( budget type code of staff ) , ( budget type description of staff ) , ( document id of addresses ) that belongs to ( ( documents with expenses ) , and ( ( ref budget codes ) satisfied that ( ( budget type code of addresses ) equal to ( budget type code of staff ) ) ) )",
    "SELECT address_content FROM addresses WHERE city  =  \"East Julianaside\" AND state_province_county  =  \"Texas\" UNION SELECT address_content FROM addresses WHERE city  =  \"Gleasonmouth\" AND state_province_county  =  \"Arizona\"": "( address content ) that belongs to ( addresses ) , that have ( ( ( city ) equal to ( east julianaside ) ) and ( ( state province county ) equal to ( texas ) ) ) and ( address content ) that belongs to ( addresses ) , that have ( ( ( city ) equal to ( gleasonmouth ) ) and ( ( state province county ) equal to ( arizona ) ) )",
    "SELECT max(used_kb) , min(used_kb) , avg(used_kb) FROM screen_mode;": "( the maximum of ( used kb ) ) , ( the minimum of ( used kb ) ) , ( the average of ( used kb ) ) that belongs to ( screen mode )",
    "SELECT T3.name ,  T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id ORDER BY T1.register_year": "( name of enzyme ) , ( name of staff ) that belongs to ( ( membership register branch ) , and ( ( branch ) satisfied that ( ( branch id of addresses ) equal to ( branch id of staff ) ) ) , and ( ( member ) satisfied that ( ( member id of addresses ) equal to ( member id of enzyme ) ) ) ) , ordered by ( ( register year of addresses ) )",
    "SELECT count(*) FROM Band": "( the number of ( all items ) ) that belongs to ( band )",
    "SELECT count(*) FROM Faculty": "( the number of ( all items ) ) that belongs to ( faculty )",
    "SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID": "( name of staff ) , ( theme of enzyme ) that belongs to ( ( journal committee ) , and ( ( editor ) satisfied that ( ( editor id of addresses ) equal to ( editor id of staff ) ) ) , and ( ( journal ) satisfied that ( ( journal id of addresses ) equal to ( journal id of enzyme ) ) ) )",
    "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\"": "( distinct ( name of staff ) ) that belongs to ( ( climber ) , and ( ( mountain ) satisfied that ( ( mountain id of addresses ) equal to ( mountain id of staff ) ) ) ) , that have ( ( country of addresses ) equal to ( west germany ) )",
    "SELECT count(DISTINCT nationality) FROM swimmer": "( the number of ( distinct ( nationality ) ) ) that belongs to ( swimmer )",
    "SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'": "( the average of ( age ) ) , ( the minimum of ( age ) ) that belongs to ( artist ) , that have ( ( country ) equal to ( 'united states' ) )",
    "SELECT T1.line_1 ,  avg(T2.monthly_rental) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id": "( line 1 of addresses ) , ( the average of ( monthly rental of staff ) ) that belongs to ( ( addresses ) , and ( ( student addresses ) satisfied that ( ( address id of addresses ) equal to ( address id of staff ) ) ) ) , grouped by ( address id of staff )",
    "SELECT Name FROM wrestler ORDER BY Days_held DESC": "( name ) that belongs to ( wrestler ) , ordered by ( ( days held ) in descending order )",
    "SELECT count(*) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Beijing'": "( the number of ( all items ) ) that belongs to ( manufacturers ) , that have ( ( ( headquarter ) equal to ( 'tokyo' ) ) or ( ( headquarter ) equal to ( 'beijing' ) ) )",
    "SELECT first_name ,  middle_name ,  last_name FROM Staff;": "( first name ) , ( middle name ) , ( last name ) that belongs to ( staff )",
    "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID": "( the average of ( age of staff ) ) that belongs to ( ( gymnast ) , and ( ( people ) satisfied that ( ( gymnast id of addresses ) equal to ( people id of staff ) ) ) )",
    "SELECT T1.Festival_ID ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID HAVING COUNT(*)  >=  2": "( festival id of addresses ) , ( festival name of enzyme ) that belongs to ( ( nomination ) , and ( ( artwork ) satisfied that ( ( artwork id of addresses ) equal to ( artwork id of staff ) ) ) , and ( ( festival detail ) satisfied that ( ( festival id of addresses ) equal to ( festival id of enzyme ) ) ) ) , grouped by ( festival id of addresses ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1": "( activity name of addresses ) that belongs to ( ( activity ) , and ( ( participates in ) satisfied that ( ( actid of addresses ) equal to ( actid of staff ) ) ) ) , grouped by ( actid of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT Character ,  Duration FROM actor": "( character ) , ( duration ) that belongs to ( actor )",
    "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10": "( problem log id ) , ( log entry date ) that belongs to ( problem log ) , that have ( ( problem id ) equal to ( 10 ) )",
    "SELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2": "( address line 1 of addresses ) , ( author id of staff ) that belongs to ( ( course authors and tutors ) , and ( ( courses ) satisfied that ( ( author id of addresses ) equal to ( author id of staff ) ) ) ) , grouped by ( author id of staff ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT document_status_code FROM Ref_Document_Status;": "( document status code ) that belongs to ( ref document status )",
    "SELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id": "( club id of addresses ) , ( club name of addresses ) , ( the number of ( all items ) ) that belongs to ( ( club ) , and ( ( coach ) satisfied that ( ( club id of addresses ) equal to ( club id of staff ) ) ) ) , grouped by ( club id of addresses )",
    "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017": "( name of addresses ) that belongs to ( ( races ) , and ( ( circuits ) satisfied that ( ( circuitid of addresses ) equal to ( circuitid of staff ) ) ) ) , that have ( ( ( country of staff ) equal to ( spain ) ) and ( ( year of addresses ) greater than ( 2017 ) ) )",
    "SELECT avg(Money_Requested) FROM entrepreneur": "( the average of ( money requested ) ) that belongs to ( entrepreneur )",
    "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3": "( college ) that belongs to ( match season ) , grouped by ( college ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 3 )",
    "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Lacey\" AND T3.staff_last_name = \"Bosco\" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Kenton\" AND T3.staff_last_name = \"Champlin\"": "( product name of staff ) that belongs to ( ( problems ) join ( ( product ) ) , and ( ( staff ) satisfied that ( ( ( product id of addresses ) equal to ( product id of staff ) ) and ( ( reported by staff id of addresses ) equal to ( staff id of enzyme ) ) ) ) ) , that have ( ( ( staff first name of enzyme ) equal to ( lacey ) ) and ( ( staff last name of enzyme ) equal to ( bosco ) ) ), and intersect with ( ( product name of staff ) that belongs to ( ( problems ) join ( ( product ) ) , and ( ( staff ) satisfied that ( ( ( product id of addresses ) equal to ( product id of staff ) ) and ( ( reported by staff id of addresses ) equal to ( staff id of enzyme ) ) ) ) ) , that have ( ( ( staff first name of enzyme ) equal to ( kenton ) ) and ( ( staff last name of enzyme ) equal to ( champlin ) ) ))",
    "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1": "( payment method of club ) that belongs to ( ( customers ) , and ( ( customer orders ) satisfied that ( ( customer id of club ) equal to ( customer id of member of club ) ) ) , and ( ( order items ) satisfied that ( ( order id of member of club ) equal to ( order id of student ) ) ) ) , grouped by ( customer name of club ) , ordered by ( ( the sum of ( order quantity of student ) ) ) , limited to the top ( 1 )",
    "SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price)  >  (SELECT avg(product_price) FROM products)": "( product type code ) that belongs to ( products ) , grouped by ( product type code ) , that have ( ( the average of ( product price ) ) greater than ( the average of ( product price ) ) that belongs to ( products ) )",
    "SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.booked_amount  =  102.76": "( product description of staff ) that belongs to ( ( products booked ) , and ( ( products for hire ) satisfied that ( ( product id of addresses ) equal to ( product id of staff ) ) ) ) , that have ( ( booked amount of addresses ) equal to ( 76 of 102 ) )",
    "SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"advanced database\"": "( login name of addresses ) that belongs to ( ( course authors and tutors ) , and ( ( courses ) satisfied that ( ( author id of addresses ) equal to ( author id of staff ) ) ) ) , that have ( ( course name of staff ) equal to ( advanced database ) )",
    "SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1": "( first name of addresses ) , ( last name of addresses ) that belongs to ( ( customer ) , and ( ( rental ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , ordered by ( ( rental date of staff ) in ascending order ) , limited to the top ( 1 )",
    "SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major = 600;": "( fname ) , ( lname ) that belongs to ( student ) , that have ( ( ( age ) greater than ( 18 ) ) and ( ( major ) equal to ( 600 ) ) )",
    "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\"": "( the number of ( all items ) ) that belongs to ( ( club ) , and ( ( member of club ) satisfied that ( ( clubid of club ) equal to ( clubid of member of club ) ) ) , and ( ( student ) satisfied that ( ( stuid of member of club ) equal to ( stuid of student ) ) ) ) , that have ( ( ( fname of student ) equal to ( tracy ) ) and ( ( lname of student ) equal to ( kim ) ) )",
    "SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;": "( city ) that belongs to ( park ) , grouped by ( city ) , that have ( ( the number of ( all items ) ) between ( 2 ) and ( 4 ) )",
    "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )": "( the number of ( all items ) ) that belongs to ( ref colors ) , that have ( ( color_code ) not in ( ( color code ) that belongs to ( products ) ) )",
    "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\"": "( staff name of addresses ) , ( staff gender of addresses ) that belongs to ( ( staff ) , and ( ( staff department assignments ) satisfied that ( ( staff id of addresses ) equal to ( staff id of staff ) ) ) ) , that have ( ( job title code of staff ) equal to ( sales person ) ), and except that ( ( staff name of addresses ) , ( staff gender of addresses ) that belongs to ( ( staff ) , and ( ( staff department assignments ) satisfied that ( ( staff id of addresses ) equal to ( staff id of staff ) ) ) ) , that have ( ( job title code of staff ) equal to ( clerical staff ) ))",
    "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1": "( dept name ) that belongs to ( instructor ) , grouped by ( dept name ) , ordered by ( ( the average of ( salary ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT avg(Gold) FROM club_rank": "( the average of ( gold ) ) that belongs to ( club rank )",
    "SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')": "( distinct ( cname ) ) that belongs to ( college ) , that have ( ( enr ) greater than ( the minimum of ( enr ) ) that belongs to ( college ) , that have ( ( state ) equal to ( 'fl' ) ) )",
    "SELECT count(DISTINCT rank) FROM captain": "( the number of ( distinct ( rank ) ) ) that belongs to ( captain )",
    "SELECT Name FROM pilot WHERE Age  >=  25": "( name ) that belongs to ( pilot ) , that have ( ( age ) greater than or equal to ( 25 ) )",
    "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Marcelle\"": "( name of addresses ) that belongs to ( ( tourist attractions ) join ( ( visitors ) ) , and ( ( visits ) satisfied that ( ( ( tourist attraction id of addresses ) equal to ( tourist attraction id of enzyme ) ) and ( ( tourist id of staff ) equal to ( tourist id of enzyme ) ) ) ) ) , that have ( ( tourist details of staff ) equal to ( vincent ) ), and intersect with ( ( name of addresses ) that belongs to ( ( tourist attractions ) join ( ( visitors ) ) , and ( ( visits ) satisfied that ( ( ( tourist attraction id of addresses ) equal to ( tourist attraction id of enzyme ) ) and ( ( tourist id of staff ) equal to ( tourist id of enzyme ) ) ) ) ) , that have ( ( tourist details of staff ) equal to ( marcelle ) ))",
    "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\"": "( building full name ) that belongs to ( apartment buildings ) , that have ( ( building_full_name ) like ( %court% ) )",
    "SELECT * FROM Albums WHERE YEAR  =  2010": "all items that belongs to ( albums ) , that have ( ( year ) equal to ( 2010 ) )",
    "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Le Pop\"": "( instrument of trip ) that belongs to ( ( performance ) , and ( ( band ) satisfied that ( ( bandmate of addresses ) equal to ( id of staff ) ) ) , and ( ( songs ) satisfied that ( ( songid of enzyme ) equal to ( songid of addresses ) ) ) , and ( ( instruments ) satisfied that ( ( ( songid of trip ) equal to ( songid of enzyme ) ) and ( ( bandmateid of trip ) equal to ( id of staff ) ) ) ) ) , that have ( ( ( lastname of staff ) equal to ( heilo ) ) and ( ( title of enzyme ) equal to ( le pop ) ) )",
    "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')": "( name ) , ( salary ) that belongs to ( instructor ) , that have ( ( salary ) less than ( the average of ( salary ) ) that belongs to ( instructor ) , that have ( ( dept name ) equal to ( 'physics' ) ) )",
    "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\" AND T2.languages  =  \"bangla\"": "( country of addresses ) that belongs to ( ( artist ) , and ( ( song ) satisfied that ( ( artist name of addresses ) equal to ( artist name of staff ) ) ) ) , that have ( ( ( gender of addresses ) equal to ( female ) ) and ( ( languages of staff ) equal to ( bangla ) ) )",
    "SELECT avg(balance) FROM checking": "( the average of ( balance ) ) that belongs to ( checking )",
    "SELECT T1.name_first , T1.name_last ,  T1.player_id ,   count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1;": "( name first of addresses ) , ( name last of addresses ) , ( player id of addresses ) , ( the number of ( all items ) ) that belongs to ( ( player ) , and ( ( all star ) satisfied that ( ( player id of addresses ) equal to ( player id of staff ) ) ) ) , grouped by ( player id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\"": "( product id ) that belongs to ( ( problems ) , and ( ( staff ) satisfied that ( ( reported by staff id of addresses ) equal to ( staff id of staff ) ) ) ) , that have ( ( ( staff first name of staff ) equal to ( christop ) ) and ( ( staff last name of staff ) equal to ( berge ) ) ), and intersect with ( ( product id ) that belongs to ( ( problems ) , and ( ( staff ) satisfied that ( ( closure authorised by staff id of addresses ) equal to ( staff id of staff ) ) ) ) , that have ( ( ( staff first name of staff ) equal to ( ashley ) ) and ( ( staff last name of staff ) equal to ( medhurst ) ) ))",
    "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  \"Orange\")": "( campus of addresses ) that belongs to ( ( campuses ) , and ( ( faculty ) satisfied that ( ( id of addresses ) equal to ( campus of staff ) ) ) ) , that have ( ( ( year of staff ) equal to ( 2002 ) ) and ( ( faculty ) greater than ( the maximum of ( faculty ) ) that belongs to ( ( campuses ) , and ( ( faculty ) satisfied that ( ( id of addresses ) equal to ( campus of staff ) ) ) ) , that have ( ( ( year of staff ) equal to ( 2002 ) ) and ( ( county of addresses ) equal to ( orange ) ) ) ) )",
    "SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code;": "( customer status code ) , ( the number of ( all items ) ) that belongs to ( customers ) , grouped by ( customer status code )",
    "SELECT name FROM buildings ORDER BY Height DESC": "( name ) that belongs to ( buildings ) , ordered by ( ( height ) in descending order )",
    "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')": "( the number of ( distinct ( name ) ) ) that belongs to ( products ) , that have ( ( name ) not in ( ( name of addresses ) that belongs to ( ( products ) , and ( ( manufacturers ) satisfied that ( ( manufacturer of addresses ) equal to ( code of staff ) ) ) ) , that have ( ( name of staff ) equal to ( 'sony' ) ) ) )",
    "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')": "( fname of addresses ) , ( age of addresses ) that belongs to ( ( student ) , and ( ( lives in ) satisfied that ( ( stuid of addresses ) equal to ( stuid of staff ) ) ) ) , that have ( ( t2.dormid ) not in ( ( dormid of enzyme ) that belongs to ( ( has amenity ) , and ( ( dorm amenity ) satisfied that ( ( amenid of enzyme ) equal to ( amenid of trip ) ) ) ) , that have ( ( amenity name of trip ) equal to ( 'tv lounge' ) ) ) )",
    "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1": "( lat of addresses ) , ( long of addresses ) , ( city of addresses ) that belongs to ( ( station ) , and ( ( trip ) satisfied that ( ( id of addresses ) equal to ( start station id of staff ) ) ) ) , ordered by ( ( duration of staff ) ) , limited to the top ( 1 )",
    "SELECT title FROM course ORDER BY title ,  credits": "( title ) that belongs to ( course ) , ordered by ( ( title ),( credits ) )",
    "SELECT count(DISTINCT Status) FROM city": "( the number of ( distinct ( status ) ) ) that belongs to ( city )",
    "SELECT avg(HS) FROM Player": "( the average of ( hs ) ) that belongs to ( player )",
    "SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)": "( name ) that belongs to ( manufacturers ) , that have ( ( revenue ) greater than ( the average of ( revenue ) ) that belongs to ( manufacturers ) )",
    "SELECT council_tax_id ,  cmi_cross_ref_id FROM parking_fines": "( council tax id ) , ( cmi cross ref id ) that belongs to ( parking fines )",
    "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id": "( title of staff ) , ( the maximum of ( price of addresses ) ) that belongs to ( ( schedule ) , and ( ( film ) satisfied that ( ( film id of addresses ) equal to ( film id of staff ) ) ) ) , grouped by ( film id of addresses )",
    "SELECT pets_allowed_yn ,  avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn": "( pets allowed yn ) , ( the average of ( price range ) ) that belongs to ( hotels ) , grouped by ( pets allowed yn )",
    "SELECT DISTINCT YEAR FROM competition WHERE Competition_type != \"Tournament\"": "( distinct ( year ) ) that belongs to ( competition ) , that have ( ( competition type ) not equal to ( tournament ) )",
    "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1": "( name of club ) , ( sex of club ) that belongs to ( ( people ) , and ( ( candidate ) satisfied that ( ( people id of club ) equal to ( people id of member of club ) ) ) ) , ordered by ( ( support rate of member of club ) in descending order ) , limited to the top ( 1 )",
    "SELECT Payment_ID ,  Date_Payment_Made ,  Amount_Payment FROM Payments WHERE Payment_Method_Code  =  'Visa'": "( payment id ) , ( date payment made ) , ( amount payment ) that belongs to ( payments ) , that have ( ( payment method code ) equal to ( 'visa' ) )",
    "SELECT RESULT FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1": "( result ) that belongs to ( music festival ) , grouped by ( result ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT Headquarters ,  Industry FROM company": "( headquarters ) , ( industry ) that belongs to ( company )",
    "SELECT investor_id ,  avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY investor_id": "( investor id ) , ( the average of ( amount of transaction ) ) that belongs to ( transactions ) , grouped by ( investor id )",
    "SELECT product_category_description ,  unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\"": "( product category description ) , ( unit of measure ) that belongs to ( ref product categories ) , that have ( ( product category code ) equal to ( herbs ) )",
    "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"": "( salary ) , ( manager id ) that belongs to ( employees ) , that have ( ( manager_id ) is existed )",
    "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.firstname  =  \"Marianne\"": "( title of enzyme ) that belongs to ( ( performance ) , and ( ( band ) satisfied that ( ( bandmate of addresses ) equal to ( id of staff ) ) ) , and ( ( songs ) satisfied that ( ( songid of enzyme ) equal to ( songid of addresses ) ) ) ) , that have ( ( firstname of staff ) equal to ( marianne ) )",
    "SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" OR T2.Tourist_Details  =  \"Vivian\"": "( name of addresses ) , ( visit date of enzyme ) that belongs to ( ( tourist attractions ) join ( ( visitors ) ) , and ( ( visits ) satisfied that ( ( ( tourist attraction id of addresses ) equal to ( tourist attraction id of enzyme ) ) and ( ( tourist id of staff ) equal to ( tourist id of enzyme ) ) ) ) ) , that have ( ( ( tourist details of staff ) equal to ( vincent ) ) or ( ( tourist details of staff ) equal to ( vivian ) ) )",
    "SELECT nurse FROM on_call WHERE blockfloor  =  1 AND blockcode  =  1": "( nurse ) that belongs to ( on call ) , that have ( ( ( blockfloor ) equal to ( 1 ) ) and ( ( blockcode ) equal to ( 1 ) ) )",
    "SELECT T1.personal_name ,  T1.family_name ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1": "( personal name of addresses ) , ( family name of addresses ) , ( author id of staff ) that belongs to ( ( course authors and tutors ) , and ( ( courses ) satisfied that ( ( author id of addresses ) equal to ( author id of staff ) ) ) ) , grouped by ( author id of staff ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT employee_name ,  role_code ,  date_of_birth FROM Employees WHERE employee_Name  =  'Armani'": "( employee name ) , ( role code ) , ( date of birth ) that belongs to ( employees ) , that have ( ( employee name ) equal to ( 'armani' ) )",
    "SELECT COUNT(DISTINCT Artist_ID) FROM volume": "( the number of ( distinct ( artist id ) ) ) that belongs to ( volume )",
    "SELECT Sponsor_name FROM player WHERE Residence  =  \"Brandon\" OR Residence  =  \"Birtle\"": "( sponsor name ) that belongs to ( player ) , that have ( ( ( residence ) equal to ( brandon ) ) or ( ( residence ) equal to ( birtle ) ) )",
    "SELECT count(*) FROM company": "( the number of ( all items ) ) that belongs to ( company )",
    "SELECT languages FROM song GROUP BY languages ORDER BY count(*) DESC LIMIT 1": "( languages ) that belongs to ( song ) , grouped by ( languages ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT max(customer_code) ,  min(customer_code) FROM Customers": "( the maximum of ( customer code ) ) , ( the minimum of ( customer code ) ) that belongs to ( customers )",
    "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1": "( f id ) that belongs to ( files ) , ordered by ( ( duration ) in descending order ) , limited to the top ( 1 )",
    "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'": "( country ) that belongs to ( competition ), and except that ( ( country ) that belongs to ( competition ) , that have ( ( competition type ) equal to ( 'friendly' ) ))",
    "SELECT DISTINCT Director FROM film": "( distinct ( director ) ) that belongs to ( film )",
    "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')": "( name ) that belongs to ( instructor ) , that have ( ( id ) not in ( ( id ) that belongs to ( teaches ) , that have ( ( semester ) equal to ( 'spring' ) ) ) )",
    "SELECT Name FROM Products": "( name ) that belongs to ( products )",
    "SELECT Player FROM match_season WHERE College  =  \"UCLA\"": "( player ) that belongs to ( match season ) , that have ( ( college ) equal to ( ucla ) )",
    "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"": "( flno of addresses ) that belongs to ( ( flight ) , and ( ( aircraft ) satisfied that ( ( aid of addresses ) equal to ( aid of staff ) ) ) ) , that have ( ( name of staff ) equal to ( airbus a340-300 ) )",
    "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"": "( artist name ) that belongs to ( artist ) , that have ( ( country ) equal to ( uk ) ), and intersect with ( ( artist name ) that belongs to ( song ) , that have ( ( languages ) equal to ( english ) ))",
    "SELECT Date_of_ceremony ,  RESULT FROM music_festival": "( date of ceremony ) , ( result ) that belongs to ( music festival )",
    "SELECT count(*) FROM Person WHERE age  >  30 AND job  =  'engineer'": "( the number of ( all items ) ) that belongs to ( person ) , that have ( ( ( age ) greater than ( 30 ) ) and ( ( job ) equal to ( 'engineer' ) ) )",
    "SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking'": "( cust name ) that belongs to ( customer ) , that have ( ( acc type ) equal to ( 'saving' ) ), and intersect with ( ( cust name ) that belongs to ( customer ) , that have ( ( acc type ) equal to ( 'checking' ) ))",
    "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\"": "( product id ) that belongs to ( ( problems ) , and ( ( staff ) satisfied that ( ( reported by staff id of addresses ) equal to ( staff id of staff ) ) ) ) , that have ( ( ( staff first name of staff ) equal to ( dameon ) ) and ( ( staff last name of staff ) equal to ( frami ) ) ) and ( product id ) that belongs to ( ( problems ) , and ( ( staff ) satisfied that ( ( reported by staff id of addresses ) equal to ( staff id of staff ) ) ) ) , that have ( ( ( staff first name of staff ) equal to ( jolie ) ) and ( ( staff last name of staff ) equal to ( weber ) ) )",
    "SELECT season ,  home_team ,  away_team FROM game": "( season ) , ( home team ) , ( away team ) that belongs to ( game )",
    "SELECT count(*) FROM airport WHERE id NOT IN ( SELECT airport_id FROM flight WHERE pilot  =  'Thompson' );": "( the number of ( all items ) ) that belongs to ( airport ) , that have ( ( id ) not in ( ( airport id ) that belongs to ( flight ) , that have ( ( pilot ) equal to ( 'thompson' ) ) ) )",
    "SELECT Title FROM book WHERE Writer != \"Elaine Lee\"": "( title ) that belongs to ( book ) , that have ( ( writer ) not equal to ( elaine lee ) )",
    "SELECT name_first ,  name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id WHERE YEAR  =  1998": "( name first ) , ( name last ) that belongs to ( ( player ) , and ( ( all star ) satisfied that ( ( player id of addresses ) equal to ( player id of staff ) ) ) ) , that have ( ( year ) equal to ( 1998 ) )",
    "SELECT Carrier FROM phone GROUP BY Carrier ORDER BY COUNT(*) DESC LIMIT 1": "( carrier ) that belongs to ( phone ) , grouped by ( carrier ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) EXCEPT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)": "( name of addresses ) that belongs to ( ( person ) , and ( ( personfriend ) satisfied that ( ( name of addresses ) equal to ( name of staff ) ) ) ) , that have ( ( t2.friend ) in ( ( name ) that belongs to ( person ) , that have ( ( age ) greater than ( 40 ) ) ) ), and except that ( ( name of addresses ) that belongs to ( ( person ) , and ( ( personfriend ) satisfied that ( ( name of addresses ) equal to ( name of staff ) ) ) ) , that have ( ( t2.friend ) in ( ( name ) that belongs to ( person ) , that have ( ( age ) less than ( 30 ) ) ) ))",
    "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)": "( name of addresses ) that belongs to ( ( accounts ) , and ( ( checking ) satisfied that ( ( custid of addresses ) equal to ( custid of staff ) ) ) ) , that have ( ( balance of staff ) greater than ( the average of ( balance ) ) that belongs to ( checking ) ), and intersect with ( ( name of addresses ) that belongs to ( ( accounts ) , and ( ( savings ) satisfied that ( ( custid of addresses ) equal to ( custid of staff ) ) ) ) , that have ( ( balance of staff ) less than ( the average of ( balance ) ) that belongs to ( savings ) ))",
    "SELECT t1.name ,  t1.capacity FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id WHERE t2.name  =  'World Junior'": "( name of club ) , ( capacity of club ) that belongs to ( ( stadium ) , and ( ( event ) satisfied that ( ( id of club ) equal to ( stadium id of member of club ) ) ) ) , that have ( ( name of member of club ) equal to ( 'world junior' ) )",
    "SELECT T1.cmi_details FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T2.source_system_code  =  'Tax'": "( cmi details of addresses ) that belongs to ( ( customer master index ) , and ( ( cmi cross references ) satisfied that ( ( master customer id of addresses ) equal to ( master customer id of staff ) ) ) ) , that have ( ( source system code of staff ) equal to ( 'tax' ) )",
    "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"": "( name of enzyme ) that belongs to ( ( physician ) , and ( ( trained in ) satisfied that ( ( employeeid of addresses ) equal to ( physician of staff ) ) ) , and ( ( procedures ) satisfied that ( ( code of enzyme ) equal to ( treatment of staff ) ) ) ) , that have ( ( name of addresses ) equal to ( john wen ) )",
    "SELECT T1.part_name ,  T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_id HAVING count(*)  >  2": "( part name of addresses ) , ( part id of addresses ) that belongs to ( ( parts ) , and ( ( part faults ) satisfied that ( ( part id of addresses ) equal to ( part id of staff ) ) ) ) , grouped by ( part id of addresses ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )",
    "SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3": "( publication date ) that belongs to ( publication ) , ordered by ( ( price ) in ascending order ) , limited to the top ( 3 )",
    "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"stop\"": "( store name of staff ) that belongs to ( ( bookings ) , and ( ( drama workshop groups ) satisfied that ( ( workshop group id of addresses ) equal to ( workshop group id of staff ) ) ) ) , that have ( ( status code of addresses ) equal to ( stop ) )",
    "SELECT building FROM Faculty WHERE rank  =  \"Professor\" GROUP BY building HAVING count(*)  >=  10": "( building ) that belongs to ( faculty ) , that have ( ( rank ) equal to ( professor ) ) , grouped by ( building ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 10 ) )",
    "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid": "( the number of ( all items ) ) , ( constructorid ) that belongs to ( constructorstandings ) , grouped by ( constructorid )",
    "SELECT Store_Name FROM Drama_Workshop_Groups": "( store name ) that belongs to ( drama workshop groups )",
    "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \"Uganda\"": "( time of addresses ) that belongs to ( ( climber ) , and ( ( mountain ) satisfied that ( ( mountain id of addresses ) equal to ( mountain id of staff ) ) ) ) , that have ( ( country of staff ) equal to ( uganda ) )",
    "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"": "( studio ) that belongs to ( film ), and except that ( ( studio ) that belongs to ( film ) , that have ( ( director ) equal to ( walter hill ) ))",
    "SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels": "( the average of ( ( active to date ) minus ( active from date ) ) ) that belongs to ( customer contact channels )",
    "SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010": "( distinct ( name ) ) that belongs to ( wine ) , that have ( ( ( year ) less than ( 2000 ) ) or ( ( year ) greater than ( 2010 ) ) )",
    "SELECT DISTINCT headquarter FROM manufacturers": "( distinct ( headquarter ) ) that belongs to ( manufacturers )",
    "SELECT count(*) FROM BOOKINGS": "( the number of ( all items ) ) that belongs to ( bookings )",
    "SELECT count(*) FROM review": "( the number of ( all items ) ) that belongs to ( review )",
    "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"": "( activity name of enzyme ) that belongs to ( ( faculty ) , and ( ( faculty participates in ) satisfied that ( ( facid of addresses ) equal to ( facid of staff ) ) ) , and ( ( activity ) satisfied that ( ( actid of enzyme ) equal to ( actid of staff ) ) ) ) , that have ( ( ( fname of addresses ) equal to ( mark ) ) and ( ( lname of addresses ) equal to ( giuliano ) ) )",
    "SELECT max(Age) FROM STUDENT": "( the maximum of ( age ) ) that belongs to ( student )",
    "SELECT customer_name ,  customer_phone ,  payment_method_code FROM customers ORDER BY customer_number DESC": "( customer name ) , ( customer phone ) , ( payment method code ) that belongs to ( customers ) , ordered by ( ( customer number ) in descending order )",
    "SELECT count(*) FROM pilot": "( the number of ( all items ) ) that belongs to ( pilot )",
    "SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002": "( the sum of ( faculty ) ) that belongs to ( faculty ) , that have ( ( year ) equal to ( 2002 ) )",
    "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1": "( location ) that belongs to ( county public safety ) , grouped by ( location ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT Headquarters FROM company WHERE Industry  =  \"Banking\" INTERSECT SELECT Headquarters FROM company WHERE Industry  =  \"Oil and gas\"": "( headquarters ) that belongs to ( company ) , that have ( ( industry ) equal to ( banking ) ), and intersect with ( ( headquarters ) that belongs to ( company ) , that have ( ( industry ) equal to ( oil and gas ) ))",
    "SELECT name FROM scientists ORDER BY name": "( name ) that belongs to ( scientists ) , ordered by ( ( name ) )",
    "SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'": "( customer name of club ) , ( active from date of member of club ) that belongs to ( ( customers ) , and ( ( customer contact channels ) satisfied that ( ( customer id of club ) equal to ( customer id of member of club ) ) ) ) , that have ( ( channel code of member of club ) equal to ( 'email' ) )",
    "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'": "( the number of ( all items ) ) that belongs to ( ( routes ) , and ( ( airports ) satisfied that ( ( dst apid of addresses ) equal to ( apid of staff ) ) ) ) , that have ( ( country of staff ) equal to ( 'italy' ) )",
    "SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3": "( id of addresses ) , ( name of addresses ) that belongs to ( ( architect ) , and ( ( bridge ) satisfied that ( ( id of addresses ) equal to ( architect id of staff ) ) ) ) , grouped by ( id of addresses ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 3 ) )",
    "SELECT name ,  openning_year ,  capacity FROM cinema": "( name ) , ( openning year ) , ( capacity ) that belongs to ( cinema )",
    "SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION": "( the maximum of ( gradepoint ) ) , ( the minimum of ( gradepoint ) ) that belongs to ( gradeconversion )",
    "SELECT T3.Location ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age": "( location of enzyme ) , ( name of staff ) that belongs to ( ( party host ) , and ( ( host ) satisfied that ( ( host id of addresses ) equal to ( host id of staff ) ) ) , and ( ( party ) satisfied that ( ( party id of addresses ) equal to ( party id of enzyme ) ) ) ) , ordered by ( ( age of staff ) )",
    "SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1": "( first name ) , ( last name ) that belongs to ( actor ) , grouped by ( first name ) , ( last name ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT sportname ,  count(*) FROM Sportsinfo GROUP BY sportname": "( sportname ) , ( the number of ( all items ) ) that belongs to ( sportsinfo ) , grouped by ( sportname )",
    "SELECT avg(product_price) ,  product_category_code FROM products GROUP BY product_category_code": "( the average of ( product price ) ) , ( product category code ) that belongs to ( products ) , grouped by ( product category code )",
    "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"": "( distinct ( position ) ) that belongs to ( match season ) , that have ( ( ( college ) equal to ( ucla ) ) or ( ( college ) equal to ( duke ) ) )",
    "SELECT T2.Party ,  COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party": "( party of staff ) , ( the number of ( all items ) ) that belongs to ( ( election ) , and ( ( party ) satisfied that ( ( party of addresses ) equal to ( party id of staff ) ) ) ) , grouped by ( party of addresses )",
    "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \"food\"": "( distinct ( allergy ) ) that belongs to ( allergy type ) , that have ( ( allergytype ) equal to ( food ) )",
    "SELECT minister ,  party_name FROM party ORDER BY took_office DESC": "( minister ) , ( party name ) that belongs to ( party ) , ordered by ( ( took office ) in descending order )",
    "SELECT T2.Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID ORDER BY T3.Year": "( name of staff ) that belongs to ( ( nomination ) , and ( ( artwork ) satisfied that ( ( artwork id of addresses ) equal to ( artwork id of staff ) ) ) , and ( ( festival detail ) satisfied that ( ( festival id of addresses ) equal to ( festival id of enzyme ) ) ) ) , ordered by ( ( year of enzyme ) )",
    "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"": "( name of staff ) , ( year of staff ) that belongs to ( ( results ) , and ( ( races ) satisfied that ( ( raceid of addresses ) equal to ( raceid of staff ) ) ) , and ( ( drivers ) satisfied that ( ( driverid of addresses ) equal to ( driverid of enzyme ) ) ) ) , that have ( ( forename of enzyme ) equal to ( lewis ) )",
    "SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002": "( school name of staff ) , ( budgeted of addresses ) , ( invested of addresses ) that belongs to ( ( budget ) , and ( ( school ) satisfied that ( ( school id of addresses ) equal to ( school id of staff ) ) ) ) , that have ( ( year of addresses ) greater than or equal to ( 2002 ) )",
    "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC": "( name of staff ) that belongs to ( ( gymnast ) , and ( ( people ) satisfied that ( ( gymnast id of addresses ) equal to ( people id of staff ) ) ) ) , ordered by ( ( height of staff ) in ascending order )",
    "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3": "( flno ) that belongs to ( flight ) , ordered by ( ( distance ) in ascending order ) , limited to the top ( 3 )",
    "SELECT DISTINCT name FROM medication ORDER BY name": "( distinct ( name ) ) that belongs to ( medication ) , ordered by ( ( name ) )",
    "SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"": "( the average of ( room count ) ) that belongs to ( ( apartment bookings ) , and ( ( apartments ) satisfied that ( ( apt id of addresses ) equal to ( apt id of staff ) ) ) ) , that have ( ( booking status code of addresses ) equal to ( provisional ) )",
    "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2": "( county name of addresses ) that belongs to ( ( county ) , and ( ( election ) satisfied that ( ( county id of addresses ) equal to ( district of staff ) ) ) ) , grouped by ( county id of addresses ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT * FROM chip_model": "all items that belongs to ( chip model )",
    "SELECT country FROM airlines WHERE name LIKE 'Orbit%'": "( country ) that belongs to ( airlines ) , that have ( ( name ) like ( 'orbit%' ) )",
    "SELECT other_account_details FROM Accounts WHERE account_name  =  \"338\"": "( other account details ) that belongs to ( accounts ) , that have ( ( account name ) equal to ( 338 ) )",
    "SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\"": "( name ) that belongs to ( tourist attractions ) , that have ( ( how to get there ) equal to ( bus ) )",
    "SELECT customer_name FROM customers WHERE payment_method  =  (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)": "( customer name ) that belongs to ( customers ) , that have ( ( payment method ) equal to ( payment method ) that belongs to ( customers ) , grouped by ( payment method ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 ) )",
    "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Homeland Security'": "( born state of enzyme ) that belongs to ( ( department ) , and ( ( management ) satisfied that ( ( department id of addresses ) equal to ( department id of staff ) ) ) , and ( ( head ) satisfied that ( ( head id of staff ) equal to ( head id of enzyme ) ) ) ) , that have ( ( name of addresses ) equal to ( 'treasury' ) ), and intersect with ( ( born state of enzyme ) that belongs to ( ( department ) , and ( ( management ) satisfied that ( ( department id of addresses ) equal to ( department id of staff ) ) ) , and ( ( head ) satisfied that ( ( head id of staff ) equal to ( head id of enzyme ) ) ) ) , that have ( ( name of addresses ) equal to ( 'homeland security' ) ))",
    "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\"": "( the number of ( all items ) ) that belongs to ( ( club ) , and ( ( member of club ) satisfied that ( ( clubid of club ) equal to ( clubid of member of club ) ) ) , and ( ( student ) satisfied that ( ( stuid of member of club ) equal to ( stuid of student ) ) ) ) , that have ( ( ( fname of student ) equal to ( linda ) ) and ( ( lname of student ) equal to ( smith ) ) )",
    "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000": "( the number of ( all items ) ) that belongs to ( employee ) , that have ( ( salary ) between ( 100000 ) and ( 200000 ) )",
    "SELECT name FROM airport WHERE country != 'Iceland'": "( name ) that belongs to ( airport ) , that have ( ( country ) not equal to ( 'iceland' ) )",
    "SELECT T2.day_Number ,  T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored  =  T2.calendar_date": "( day number of staff ) , ( date stored of addresses ) that belongs to ( ( all documents ) , and ( ( ref calendar ) satisfied that ( ( date stored of addresses ) equal to ( calendar date of staff ) ) ) )",
    "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10": "( the number of ( all items ) ) that belongs to ( ( exhibition record ) , and ( ( exhibition ) satisfied that ( ( exhibition id of addresses ) equal to ( exhibition id of staff ) ) ) ) , that have ( ( ( attendance of addresses ) greater than ( 100 ) ) or ( ( ticket price of staff ) less than ( 10 ) ) )",
    "SELECT count(*) FROM candidate": "( the number of ( all items ) ) that belongs to ( candidate )",
    "SELECT Party ,  COUNT(*) FROM people GROUP BY Party": "( party ) , ( the number of ( all items ) ) that belongs to ( people ) , grouped by ( party )",
    "SELECT DISTINCT classroom ,  grade FROM list": "( distinct ( classroom ) ) , ( grade ) that belongs to ( list )",
    "SELECT count(*) ,  role_code FROM users GROUP BY role_code": "( the number of ( all items ) ) , ( role code ) that belongs to ( users ) , grouped by ( role code )",
    "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1": "( destination ) that belongs to ( flight ) , grouped by ( destination ) , ordered by ( ( the number of ( all items ) ) ) , limited to the top ( 1 )",
    "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\"": "( characteristic name of student ) that belongs to ( ( products ) , and ( ( product characteristics ) satisfied that ( ( product id of club ) equal to ( product id of member of club ) ) ) , and ( ( characteristics ) satisfied that ( ( characteristic id of member of club ) equal to ( characteristic id of student ) ) ) ) , that have ( ( product name of club ) equal to ( sesame ) )",
    "SELECT count(DISTINCT party_name) FROM party": "( the number of ( distinct ( party name ) ) ) that belongs to ( party )",
    "SELECT Name FROM actor ORDER BY Name ASC": "( name ) that belongs to ( actor ) , ordered by ( ( name ) in ascending order )",
    "SELECT avg(Years_working) FROM journalist": "( the average of ( years working ) ) that belongs to ( journalist )",
    "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"": "( name of addresses ) that belongs to ( ( tourist attractions ) join ( ( visitors ) ) , and ( ( visits ) satisfied that ( ( ( tourist attraction id of addresses ) equal to ( tourist attraction id of enzyme ) ) and ( ( tourist id of staff ) equal to ( tourist id of enzyme ) ) ) ) ) , that have ( ( tourist details of staff ) equal to ( alison ) ), and except that ( ( name of addresses ) that belongs to ( ( tourist attractions ) join ( ( visitors ) ) , and ( ( visits ) satisfied that ( ( ( tourist attraction id of addresses ) equal to ( tourist attraction id of enzyme ) ) and ( ( tourist id of staff ) equal to ( tourist id of enzyme ) ) ) ) ) , that have ( ( tourist details of staff ) equal to ( rosalind ) ))",
    "SELECT Snatch ,  Clean_Jerk FROM body_builder ORDER BY Snatch ASC": "( snatch ) , ( clean jerk ) that belongs to ( body builder ) , ordered by ( ( snatch ) in ascending order )",
    "SELECT product_category_code ,  typical_buying_price FROM products WHERE product_name  =  \"cumin\"": "( product category code ) , ( typical buying price ) that belongs to ( products ) , that have ( ( product name ) equal to ( cumin ) )",
    "SELECT name FROM mill WHERE LOCATION != 'Donceel'": "( name ) that belongs to ( mill ) , that have ( ( location ) not equal to ( 'donceel' ) )",
    "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)": "( the number of ( all items ) ) that belongs to ( savings ) , that have ( ( balance ) greater than ( the average of ( balance ) ) that belongs to ( savings ) )",
    "SELECT sportname FROM Sportsinfo WHERE onscholarship  =  'Y' GROUP BY sportname ORDER BY count(*) DESC LIMIT 1": "( sportname ) that belongs to ( sportsinfo ) , that have ( ( onscholarship ) equal to ( 'y' ) ) , grouped by ( sportname ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT DISTINCT Name FROM WINE ORDER BY price": "( distinct ( name ) ) that belongs to ( wine ) , ordered by ( ( price ) )",
    "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1": "( customer name of staff ) that belongs to ( ( mailshot customers ) , and ( ( customers ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , grouped by ( customer id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win'": "( name of club ) that belongs to ( ( swimmer ) , and ( ( record ) satisfied that ( ( id of club ) equal to ( swimmer id of member of club ) ) ) ) , that have ( ( result ) equal to ( 'win' ) )",
    "SELECT avg(Num_of_Factories) FROM manufacturer WHERE num_of_shops  >  20": "( the average of ( num of factories ) ) that belongs to ( manufacturer ) , that have ( ( num of shops ) greater than ( 20 ) )",
    "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)": "( the number of ( all items ) ) that belongs to ( course ) , that have ( ( course_id ) not in ( ( course id ) that belongs to ( prereq ) ) )",
    "SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1;": "( first name of staff ) , ( last name of staff ) , ( the number of ( reports to of addresses ) ) that belongs to ( ( employees ) , and ( ( employees ) satisfied that ( ( reports to of addresses ) equal to ( id of staff ) ) ) ) , grouped by ( reports to of addresses ) , ordered by ( ( the number of ( reports to of addresses ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT t1.customer_name ,  t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'": "( customer name of club ) , ( customer phone of club ) that belongs to ( ( customers ) , and ( ( customer addresses ) satisfied that ( ( customer id of club ) equal to ( customer id of member of club ) ) ) , and ( ( addresses ) satisfied that ( ( address id of member of club ) equal to ( address id of student ) ) ) ) , that have ( ( state province county of student ) equal to ( 'california' ) )",
    "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1": "( dept name ) that belongs to ( student ) , grouped by ( dept name ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT Festival_Name FROM festival_detail ORDER BY YEAR DESC LIMIT 3": "( festival name ) that belongs to ( festival detail ) , ordered by ( ( year ) in descending order ) , limited to the top ( 3 )",
    "SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  \"modern\")": "( f id ) that belongs to ( song ) , that have ( ( resolution ) greater than ( the average of ( resolution ) ) that belongs to ( song ) , that have ( ( genre is ) equal to ( modern ) ) )",
    "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50": "( name ) that belongs to ( airports ) , that have ( ( elevation ) between ( -50 ) and ( 50 ) )",
    "SELECT T1.staff_name ,  count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id GROUP BY T1.staff_name": "( staff name of addresses ) , ( the number of ( all items ) ) that belongs to ( ( staff ) , and ( ( engineer visits ) satisfied that ( ( staff id of addresses ) equal to ( contact staff id of staff ) ) ) ) , grouped by ( staff name of addresses )",
    "SELECT * FROM Albums WHERE YEAR  =  2012": "all items that belongs to ( albums ) , that have ( ( year ) equal to ( 2012 ) )",
    "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')": "( age of addresses ) that belongs to ( ( person ) , and ( ( personfriend ) satisfied that ( ( name of addresses ) equal to ( friend of staff ) ) ) ) , that have ( ( ( name of staff ) equal to ( 'zach' ) ) and ( ( year of staff ) equal to ( the maximum of ( year ) ) that belongs to ( personfriend ) , that have ( ( name ) equal to ( 'zach' ) ) ) )",
    "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"254 Ottilie Junction\" OR T2.How_to_Get_There  =  \"bus\"": "( name of staff ) that belongs to ( ( locations ) , and ( ( tourist attractions ) satisfied that ( ( location id of addresses ) equal to ( location id of staff ) ) ) ) , that have ( ( ( address of addresses ) equal to ( 254 ottilie junction ) ) or ( ( how to get there of staff ) equal to ( bus ) ) )",
    "SELECT count(*) FROM region": "( the number of ( all items ) ) that belongs to ( region )",
    "SELECT gtype FROM Video_games WHERE gname  =  \"Call of Destiny\"": "( gtype ) that belongs to ( video games ) , that have ( ( gname ) equal to ( call of destiny ) )",
    "SELECT Delegate FROM election WHERE District  =  1": "( delegate ) that belongs to ( election ) , that have ( ( district ) equal to ( 1 ) )",
    "SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"": "( customer name ) , ( customer id ) that belongs to ( customers ) , that have ( ( customer_address ) like ( %tn% ) )",
    "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id": "( id of addresses ) , ( installation date of staff ) that belongs to ( ( trip ) , and ( ( station ) satisfied that ( ( end station id of addresses ) equal to ( id of staff ) ) ) )",
    "SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3": "( document name ) that belongs to ( documents ) , grouped by ( document type code ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 3 ), and intersect with ( ( document name ) that belongs to ( documents ) , grouped by ( document structure code ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 3 ))",
    "SELECT dept_address FROM department WHERE dept_name  =  'History'": "( dept address ) that belongs to ( department ) , that have ( ( dept name ) equal to ( 'history' ) )",
    "SELECT sum(hours) FROM projects": "( the sum of ( hours ) ) that belongs to ( projects )",
    "SELECT price_range FROM HOTELS": "( price range ) that belongs to ( hotels )",
    "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3": "( name of staff ) that belongs to ( ( rating ) , and ( ( reviewer ) satisfied that ( ( rid of addresses ) equal to ( rid of staff ) ) ) ) , grouped by ( rid of addresses ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 3 ) )",
    "SELECT OWNER FROM channel ORDER BY rating_in_percent DESC LIMIT 1": "( owner ) that belongs to ( channel ) , ordered by ( ( rating in percent ) in descending order ) , limited to the top ( 1 )",
    "SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars": "( name of enzyme ) , ( title of staff ) , ( stars of addresses ) , ( ratingdate of addresses ) that belongs to ( ( rating ) , and ( ( movie ) satisfied that ( ( mid of addresses ) equal to ( mid of staff ) ) ) , and ( ( reviewer ) satisfied that ( ( rid of addresses ) equal to ( rid of enzyme ) ) ) ) , ordered by ( ( name of enzyme ),( title of staff ),( stars of addresses ) )",
    "SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code  =  T2.product_category_code WHERE T2.product_description LIKE '%t%'": "( product category description of addresses ) that belongs to ( ( ref product categories ) , and ( ( products ) satisfied that ( ( product category code of addresses ) equal to ( product category code of staff ) ) ) ) , that have ( ( t2.product_description ) like ( '%t%' ) )",
    "SELECT product_category ,  count(*) FROM mailshot_campaigns GROUP BY product_category": "( product category ) , ( the number of ( all items ) ) that belongs to ( mailshot campaigns ) , grouped by ( product category )",
    "SELECT avg(hours) FROM projects": "( the average of ( hours ) ) that belongs to ( projects )",
    "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID": "( name of staff ) that belongs to ( ( gymnast ) , and ( ( people ) satisfied that ( ( gymnast id of addresses ) equal to ( people id of staff ) ) ) )",
    "SELECT count(DISTINCT Name) FROM PHOTOS": "( the number of ( distinct ( name ) ) ) that belongs to ( photos )",
    "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'": "( title of addresses ) that belongs to ( ( album ) , and ( ( track ) satisfied that ( ( albumid of addresses ) equal to ( albumid of staff ) ) ) , and ( ( genre ) satisfied that ( ( genreid of staff ) equal to ( genreid of enzyme ) ) ) ) , that have ( ( name of enzyme ) equal to ( 'reggae' ) ), and intersect with ( ( title of addresses ) that belongs to ( ( album ) , and ( ( track ) satisfied that ( ( albumid of addresses ) equal to ( albumid of staff ) ) ) , and ( ( genre ) satisfied that ( ( genreid of staff ) equal to ( genreid of enzyme ) ) ) ) , that have ( ( name of enzyme ) equal to ( 'rock' ) ))",
    "SELECT product_description FROM products WHERE product_name  =  \"Chocolate\"": "( product description ) that belongs to ( products ) , that have ( ( product name ) equal to ( chocolate ) )",
    "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1": "( apt type code ) , ( bathroom count ) , ( bedroom count ) that belongs to ( apartments ) , grouped by ( apt type code ) , ordered by ( ( the sum of ( room count ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)": "all items that belongs to ( employees ) , that have ( ( employee_id ) not in ( ( employee id ) that belongs to ( job history ) ) )",
    "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  \"Astrid\" AND LastName  =  \"Gruber\"": "( invoicedate of staff ) that belongs to ( ( customer ) , and ( ( invoice ) satisfied that ( ( customerid of addresses ) equal to ( customerid of staff ) ) ) ) , that have ( ( ( firstname of addresses ) equal to ( astrid ) ) and ( ( lastname ) equal to ( gruber ) ) )",
    "SELECT name ,  home_city ,  age FROM driver": "( name ) , ( home city ) , ( age ) that belongs to ( driver )",
    "SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures": "( the maximum of ( cost ) ) , ( the minimum of ( cost ) ) , ( the average of ( cost ) ) that belongs to ( procedures )",
    "SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid JOIN Student AS T3 ON T3.Stuid  =  T1.Stuid WHERE T3.Lname  =  \"Smith\" AND T3.Fname  =  \"Linda\"": "( gname ) that belongs to ( ( plays games ) , and ( ( video games ) satisfied that ( ( gameid of addresses ) equal to ( gameid of staff ) ) ) , and ( ( student ) satisfied that ( ( stuid of enzyme ) equal to ( stuid of addresses ) ) ) ) , that have ( ( ( lname of enzyme ) equal to ( smith ) ) and ( ( fname of enzyme ) equal to ( linda ) ) )",
    "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'QM-261'": "( crs credit ) , ( crs description ) that belongs to ( course ) , that have ( ( crs code ) equal to ( 'qm-261' ) )",
    "SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'": "( document name ) , ( document date ) that belongs to ( ( documents ) , and ( ( projects ) satisfied that ( ( project id of addresses ) equal to ( project id of staff ) ) ) ) , that have ( ( project details of staff ) equal to ( 'graph database project' ) )",
    "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1": "( reign ) that belongs to ( wrestler ) , grouped by ( reign ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT 1": "( name of addresses ) that belongs to ( ( useracct ) , and ( ( review ) satisfied that ( ( u id of addresses ) equal to ( u id of staff ) ) ) ) , grouped by ( u id of staff ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1": "( customer name of club ) that belongs to ( ( customers ) , and ( ( customer orders ) satisfied that ( ( customer id of club ) equal to ( customer id of member of club ) ) ) , and ( ( order items ) satisfied that ( ( order id of member of club ) equal to ( order id of student ) ) ) ) , grouped by ( customer name of club ) , ordered by ( ( the sum of ( order quantity of student ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id": "( the number of ( all items ) ) , ( customer id ) that belongs to ( accounts ) , grouped by ( customer id )",
    "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1": "( location ) that belongs to ( cinema ) , that have ( ( capacity ) greater than ( 300 ) ) , grouped by ( location ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)": "( customer details of student ) that belongs to ( ( claim headers ) , and ( ( policies ) satisfied that ( ( policy id of club ) equal to ( policy id of member of club ) ) ) , and ( ( customers ) satisfied that ( ( customer id of member of club ) equal to ( customer id of student ) ) ) ) , that have ( ( amount piad of club ) equal to ( the minimum of ( amount piad ) ) that belongs to ( claim headers ) )",
    "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'": "( pname of addresses ) that belongs to ( ( player ) , and ( ( tryout ) satisfied that ( ( pid of addresses ) equal to ( pid of staff ) ) ) ) , that have ( ( ( decision of staff ) equal to ( 'yes' ) ) and ( ( ppos of staff ) equal to ( 'striker' ) ) )",
    "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Pen and Paper Gaming\"": "( the number of ( all items ) ) that belongs to ( ( club ) , and ( ( member of club ) satisfied that ( ( clubid of club ) equal to ( clubid of member of club ) ) ) , and ( ( student ) satisfied that ( ( stuid of member of club ) equal to ( stuid of student ) ) ) ) , that have ( ( clubname of club ) equal to ( pen and paper gaming ) )",
    "SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  \"Flash\"": "( the number of ( all items ) ) that belongs to ( ( performance ) , and ( ( band ) satisfied that ( ( bandmate of addresses ) equal to ( id of staff ) ) ) , and ( ( songs ) satisfied that ( ( songid of enzyme ) equal to ( songid of addresses ) ) ) ) , that have ( ( title of enzyme ) equal to ( flash ) )",
    "SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id WHERE T2.Party_name != \"Progress Party\"": "( member name of addresses ) that belongs to ( ( member ) , and ( ( party ) satisfied that ( ( party id of addresses ) equal to ( party id of staff ) ) ) ) , that have ( ( party name of staff ) not equal to ( progress party ) )",
    "SELECT calendar_date ,  day_Number FROM Ref_calendar": "( calendar date ) , ( day number ) that belongs to ( ref calendar )",
    "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000": "( job title ) , ( ( max salary ) minus ( min salary ) ) that belongs to ( jobs ) , that have ( ( max_salary ) between ( 12000 ) and ( 18000 ) )",
    "SELECT POSITION ,  Team FROM pilot": "( position ) , ( team ) that belongs to ( pilot )",
    "SELECT payment_method_code ,  count(*) FROM INVOICES GROUP BY payment_method_code": "( payment method code ) , ( the number of ( all items ) ) that belongs to ( invoices ) , grouped by ( payment method code )",
    "SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1": "( directed by of staff ) that belongs to ( ( schedule ) , and ( ( film ) satisfied that ( ( film id of addresses ) equal to ( film id of staff ) ) ) ) , grouped by ( directed by of staff ) , ordered by ( ( the sum of ( show times per day of addresses ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(DISTINCT StuID) FROM Plays_games": "( the number of ( distinct ( stuid ) ) ) that belongs to ( plays games )",
    "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"white\"": "( product name of club ) that belongs to ( ( products ) , and ( ( ref colors ) satisfied that ( ( color code of club ) equal to ( color code of member of club ) ) ) ) , that have ( ( color description of member of club ) equal to ( white ) )",
    "SELECT count(*) FROM budget WHERE budgeted  <  invested": "( the number of ( all items ) ) that belongs to ( budget ) , that have ( ( budgeted ) less than ( invested ) )",
    "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t2.position  =  \"President\"": "( fname of student ) , ( lname of student ) that belongs to ( ( club ) , and ( ( member of club ) satisfied that ( ( clubid of club ) equal to ( clubid of member of club ) ) ) , and ( ( student ) satisfied that ( ( stuid of member of club ) equal to ( stuid of student ) ) ) ) , that have ( ( ( clubname of club ) equal to ( bootup baltimore ) ) and ( ( position of member of club ) equal to ( president ) ) )",
    "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000": "( the average of ( damage millions usd ) ) , ( the maximum of ( damage millions usd ) ) that belongs to ( storm ) , that have ( ( max speed ) greater than ( 1000 ) )",
    "SELECT employee_id ,  salary FROM employees WHERE manager_id  =  (SELECT employee_id FROM employees WHERE first_name  =  'Payam' )": "( employee id ) , ( salary ) that belongs to ( employees ) , that have ( ( manager id ) equal to ( employee id ) that belongs to ( employees ) , that have ( ( first name ) equal to ( 'payam' ) ) )",
    "SELECT school ,  TYPE FROM school WHERE school_id NOT IN (SELECT school_id FROM school_bus)": "( school ) , ( type ) that belongs to ( school ) , that have ( ( school_id ) not in ( ( school id ) that belongs to ( school bus ) ) )",
    "SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = \"Shanghai\"": "( jan of staff ) that belongs to ( ( city ) , and ( ( temperature ) satisfied that ( ( city id of addresses ) equal to ( city id of staff ) ) ) ) , that have ( ( city of addresses ) equal to ( shanghai ) )",
    "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Badlands\"": "( type ) that belongs to ( ( vocals ) , and ( ( songs ) satisfied that ( ( songid of addresses ) equal to ( songid of staff ) ) ) ) , that have ( ( title ) equal to ( badlands ) )",
    "SELECT DISTINCT T2.Type FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T3.Year  =  2007": "( distinct ( type of staff ) ) that belongs to ( ( nomination ) , and ( ( artwork ) satisfied that ( ( artwork id of addresses ) equal to ( artwork id of staff ) ) ) , and ( ( festival detail ) satisfied that ( ( festival id of addresses ) equal to ( festival id of enzyme ) ) ) ) , that have ( ( year of enzyme ) equal to ( 2007 ) )",
    "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  <  50": "( lot details of addresses ) that belongs to ( ( lots ) , and ( ( transactions lots ) satisfied that ( ( lot id of addresses ) equal to ( transaction id of staff ) ) ) , and ( ( transactions ) satisfied that ( ( transaction id of staff ) equal to ( transaction id of enzyme ) ) ) ) , that have ( ( share count of enzyme ) less than ( 50 ) )",
    "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\"": "( state province county ) that belongs to ( addresses ) , that have ( ( line_1_number_building ) like ( %6862 kaitlyn knolls% ) )",
    "SELECT Open_Date ,  Open_Year FROM shop WHERE Shop_Name  =  \"Apple\"": "( open date ) , ( open year ) that belongs to ( shop ) , that have ( ( shop name ) equal to ( apple ) )",
    "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Zach' AND T1.gender  =  'female'": "( name of addresses ) that belongs to ( ( person ) , and ( ( personfriend ) satisfied that ( ( name of addresses ) equal to ( name of staff ) ) ) ) , that have ( ( ( friend of staff ) equal to ( 'zach' ) ) and ( ( gender of addresses ) equal to ( 'female' ) ) )",
    "SELECT T2.name ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT min(hours) FROM projects)": "( name of staff ) , ( name of enzyme ) that belongs to ( ( assignedto ) , and ( ( projects ) satisfied that ( ( project of addresses ) equal to ( code of staff ) ) ) , and ( ( scientists ) satisfied that ( ( scientist of addresses ) equal to ( ssn of enzyme ) ) ) ) , that have ( ( hours of staff ) equal to ( the minimum of ( hours ) ) that belongs to ( projects ) )",
    "SELECT Name FROM artwork WHERE TYPE != \"Program Talent Show\"": "( name ) that belongs to ( artwork ) , that have ( ( type ) not equal to ( program talent show ) )",
    "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1": "( faculty of staff ) that belongs to ( ( campuses ) , and ( ( faculty ) satisfied that ( ( id of addresses ) equal to ( campus of member of club ) ) ) , and ( ( degrees ) satisfied that ( ( ( id of addresses ) equal to ( campus of student ) ) and ( ( year of member of club ) equal to ( year of student ) ) ) ) ) , that have ( ( year of member of club ) equal to ( 2001 ) ) , ordered by ( ( degrees of student ) ) , limited to the top ( 1 )",
    "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  >  18": "( the number of ( all items ) ) that belongs to ( ( club ) , and ( ( member of club ) satisfied that ( ( clubid of club ) equal to ( clubid of member of club ) ) ) , and ( ( student ) satisfied that ( ( stuid of member of club ) equal to ( stuid of student ) ) ) ) , that have ( ( ( clubname of club ) equal to ( bootup baltimore ) ) and ( ( age of student ) greater than ( 18 ) ) )",
    "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'": "( distinct ( lname of addresses ) ) that belongs to ( ( faculty ) , and ( ( faculty participates in ) satisfied that ( ( facid of addresses ) equal to ( facid of staff ) ) ) , and ( ( activity ) satisfied that ( ( actid of staff ) equal to ( actid of staff ) ) ) ) , that have ( ( ( activity name of enzyme ) equal to ( 'canoeing' ) ) or ( ( activity name of enzyme ) equal to ( 'kayaking' ) ) )",
    "SELECT ObjectNumber FROM railway WHERE Railway_ID NOT IN (SELECT Railway_ID FROM train)": "( objectnumber ) that belongs to ( railway ) , that have ( ( railway_id ) not in ( ( railway id ) that belongs to ( train ) ) )",
    "SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \"luisg@embraer.com.br\"": "( firstname ) , ( lastname ) that belongs to ( customer ) , that have ( ( email ) equal to ( luisg@embraer.com.br ) )",
    "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"": "( date valid from ) , ( date valid to ) that belongs to ( customers cards ) , that have ( ( card number ) equal to ( 4560596484842 ) )",
    "SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'A' AND T2.class_code  =  10018": "( stu lname of addresses ) that belongs to ( ( student ) , and ( ( enroll ) satisfied that ( ( stu num of addresses ) equal to ( stu num of staff ) ) ) ) , that have ( ( ( enroll grade of staff ) equal to ( 'a' ) ) and ( ( class code of staff ) equal to ( 10018 ) ) )",
    "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name ORDER BY COUNT(*) DESC": "( product name of addresses ) , ( the number of ( all items ) ) that belongs to ( ( products ) , and ( ( products in events ) satisfied that ( ( product id of addresses ) equal to ( product id of staff ) ) ) ) , grouped by ( product name of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order )",
    "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009": "( the number of ( all items ) ) that belongs to ( ( results ) , and ( ( races ) satisfied that ( ( raceid of addresses ) equal to ( raceid of staff ) ) ) ) , that have ( ( ( name of staff ) equal to ( australian grand prix ) ) and ( ( year ) equal to ( 2009 ) ) )",
    "SELECT count(DISTINCT payment_method_code) FROM parties": "( the number of ( distinct ( payment method code ) ) ) that belongs to ( parties )",
    "SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1": "( policy type code ) that belongs to ( customer policies ) , grouped by ( policy type code ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT lot_details ,  investor_id FROM LOTS": "( lot details ) , ( investor id ) that belongs to ( lots )",
    "SELECT Name FROM phone WHERE Phone_id NOT IN (SELECT Phone_ID FROM phone_market)": "( name ) that belongs to ( phone ) , that have ( ( phone_id ) not in ( ( phone id ) that belongs to ( phone market ) ) )",
    "SELECT max(YEAR) FROM perpetrator;": "( the maximum of ( year ) ) that belongs to ( perpetrator )",
    "SELECT count(DISTINCT pPos) FROM tryout": "( the number of ( distinct ( ppos ) ) ) that belongs to ( tryout )",
    "SELECT country ,  count(*) FROM people GROUP BY country": "( country ) , ( the number of ( all items ) ) that belongs to ( people ) , grouped by ( country )",
    "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60": "( roomname of staff ) that belongs to ( ( reservations ) , and ( ( rooms ) satisfied that ( ( room of addresses ) equal to ( roomid of staff ) ) ) ) , grouped by ( room of addresses ) , that have ( ( the number of ( all items ) ) greater than ( 60 ) )",
    "SELECT count(*) FROM customers WHERE state = \"CA\";": "( the number of ( all items ) ) that belongs to ( customers ) , that have ( ( state ) equal to ( ca ) )",
    "SELECT count(*) FROM COURSE WHERE Credits  >  2": "( the number of ( all items ) ) that belongs to ( course ) , that have ( ( credits ) greater than ( 2 ) )",
    "SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)": "( channel code ) , ( contact number ) that belongs to ( customer contact channels ) , that have ( ( ( active to date ) minus ( active from date ) ) equal to ( ( active to date ) minus ( active from date ) ) that belongs to ( customer contact channels ) , ordered by ( ( ( active to date ) minus ( active from date ) ) in descending order ) , limited to the top ( 1 ) )",
    "SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"City Mall\" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"Village Store\"": "( district name of student ) that belongs to ( ( store ) , and ( ( store district ) satisfied that ( ( store id of club ) equal to ( store id of member of club ) ) ) , and ( ( district ) satisfied that ( ( district id of member of club ) equal to ( district id of student ) ) ) ) , that have ( ( type of club ) equal to ( city mall ) ), and intersect with ( ( district name of student ) that belongs to ( ( store ) , and ( ( store district ) satisfied that ( ( store id of club ) equal to ( store id of member of club ) ) ) , and ( ( district ) satisfied that ( ( district id of member of club ) equal to ( district id of student ) ) ) ) , that have ( ( type of club ) equal to ( village store ) ))",
    "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1": "( enrollment ) , ( primary conference ) that belongs to ( university ) , ordered by ( ( founded ) ) , limited to the top ( 1 )",
    "SELECT rank ,  count(*) FROM Faculty GROUP BY rank": "( rank ) , ( the number of ( all items ) ) that belongs to ( faculty ) , grouped by ( rank )",
    "SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE \"%film%\"": "( location name ) that belongs to ( locations ) , that have ( ( location_name ) like ( %film% ) )",
    "SELECT count(*) FROM people WHERE people_id NOT IN (SELECT People_ID FROM body_builder)": "( the number of ( all items ) ) that belongs to ( people ) , that have ( ( people_id ) not in ( ( people id ) that belongs to ( body builder ) ) )",
    "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1": "( poll source ) that belongs to ( candidate ) , ordered by ( ( oppose rate ) in descending order ) , limited to the top ( 1 )",
    "SELECT investor_id ,  COUNT(*) FROM TRANSACTIONS GROUP BY investor_id": "( investor id ) , ( the number of ( all items ) ) that belongs to ( transactions ) , grouped by ( investor id )",
    "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1": "( date ) , ( ( max temperature f ) minus ( min temperature f ) ) that belongs to ( weather ) , ordered by ( ( ( max temperature f ) minus ( min temperature f ) ) ) , limited to the top ( 1 )",
    "SELECT DISTINCT POSITION FROM match_season": "( distinct ( position ) ) that belongs to ( match season )",
    "SELECT sum(stu_hrs) ,  dept_code FROM student GROUP BY dept_code": "( the sum of ( stu hrs ) ) , ( dept code ) that belongs to ( student ) , grouped by ( dept code )",
    "SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name": "( amenity name ) that belongs to ( dorm amenity ) , ordered by ( ( amenity name ) )",
    "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name": "( name of club ) that belongs to ( ( people ) , and ( ( candidate ) satisfied that ( ( people id of club ) equal to ( people id of member of club ) ) ) ) , that have ( ( sex of club ) equal to ( 'f' ) ) , ordered by ( ( name of club ) )",
    "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1": "( role code ) that belongs to ( employees ) , grouped by ( role code ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( 1 )",
    "SELECT Address FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"": "( address ) that belongs to ( locations ) , that have ( ( location name ) equal to ( uk gallery ) )",
    "SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')": "( cname ) that belongs to ( college ) , that have ( ( enr ) greater than ( the maximum of ( enr ) ) that belongs to ( college ) , that have ( ( state ) equal to ( 'fl' ) ) )",
    "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Midshipman' INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Lieutenant'": "( name of club ) that belongs to ( ( ship ) , and ( ( captain ) satisfied that ( ( ship id of club ) equal to ( ship id of member of club ) ) ) ) , that have ( ( rank of member of club ) equal to ( 'midshipman' ) ), and intersect with ( ( name of club ) that belongs to ( ( ship ) , and ( ( captain ) satisfied that ( ( ship id of club ) equal to ( ship id of member of club ) ) ) ) , that have ( ( rank of member of club ) equal to ( 'lieutenant' ) ))",
    "SELECT Other_Details FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"": "( other details ) that belongs to ( locations ) , that have ( ( location name ) equal to ( uk gallery ) )",
    "SELECT fname ,  lname FROM student WHERE age  <  (SELECT avg(age) FROM student)": "( fname ) , ( lname ) that belongs to ( student ) , that have ( ( age ) less than ( the average of ( age ) ) that belongs to ( student ) )",
    "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150": "( the average of ( price of addresses ) ) , ( name of staff ) that belongs to ( ( products ) , and ( ( manufacturers ) satisfied that ( ( manufacturer of addresses ) equal to ( code of staff ) ) ) ) , grouped by ( name of staff ) , that have ( ( the average of ( price of addresses ) ) greater than or equal to ( 150 ) )",
    "SELECT DISTINCT rank FROM Faculty": "( distinct ( rank ) ) that belongs to ( faculty )",
    "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  1": "( name of staff ) that belongs to ( ( office locations ) , and ( ( buildings ) satisfied that ( ( building id of addresses ) equal to ( id of staff ) ) ) , and ( ( companies ) satisfied that ( ( company id of addresses ) equal to ( id of enzyme ) ) ) ) , grouped by ( building id of addresses ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Heathrow\" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"": "( aircraft of addresses ) that belongs to ( ( aircraft ) , and ( ( airport aircraft ) satisfied that ( ( aircraft id of addresses ) equal to ( aircraft id of staff ) ) ) , and ( ( airport ) satisfied that ( ( airport id of staff ) equal to ( airport id of enzyme ) ) ) ) , that have ( ( airport name of enzyme ) equal to ( london heathrow ) ), and intersect with ( ( aircraft of addresses ) that belongs to ( ( aircraft ) , and ( ( airport aircraft ) satisfied that ( ( aircraft id of addresses ) equal to ( aircraft id of staff ) ) ) , and ( ( airport ) satisfied that ( ( airport id of staff ) equal to ( airport id of enzyme ) ) ) ) , that have ( ( airport name of enzyme ) equal to ( london gatwick ) ))",
    "SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1": "( id of addresses ) , ( name of addresses ) that belongs to ( ( enzyme ) , and ( ( medicine enzyme interaction ) satisfied that ( ( id of addresses ) equal to ( enzyme id of staff ) ) ) ) , that have ( ( interaction type of staff ) equal to ( 'activitor' ) ) , grouped by ( id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT * FROM employees WHERE hire_date  >  '1987-09-07'": "all items that belongs to ( employees ) , that have ( ( hire date ) greater than ( '1987-09-07' ) )",
    "SELECT DISTINCT T1.first_name ,  T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id  =  T2.staff_id JOIN customer AS T3 ON T2.customer_id  =  T3.customer_id WHERE T3.first_name  =  'APRIL' AND T3.last_name  =  'BURNS'": "( distinct ( first name of addresses ) ) , ( last name of addresses ) that belongs to ( ( staff ) , and ( ( rental ) satisfied that ( ( staff id of addresses ) equal to ( staff id of staff ) ) ) , and ( ( customer ) satisfied that ( ( customer id of staff ) equal to ( customer id of enzyme ) ) ) ) , that have ( ( ( first name of enzyme ) equal to ( 'april' ) ) and ( ( last name of enzyme ) equal to ( 'burns' ) ) )",
    "SELECT count(*) FROM Person WHERE gender  =  'female'": "( the number of ( all items ) ) that belongs to ( person ) , that have ( ( gender ) equal to ( 'female' ) )",
    "SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1": "( student id of addresses ) , ( login name of staff ) that belongs to ( ( student course enrolment ) , and ( ( students ) satisfied that ( ( student id of addresses ) equal to ( student id of staff ) ) ) ) , grouped by ( student id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID": "( name ) that belongs to ( physician ), and except that ( ( name of staff ) that belongs to ( ( appointment ) , and ( ( physician ) satisfied that ( ( physician of addresses ) equal to ( employeeid of staff ) ) ) ))",
    "SELECT Delegate ,  Committee FROM election": "( delegate ) , ( committee ) that belongs to ( election )",
    "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\"": "( distinct ( fname of addresses ) ) , ( city code of addresses ) that belongs to ( ( student ) , and ( ( has allergy ) satisfied that ( ( stuid of addresses ) equal to ( stuid of staff ) ) ) ) , that have ( ( ( allergy of staff ) equal to ( milk ) ) or ( ( allergy of staff ) equal to ( cat ) ) )",
    "SELECT Roles.role_description , count(Employees.employee_id) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING count(Employees.employee_id)  >  1;": "( role description of roles ) , ( the number of ( employee id of employees ) ) that belongs to ( roles , and ( employees satisfied that ( ( role code of employees ) equal to ( role code of roles ) ) ) ) , grouped by ( role code of employees ) , that have ( ( the number of ( employee id of employees ) ) greater than ( 1 ) )",
    "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents": "( the average of ( price in euros ) ) , ( the minimum of ( price in euros ) ) that belongs to ( catalog contents )",
    "SELECT StuID FROM Student WHERE city_code  =  \"CHI\"": "( stuid ) that belongs to ( student ) , that have ( ( city code ) equal to ( chi ) )",
    "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1": "( name ) that belongs to ( county public safety ) , ordered by ( ( population ) in descending order ) , limited to the top ( 1 )",
    "SELECT Name FROM roller_coaster ORDER BY LENGTH ASC": "( name ) that belongs to ( roller coaster ) , ordered by ( ( length ) in ascending order )",
    "SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office": "( minister ) , ( took office ) , ( left office ) that belongs to ( party ) , ordered by ( ( left office ) )",
    "SELECT count(DISTINCT dormid) FROM has_amenity": "( the number of ( distinct ( dormid ) ) ) that belongs to ( has amenity )",
    "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)": "( date ) , ( zip code ) that belongs to ( weather ) , that have ( ( min dew point f ) less than ( the minimum of ( min dew point f ) ) that belongs to ( weather ) , that have ( ( zip code ) equal to ( 94107 ) ) )",
    "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7": "( distinct ( name of addresses ) ) that belongs to ( ( station ) , and ( ( status ) satisfied that ( ( id of addresses ) equal to ( station id of staff ) ) ) ) , that have ( ( bikes available of staff ) equal to ( 7 ) )",
    "SELECT Nationality FROM journalist ORDER BY Years_working DESC LIMIT 1": "( nationality ) that belongs to ( journalist ) , ordered by ( ( years working ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T2.Committee  =  \"Appropriations\"": "( county name of addresses ) that belongs to ( ( county ) , and ( ( election ) satisfied that ( ( county id of addresses ) equal to ( district of staff ) ) ) ) , that have ( ( committee of staff ) equal to ( appropriations ) )",
    "SELECT T1.Title ,  T2.Type FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID": "( title of addresses ) , ( type of staff ) that belongs to ( ( film ) , and ( ( film market estimation ) satisfied that ( ( film id of addresses ) equal to ( film id of staff ) ) ) )",
    "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"": "( the number of ( all items ) ) that belongs to ( film ) , that have ( ( title ) like ( %dummy% ) )",
    "SELECT T3.Player_name ,  T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T1.Starting_year  >  2011": "( player name of enzyme ) , ( gender of enzyme ) that belongs to ( ( player coach ) , and ( ( coach ) satisfied that ( ( coach id of addresses ) equal to ( coach id of staff ) ) ) , and ( ( player ) satisfied that ( ( player id of addresses ) equal to ( player id of enzyme ) ) ) ) , that have ( ( starting year of addresses ) greater than ( 2011 ) )",
    "SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = \"LG-P760\";": "( wifi of addresses ) , ( type of enzyme ) that belongs to ( ( chip model ) , and ( ( phone ) satisfied that ( ( model name of addresses ) equal to ( chip model of staff ) ) ) , and ( ( screen mode ) satisfied that ( ( screen mode of staff ) equal to ( graphics mode of enzyme ) ) ) ) , that have ( ( hardware model name of staff ) equal to ( lg-p760 ) )",
    "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50": "( time of addresses ) that belongs to ( ( elimination ) , and ( ( wrestler ) satisfied that ( ( wrestler id of addresses ) equal to ( wrestler id of staff ) ) ) ) , that have ( ( days held of staff ) greater than ( 50 ) )",
    "SELECT document_type_code FROM Ref_Document_Types;": "( document type code ) that belongs to ( ref document types )",
    "SELECT Product_Name ,  avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name": "( product name ) , ( the average of ( product price ) ) that belongs to ( products ) , grouped by ( product name )",
    "SELECT avg(age) ,  gender FROM Person GROUP BY gender": "( the average of ( age ) ) , ( gender ) that belongs to ( person ) , grouped by ( gender )",
    "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )": "( the number of ( distinct ( driverid ) ) ) that belongs to ( results ) , that have ( ( raceid ) not in ( ( ( raceid ) that belongs to ( races ) , that have ( ( year ) not equal to ( 2009 ) ) ) ) )",
    "SELECT  T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T3.order_id  =  T2.order_id GROUP BY T1.customer_id ORDER BY sum(T3.order_quantity) DESC LIMIT 1": "( customer name of addresses ) , ( customer phone of addresses ) that belongs to ( ( customers ) , and ( ( customer orders ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) , and ( ( order items ) satisfied that ( ( order id of enzyme ) equal to ( order id of staff ) ) ) ) , grouped by ( customer id of addresses ) , ordered by ( ( the sum of ( order quantity of enzyme ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id": "( the number of ( all items ) ) , ( project details of addresses ) that belongs to ( ( projects ) , and ( ( tasks ) satisfied that ( ( project id of addresses ) equal to ( project id of staff ) ) ) ) , grouped by ( project id of addresses )",
    "SELECT customer_name ,  customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_address_history)": "( customer name ) , ( customer phone ) that belongs to ( customers ) , that have ( ( customer_id ) not in ( ( customer id ) that belongs to ( customer address history ) ) )",
    "SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID WHERE T2.Num_of_Audience  >  200": "( name of enzyme ) that belongs to ( ( debate people ) , and ( ( debate ) satisfied that ( ( debate id of addresses ) equal to ( debate id of staff ) ) ) , and ( ( people ) satisfied that ( ( affirmative of addresses ) equal to ( people id of enzyme ) ) ) ) , that have ( ( num of audience of staff ) greater than ( 200 ) )",
    "SELECT T1.name ,  avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id": "( name of addresses ) , ( the average of ( rating of staff ) ) that belongs to ( ( useracct ) , and ( ( review ) satisfied that ( ( u id of addresses ) equal to ( u id of staff ) ) ) ) , grouped by ( u id of staff )",
    "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"": "( name ) that belongs to ( artist ) , that have ( ( name ) like ( %a% ) )",
    "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1": "( customer details of member of club ) that belongs to ( ( policies ) , and ( ( customers ) satisfied that ( ( customer id of club ) equal to ( customer id of member of club ) ) ) ) , grouped by ( customer details of member of club ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT sum(Amount_Payment) FROM Payments": "( the sum of ( amount payment ) ) that belongs to ( payments )",
    "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1": "( acc percent ) that belongs to ( basketball match ) , ordered by ( ( acc percent ) in descending order ) , limited to the top ( 1 )",
    "SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'": "( distinct ( name of addresses ) ) , ( age of addresses ) that belongs to ( ( person ) , and ( ( personfriend ) satisfied that ( ( name of addresses ) equal to ( name of staff ) ) ) ) , that have ( ( ( friend of staff ) equal to ( 'dan' ) ) or ( ( friend of staff ) equal to ( 'alice' ) ) )",
    "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' OR T3.name  =  'Psychiatry'": "( name of addresses ) that belongs to ( ( physician ) , and ( ( affiliated with ) satisfied that ( ( employeeid of addresses ) equal to ( physician of staff ) ) ) , and ( ( department ) satisfied that ( ( department of staff ) equal to ( departmentid of enzyme ) ) ) ) , that have ( ( ( name of enzyme ) equal to ( 'surgery' ) ) or ( ( name of enzyme ) equal to ( 'psychiatry' ) ) )",
    "SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name": "all items that belongs to ( course authors and tutors ) , ordered by ( ( personal name ) )",
    "SELECT count(*) FROM rent_arrears": "( the number of ( all items ) ) that belongs to ( rent arrears )",
    "SELECT * FROM basketball_match": "all items that belongs to ( basketball match )",
    "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"": "( departure date ) , ( arrival date ) that belongs to ( flight ) , that have ( ( ( origin ) equal to ( los angeles ) ) and ( ( destination ) equal to ( honolulu ) ) )",
    "SELECT count(DISTINCT u_id) FROM review": "( the number of ( distinct ( u id ) ) ) that belongs to ( review )",
    "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20": "( name of staff ) that belongs to ( ( party host ) , and ( ( host ) satisfied that ( ( host id of addresses ) equal to ( host id of staff ) ) ) , and ( ( party ) satisfied that ( ( party id of addresses ) equal to ( party id of enzyme ) ) ) ) , that have ( ( number of hosts of enzyme ) greater than ( 20 ) )",
    "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid  =  T1.amenid JOIN dorm AS T3 ON T2.dormid  =  T3.dormid WHERE T3.dorm_name  =  'Anonymous Donor Hall' ORDER BY T1.amenity_name": "( amenity name of addresses ) that belongs to ( ( dorm amenity ) , and ( ( has amenity ) satisfied that ( ( amenid of staff ) equal to ( amenid of addresses ) ) ) , and ( ( dorm ) satisfied that ( ( dormid of staff ) equal to ( dormid of enzyme ) ) ) ) , that have ( ( dorm name of enzyme ) equal to ( 'anonymous donor hall' ) ) , ordered by ( ( amenity name of addresses ) )",
    "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Demon Kitty Rag\"": "( the number of ( all items ) ) that belongs to ( ( vocals ) , and ( ( songs ) satisfied that ( ( songid of addresses ) equal to ( songid of staff ) ) ) ) , that have ( ( title ) equal to ( demon kitty rag ) )",
    "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1": "( card type code ) that belongs to ( customers cards ) , grouped by ( card type code ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT Shop_Name FROM shop ORDER BY Open_Year ASC": "( shop name ) that belongs to ( shop ) , ordered by ( ( open year ) in ascending order )",
    "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1": "( semester ) , ( year ) that belongs to ( section ) , grouped by ( semester ) , ( year ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004": "( campus of addresses ) that belongs to ( ( campuses ) , and ( ( faculty ) satisfied that ( ( id of club ) equal to ( campus of member of club ) ) ) ) , that have ( ( ( faculty of member of club ) greater than or equal to ( 600 ) ) and ( ( faculty of member of club ) less than or equal to ( 1000 ) ) and ( ( year of addresses ) equal to ( 2004 ) ) )",
    "SELECT product FROM product WHERE product LIKE \"%Scanner%\"": "( product ) that belongs to ( product ) , that have ( ( product ) like ( %scanner% ) )",
    "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  'Private'": "( the number of ( all items ) ) that belongs to ( ( institution ) , and ( ( protein ) satisfied that ( ( institution id of addresses ) equal to ( institution id of staff ) ) ) ) , that have ( ( ( founded of addresses ) greater than ( 1880 ) ) or ( ( type of addresses ) equal to ( 'private' ) ) )",
    "SELECT grade ,  count(DISTINCT classroom) ,  count(*) FROM list GROUP BY grade": "( grade ) , ( the number of ( distinct ( classroom ) ) ) , ( the number of ( all items ) ) that belongs to ( list ) , grouped by ( grade )",
    "SELECT fname ,  lname ,  address FROM employee ORDER BY Bdate": "( fname ) , ( lname ) , ( address ) that belongs to ( employee ) , ordered by ( ( bdate ) )",
    "SELECT T2.Railway_ID ,  T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID ORDER BY COUNT(*) DESC LIMIT 1": "( railway id of staff ) , ( builder of addresses ) that belongs to ( ( railway ) , and ( ( train ) satisfied that ( ( railway id of addresses ) equal to ( railway id of staff ) ) ) ) , grouped by ( railway id of staff ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT * FROM election": "all items that belongs to ( election )",
    "SELECT Room FROM FACULTY WHERE Rank  =  \"Professor\" AND Building  =  \"NEB\"": "( room ) that belongs to ( faculty ) , that have ( ( ( rank ) equal to ( professor ) ) and ( ( building ) equal to ( neb ) ) )",
    "SELECT LOCATION FROM school ORDER BY Enrollment ASC": "( location ) that belongs to ( school ) , ordered by ( ( enrollment ) in ascending order )",
    "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)": "( name ) that belongs to ( county public safety ) , that have ( ( county_id ) not in ( ( county id ) that belongs to ( city ) ) )",
    "SELECT name ,  built_year FROM mill WHERE TYPE  =  'Grondzeiler'": "( name ) , ( built year ) that belongs to ( mill ) , that have ( ( type ) equal to ( 'grondzeiler' ) )",
    "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40": "all items that belongs to ( employees ) , that have ( ( ( ( salary ) between ( 8000 ) and ( 12000 ) ) and ( ( commission pct ) is existed ) ) or ( ( department id ) not equal to ( 40 ) ) )",
    "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1": "( city of addresses ) that belongs to ( ( city ) , and ( ( hosting city ) satisfied that ( ( city id of addresses ) equal to ( host city of staff ) ) ) ) , grouped by ( host city of staff ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT customer_name FROM customers WHERE payment_method  =  \"Cash\"": "( customer name ) that belongs to ( customers ) , that have ( ( payment method ) equal to ( cash ) )",
    "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE stageposition  =  \"back\" GROUP BY lastname ORDER BY count(*) DESC LIMIT 1": "( lastname of staff ) that belongs to ( ( performance ) , and ( ( band ) satisfied that ( ( bandmate of addresses ) equal to ( id of staff ) ) ) ) , that have ( ( stageposition ) equal to ( back ) ) , grouped by ( lastname ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson'": "( distinct ( title ) ) that belongs to ( movie ), and except that ( ( title of staff ) that belongs to ( ( rating ) , and ( ( movie ) satisfied that ( ( mid of addresses ) equal to ( mid of staff ) ) ) , and ( ( reviewer ) satisfied that ( ( rid of addresses ) equal to ( rid of enzyme ) ) ) ) , that have ( ( name of enzyme ) equal to ( 'chris jackson' ) ))",
    "SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id": "( first name ) , ( last name ) , ( salary ) , ( department id ) , ( the maximum of ( salary ) ) that belongs to ( employees ) , grouped by ( department id )",
    "SELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code": "( the sum of ( crs credit ) ) , ( dept code ) that belongs to ( course ) , grouped by ( dept code )",
    "SELECT POSITION FROM pilot WHERE Join_Year\t <  2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year\t >  2005": "( position ) that belongs to ( pilot ) , that have ( ( join year ) less than ( 2000 ) ), and intersect with ( ( position ) that belongs to ( pilot ) , that have ( ( join year ) greater than ( 2005 ) ))",
    "SELECT count(DISTINCT dept_address) FROM department WHERE school_code  =  'BUS'": "( the number of ( distinct ( dept address ) ) ) that belongs to ( department ) , that have ( ( school code ) equal to ( 'bus' ) )",
    "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990": "( the number of ( all items ) ) that belongs to ( artist ) , that have ( ( ( age ) greater than ( 46 ) ) and ( ( year join ) greater than ( 1990 ) ) )",
    "SELECT min(membership_amount) ,  max(membership_amount) FROM branch WHERE open_year  =  2011 OR city  =  'London'": "( the minimum of ( membership amount ) ) , ( the maximum of ( membership amount ) ) that belongs to ( branch ) , that have ( ( ( open year ) equal to ( 2011 ) ) or ( ( city ) equal to ( 'london' ) ) )",
    "SELECT max(T1.duration) ,  max(T2.resolution) ,  T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.languages ORDER BY T2.languages": "( the maximum of ( duration of addresses ) ) , ( the maximum of ( resolution of staff ) ) , ( languages of staff ) that belongs to ( ( files ) , and ( ( song ) satisfied that ( ( f id of addresses ) equal to ( f id of staff ) ) ) ) , grouped by ( languages of staff ) , ordered by ( ( languages of staff ) )",
    "SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;": "( the number of ( all items ) ) , ( name of addresses ) that belongs to ( ( genres ) , and ( ( tracks ) satisfied that ( ( id of addresses ) equal to ( genre id of staff ) ) ) ) , grouped by ( name of addresses )",
    "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")": "( the number of ( all items ) ) that belongs to ( student ) , that have ( ( ( sex ) equal to ( m ) ) and ( ( stuid ) in ( ( stuid ) that belongs to ( ( has allergy ) , and ( ( allergy type ) satisfied that ( ( allergy of addresses ) equal to ( allergy of staff ) ) ) ) , that have ( ( allergytype of staff ) equal to ( food ) ) ) ) )",
    "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"": "( name of addresses ) that belongs to ( ( employee ) , and ( ( certificate ) satisfied that ( ( eid of addresses ) equal to ( eid of staff ) ) ) , and ( ( aircraft ) satisfied that ( ( aid of enzyme ) equal to ( aid of staff ) ) ) ) , that have ( ( name of enzyme ) equal to ( boeing 737-800 ) )",
    "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)": "( fname ) that belongs to ( student ) , that have ( ( stuid ) not in ( ( stuid ) that belongs to ( enrolled in ) ) )",
    "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid HAVING sum(hours_played)  >=  1000": "( gname ) that belongs to ( ( plays games ) , and ( ( video games ) satisfied that ( ( gameid of addresses ) equal to ( gameid of staff ) ) ) ) , grouped by ( gameid of addresses ) , that have ( ( the sum of ( hours played ) ) greater than or equal to ( 1000 ) )",
    "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\";": "( name of staff ) that belongs to ( ( genres ) , and ( ( tracks ) satisfied that ( ( id of addresses ) equal to ( genre id of staff ) ) ) , and ( ( media types ) satisfied that ( ( id of enzyme ) equal to ( media type id of staff ) ) ) ) , that have ( ( ( name of addresses ) equal to ( rock ) ) or ( ( name of enzyme ) equal to ( mpeg audio file ) ) )",
    "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5": "( distinct ( lastname of staff ) ) that belongs to ( ( list ) , and ( ( teachers ) satisfied that ( ( classroom of addresses ) equal to ( classroom of staff ) ) ) ) , that have ( ( grade ) equal to ( 5 ) )",
    "SELECT Party FROM representative GROUP BY Party HAVING COUNT(*)  >=  3": "( party ) that belongs to ( representative ) , grouped by ( party ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 3 ) )",
    "SELECT TYPE ,  count(*) ,  sum(enrollment) FROM institution GROUP BY TYPE": "( type ) , ( the number of ( all items ) ) , ( the sum of ( enrollment ) ) that belongs to ( institution ) , grouped by ( type )",
    "SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*)  >  1": "( carrier of staff ) that belongs to ( ( stock ) , and ( ( device ) satisfied that ( ( device id of addresses ) equal to ( device id of staff ) ) ) ) , grouped by ( device id of addresses ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT T1.Aircraft ,  COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft": "( aircraft of addresses ) , ( the number of ( all items ) ) that belongs to ( ( aircraft ) , and ( ( match ) satisfied that ( ( aircraft id of addresses ) equal to ( winning aircraft of staff ) ) ) ) , grouped by ( winning aircraft of staff )",
    "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1": "( state ) that belongs to ( customers ) , grouped by ( state ) , ordered by ( ( the number of ( all items ) ) ) , limited to the top ( 1 )",
    "SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1": "( attraction type description of addresses ) , ( attraction type code of staff ) that belongs to ( ( ref attraction types ) , and ( ( tourist attractions ) satisfied that ( ( attraction type code of addresses ) equal to ( attraction type code of staff ) ) ) ) , grouped by ( attraction type code of staff ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"": "( market details of addresses ) that belongs to ( ( street markets ) , and ( ( tourist attractions ) satisfied that ( ( market id of addresses ) equal to ( tourist attraction id of staff ) ) ) ) , that have ( ( ( how to get there of staff ) equal to ( walk ) ) or ( ( how to get there of staff ) equal to ( bus ) ) )",
    "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000": "( name ) that belongs to ( instructor ) , that have ( ( ( dept name ) equal to ( 'comp. sci.' ) ) and ( ( salary ) greater than ( 80000 ) ) )",
    "SELECT count(DISTINCT acc_type) FROM customer": "( the number of ( distinct ( acc type ) ) ) that belongs to ( customer )",
    "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")": "( the average of ( bikes available ) ) that belongs to ( status ) , that have ( ( station_id ) not in ( ( id ) that belongs to ( station ) , that have ( ( city ) equal to ( palo alto ) ) ) )",
    "SELECT incident_type_description FROM Ref_Incident_Type WHERE incident_type_code  =  \"VIOLENCE\"": "( incident type description ) that belongs to ( ref incident type ) , that have ( ( incident type code ) equal to ( violence ) )",
    "SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = \"Nanjing ( Jiangsu )\" AND T3.competition = \"1994 FIFA World Cup qualification\"": "( venue of enzyme ) that belongs to ( ( city ) , and ( ( hosting city ) satisfied that ( ( city id of addresses ) equal to ( host city of staff ) ) ) , and ( ( match ) satisfied that ( ( match id of staff ) equal to ( match id of enzyme ) ) ) ) , that have ( ( ( city of addresses ) equal to ( nanjing ( jiangsu ) ) ) and ( ( competition of enzyme ) equal to ( 1994 fifa world cup qualification ) ) )",
    "SELECT student_id FROM student_course_attendance": "( student id ) that belongs to ( student course attendance )",
    "SELECT count(*) FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)": "( the number of ( all items ) ) that belongs to ( useracct ) , that have ( ( u_id ) not in ( ( u id ) that belongs to ( review ) ) )",
    "SELECT Num_of_Audience FROM festival_detail WHERE YEAR  =  2008 OR YEAR  =  2010": "( num of audience ) that belongs to ( festival detail ) , that have ( ( ( year ) equal to ( 2008 ) ) or ( ( year ) equal to ( 2010 ) ) )",
    "SELECT T1.purchase_details FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id  =  T2.transaction_id WHERE T2.amount_of_transaction  >  10000": "( purchase details of addresses ) that belongs to ( ( purchases ) , and ( ( transactions ) satisfied that ( ( purchase transaction id of addresses ) equal to ( transaction id of staff ) ) ) ) , that have ( ( amount of transaction of staff ) greater than ( 10000 ) )",
    "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code": "( zip code ) , ( the number of ( all items ) ) that belongs to ( weather ) , that have ( ( max wind speed mph ) greater than or equal to ( 25 ) ) , grouped by ( zip code )",
    "SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN endowment AS T3 ON T2.school_id  =  T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted)  >  100 OR sum(T3.amount)  >  10": "( school name of staff ) that belongs to ( ( budget ) , and ( ( school ) satisfied that ( ( school id of addresses ) equal to ( school id of staff ) ) ) , and ( ( endowment ) satisfied that ( ( school id of staff ) equal to ( school id of enzyme ) ) ) ) , grouped by ( school name of staff ) , that have ( ( ( the sum of ( budgeted of addresses ) ) greater than ( 100 ) ) or ( ( the sum of ( amount of enzyme ) ) greater than ( 10 ) ) )",
    "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)": "( name ) that belongs to ( aircraft ) , that have ( ( distance ) greater than ( the average of ( distance ) ) that belongs to ( aircraft ) )",
    "SELECT formats FROM files GROUP BY formats ORDER BY COUNT (*) DESC LIMIT 1": "( formats ) that belongs to ( files ) , grouped by ( formats ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1": "( investor ) that belongs to ( entrepreneur ) , grouped by ( investor ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT LOCATION FROM school ORDER BY Founded DESC": "( location ) that belongs to ( school ) , ordered by ( ( founded ) in descending order )",
    "SELECT Date ,  Venue FROM debate": "( date ) , ( venue ) that belongs to ( debate )",
    "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'": "( name of enzyme ) that belongs to ( ( affected region ) , and ( ( region ) satisfied that ( ( region id of addresses ) equal to ( region id of staff ) ) ) , and ( ( storm ) satisfied that ( ( storm id of addresses ) equal to ( storm id of enzyme ) ) ) ) , that have ( ( region name of staff ) equal to ( 'denmark' ) )",
    "SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';": "( the sum of ( maxoccupancy ) ) that belongs to ( rooms ) , that have ( ( decor ) equal to ( 'modern' ) )",
    "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"": "( official native language of addresses ) that belongs to ( ( country ) , and ( ( match season ) satisfied that ( ( country id of addresses ) equal to ( country of staff ) ) ) ) , that have ( ( ( college of staff ) equal to ( maryland ) ) or ( ( college of staff ) equal to ( duke ) ) )",
    "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  \"Cancelled\"": "( the sum of ( order quantity of member of club ) ) that belongs to ( ( customer orders ) , and ( ( order items ) satisfied that ( ( order id of club ) equal to ( order id of member of club ) ) ) ) , that have ( ( order status of club ) equal to ( cancelled ) )",
    "SELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' ORDER BY t1.length_feet": "( name of club ) that belongs to ( ( bridge ) , and ( ( architect ) satisfied that ( ( architect id of club ) equal to ( id of member of club ) ) ) ) , that have ( ( nationality of member of club ) equal to ( 'american' ) ) , ordered by ( ( length feet of club ) )",
    "SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'QM-261'": "( emp fname of addresses ) that belongs to ( ( employee ) , and ( ( class ) satisfied that ( ( emp num of addresses ) equal to ( prof num of staff ) ) ) ) , that have ( ( crs code ) equal to ( 'cis-220' ) ), and intersect with ( ( emp fname of addresses ) that belongs to ( ( employee ) , and ( ( class ) satisfied that ( ( emp num of addresses ) equal to ( prof num of staff ) ) ) ) , that have ( ( crs code ) equal to ( 'qm-261' ) ))",
    "SELECT T2.organisation_id ,  T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount)  >  6000": "( organisation id of staff ) , ( organisation details of staff ) that belongs to ( ( grants ) , and ( ( organisations ) satisfied that ( ( organisation id of addresses ) equal to ( organisation id of staff ) ) ) ) , grouped by ( organisation id of staff ) , that have ( ( the sum of ( grant amount of addresses ) ) greater than ( 6000 ) )",
    "SELECT LOCATION FROM festival_detail ORDER BY Num_of_Audience DESC LIMIT 1": "( location ) that belongs to ( festival detail ) , ordered by ( ( num of audience ) in descending order ) , limited to the top ( 1 )",
    "SELECT DISTINCT District_name FROM district ORDER BY city_area DESC": "( distinct ( district name ) ) that belongs to ( district ) , ordered by ( ( city area ) in descending order )",
    "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \"4560596484842\"": "( customer first name of staff ) , ( customer last name of staff ) , ( customer phone of staff ) that belongs to ( ( customers cards ) , and ( ( customers ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , that have ( ( card number of addresses ) equal to ( 4560596484842 ) )",
    "SELECT Participant_ID ,  Participant_Type_Code ,  Participant_Details FROM  Participants": "( participant id ) , ( participant type code ) , ( participant details ) that belongs to ( participants )",
    "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  >=  32": "( song of staff ) that belongs to ( ( artist ) , and ( ( volume ) satisfied that ( ( artist id of addresses ) equal to ( artist id of staff ) ) ) ) , that have ( ( age of addresses ) greater than or equal to ( 32 ) )",
    "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)": "( the number of ( all items ) ) that belongs to ( apartments ) , that have ( ( apt_id ) not in ( ( apt id ) that belongs to ( apartment facilities ) ) )",
    "SELECT CName FROM COURSE ORDER BY Credits": "( cname ) that belongs to ( course ) , ordered by ( ( credits ) )",
    "SELECT Restaurant.ResName ,  sum(Visits_Restaurant.Spent) FROM Visits_Restaurant JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID GROUP BY Restaurant.ResID ORDER BY sum(Visits_Restaurant.Spent) ASC LIMIT 1;": "( resname of restaurant ) , ( the sum of ( spent of visits restaurant ) ) that belongs to ( visits restaurant , and ( restaurant satisfied that ( ( resid of visits restaurant ) equal to ( resid of restaurant ) ) ) ) , grouped by ( resid of restaurant ) , ordered by ( ( the sum of ( spent of visits restaurant ) ) in ascending order ) , limited to the top ( 1 )",
    "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500": "( status ) that belongs to ( city ) , that have ( ( population ) greater than ( 1500 ) ), and intersect with ( ( status ) that belongs to ( city ) , that have ( ( population ) less than ( 500 ) ))",
    "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE shipping_method_code  =  'FedEx' AND order_status_code  =  'Paid'": "( customer name of addresses ) that belongs to ( ( customers ) , and ( ( customer orders ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , that have ( ( ( shipping method code ) equal to ( 'fedex' ) ) and ( ( order status code ) equal to ( 'paid' ) ) )",
    "SELECT count(DISTINCT FDA_approved) FROM medicine": "( the number of ( distinct ( fda approved ) ) ) that belongs to ( medicine )",
    "SELECT COUNT(*) FROM Students WHERE personal_name LIKE \"%son%\"": "( the number of ( all items ) ) that belongs to ( students ) , that have ( ( personal_name ) like ( %son% ) )",
    "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"": "( distinct ( title ) ) that belongs to ( ( vocals ) , and ( ( songs ) satisfied that ( ( songid of club ) equal to ( songid of member of club ) ) ) ), and except that ( ( title of member of club ) that belongs to ( ( vocals ) , and ( ( songs ) satisfied that ( ( songid of club ) equal to ( songid of member of club ) ) ) ) , that have ( ( type ) equal to ( back ) ))",
    "SELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code": "( the number of ( all items ) ) , ( school code of addresses ) that belongs to ( ( department ) , and ( ( professor ) satisfied that ( ( dept code of addresses ) equal to ( dept code of staff ) ) ) ) , grouped by ( school code of addresses )",
    "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state;": "( billing state ) , ( the number of ( all items ) ) that belongs to ( invoices ) , that have ( ( billing country ) equal to ( usa ) ) , grouped by ( billing state )",
    "SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1": "( building ) that belongs to ( faculty ) , grouped by ( building ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1": "( total points of addresses ) that belongs to ( ( gymnast ) , and ( ( people ) satisfied that ( ( gymnast id of addresses ) equal to ( people id of staff ) ) ) ) , ordered by ( ( age of staff ) in ascending order ) , limited to the top ( 1 )",
    "SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"Central Coast\" AND T2.year  <  2005": "( the maximum of ( price of staff ) ) that belongs to ( ( appellations ) , and ( ( wine ) satisfied that ( ( appelation of addresses ) equal to ( appelation of staff ) ) ) ) , that have ( ( ( area of addresses ) equal to ( central coast ) ) and ( ( year of staff ) less than ( 2005 ) ) )",
    "SELECT count(*) FROM Player WHERE HS  >  1000": "( the number of ( all items ) ) that belongs to ( player ) , that have ( ( hs ) greater than ( 1000 ) )",
    "SELECT T1.customer_id ,  T1.first_name ,  count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id": "( customer id of addresses ) , ( first name of addresses ) , ( the number of ( all items ) ) that belongs to ( ( customers ) , and ( ( bookings ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , grouped by ( customer id of addresses )",
    "SELECT count(*) FROM Addresses WHERE state_province_county = \"Georgia\";": "( the number of ( all items ) ) that belongs to ( addresses ) , that have ( ( state province county ) equal to ( georgia ) )",
    "SELECT name FROM stadium ORDER BY capacity DESC LIMIT 1": "( name ) that belongs to ( stadium ) , ordered by ( ( capacity ) in descending order ) , limited to the top ( 1 )",
    "SELECT Nationality ,  COUNT(*) FROM HOST GROUP BY Nationality": "( nationality ) , ( the number of ( all items ) ) that belongs to ( host ) , grouped by ( nationality )",
    "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20": "( lastname ) that belongs to ( customer ), and except that ( ( lastname of addresses ) that belongs to ( ( customer ) , and ( ( invoice ) satisfied that ( ( customerid of addresses ) equal to ( customerid of staff ) ) ) ) , that have ( ( total of staff ) greater than ( 20 ) ))",
    "SELECT Country ,  COUNT(*) FROM member GROUP BY Country": "( country ) , ( the number of ( all items ) ) that belongs to ( member ) , grouped by ( country )",
    "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'": "( job id ) , ( hire date ) that belongs to ( employees ) , that have ( ( hire_date ) between ( '2007-11-05' ) and ( '2009-07-05' ) )",
    "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id": "( name of addresses ) , ( long of addresses ) , ( the average of ( duration of staff ) ) that belongs to ( ( station ) , and ( ( trip ) satisfied that ( ( id of addresses ) equal to ( start station id of staff ) ) ) ) , grouped by ( start station id of staff )",
    "SELECT roomName ,  bedType FROM Rooms WHERE decor = \"traditional\";": "( roomname ) , ( bedtype ) that belongs to ( rooms ) , that have ( ( decor ) equal to ( traditional ) )",
    "SELECT count(*) FROM Lessons WHERE lesson_status_code = \"Cancelled\";": "( the number of ( all items ) ) that belongs to ( lessons ) , that have ( ( lesson status code ) equal to ( cancelled ) )",
    "SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\";": "( document id ) that belongs to ( documents ) , that have ( ( ( document status code ) equal to ( done ) ) and ( ( document type code ) equal to ( paper ) ) )",
    "SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id GROUP BY T1.church_id HAVING count(*)  >=  2": "( name of addresses ) that belongs to ( ( church ) , and ( ( wedding ) satisfied that ( ( church id of addresses ) equal to ( church id of staff ) ) ) ) , grouped by ( church id of addresses ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT title ,  YEAR ,  director FROM movie ORDER BY budget_million": "( title ) , ( year ) , ( director ) that belongs to ( movie ) , ordered by ( ( budget million ) )",
    "SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100": "( dorm name ) , ( gender ) that belongs to ( dorm ) , that have ( ( ( student capacity ) greater than ( 300 ) ) or ( ( student capacity ) less than ( 100 ) ) )",
    "SELECT open_date FROM church GROUP BY open_date HAVING count(*)  >=  2": "( open date ) that belongs to ( church ) , grouped by ( open date ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\"": "( the sum of ( graduate of club ) ) that belongs to ( ( discipline enrollments ) , and ( ( campuses ) satisfied that ( ( campus of club ) equal to ( id of member of club ) ) ) ) , that have ( ( ( year of club ) equal to ( 2004 ) ) and ( ( campus of member of club ) equal to ( san francisco state university ) ) )",
    "SELECT AVG(Price) ,  Manufacturer FROM Products GROUP BY Manufacturer": "( the average of ( price ) ) , ( manufacturer ) that belongs to ( products ) , grouped by ( manufacturer )",
    "SELECT t1.name FROM train AS t1 JOIN route AS t2 ON t1.id  =  t2.train_id GROUP BY t2.train_id ORDER BY count(*) DESC LIMIT 1": "( name of club ) that belongs to ( ( train ) , and ( ( route ) satisfied that ( ( id of club ) equal to ( train id of member of club ) ) ) ) , grouped by ( train id of member of club ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT instrument FROM instruments GROUP BY instrument ORDER BY count(*) DESC LIMIT 1": "( instrument ) that belongs to ( instruments ) , grouped by ( instrument ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT rID FROM Reviewer WHERE name  =  \"Daniel Lewis\"": "( rid ) that belongs to ( reviewer ) , that have ( ( name ) equal to ( daniel lewis ) )",
    "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')": "( staff id ) that belongs to ( staff department assignments ) , that have ( ( date assigned to ) less than ( the maximum of ( date assigned to ) ) that belongs to ( staff department assignments ) , that have ( ( job title code ) equal to ( 'clerical staff' ) ) )",
    "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1": "( aid ) , ( name ) that belongs to ( aircraft ) , ordered by ( ( distance ) in descending order ) , limited to the top ( 1 )",
    "SELECT DISTINCT T1.supplier_name ,  T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN products AS T3 ON T2.product_id  =  T3.product_id WHERE T3.product_name  =  \"red jeans\"": "( distinct ( supplier name of addresses ) ) , ( supplier phone of addresses ) that belongs to ( ( suppliers ) , and ( ( product suppliers ) satisfied that ( ( supplier id of addresses ) equal to ( supplier id of staff ) ) ) , and ( ( products ) satisfied that ( ( product id of staff ) equal to ( product id of enzyme ) ) ) ) , that have ( ( product name of enzyme ) equal to ( red jeans ) )",
    "SELECT T3.Name ,  T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID": "( name of enzyme ) , ( date of staff ) that belongs to ( ( news report ) , and ( ( event ) satisfied that ( ( event id of addresses ) equal to ( event id of staff ) ) ) , and ( ( journalist ) satisfied that ( ( journalist id of addresses ) equal to ( journalist id of enzyme ) ) ) )",
    "SELECT country FROM stadium GROUP BY country ORDER BY count(*) DESC LIMIT 1": "( country ) that belongs to ( stadium ) , grouped by ( country ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT train_number ,  name FROM train ORDER BY TIME": "( train number ) , ( name ) that belongs to ( train ) , ordered by ( ( time ) )",
    "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"": "( song name ) that belongs to ( song ) , that have ( ( ( genre is ) equal to ( modern ) ) or ( ( languages ) equal to ( english ) ) )",
    "SELECT count(*) FROM stadium": "( the number of ( all items ) ) that belongs to ( stadium )",
    "SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000": "( phone number ) that belongs to ( employees ) , that have ( ( salary ) between ( 8000 ) and ( 12000 ) )",
    "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1": "( name ) that belongs to ( instructor ) , that have ( ( dept name ) equal to ( 'statistics' ) ) , ordered by ( ( salary ) ) , limited to the top ( 1 )",
    "SELECT count(*) FROM entrepreneur": "( the number of ( all items ) ) that belongs to ( entrepreneur )",
    "SELECT count(*) FROM event": "( the number of ( all items ) ) that belongs to ( event )",
    "SELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'": "( student capacity ) , ( gender ) that belongs to ( dorm ) , that have ( ( dorm_name ) like ( '%donor%' ) )",
    "SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\";": "( milliseconds ) that belongs to ( tracks ) , that have ( ( name ) equal to ( fast as a shark ) )",
    "SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"film festival\"": "( name of addresses ) , ( description of addresses ) that belongs to ( ( photos ) , and ( ( tourist attractions ) satisfied that ( ( tourist attraction id of addresses ) equal to ( tourist attraction id of staff ) ) ) ) , that have ( ( name of staff ) equal to ( film festival ) )",
    "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1": "( name ) that belongs to ( wrestler ) , ordered by ( ( days held ) in ascending order ) , limited to the top ( 1 )",
    "SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_details  =  'quo'": "( organisation type description of addresses ) that belongs to ( ( organisation types ) , and ( ( organisations ) satisfied that ( ( organisation type of addresses ) equal to ( organisation type of staff ) ) ) ) , that have ( ( organisation details of staff ) equal to ( 'quo' ) )",
    "SELECT T2.email_address FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T1.zip_postcode  =  \"918\"": "( email address of staff ) that belongs to ( ( addresses ) , and ( ( teachers ) satisfied that ( ( address id of addresses ) equal to ( address id of staff ) ) ) ) , that have ( ( zip postcode of addresses ) equal to ( 918 ) )",
    "SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate  =  t2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1": "( firstname of member of club ) that belongs to ( ( performance ) , and ( ( band ) satisfied that ( ( bandmate of club ) equal to ( id of member of club ) ) ) , and ( ( songs ) satisfied that ( ( songid of enzyme ) equal to ( songid of addresses ) ) ) ) , grouped by ( firstname ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1": "( author ) that belongs to ( submission ) , ordered by ( ( scores ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1": "( driverid of addresses ) , ( surname of addresses ) that belongs to ( ( drivers ) , and ( ( results ) satisfied that ( ( driverid of addresses ) equal to ( driverid of staff ) ) ) , and ( ( races ) satisfied that ( ( raceid of staff ) equal to ( raceid of enzyme ) ) ) ) , that have ( ( year of enzyme ) greater than ( 2010 ) ) , grouped by ( driverid of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.'": "( the number of ( all items ) ) that belongs to ( professor ) , that have ( ( prof high degree ) equal to ( 'ph.d.' ) )",
    "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\"": "( the sum of ( domestic passengers ) ) that belongs to ( airport ) , that have ( ( airport_name ) like ( %london% ) )",
    "SELECT t3.headquartered_city ,  count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city": "( headquartered city of student ) , ( the number of ( all items ) ) that belongs to ( ( store ) , and ( ( store district ) satisfied that ( ( store id of club ) equal to ( store id of member of club ) ) ) , and ( ( district ) satisfied that ( ( district id of member of club ) equal to ( district id of student ) ) ) ) , grouped by ( headquartered city of student )",
    "SELECT city_code FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";": "( city code ) that belongs to ( student ) , that have ( ( ( fname ) equal to ( linda ) ) and ( ( lname ) equal to ( smith ) ) )",
    "SELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)": "( title ) , ( directed by ) that belongs to ( film ) , that have ( ( film_id ) not in ( ( film id ) that belongs to ( schedule ) ) )",
    "SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id": "( employee id of addresses ) , ( country name of trip ) that belongs to ( ( employees ) , and ( ( departments ) satisfied that ( ( department id of addresses ) equal to ( department id of staff ) ) ) , and ( ( locations ) satisfied that ( ( location id of staff ) equal to ( location id of enzyme ) ) ) , and ( ( countries ) satisfied that ( ( country id of enzyme ) equal to ( country id of trip ) ) ) )",
    "SELECT count(*) FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)": "( the number of ( all items ) ) that belongs to ( products ) , that have ( ( product price ) greater than ( the average of ( product price ) ) that belongs to ( products ) )",
    "SELECT title ,  Studio FROM film WHERE Studio LIKE \"%Universal%\"": "( title ) , ( studio ) that belongs to ( film ) , that have ( ( studio ) like ( %universal% ) )",
    "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"HOU\"": "( distinct ( clubname of club ) ) that belongs to ( ( club ) , and ( ( member of club ) satisfied that ( ( clubid of club ) equal to ( clubid of member of club ) ) ) , and ( ( student ) satisfied that ( ( stuid of member of club ) equal to ( stuid of student ) ) ) ) , that have ( ( city code of student ) equal to ( hou ) )",
    "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students": "( personal name ) that belongs to ( course authors and tutors ), and intersect with ( ( personal name ) that belongs to ( students ))",
    "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)": "( the average of ( credit score ) ) that belongs to ( customer ) , that have ( ( cust_id ) not in ( ( cust id ) that belongs to ( loan ) ) )",
    "SELECT count(*) FROM ASSESSMENT_NOTES": "( the number of ( all items ) ) that belongs to ( assessment notes )",
    "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100": "( distinct ( start station name ) ) that belongs to ( trip ) , that have ( ( duration ) less than ( 100 ) )",
    "SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  \"Maudie Kertzmann\"": "( address content of student ) that belongs to ( ( customers ) , and ( ( customer addresses ) satisfied that ( ( customer id of club ) equal to ( customer id of member of club ) ) ) , and ( ( addresses ) satisfied that ( ( address id of member of club ) equal to ( address id of student ) ) ) ) , that have ( ( customer name of club ) equal to ( maudie kertzmann ) )",
    "SELECT T3.Name ,  T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID": "( name of enzyme ) , ( machine series of staff ) that belongs to ( ( repair assignment ) , and ( ( machine ) satisfied that ( ( machine id of addresses ) equal to ( machine id of staff ) ) ) , and ( ( technician ) satisfied that ( ( technician id of addresses ) equal to ( technician id of enzyme ) ) ) )",
    "SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'": "( distinct ( state of addresses ) ) , ( enr of addresses ) that belongs to ( ( college ) , and ( ( tryout ) satisfied that ( ( cname of addresses ) equal to ( cname of staff ) ) ) ) , that have ( ( decision of staff ) equal to ( 'yes' ) )",
    "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\"": "( customer first name of staff ) , ( customer last name of staff ) , ( customer phone of staff ) that belongs to ( ( accounts ) , and ( ( customers ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , that have ( ( account name of addresses ) equal to ( 162 ) )",
    "SELECT Nationality ,  Age FROM journalist": "( nationality ) , ( age ) that belongs to ( journalist )",
    "SELECT T2.Birth_Date ,  T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC LIMIT 1": "( birth date of staff ) , ( birth place of staff ) that belongs to ( ( body builder ) , and ( ( people ) satisfied that ( ( people id of addresses ) equal to ( people id of staff ) ) ) ) , ordered by ( ( total of addresses ) in descending order ) , limited to the top ( 1 )",
    "SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name": "( department name ) , ( the number of ( all items ) ) that belongs to ( ( employees ) , and ( ( departments ) satisfied that ( ( department id of addresses ) equal to ( department id of staff ) ) ) ) , grouped by ( department name )",
    "SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown": "( hometown of staff ) , ( the number of ( all items ) ) that belongs to ( ( gymnast ) , and ( ( people ) satisfied that ( ( gymnast id of addresses ) equal to ( people id of staff ) ) ) ) , grouped by ( hometown of staff )",
    "SELECT T2.Dname ,  T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO  =  T2.DNO WHERE T1.CName  =  \"INTRODUCTION TO COMPUTER SCIENCE\"": "( dname of staff ) , ( room of staff ) that belongs to ( ( course ) , and ( ( department ) satisfied that ( ( dno of addresses ) equal to ( dno of staff ) ) ) ) , that have ( ( cname of addresses ) equal to ( introduction to computer science ) )",
    "SELECT Character FROM actor ORDER BY age DESC": "( character ) that belongs to ( actor ) , ordered by ( ( age ) in descending order )",
    "SELECT T2.Name ,  T2.age ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID ORDER BY T3.Theme ASC": "( name of staff ) , ( age of staff ) , ( theme of enzyme ) that belongs to ( ( journal committee ) , and ( ( editor ) satisfied that ( ( editor id of addresses ) equal to ( editor id of staff ) ) ) , and ( ( journal ) satisfied that ( ( journal id of addresses ) equal to ( journal id of enzyme ) ) ) ) , ordered by ( ( theme of enzyme ) in ascending order )",
    "SELECT DISTINCT Carrier FROM phone WHERE Memory_in_G  >  32": "( distinct ( carrier ) ) that belongs to ( phone ) , that have ( ( memory in g ) greater than ( 32 ) )",
    "SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1": "( product details of member of club ) , ( product id of member of club ) that belongs to ( ( order items ) , and ( ( products ) satisfied that ( ( product id of club ) equal to ( product id of member of club ) ) ) ) , grouped by ( product id of club ) , ordered by ( ( the sum of ( order quantity of club ) ) ) , limited to the top ( 1 )",
    "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1": "( name ) , ( date ) that belongs to ( races ) , ordered by ( ( date ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'": "( name of addresses ) that belongs to ( ( tourist attractions ) , and ( ( tourist attraction features ) satisfied that ( ( tourist attraction id of addresses ) equal to ( tourist attraction id of staff ) ) ) , and ( ( features ) satisfied that ( ( feature id of staff ) equal to ( feature id of enzyme ) ) ) ) , that have ( ( feature details of enzyme ) equal to ( 'park' ) ) and ( name of addresses ) that belongs to ( ( tourist attractions ) , and ( ( tourist attraction features ) satisfied that ( ( tourist attraction id of addresses ) equal to ( tourist attraction id of staff ) ) ) , and ( ( features ) satisfied that ( ( feature id of staff ) equal to ( feature id of enzyme ) ) ) ) , that have ( ( feature details of enzyme ) equal to ( 'shopping' ) )",
    "SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  \"Michael\" AND T1.lname  =  \"Goodrich\"": "( fname of staff ) , ( lname of staff ) that belongs to ( ( faculty ) , and ( ( student ) satisfied that ( ( facid of addresses ) equal to ( advisor of staff ) ) ) ) , that have ( ( ( fname of addresses ) equal to ( michael ) ) and ( ( lname of addresses ) equal to ( goodrich ) ) )",
    "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950": "( campus ) that belongs to ( campuses ) , that have ( ( ( county ) equal to ( los angeles ) ) and ( ( year ) greater than ( 1950 ) ) )",
    "SELECT T3.dept_name  ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T1.emp_lname  =  'Heffington'": "( dept name of enzyme ) , ( prof office of staff ) that belongs to ( ( employee ) , and ( ( professor ) satisfied that ( ( emp num of addresses ) equal to ( emp num of staff ) ) ) , and ( ( department ) satisfied that ( ( dept code of staff ) equal to ( dept code of enzyme ) ) ) ) , that have ( ( emp lname of addresses ) equal to ( 'heffington' ) )",
    "SELECT Reign ,  Days_held FROM wrestler": "( reign ) , ( days held ) that belongs to ( wrestler )",
    "SELECT class_code FROM CLASS WHERE class_room  =  'KLR209'": "( class code ) that belongs to ( class ) , that have ( ( class room ) equal to ( 'klr209' ) )",
    "SELECT T3.Pilot_name ,  T2.Model FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID": "( pilot name of enzyme ) , ( model of staff ) that belongs to ( ( pilot record ) , and ( ( aircraft ) satisfied that ( ( aircraft id of addresses ) equal to ( aircraft id of staff ) ) ) , and ( ( pilot ) satisfied that ( ( pilot id of addresses ) equal to ( pilot id of enzyme ) ) ) )",
    "SELECT category ,  count(*) FROM book_club GROUP BY category": "( category ) , ( the number of ( all items ) ) that belongs to ( book club ) , grouped by ( category )",
    "SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  \"Lisa\" ORDER BY T1.Allergy": "( allergy of addresses ) , ( allergytype of addresses ) that belongs to ( ( allergy type ) , and ( ( has allergy ) satisfied that ( ( allergy of addresses ) equal to ( allergy of staff ) ) ) , and ( ( student ) satisfied that ( ( stuid of enzyme ) equal to ( stuid of staff ) ) ) ) , that have ( ( fname of enzyme ) equal to ( lisa ) ) , ordered by ( ( allergy of addresses ) )",
    "SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id": "( investor id ) , ( the average of ( share count ) ) that belongs to ( transactions ) , grouped by ( investor id )",
    "SELECT DISTINCT firstname ,  lastname FROM teachers": "( distinct ( firstname ) ) , ( lastname ) that belongs to ( teachers )",
    "SELECT name ,  CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)": "( name ) , ( class ) that belongs to ( ship ) , that have ( ( ship_id ) not in ( ( ship id ) that belongs to ( captain ) ) )",
    "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T2.Product_Name  =  \"film\"": "( store phone of addresses ) , ( store email address of addresses ) that belongs to ( ( drama workshop groups ) , and ( ( services ) satisfied that ( ( workshop group id of addresses ) equal to ( workshop group id of staff ) ) ) ) , that have ( ( product name of staff ) equal to ( film ) )",
    "SELECT avg(bedroom_count) FROM Apartments": "( the average of ( bedroom count ) ) that belongs to ( apartments )",
    "SELECT name ,  distance FROM Aircraft": "( name ) , ( distance ) that belongs to ( aircraft )",
    "SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id": "( employee name ) that belongs to ( employees ), and except that ( ( employee name of employees ) that belongs to ( employees , and ( circulation history satisfied that ( ( employee id of circulation history ) equal to ( employee id of employees ) ) ) ))",
    "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)": "( name of addresses ) that belongs to ( ( person ) , and ( ( personfriend ) satisfied that ( ( name of addresses ) equal to ( name of staff ) ) ) ) , that have ( ( t2.friend ) in ( ( name ) that belongs to ( person ) , that have ( ( age ) greater than ( 40 ) ) ) ), and intersect with ( ( name of addresses ) that belongs to ( ( person ) , and ( ( personfriend ) satisfied that ( ( name of addresses ) equal to ( name of staff ) ) ) ) , that have ( ( t2.friend ) in ( ( name ) that belongs to ( person ) , that have ( ( age ) less than ( 30 ) ) ) ))",
    "SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF'": "( document date of addresses ) that belongs to ( ( documents ) , and ( ( documents with expenses ) satisfied that ( ( document id of addresses ) equal to ( document id of staff ) ) ) ) , that have ( ( budget type code of staff ) equal to ( 'gv' ) ), and intersect with ( ( document date of addresses ) that belongs to ( ( documents ) , and ( ( documents with expenses ) satisfied that ( ( document id of addresses ) equal to ( document id of staff ) ) ) ) , that have ( ( budget type code of staff ) equal to ( 'sf' ) ))",
    "SELECT t1.route_name FROM Delivery_Routes AS t1 JOIN Delivery_Route_Locations AS t2 ON t1.route_id  =  t2.route_id GROUP BY t1.route_id ORDER BY count(*) DESC LIMIT 1": "( route name of club ) that belongs to ( ( delivery routes ) , and ( ( delivery route locations ) satisfied that ( ( route id of club ) equal to ( route id of member of club ) ) ) ) , grouped by ( route id of club ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM election": "( the number of ( all items ) ) that belongs to ( election )",
    "SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;": "( city of addresses ) , ( the number of ( all items ) ) that belongs to ( ( addresses ) , and ( ( staff ) satisfied that ( ( address id of addresses ) equal to ( staff address id of staff ) ) ) ) , grouped by ( city of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM head WHERE age  >  56": "( the number of ( all items ) ) that belongs to ( head ) , that have ( ( age ) greater than ( 56 ) )",
    "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1": "( name of staff ) that belongs to ( ( entrepreneur ) , and ( ( people ) satisfied that ( ( people id of addresses ) equal to ( people id of staff ) ) ) ) , ordered by ( ( weight of staff ) in descending order ) , limited to the top ( 1 )",
    "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1": "( district name ) that belongs to ( district ) , ordered by ( ( city area ) in ascending order ) , limited to the top ( 1 )",
    "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID WHERE T1.CName  =  \"COMPUTER LITERACY\"": "( fname of staff ) , ( lname of staff ) that belongs to ( ( course ) , and ( ( faculty ) satisfied that ( ( instructor of addresses ) equal to ( facid of staff ) ) ) ) , that have ( ( cname of addresses ) equal to ( computer literacy ) )",
    "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)": "( distinct ( salary ) ) that belongs to ( instructor ) , that have ( ( salary ) less than ( the maximum of ( salary ) ) that belongs to ( instructor ) )",
    "SELECT name FROM enzyme ORDER BY name DESC": "( name ) that belongs to ( enzyme ) , ordered by ( ( name ) in descending order )",
    "SELECT count(*) FROM flight WHERE velocity  >  200": "( the number of ( all items ) ) that belongs to ( flight ) , that have ( ( velocity ) greater than ( 200 ) )",
    "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)": "( the average of ( credit score ) ) that belongs to ( customer ) , that have ( ( cust_id ) in ( ( cust id ) that belongs to ( loan ) ) )",
    "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"New policy application\"": "( customer name of club ) that belongs to ( ( customers ) , and ( ( first notification of loss ) satisfied that ( ( customer id of club ) equal to ( customer id of member of club ) ) ) , and ( ( services ) satisfied that ( ( service id of member of club ) equal to ( service id of student ) ) ) ) , that have ( ( service name of student ) equal to ( close a policy ) ), and intersect with ( ( customer name of club ) that belongs to ( ( customers ) , and ( ( first notification of loss ) satisfied that ( ( customer id of club ) equal to ( customer id of member of club ) ) ) , and ( ( services ) satisfied that ( ( service id of member of club ) equal to ( service id of student ) ) ) ) , that have ( ( service name of student ) equal to ( new policy application ) ))",
    "SELECT count(*) FROM bank": "( the number of ( all items ) ) that belongs to ( bank )",
    "SELECT name ,  email FROM user_profiles WHERE name LIKE '%Swift%'": "( name ) , ( email ) that belongs to ( user profiles ) , that have ( ( name ) like ( '%swift%' ) )",
    "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  >  50000 OR avg(total_amount_purchased)  <  30000": "( supplier id ) that belongs to ( product suppliers ) , grouped by ( supplier id ) , that have ( ( ( the average of ( total amount purchased ) ) greater than ( 50000 ) ) or ( ( the average of ( total amount purchased ) ) less than ( 30000 ) ) )",
    "SELECT count(DISTINCT President_Vote) FROM VOTING_RECORD": "( the number of ( distinct ( president vote ) ) ) that belongs to ( voting record )",
    "SELECT count(DISTINCT product_type_code) FROM products": "( the number of ( distinct ( product type code ) ) ) that belongs to ( products )",
    "SELECT Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_Region_Name  =  \"China\"": "( marketing region descriptrion ) that belongs to ( marketing regions ) , that have ( ( marketing region name ) equal to ( china ) )",
    "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.source_u_id GROUP BY T2.source_u_id ORDER BY avg(trust) DESC LIMIT 1": "( name of addresses ) that belongs to ( ( useracct ) , and ( ( trust ) satisfied that ( ( u id of addresses ) equal to ( source u id of staff ) ) ) ) , grouped by ( source u id of staff ) , ordered by ( ( the average of ( trust ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT city ,  GDP FROM city ORDER BY GDP LIMIT 1": "( city ) , ( gdp ) that belongs to ( city ) , ordered by ( ( gdp ) ) , limited to the top ( 1 )",
    "SELECT count(*) FROM debate": "( the number of ( all items ) ) that belongs to ( debate )",
    "SELECT avg(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  \"SALE\"": "( the average of ( amount of transaction ) ) that belongs to ( transactions ) , that have ( ( transaction type code ) equal to ( sale ) )",
    "SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Functional%\"": "( fname of club ) that belongs to ( ( authors ) , and ( ( authorship ) satisfied that ( ( authid of club ) equal to ( authid of member of club ) ) ) , and ( ( papers ) satisfied that ( ( paperid of member of club ) equal to ( paperid of student ) ) ) ) , that have ( ( t3.title ) like ( %functional% ) )",
    "SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC": "( the number of ( all items ) ) , ( cname ) that belongs to ( tryout ) , grouped by ( cname ) , ordered by ( ( the number of ( all items ) ) in descending order )",
    "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1": "( name of addresses ) that belongs to ( ( genre ) , and ( ( track ) satisfied that ( ( genreid of addresses ) equal to ( genreid of staff ) ) ) ) , grouped by ( genreid of staff ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient  =  T1.SSN JOIN Medication AS T3 ON T2.Medication  =  T3.Code WHERE T3.name  =  'Procrastin-X'": "( name ) that belongs to ( patient ), and except that ( ( name of addresses ) that belongs to ( ( patient ) , and ( ( prescribes ) satisfied that ( ( patient of staff ) equal to ( ssn of addresses ) ) ) , and ( ( medication ) satisfied that ( ( medication of staff ) equal to ( code of enzyme ) ) ) ) , that have ( ( name of enzyme ) equal to ( 'procrastin-x' ) ))",
    "SELECT max(Cows) ,  min(Cows) FROM farm": "( the maximum of ( cows ) ) , ( the minimum of ( cows ) ) that belongs to ( farm )",
    "SELECT name FROM building ORDER BY height_feet DESC LIMIT 1": "( name ) that belongs to ( building ) , ordered by ( ( height feet ) in descending order ) , limited to the top ( 1 )",
    "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"": "( lname of student ) that belongs to ( ( club ) , and ( ( member of club ) satisfied that ( ( clubid of club ) equal to ( clubid of member of club ) ) ) , and ( ( student ) satisfied that ( ( stuid of member of club ) equal to ( stuid of student ) ) ) ) , that have ( ( clubname of club ) equal to ( bootup baltimore ) )",
    "SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT 1": "( dept name of staff ) that belongs to ( ( professor ) , and ( ( department ) satisfied that ( ( dept code of addresses ) equal to ( dept code of staff ) ) ) ) , grouped by ( dept code of addresses ) , ordered by ( ( the number of ( all items ) ) ) , limited to the top ( 1 )",
    "SELECT role_code ,  role_name ,  role_description FROM ROLES": "( role code ) , ( role name ) , ( role description ) that belongs to ( roles )",
    "SELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type": "( transaction type ) , ( the sum of ( transaction amount ) ) that belongs to ( financial transactions ) , grouped by ( transaction type )",
    "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5": "( name of staff ) that belongs to ( ( certificate ) , and ( ( aircraft ) satisfied that ( ( aid of staff ) equal to ( aid of addresses ) ) ) ) , that have ( ( distance of staff ) greater than ( 5000 ) ) , grouped by ( aid of addresses ) , ordered by ( ( ( the number of ( all items ) ) greater than or equal to ( 5 ) ) )",
    "SELECT count(*) FROM products": "( the number of ( all items ) ) that belongs to ( products )",
    "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\"": "( cell mobile number of enzyme ) that belongs to ( ( candidates ) , and ( ( candidate assessments ) satisfied that ( ( candidate id of addresses ) equal to ( candidate id of staff ) ) ) , and ( ( people ) satisfied that ( ( candidate id of addresses ) equal to ( person id of enzyme ) ) ) ) , that have ( ( asessment outcome code of staff ) equal to ( fail ) )",
    "SELECT Name FROM editor ORDER BY Age ASC LIMIT 1": "( name ) that belongs to ( editor ) , ordered by ( ( age ) in ascending order ) , limited to the top ( 1 )",
    "SELECT DISTINCT Region FROM club ORDER BY Region ASC": "( distinct ( region ) ) that belongs to ( club ) , ordered by ( ( region ) in ascending order )",
    "SELECT Name FROM technician WHERE Team != \"NYY\"": "( name ) that belongs to ( technician ) , that have ( ( team ) not equal to ( nyy ) )",
    "SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'": "( the sum of ( no of customers ) ) that belongs to ( bank ) , that have ( ( city ) equal to ( 'new york city' ) )",
    "SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1": "( product id ) that belongs to ( order items ) , grouped by ( product id ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1;": "( company name ) , ( the number of ( all items ) ) that belongs to ( phone ) , grouped by ( company name ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( 1 )",
    "SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3": "( dept name of staff ) , ( dept address of staff ) , ( the number of ( all items ) ) that belongs to ( ( student ) , and ( ( department ) satisfied that ( ( dept code of addresses ) equal to ( dept code of staff ) ) ) ) , grouped by ( dept code of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 3 )",
    "SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT 1": "( bname of addresses ) that belongs to ( ( bank ) , and ( ( loan ) satisfied that ( ( branch id of addresses ) equal to ( branch id of staff ) ) ) ) , grouped by ( bname of addresses ) , ordered by ( ( the sum of ( amount of staff ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT DISTINCT grade FROM list WHERE classroom  =  105": "( distinct ( grade ) ) that belongs to ( list ) , that have ( ( classroom ) equal to ( 105 ) )",
    "SELECT lastname FROM list WHERE classroom  =  111": "( lastname ) that belongs to ( list ) , that have ( ( classroom ) equal to ( 111 ) )",
    "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num": "( emp fname ) that belongs to ( employee ) , that have ( ( emp jobcode ) equal to ( 'prof' ) ), and except that ( ( emp fname of addresses ) that belongs to ( ( employee ) , and ( ( class ) satisfied that ( ( emp num of addresses ) equal to ( prof num of staff ) ) ) ))",
    "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1": "( course name of addresses ) that belongs to ( ( courses ) , and ( ( student course enrolment ) satisfied that ( ( course id of addresses ) equal to ( course id of staff ) ) ) ) , grouped by ( course name of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1": "( position ) that belongs to ( match season ) , grouped by ( position ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'": "( name of staff ) , ( salary of staff ) that belongs to ( ( advisor ) , and ( ( instructor ) satisfied that ( ( i id of addresses ) equal to ( id of staff ) ) ) , and ( ( student ) satisfied that ( ( s id of addresses ) equal to ( id of enzyme ) ) ) ) , that have ( ( dept name of enzyme ) equal to ( 'history' ) )",
    "SELECT Festival_Name FROM festival_detail WHERE YEAR  =  2007": "( festival name ) that belongs to ( festival detail ) , that have ( ( year ) equal to ( 2007 ) )",
    "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  \"Female\"": "( booking start date of addresses ) , ( booking start date of addresses ) that belongs to ( ( apartment bookings ) , and ( ( guests ) satisfied that ( ( guest id of addresses ) equal to ( guest id of staff ) ) ) ) , that have ( ( gender code of staff ) equal to ( female ) )",
    "SELECT Name FROM People ORDER BY Name ASC": "( name ) that belongs to ( people ) , ordered by ( ( name ) in ascending order )",
    "SELECT CLASS ,  count(*) FROM race GROUP BY CLASS": "( class ) , ( the number of ( all items ) ) that belongs to ( race ) , grouped by ( class )",
    "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1": "( company name of addresses ) that belongs to ( ( third party companies ) , and ( ( maintenance contracts ) satisfied that ( ( company id of addresses ) equal to ( maintenance contract company id of staff ) ) ) ) , ordered by ( ( contract start date of staff ) in ascending order ) , limited to the top ( 1 )",
    "SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation": "( the sum of ( enrollment ) ) , ( affiliation ) that belongs to ( university ) , grouped by ( affiliation )",
    "SELECT count(DISTINCT roomtype) FROM room": "( the number of ( distinct ( roomtype ) ) ) that belongs to ( room )",
    "SELECT name FROM enzyme WHERE product != 'Heme'": "( name ) that belongs to ( enzyme ) , that have ( ( product ) not equal to ( 'heme' ) )",
    "SELECT sum(enr) FROM College": "( the sum of ( enr ) ) that belongs to ( college )",
    "SELECT count(DISTINCT city) FROM bank": "( the number of ( distinct ( city ) ) ) that belongs to ( bank )",
    "SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;": "( first name of addresses ) , ( last name of addresses ) , ( the sum of ( total of staff ) ) that belongs to ( ( customers ) , and ( ( invoices ) satisfied that ( ( customer id of staff ) equal to ( id of addresses ) ) ) ) , grouped by ( id of addresses ) , ordered by ( ( the sum of ( total of staff ) ) in descending order ) , limited to the top ( 10 )",
    "SELECT Country FROM market ORDER BY Country ASC": "( country ) that belongs to ( market ) , ordered by ( ( country ) in ascending order )",
    "SELECT title FROM item ORDER BY title": "( title ) that belongs to ( item ) , ordered by ( ( title ) )",
    "SELECT order_id FROM shipments WHERE shipment_tracking_number = \"3452\"": "( order id ) that belongs to ( shipments ) , that have ( ( shipment tracking number ) equal to ( 3452 ) )",
    "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'": "( distinct ( name of enzyme ) ) that belongs to ( ( rating ) , and ( ( movie ) satisfied that ( ( mid of addresses ) equal to ( mid of staff ) ) ) , and ( ( reviewer ) satisfied that ( ( rid of addresses ) equal to ( rid of enzyme ) ) ) ) , that have ( ( title of staff ) equal to ( 'gone with the wind' ) )",
    "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1": "( governor ) that belongs to ( party ) , grouped by ( governor ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM Church WHERE Open_Date  <  1850": "( the number of ( all items ) ) that belongs to ( church ) , that have ( ( open date ) less than ( 1850 ) )",
    "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  \"Heilo\" AND T2.title  =  \"Der Kapitan\"": "( type ) that belongs to ( ( vocals ) , and ( ( songs ) satisfied that ( ( songid of addresses ) equal to ( songid of staff ) ) ) , and ( ( band ) satisfied that ( ( bandmate of addresses ) equal to ( id of enzyme ) ) ) ) , that have ( ( ( lastname of enzyme ) equal to ( heilo ) ) and ( ( title of staff ) equal to ( der kapitan ) ) )",
    "SELECT T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID WHERE T2.Name  =  \"Andaman Exp\"": "( builder of addresses ) that belongs to ( ( railway ) , and ( ( train ) satisfied that ( ( railway id of addresses ) equal to ( railway id of staff ) ) ) ) , that have ( ( name of staff ) equal to ( andaman exp ) )",
    "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)": "( name ) that belongs to ( student ) , that have ( ( id ) in ( ( id ) that belongs to ( takes ) , that have ( ( ( semester ) equal to ( 'fall' ) ) and ( ( year ) equal to ( 2003 ) ) ) ) )",
    "SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1": "( name ) , ( headquarter ) , ( founder ) that belongs to ( manufacturers ) , ordered by ( ( revenue ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM addresses WHERE country  =  'USA'": "( the number of ( all items ) ) that belongs to ( addresses ) , that have ( ( country ) equal to ( 'usa' ) )",
    "SELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY Vote_Percent DESC": "( lifespan of staff ) that belongs to ( ( election ) , and ( ( representative ) satisfied that ( ( representative id of addresses ) equal to ( representative id of staff ) ) ) ) , ordered by ( ( vote percent ) in descending order )",
    "SELECT * FROM swimmer": "all items that belongs to ( swimmer )",
    "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1": "( bname of staff ) that belongs to ( ( loan ) , and ( ( bank ) satisfied that ( ( branch id of addresses ) equal to ( branch id of staff ) ) ) , and ( ( customer ) satisfied that ( ( cust id of addresses ) equal to ( cust id of enzyme ) ) ) ) , that have ( ( credit score of enzyme ) less than ( 100 ) ) , grouped by ( bname of staff ) , ordered by ( ( the sum of ( amount of addresses ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \"Confirmed\"": "( guest first name of staff ) , ( guest last name of staff ) that belongs to ( ( apartment bookings ) , and ( ( guests ) satisfied that ( ( guest id of addresses ) equal to ( guest id of staff ) ) ) ) , that have ( ( booking status code of addresses ) equal to ( confirmed ) )",
    "SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'": "( name ) , ( city ) , ( country ) , ( elevation ) that belongs to ( airports ) , that have ( ( city ) equal to ( 'new york' ) )",
    "SELECT name ,  max(revenue) ,  Headquarter FROM manufacturers GROUP BY Headquarter": "( name ) , ( the maximum of ( revenue ) ) , ( headquarter ) that belongs to ( manufacturers ) , grouped by ( headquarter )",
    "SELECT station_id ,  LOCATION ,  manager_name FROM gas_station ORDER BY open_year": "( station id ) , ( location ) , ( manager name ) that belongs to ( gas station ) , ordered by ( ( open year ) )",
    "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name": "( name of staff ) , ( the number of ( all items ) ) that belongs to ( ( repair assignment ) , and ( ( technician ) satisfied that ( ( technician id of addresses ) equal to ( technician id of staff ) ) ) ) , grouped by ( name of staff )",
    "SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%'": "( daily hire cost ) that belongs to ( products for hire ) , that have ( ( product_name ) like ( '%book%' ) )",
    "SELECT T1.staff_id ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Department Manager\"": "( staff id of addresses ) , ( staff gender of addresses ) that belongs to ( ( staff ) , and ( ( staff department assignments ) satisfied that ( ( staff id of addresses ) equal to ( staff id of staff ) ) ) ) , that have ( ( job title code of staff ) equal to ( department manager ) )",
    "SELECT sum(Amount_Claimed) FROM Claims": "( the sum of ( amount claimed ) ) that belongs to ( claims )",
    "SELECT distinct(Famous_Release_date) FROM artist": "( distinct ( famous release date ) ) that belongs to ( artist )",
    "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  'Accounting' OR T2.dept_name  =  'Biology'": "( the number of ( all items ) ) that belongs to ( ( professor ) , and ( ( department ) satisfied that ( ( dept code of addresses ) equal to ( dept code of staff ) ) ) ) , that have ( ( ( dept name of staff ) equal to ( 'accounting' ) ) or ( ( dept name of staff ) equal to ( 'biology' ) ) )",
    "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;": "( billing country ) , ( the sum of ( total ) ) that belongs to ( invoices ) , grouped by ( billing country ) , ordered by ( ( the sum of ( total ) ) in descending order ) , limited to the top ( 8 )",
    "SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T2.Country  =  \"Japan\" ORDER BY T1.Year DESC": "( year of addresses ) that belongs to ( ( film market estimation ) , and ( ( market ) satisfied that ( ( market id of addresses ) equal to ( market id of staff ) ) ) ) , that have ( ( country of staff ) equal to ( japan ) ) , ordered by ( ( year of addresses ) in descending order )",
    "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'": "( eid ) , ( salary ) that belongs to ( employee ) , that have ( ( name ) equal to ( 'mark young' ) )",
    "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1": "( name of staff ) that belongs to ( ( advisor ) , and ( ( instructor ) satisfied that ( ( i id of addresses ) equal to ( id of staff ) ) ) , and ( ( student ) satisfied that ( ( s id of addresses ) equal to ( id of enzyme ) ) ) ) , ordered by ( ( tot cred of enzyme ) in descending order ) , limited to the top ( 1 )",
    "SELECT title FROM songs WHERE title LIKE '% the %'": "( title ) that belongs to ( songs ) , that have ( ( title ) like ( '% the %' ) )",
    "SELECT count(*) FROM aircraft": "( the number of ( all items ) ) that belongs to ( aircraft )",
    "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2": "( booking start date of addresses ) , ( booking start date of addresses ) that belongs to ( ( apartment bookings ) , and ( ( apartments ) satisfied that ( ( apt id of addresses ) equal to ( apt id of staff ) ) ) ) , that have ( ( bedroom count of staff ) greater than ( 2 ) )",
    "SELECT DISTINCT CLASS FROM race": "( distinct ( class ) ) that belongs to ( race )",
    "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000": "( name of addresses ) that belongs to ( ( physician ) , and ( ( trained in ) satisfied that ( ( employeeid of addresses ) equal to ( physician of staff ) ) ) , and ( ( procedures ) satisfied that ( ( code of enzyme ) equal to ( treatment of staff ) ) ) ) , that have ( ( cost of enzyme ) greater than ( 5000 ) )",
    "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1": "( name of addresses ) that belongs to ( ( physician ) , and ( ( prescribes ) satisfied that ( ( employeeid of addresses ) equal to ( physician of staff ) ) ) ) , ordered by ( ( dose of staff ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'": "( the number of ( all items ) ) that belongs to ( ( routes ) , and ( ( airports ) satisfied that ( ( dst apid of addresses ) equal to ( apid of staff ) ) ) , and ( ( airlines ) satisfied that ( ( alid of addresses ) equal to ( alid of enzyme ) ) ) ) , that have ( ( ( country of staff ) equal to ( 'italy' ) ) and ( ( name of enzyme ) equal to ( 'american airlines' ) ) )",
    "SELECT count(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = \"voluptatem\"": "( the number of ( all items ) ) that belongs to ( ( product ) , and ( ( problems ) satisfied that ( ( product id of addresses ) equal to ( product id of staff ) ) ) ) , that have ( ( product name of addresses ) equal to ( voluptatem ) )",
    "SELECT name FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record)": "( name ) that belongs to ( swimmer ) , that have ( ( id ) not in ( ( swimmer id ) that belongs to ( record ) ) )",
    "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name  =  \"Nokia Corporation\" AND T1.Type != \"Text\";": "( distinct ( hardware model name of staff ) ) that belongs to ( ( screen mode ) , and ( ( phone ) satisfied that ( ( graphics mode of addresses ) equal to ( screen mode of staff ) ) ) ) , that have ( ( ( company name of member of club ) equal to ( nokia corporation ) ) and ( ( type of addresses ) not equal to ( text ) ) )",
    "SELECT Name FROM phone WHERE Carrier  =  \"Sprint\" OR Carrier  =  \"TMobile\"": "( name ) that belongs to ( phone ) , that have ( ( ( carrier ) equal to ( sprint ) ) or ( ( carrier ) equal to ( tmobile ) ) )",
    "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id": "( distinct ( customer first name of addresses ) ) , ( customer last name of addresses ) that belongs to ( ( customers ) , and ( ( accounts ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) )",
    "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = \"Cancel\" AND T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1": "( customer name of addresses ) that belongs to ( ( customers ) join ( ( orders ) ) join ( ( order items ) ) , and ( ( products ) satisfied that ( ( ( customer id of addresses ) equal to ( customer id of staff ) ) and ( ( order id of staff ) equal to ( order id of enzyme ) ) and ( ( product id of enzyme ) equal to ( product id of trip ) ) ) ) ) , that have ( ( ( order item status of enzyme ) equal to ( cancel ) ) and ( ( product name of trip ) equal to ( food ) ) ) , grouped by ( customer id of addresses ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 1 ) )",
    "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id ORDER BY trust LIMIT 1": "( name of addresses ) that belongs to ( ( useracct ) , and ( ( trust ) satisfied that ( ( u id of addresses ) equal to ( target u id of staff ) ) ) ) , ordered by ( ( trust ) ) , limited to the top ( 1 )",
    "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1": "( patient ) that belongs to ( undergoes ) , ordered by ( ( dateundergoes ) ) , limited to the top ( 1 )",
    "SELECT DISTINCT allergytype FROM Allergy_type": "( distinct ( allergytype ) ) that belongs to ( allergy type )",
    "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id": "( customer id ) , ( the number of ( all items ) ) that belongs to ( customers cards ) , grouped by ( customer id )",
    "SELECT count(*) FROM campuses WHERE county  =  \"Los Angeles\"": "( the number of ( all items ) ) that belongs to ( campuses ) , that have ( ( county ) equal to ( los angeles ) )",
    "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'": "( distinct ( state of addresses ) ) that belongs to ( ( college ) , and ( ( tryout ) satisfied that ( ( cname of addresses ) equal to ( cname of staff ) ) ) ) , that have ( ( decision of staff ) equal to ( 'yes' ) )",
    "SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  \"Acknowledgement\"": "( the average of ( access count of club ) ) that belongs to ( ( documents ) , and ( ( document functional areas ) satisfied that ( ( document code of club ) equal to ( document code of member of club ) ) ) , and ( ( functional areas ) satisfied that ( ( functional area code of member of club ) equal to ( functional area code of student ) ) ) ) , that have ( ( functional area description of student ) equal to ( acknowledgement ) )",
    "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1": "( role code ) that belongs to ( employees ) , grouped by ( role code ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1": "( fname of addresses ) , ( lname of addresses ) that belongs to ( ( faculty ) , and ( ( student ) satisfied that ( ( facid of addresses ) equal to ( advisor of staff ) ) ) ) , grouped by ( facid of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name": "( the number of ( all items ) ) , ( name of addresses ) that belongs to ( ( accounts ) , and ( ( checking ) satisfied that ( ( custid of addresses ) equal to ( custid of staff ) ) ) ) , grouped by ( name of addresses )",
    "SELECT COUNT (DISTINCT team) FROM elimination": "( the number of ( distinct ( team ) ) ) that belongs to ( elimination )",
    "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID": "( year of staff ) , ( official name of addresses ) that belongs to ( ( city ) , and ( ( farm competition ) satisfied that ( ( city id of addresses ) equal to ( host city id of staff ) ) ) )",
    "SELECT count(*) ,  sum(student_capacity) ,  gender FROM dorm GROUP BY gender": "( the number of ( all items ) ) , ( the sum of ( student capacity ) ) , ( gender ) that belongs to ( dorm ) , grouped by ( gender )",
    "SELECT region_name FROM region ORDER BY region_name": "( region name ) that belongs to ( region ) , ordered by ( ( region name ) )",
    "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1": "( team name of member of club ) , ( acc regular season of member of club ) that belongs to ( ( university ) , and ( ( basketball match ) satisfied that ( ( school id of club ) equal to ( school id of member of club ) ) ) ) , ordered by ( ( founded of club ) ) , limited to the top ( 1 )",
    "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall' ORDER BY T3.amenity_name": "( amenity name of enzyme ) that belongs to ( ( dorm ) , and ( ( has amenity ) satisfied that ( ( dormid of addresses ) equal to ( dormid of staff ) ) ) , and ( ( dorm amenity ) satisfied that ( ( amenid of staff ) equal to ( amenid of enzyme ) ) ) ) , that have ( ( dorm name of addresses ) equal to ( 'smith hall' ) ) , ordered by ( ( amenity name of enzyme ) )",
    "SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC": "( name ) , ( price ) that belongs to ( products ) , that have ( ( price ) greater than or equal to ( 180 ) ) , ordered by ( ( price ) desc,( name ) in ascending order )",
    "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001": "( degrees ) that belongs to ( ( campuses ) , and ( ( degrees ) satisfied that ( ( id of club ) equal to ( campus of member of club ) ) ) ) , that have ( ( ( campus of club ) equal to ( san francisco state university ) ) and ( ( year of member of club ) equal to ( 2001 ) ) )",
    "SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'omnis' UNION SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.project_id HAVING count(*)  >  2": "( task details of addresses ) , ( task id of addresses ) , ( project id of staff ) that belongs to ( ( tasks ) , and ( ( projects ) satisfied that ( ( project id of addresses ) equal to ( project id of staff ) ) ) ) , that have ( ( project details of staff ) equal to ( 'omnis' ) ) and ( task details of addresses ) , ( task id of addresses ) , ( project id of staff ) that belongs to ( ( tasks ) , and ( ( projects ) satisfied that ( ( project id of addresses ) equal to ( project id of staff ) ) ) , and ( ( project outcomes ) satisfied that ( ( project id of staff ) equal to ( project id of enzyme ) ) ) ) , grouped by ( project id of staff ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )",
    "SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id WHERE T3.name  =  'CACHEbox' AND T2.name  =  'Internet Explorer'": "( compatible since year of addresses ) that belongs to ( ( accelerator compatible browser ) , and ( ( browser ) satisfied that ( ( browser id of addresses ) equal to ( id of staff ) ) ) , and ( ( web client accelerator ) satisfied that ( ( accelerator id of addresses ) equal to ( id of enzyme ) ) ) ) , that have ( ( ( name of enzyme ) equal to ( 'cachebox' ) ) and ( ( name of staff ) equal to ( 'internet explorer' ) ) )",
    "SELECT district_name FROM district WHERE city_area  >  10 OR City_Population  >  100000": "( district name ) that belongs to ( district ) , that have ( ( ( city area ) greater than ( 10 ) ) or ( ( city population ) greater than ( 100000 ) ) )",
    "SELECT Shop_Name FROM shop ORDER BY Open_Year DESC LIMIT 1": "( shop name ) that belongs to ( shop ) , ordered by ( ( open year ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2": "( title of addresses ) that belongs to ( ( course ) , and ( ( prereq ) satisfied that ( ( course id of addresses ) equal to ( course id of staff ) ) ) ) , grouped by ( course id of staff ) , that have ( ( the number of ( all items ) ) equal to ( 2 ) )",
    "SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'researcher'": "( date from ) , ( date to ) that belongs to ( project staff ) , that have ( ( role code ) equal to ( 'researcher' ) )",
    "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\"": "( the average of ( age of addresses ) ) that belongs to ( ( student ) , and ( ( voting record ) satisfied that ( ( stuid of addresses ) equal to ( secretary vote ) ) ) ) , that have ( ( ( city code of addresses ) equal to ( nyc ) ) and ( ( election cycle of staff ) equal to ( spring ) ) )",
    "SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*)  >=  2": "( studio ) that belongs to ( film ) , grouped by ( studio ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT HOST FROM performance ORDER BY Attendance ASC": "( host ) that belongs to ( performance ) , ordered by ( ( attendance ) in ascending order )",
    "SELECT Name FROM TRACK WHERE Name LIKE '%you%'": "( name ) that belongs to ( track ) , that have ( ( name ) like ( '%you%' ) )",
    "SELECT count(*) FROM Documents": "( the number of ( all items ) ) that belongs to ( documents )",
    "SELECT count(*) ,  city_code FROM student GROUP BY city_code HAVING count(*)  >  1": "( the number of ( all items ) ) , ( city code ) that belongs to ( student ) , grouped by ( city code ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3": "( investor id of staff ) , ( investor details of addresses ) that belongs to ( ( investors ) , and ( ( transactions ) satisfied that ( ( investor id of addresses ) equal to ( investor id of staff ) ) ) ) , grouped by ( investor id of staff ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 3 )",
    "SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'": "( dept name of staff ) that belongs to ( ( course ) , and ( ( department ) satisfied that ( ( dept code of addresses ) equal to ( dept code of staff ) ) ) ) , that have ( ( t1.crs_description ) like ( '%statistics%' ) )",
    "SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id": "( first name of addresses ) , ( last name of addresses ) , ( employee id of addresses ) , ( country name of trip ) that belongs to ( ( employees ) , and ( ( departments ) satisfied that ( ( department id of addresses ) equal to ( department id of staff ) ) ) , and ( ( locations ) satisfied that ( ( location id of staff ) equal to ( location id of enzyme ) ) ) , and ( ( countries ) satisfied that ( ( country id of enzyme ) equal to ( country id of trip ) ) ) )",
    "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code": "( outcome description of addresses ) that belongs to ( ( research outcomes ) , and ( ( project outcomes ) satisfied that ( ( outcome code of addresses ) equal to ( outcome code of staff ) ) ) )",
    "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1": "( customer id ) , ( the number of ( all items ) ) that belongs to ( customers cards ) , grouped by ( customer id ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM body_builder": "( the number of ( all items ) ) that belongs to ( body builder )",
    "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  \"Linda\" AND T2.lname  =  \"Smith\"": "( fname of addresses ) , ( lname of addresses ) that belongs to ( ( faculty ) , and ( ( student ) satisfied that ( ( facid of addresses ) equal to ( advisor of staff ) ) ) ) , that have ( ( ( fname of staff ) equal to ( linda ) ) and ( ( lname of staff ) equal to ( smith ) ) )",
    "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating": "( f id ) , ( genre is ) , ( artist name ) that belongs to ( song ) , that have ( ( languages ) equal to ( english ) ) , ordered by ( ( rating ) )",
    "SELECT count(DISTINCT Governor) FROM party": "( the number of ( distinct ( governor ) ) ) that belongs to ( party )",
    "SELECT First_year ,  Last_year FROM party WHERE Party_Theme  =  \"Spring\" OR Party_Theme  =  \"Teqnology\"": "( first year ) , ( last year ) that belongs to ( party ) , that have ( ( ( party theme ) equal to ( spring ) ) or ( ( party theme ) equal to ( teqnology ) ) )",
    "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0": "( state ) , ( acc type ) , ( credit score ) that belongs to ( customer ) , that have ( ( no of loans ) equal to ( 0 ) )",
    "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1": "( official name of addresses ) that belongs to ( ( city ) , and ( ( farm competition ) satisfied that ( ( city id of addresses ) equal to ( host city id of staff ) ) ) ) , grouped by ( host city id of staff ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT Name FROM member ORDER BY Name ASC": "( name ) that belongs to ( member ) , ordered by ( ( name ) in ascending order )",
    "SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'": "( name first of staff ) , ( name last of staff ) that belongs to ( ( salary ) , and ( ( player ) satisfied that ( ( player id of addresses ) equal to ( player id of staff ) ) ) , and ( ( team ) satisfied that ( ( team id br of enzyme ) equal to ( team id of addresses ) ) ) ) , that have ( ( ( year of addresses ) equal to ( 2005 ) ) and ( ( name of enzyme ) equal to ( 'washington nationals' ) ) ), and intersect with ( ( name first of staff ) , ( name last of staff ) that belongs to ( ( salary ) , and ( ( player ) satisfied that ( ( player id of addresses ) equal to ( player id of staff ) ) ) , and ( ( team ) satisfied that ( ( team id br of enzyme ) equal to ( team id of addresses ) ) ) ) , that have ( ( ( year of addresses ) equal to ( 2007 ) ) and ( ( name of enzyme ) equal to ( 'washington nationals' ) ) ))",
    "SELECT last_name FROM Teachers EXCEPT SELECT T1.last_name FROM Teachers AS T1 JOIN Detention AS T2 ON T1.teacher_id  =  T2.teacher_id": "( last name ) that belongs to ( teachers ), and except that ( ( last name of addresses ) that belongs to ( ( teachers ) , and ( ( detention ) satisfied that ( ( teacher id of addresses ) equal to ( teacher id of staff ) ) ) ))",
    "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\" AND t3.characteristic_type_code  =  \"Grade\"": "( characteristic name of student ) that belongs to ( ( products ) , and ( ( product characteristics ) satisfied that ( ( product id of club ) equal to ( product id of member of club ) ) ) , and ( ( characteristics ) satisfied that ( ( characteristic id of member of club ) equal to ( characteristic id of student ) ) ) ) , that have ( ( ( product name of club ) equal to ( sesame ) ) and ( ( characteristic type code of student ) equal to ( grade ) ) )",
    "SELECT name FROM buildings WHERE Status  =  \"on-hold\" ORDER BY Stories ASC": "( name ) that belongs to ( buildings ) , that have ( ( status ) equal to ( on-hold ) ) , ordered by ( ( stories ) in ascending order )",
    "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1": "( name of addresses ) that belongs to ( ( employee ) , and ( ( certificate ) satisfied that ( ( eid of addresses ) equal to ( eid of staff ) ) ) , and ( ( aircraft ) satisfied that ( ( aid of enzyme ) equal to ( aid of staff ) ) ) ) , that have ( ( distance of enzyme ) greater than ( 5000 ) ) , grouped by ( eid of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY count(*) DESC LIMIT 1": "( role code ) that belongs to ( project staff ) , grouped by ( role code ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions": "( the average of ( transaction amount ) ) , ( the sum of ( transaction amount ) ) that belongs to ( financial transactions )",
    "SELECT DISTINCT Visit_Date FROM VISITS": "( distinct ( visit date ) ) that belongs to ( visits )",
    "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500": "( theme of staff ) that belongs to ( ( exhibition record ) , and ( ( exhibition ) satisfied that ( ( exhibition id of addresses ) equal to ( exhibition id of staff ) ) ) ) , that have ( ( attendance of addresses ) less than ( 100 ) ), and intersect with ( ( theme of staff ) that belongs to ( ( exhibition record ) , and ( ( exhibition ) satisfied that ( ( exhibition id of addresses ) equal to ( exhibition id of staff ) ) ) ) , that have ( ( attendance of addresses ) greater than ( 500 ) ))",
    "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1": "( course name of addresses ) that belongs to ( ( courses ) , and ( ( student course enrolment ) satisfied that ( ( course id of addresses ) equal to ( course id of staff ) ) ) ) , grouped by ( course name of addresses ) , that have ( ( the number of ( all items ) ) equal to ( 1 ) )",
    "SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \"Kyle\"": "( apt type code of staff ) , ( apt number of staff ) that belongs to ( ( apartment buildings ) , and ( ( apartments ) satisfied that ( ( building id of addresses ) equal to ( building id of staff ) ) ) ) , that have ( ( building manager of addresses ) equal to ( kyle ) )",
    "SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department": "( the maximum of ( budget in billions ) ) , ( the minimum of ( budget in billions ) ) that belongs to ( department )",
    "SELECT count(*) FROM STUDENT": "( the number of ( all items ) ) that belongs to ( student )",
    "SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1": "( the number of ( all items ) ) that belongs to ( customers ) , grouped by ( customer type code ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Price  >  100": "( service type description of addresses ) that belongs to ( ( ref service types ) , and ( ( services ) satisfied that ( ( service type code of addresses ) equal to ( service type code of staff ) ) ) ) , that have ( ( product price of staff ) greater than ( 100 ) )",
    "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number": "( invoice number ) , ( the number of ( all items ) ) that belongs to ( financial transactions ) , grouped by ( invoice number )",
    "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Jose State University\"": "( the sum of ( undergraduate of club ) ) that belongs to ( ( discipline enrollments ) , and ( ( campuses ) satisfied that ( ( campus of club ) equal to ( id of member of club ) ) ) ) , that have ( ( ( year of club ) equal to ( 2004 ) ) and ( ( campus of member of club ) equal to ( san jose state university ) ) )",
    "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')": "( name ) that belongs to ( pilot ) , that have ( ( pilot_id ) not in ( ( winning pilot ) that belongs to ( match ) , that have ( ( country ) equal to ( 'australia' ) ) ) )",
    "SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id  =  T2.category_id JOIN film AS T3 ON T2.film_id  =  T3.film_id WHERE T3.title  =  'HUNGER ROOF'": "( name of addresses ) that belongs to ( ( category ) , and ( ( film category ) satisfied that ( ( category id of addresses ) equal to ( category id of staff ) ) ) , and ( ( film ) satisfied that ( ( film id of staff ) equal to ( film id of enzyme ) ) ) ) , that have ( ( title of enzyme ) equal to ( 'hunger roof' ) )",
    "SELECT name FROM playlists;": "( name ) that belongs to ( playlists )",
    "SELECT name ,  main_services FROM station ORDER BY total_passengers DESC LIMIT 3": "( name ) , ( main services ) that belongs to ( station ) , ordered by ( ( total passengers ) in descending order ) , limited to the top ( 3 )",
    "SELECT phone_number FROM customers UNION SELECT phone_number FROM staff": "( phone number ) that belongs to ( customers ) and ( phone number ) that belongs to ( staff )",
    "SELECT email_address FROM Students WHERE first_name  =  \"Emma\" AND last_name  =  \"Rohan\"": "( email address ) that belongs to ( students ) , that have ( ( ( first name ) equal to ( emma ) ) and ( ( last name ) equal to ( rohan ) ) )",
    "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in": "( stuid ) that belongs to ( student ), and except that ( ( stuid ) that belongs to ( participates in ))",
    "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000": "( the number of ( all items ) ) that belongs to ( aircraft ) , that have ( ( distance ) between ( 1000 ) and ( 5000 ) )",
    "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996": "( the average of ( campusfee ) ) that belongs to ( csu fees ) , that have ( ( year ) equal to ( 1996 ) )",
    "SELECT Name FROM manager ORDER BY Age DESC LIMIT 1": "( name ) that belongs to ( manager ) , ordered by ( ( age ) in descending order ) , limited to the top ( 1 )",
    "SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2": "( dept store chain id ) that belongs to ( department stores ) , grouped by ( dept store chain id ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 2 )",
    "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'": "( cust name ) that belongs to ( customer ), and except that ( ( cust name of addresses ) that belongs to ( ( customer ) , and ( ( loan ) satisfied that ( ( cust id of addresses ) equal to ( cust id of staff ) ) ) ) , that have ( ( loan type of staff ) equal to ( 'mortgages' ) ))",
    "SELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id": "( the minimum of ( salary ) ) , ( department id ) that belongs to ( employees ) , grouped by ( department id )",
    "SELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  2009": "( the average of ( ticket price ) ) , ( the minimum of ( ticket price ) ) , ( the maximum of ( ticket price ) ) that belongs to ( exhibition ) , that have ( ( year ) less than ( 2009 ) )",
    "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Pennsylvania\"": "( the number of ( distinct ( title of club ) ) ) that belongs to ( ( papers ) , and ( ( authorship ) satisfied that ( ( paperid of club ) equal to ( paperid of member of club ) ) ) , and ( ( inst ) satisfied that ( ( instid of member of club ) equal to ( instid of student ) ) ) ) , that have ( ( name of student ) equal to ( university of pennsylvania ) )",
    "SELECT count(*) FROM ROLES": "( the number of ( all items ) ) that belongs to ( roles )",
    "SELECT Company_name FROM phone GROUP BY Company_name HAVING count(*)  >  1;": "( company name ) that belongs to ( phone ) , grouped by ( company name ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT name FROM races WHERE YEAR = 2017": "( name ) that belongs to ( races ) , that have ( ( year ) equal to ( 2017 ) )",
    "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1": "( catalog level name of member of club ) that belongs to ( ( catalog contents ) , and ( ( catalog structure ) satisfied that ( ( catalog level number of club ) equal to ( catalog level number of member of club ) ) ) ) , ordered by ( ( price in dollars of club ) ) , limited to the top ( 1 )",
    "SELECT T2.Name ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID": "( name of staff ) , ( festival name of enzyme ) that belongs to ( ( nomination ) , and ( ( artwork ) satisfied that ( ( artwork id of addresses ) equal to ( artwork id of staff ) ) ) , and ( ( festival detail ) satisfied that ( ( festival id of addresses ) equal to ( festival id of enzyme ) ) ) )",
    "SELECT Area ,  County FROM APPELLATIONS": "( area ) , ( county ) that belongs to ( appellations )",
    "SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'": "( document type code ) , ( document name ) , ( document description ) that belongs to ( documents ) , that have ( ( ( document name ) equal to ( 'noel cv' ) ) or ( ( document name ) equal to ( 'king book' ) ) )",
    "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC": "( balance of staff ) , ( balance of enzyme ) , ( name of addresses ) that belongs to ( ( accounts ) , and ( ( checking ) satisfied that ( ( custid of addresses ) equal to ( custid of staff ) ) ) , and ( ( savings ) satisfied that ( ( custid of addresses ) equal to ( custid of enzyme ) ) ) ) , ordered by ( ( ( balance of staff ) add ( balance of enzyme ) ) in descending order )",
    "SELECT LOCATION FROM cinema WHERE openning_year  =  2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year  =  2011": "( location ) that belongs to ( cinema ) , that have ( ( openning year ) equal to ( 2010 ) ), and intersect with ( ( location ) that belongs to ( cinema ) , that have ( ( openning year ) equal to ( 2011 ) ))",
    "SELECT T1.company_id ,  T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id HAVING count(*)  >=  2 UNION SELECT T3.company_id ,  T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id  =  T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING count(*)  >=  2": "( company id of addresses ) , ( company name of addresses ) that belongs to ( ( third party companies ) , and ( ( maintenance engineers ) satisfied that ( ( company id of addresses ) equal to ( company id of staff ) ) ) ) , grouped by ( company id of addresses ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) ) and ( company id of enzyme ) , ( company name of enzyme ) that belongs to ( ( third party companies ) , and ( ( maintenance contracts ) satisfied that ( ( company id of enzyme ) equal to ( maintenance contract company id of trip ) ) ) ) , grouped by ( company id of enzyme ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"": "( the number of ( distinct ( college of addresses ) ) ) that belongs to ( ( match season ) , and ( ( team ) satisfied that ( ( team of addresses ) equal to ( team id of staff ) ) ) ) , that have ( ( name of staff ) equal to ( columbus crew ) )",
    "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"": "( nominee ) that belongs to ( musical ) , that have ( ( ( award ) equal to ( tony award ) ) or ( ( award ) equal to ( cleavant derricks ) ) )",
    "SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T1.snatch  >  140 OR T2.height  >  200;": "( weight of staff ) that belongs to ( ( body builder ) , and ( ( people ) satisfied that ( ( people id of addresses ) equal to ( people id of staff ) ) ) ) , that have ( ( ( snatch of addresses ) greater than ( 140 ) ) or ( ( height of staff ) greater than ( 200 ) ) )",
    "SELECT product_name ,  typical_buying_price FROM products": "( product name ) , ( typical buying price ) that belongs to ( products )",
    "SELECT count(*) FROM customer WHERE active = '1'": "( the number of ( all items ) ) that belongs to ( customer ) , that have ( ( active ) equal to ( '1' ) )",
    "SELECT theme ,  YEAR FROM exhibition WHERE ticket_price  <  15": "( theme ) , ( year ) that belongs to ( exhibition ) , that have ( ( ticket price ) less than ( 15 ) )",
    "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  \"Life Insurance\"": "( customer phone ) that belongs to ( available policies ) , that have ( ( policy type code ) equal to ( life insurance ) )",
    "SELECT Title FROM ALBUM ORDER BY Title": "( title ) that belongs to ( album ) , ordered by ( ( title ) )",
    "SELECT T1.first_name ,  T1.last_name ,  T1.other_details ,  T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id  =  T2.engineer_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id": "( first name of addresses ) , ( last name of addresses ) , ( other details of addresses ) , ( skill description of enzyme ) that belongs to ( ( maintenance engineers ) , and ( ( engineer skills ) satisfied that ( ( engineer id of addresses ) equal to ( engineer id of staff ) ) ) , and ( ( skills ) satisfied that ( ( skill id of staff ) equal to ( skill id of enzyme ) ) ) )",
    "SELECT count(*) FROM member": "( the number of ( all items ) ) that belongs to ( member )",
    "SELECT Product_Type_Code ,  COUNT(*) FROM Products GROUP BY Product_Type_Code": "( product type code ) , ( the number of ( all items ) ) that belongs to ( products ) , grouped by ( product type code )",
    "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)": "( the number of ( all items ) ) that belongs to ( rooms ) , that have ( ( roomid ) not in ( ( distinct ( room ) ) that belongs to ( reservations ) ) )",
    "SELECT employee_ID FROM Employees WHERE employee_name  =  \"Ebba\"": "( employee id ) that belongs to ( employees ) , that have ( ( employee name ) equal to ( ebba ) )",
    "SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"": "( the sum of ( order quantity of student ) ) that belongs to ( ( customers ) , and ( ( customer orders ) satisfied that ( ( customer id of club ) equal to ( customer id of member of club ) ) ) , and ( ( order items ) satisfied that ( ( order id of member of club ) equal to ( order id of student ) ) ) ) , that have ( ( customer name of club ) equal to ( rodrick heaney ) )",
    "SELECT count(DISTINCT Birth_Place) FROM people": "( the number of ( distinct ( birth place ) ) ) that belongs to ( people )",
    "SELECT T1.name ,  T1.city ,  T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1": "( name of addresses ) , ( city of addresses ) , ( src apid of staff ) that belongs to ( ( airports ) , and ( ( routes ) satisfied that ( ( apid of addresses ) equal to ( src apid of staff ) ) ) ) , grouped by ( src apid of staff ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\"": "( name of addresses ) that belongs to ( ( actor ) , and ( ( musical ) satisfied that ( ( musical id of addresses ) equal to ( musical id of staff ) ) ) ) , that have ( ( name of staff ) equal to ( the phantom of the opera ) )",
    "SELECT Name ,  Arrival FROM train": "( name ) , ( arrival ) that belongs to ( train )",
    "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)": "( transaction id ) that belongs to ( financial transactions ) , that have ( ( transaction amount ) greater than ( the average of ( transaction amount ) ) that belongs to ( financial transactions ) )",
    "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25": "( fname ) that belongs to ( student ) , that have ( ( ( city code ) equal to ( 'phl' ) ) and ( ( age ) between ( 20 ) and ( 25 ) ) )",
    "SELECT DISTINCT product_color FROM Products": "( distinct ( product color ) ) that belongs to ( products )",
    "SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.Fname  =  \"David\" AND T2.Lname  =  \"Shieber\"": "( the sum of ( hoursperweek ) ) , ( the sum of ( gamesplayed ) ) that belongs to ( ( sportsinfo ) , and ( ( student ) satisfied that ( ( stuid of addresses ) equal to ( stuid of staff ) ) ) ) , that have ( ( ( fname of staff ) equal to ( david ) ) and ( ( lname of staff ) equal to ( shieber ) ) )",
    "SELECT count(DISTINCT rating) FROM film": "( the number of ( distinct ( rating ) ) ) that belongs to ( film )",
    "SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id ORDER BY avg(high_temperature) DESC LIMIT 1": "( id of member of club ) , ( local authority of member of club ) that belongs to ( ( weekly weather ) , and ( ( station ) satisfied that ( ( station id of club ) equal to ( id of member of club ) ) ) ) , grouped by ( station id of club ) , ordered by ( ( the average of ( high temperature ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE \"%a%\"": "( the number of ( all items ) ) that belongs to ( ( lessons ) , and ( ( staff ) satisfied that ( ( staff id of addresses ) equal to ( staff id of staff ) ) ) ) , that have ( ( t2.first_name ) like ( %a% ) )",
    "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4": "( document type code ) that belongs to ( documents ) , grouped by ( document type code ) , that have ( ( the number of ( all items ) ) greater than ( 4 ) )",
    "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id": "( the number of ( all items ) ) , ( project id ) that belongs to ( documents ) , that have ( ( document type code ) equal to ( bk ) ) , grouped by ( project id )",
    "SELECT t1.product FROM product AS t1 JOIN store_product AS t2 ON t1.product_id  =  t2.product_id JOIN store AS t3 ON t2.store_id  =  t3.store_id WHERE t3.store_name  =  \"Miramichi\"": "( product of club ) that belongs to ( ( product ) , and ( ( store product ) satisfied that ( ( product id of club ) equal to ( product id of member of club ) ) ) , and ( ( store ) satisfied that ( ( store id of member of club ) equal to ( store id of student ) ) ) ) , that have ( ( store name of student ) equal to ( miramichi ) )",
    "SELECT T1.first_name ,  T1.last_name ,  T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1": "( first name of addresses ) , ( last name of addresses ) , ( staff id of addresses ) that belongs to ( ( staff ) , and ( ( payment ) satisfied that ( ( staff id of addresses ) equal to ( staff id of staff ) ) ) ) , grouped by ( staff id of addresses ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( 1 )",
    "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'": "( distinct ( creation of addresses ) ) that belongs to ( ( department ) , and ( ( management ) satisfied that ( ( department id of addresses ) equal to ( department id of staff ) ) ) , and ( ( head ) satisfied that ( ( head id of staff ) equal to ( head id of enzyme ) ) ) ) , that have ( ( born state of enzyme ) equal to ( 'alabama' ) )",
    "SELECT max(LEVEL) FROM manager WHERE Country != \"Australia\t\"": "( the maximum of ( level ) ) that belongs to ( manager ) , that have ( ( country ) not equal to ( australia ) )",
    "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1": "( range ) that belongs to ( mountain ) , grouped by ( range ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT rank FROM captain WHERE CLASS  =  'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS  =  'Armed schooner'": "( rank ) that belongs to ( captain ) , that have ( ( class ) equal to ( 'cutter' ) ), and intersect with ( ( rank ) that belongs to ( captain ) , that have ( ( class ) equal to ( 'armed schooner' ) ))",
    "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM round)": "( name ) that belongs to ( member ) , that have ( ( member_id ) not in ( ( member id ) that belongs to ( round ) ) )",
    "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";": "( company ) that belongs to ( customers ) , that have ( ( ( first name ) equal to ( eduardo ) ) and ( ( last name ) equal to ( martins ) ) )",
    "SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major != 600 AND Sex = 'F';": "( fname ) , ( lname ) that belongs to ( student ) , that have ( ( ( age ) greater than ( 18 ) ) and ( ( major ) not equal to ( 600 ) ) and ( ( sex ) equal to ( 'f' ) ) )",
    "SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Full'": "( pixels of club ) that belongs to ( ( screen mode ) , and ( ( phone ) satisfied that ( ( graphics mode of club ) equal to ( screen mode of member of club ) ) ) ) , that have ( ( accreditation type of member of club ) equal to ( 'provisional' ) ), and intersect with ( ( pixels of club ) that belongs to ( ( screen mode ) , and ( ( phone ) satisfied that ( ( graphics mode of club ) equal to ( screen mode of member of club ) ) ) ) , that have ( ( accreditation type of member of club ) equal to ( 'full' ) ))",
    "SELECT count(*) FROM CUSTOMERS": "( the number of ( all items ) ) that belongs to ( customers )",
    "SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"marketing\" INTERSECT SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"managing\"": "( dept store id of staff ) , ( store name of staff ) that belongs to ( ( departments ) , and ( ( department stores ) satisfied that ( ( dept store id of addresses ) equal to ( dept store id of staff ) ) ) ) , that have ( ( department name of addresses ) equal to ( marketing ) ), and intersect with ( ( dept store id of staff ) , ( store name of staff ) that belongs to ( ( departments ) , and ( ( department stores ) satisfied that ( ( dept store id of addresses ) equal to ( dept store id of staff ) ) ) ) , that have ( ( department name of addresses ) equal to ( managing ) ))",
    "SELECT count(*) FROM classroom WHERE building != 'Lamberton'": "( the number of ( all items ) ) that belongs to ( classroom ) , that have ( ( building ) not equal to ( 'lamberton' ) )",
    "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC": "( asset make ) , ( asset model ) , ( asset details ) that belongs to ( assets ) , ordered by ( ( asset disposed date ) in ascending order )",
    "SELECT T2.order_id ,  T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"": "( order id of staff ) , ( order status of staff ) that belongs to ( ( customers ) , and ( ( orders ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , that have ( ( customer name of addresses ) equal to ( jeramie ) )",
    "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name": "( name of staff ) , ( artistid of addresses ) that belongs to ( ( album ) , and ( ( artist ) satisfied that ( ( artistid of addresses ) equal to ( artistid of staff ) ) ) ) , grouped by ( artistid of addresses ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 3 ) ) , ordered by ( ( name of staff ) )",
    "SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity  >  800": "( location ) that belongs to ( cinema ), and except that ( ( location ) that belongs to ( cinema ) , that have ( ( capacity ) greater than ( 800 ) ))",
    "SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)": "( name ) that belongs to ( people ) , that have ( ( height ) less than ( the average of ( height ) ) that belongs to ( people ) )",
    "SELECT count(DISTINCT name) FROM projects": "( the number of ( distinct ( name ) ) ) that belongs to ( projects )",
    "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1": "( policy type code ) that belongs to ( available policies ) , grouped by ( policy type code ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT Name FROM ship ORDER BY Tonnage ASC": "( name ) that belongs to ( ship ) , ordered by ( ( tonnage ) in ascending order )",
    "SELECT DISTINCT customer_details FROM Customers": "( distinct ( customer details ) ) that belongs to ( customers )",
    "SELECT activity_name FROM Activity": "( activity name ) that belongs to ( activity )",
    "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus": "( campus of addresses ) , ( the sum of ( degrees of staff ) ) that belongs to ( ( campuses ) , and ( ( degrees ) satisfied that ( ( id of addresses ) equal to ( campus of staff ) ) ) ) , that have ( ( ( year of staff ) greater than or equal to ( 1998 ) ) and ( ( year of staff ) less than or equal to ( 2002 ) ) ) , grouped by ( campus of addresses )",
    "SELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  \"Texas\"": "( monthly rental of staff ) that belongs to ( ( addresses ) , and ( ( student addresses ) satisfied that ( ( address id of addresses ) equal to ( address id of staff ) ) ) ) , that have ( ( state province county of addresses ) equal to ( texas ) )",
    "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name": "( the number of ( all items ) ) , ( name of addresses ) that belongs to ( ( airports ) , and ( ( routes ) satisfied that ( ( apid of addresses ) equal to ( src apid of staff ) ) ) ) , grouped by ( name of addresses )",
    "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)": "( name ) that belongs to ( member ) , that have ( ( member_id ) not in ( ( member id ) that belongs to ( membership register branch ) ) )",
    "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'": "( distinct ( name of addresses ) ) , ( location of addresses ) , ( product of addresses ) that belongs to ( ( enzyme ) , and ( ( medicine enzyme interaction ) satisfied that ( ( enzyme id of staff ) equal to ( id of addresses ) ) ) ) , that have ( ( interaction type of staff ) equal to ( 'inhibitor' ) )",
    "SELECT order_id FROM shipments WHERE shipment_date  =  (SELECT max(shipment_date) FROM shipments)": "( order id ) that belongs to ( shipments ) , that have ( ( shipment date ) equal to ( the maximum of ( shipment date ) ) that belongs to ( shipments ) )",
    "SELECT player_api_id FROM Player WHERE height  >=  180 AND height  <=  190 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE preferred_foot  =  \"left\"": "( player api id ) that belongs to ( player ) , that have ( ( ( height ) greater than or equal to ( 180 ) ) and ( ( height ) less than or equal to ( 190 ) ) ), and intersect with ( ( player api id ) that belongs to ( player attributes ) , that have ( ( preferred foot ) equal to ( left ) ))",
    "SELECT customer_name FROM customers WHERE customer_name LIKE \"%Alex%\"": "( customer name ) that belongs to ( customers ) , that have ( ( customer_name ) like ( %alex% ) )",
    "SELECT count(*) FROM Tasks": "( the number of ( all items ) ) that belongs to ( tasks )",
    "SELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  2": "( department id ) , ( the sum of ( salary ) ) that belongs to ( employees ) , grouped by ( department id ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT count(*) FROM device": "( the number of ( all items ) ) that belongs to ( device )",
    "SELECT Name FROM phone ORDER BY Price ASC": "( name ) that belongs to ( phone ) , ordered by ( ( price ) in ascending order )",
    "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id HAVING count(*)  >=  2": "( name of club ) that belongs to ( ( swimmer ) , and ( ( record ) satisfied that ( ( id of club ) equal to ( swimmer id of member of club ) ) ) ) , grouped by ( swimmer id of member of club ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT Name FROM member WHERE Country  =  \"United States\" OR Country  =  \"Canada\"": "( name ) that belongs to ( member ) , that have ( ( ( country ) equal to ( united states ) ) or ( ( country ) equal to ( canada ) ) )",
    "SELECT sum(T1.crs_credit) ,  T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY T1.dept_code": "( the sum of ( crs credit of addresses ) ) , ( dept code of addresses ) that belongs to ( ( course ) , and ( ( class ) satisfied that ( ( crs code of addresses ) equal to ( crs code of staff ) ) ) ) , grouped by ( dept code of addresses )",
    "SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"": "( the average of ( cost of enzyme ) ) that belongs to ( ( physician ) , and ( ( trained in ) satisfied that ( ( employeeid of addresses ) equal to ( physician of staff ) ) ) , and ( ( procedures ) satisfied that ( ( code of enzyme ) equal to ( treatment of staff ) ) ) ) , that have ( ( name of addresses ) equal to ( john wen ) )",
    "SELECT T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN mailshot_customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.outcome_code  =  'No Response'": "( customer name of addresses ) , ( customer phone of addresses ) that belongs to ( ( customers ) , and ( ( mailshot customers ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , that have ( ( outcome code of staff ) equal to ( 'no response' ) )",
    "SELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1": "( booking id of addresses ) , ( amount of refund of addresses ) that belongs to ( ( bookings ) , and ( ( payments ) satisfied that ( ( booking id of addresses ) equal to ( booking id of staff ) ) ) ) , grouped by ( booking id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT mailing_date FROM Documents_Mailed WHERE document_id = 7;": "( mailing date ) that belongs to ( documents mailed ) , that have ( ( document id ) equal to ( 7 ) )",
    "SELECT DPhone FROM DEPARTMENT WHERE Room  =  268": "( dphone ) that belongs to ( department ) , that have ( ( room ) equal to ( 268 ) )",
    "SELECT count(DISTINCT last_name) FROM actor": "( the number of ( distinct ( last name ) ) ) that belongs to ( actor )",
    "SELECT count(*) FROM ALBUM": "( the number of ( all items ) ) that belongs to ( album )",
    "SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code  =  T2.document_type_code WHERE T1.document_name  =  \"How to read a book\"": "( document type name of staff ) that belongs to ( ( all documents ) , and ( ( ref document types ) satisfied that ( ( document type code of addresses ) equal to ( document type code of staff ) ) ) ) , that have ( ( document name of addresses ) equal to ( how to read a book ) )",
    "SELECT T2.cmi_cross_ref_id ,  T2.master_customer_id ,  count(*) FROM Business_Rates AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T2.cmi_cross_ref_id": "( cmi cross ref id of staff ) , ( master customer id of staff ) , ( the number of ( all items ) ) that belongs to ( ( business rates ) , and ( ( cmi cross references ) satisfied that ( ( cmi cross ref id of addresses ) equal to ( cmi cross ref id of staff ) ) ) ) , grouped by ( cmi cross ref id of staff )",
    "SELECT phone ,  postal_code FROM address WHERE address  =  '1031 Daugavpils Parkway'": "( phone ) , ( postal code ) that belongs to ( address ) , that have ( ( address ) equal to ( '1031 daugavpils parkway' ) )",
    "SELECT T2.lot_id ,  avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id  =  T2.transaction_id GROUP BY T2.lot_id ORDER BY avg(amount_of_transaction)": "( lot id of staff ) , ( the average of ( amount of transaction ) ) that belongs to ( ( transactions ) , and ( ( transactions lots ) satisfied that ( ( transaction id of addresses ) equal to ( transaction id of staff ) ) ) ) , grouped by ( lot id of staff ) , ordered by ( ( the average of ( amount of transaction ) ) )",
    "SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)": "( party name ) that belongs to ( party ) , that have ( ( party_id ) not in ( ( party id ) that belongs to ( member ) ) )",
    "SELECT country FROM stadium WHERE capacity  >  60000 INTERSECT SELECT country FROM stadium WHERE capacity  <  50000": "( country ) that belongs to ( stadium ) , that have ( ( capacity ) greater than ( 60000 ) ), and intersect with ( ( country ) that belongs to ( stadium ) , that have ( ( capacity ) less than ( 50000 ) ))",
    "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1": "( gname ) that belongs to ( ( plays games ) , and ( ( video games ) satisfied that ( ( gameid of addresses ) equal to ( gameid of staff ) ) ) ) , grouped by ( gameid of addresses ) , ordered by ( ( the sum of ( hours played ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"": "( stuid ) that belongs to ( student ) , that have ( ( sex ) equal to ( 'f' ) ), and intersect with ( ( stuid ) that belongs to ( sportsinfo ) , that have ( ( sportname ) equal to ( football ) ))",
    "SELECT TYPE FROM ship WHERE flag  =  'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag  =  'Malta'": "( type ) that belongs to ( ship ) , that have ( ( flag ) equal to ( 'panama' ) ), and intersect with ( ( type ) that belongs to ( ship ) , that have ( ( flag ) equal to ( 'malta' ) ))",
    "SELECT last_name FROM staff WHERE email_address LIKE \"%wrau%\"": "( last name ) that belongs to ( staff ) , that have ( ( email_address ) like ( %wrau% ) )",
    "SELECT Name FROM wrestler WHERE Days_held  <  100": "( name ) that belongs to ( wrestler ) , that have ( ( days held ) less than ( 100 ) )",
    "SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2": "( name of staff ) that belongs to ( ( debate people ) , and ( ( people ) satisfied that ( ( negative of addresses ) equal to ( people id of staff ) ) ) ) , grouped by ( name of staff ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2": "( customer first name of staff ) , ( customer id of addresses ) that belongs to ( ( accounts ) , and ( ( customers ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , grouped by ( customer id of addresses ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  >  50000": "( the number of ( distinct ( delegate of staff ) ) ) that belongs to ( ( county ) , and ( ( election ) satisfied that ( ( county id of addresses ) equal to ( district of staff ) ) ) ) , that have ( ( population of addresses ) greater than ( 50000 ) )",
    "SELECT state FROM park GROUP BY state HAVING count(*)  >  2;": "( state ) that belongs to ( park ) , grouped by ( state ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )",
    "SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"": "( the number of ( all items ) ) that belongs to ( artist ) , that have ( ( country ) equal to ( bangladesh ) )",
    "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2": "( name ) that belongs to ( storm ), and except that ( ( name of addresses ) that belongs to ( ( storm ) , and ( ( affected region ) satisfied that ( ( storm id of addresses ) equal to ( storm id of staff ) ) ) ) , grouped by ( storm id of addresses ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) ))",
    "SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  \"Computer Info. Systems\"": "( the number of ( all items ) ) that belongs to ( ( department ) , and ( ( course ) satisfied that ( ( dept code of addresses ) equal to ( dept code of staff ) ) ) ) , that have ( ( dept name ) equal to ( computer info. systems ) )",
    "SELECT Date ,  Venue FROM workshop ORDER BY Venue": "( date ) , ( venue ) that belongs to ( workshop ) , ordered by ( ( venue ) )",
    "SELECT customer_name FROM customers WHERE payment_method != 'Cash'": "( customer name ) that belongs to ( customers ) , that have ( ( payment method ) not equal to ( 'cash' ) )",
    "SELECT DISTINCT source_system_code FROM cmi_cross_references WHERE source_system_code LIKE '%en%'": "( distinct ( source system code ) ) that belongs to ( cmi cross references ) , that have ( ( source_system_code ) like ( '%en%' ) )",
    "SELECT min(age) ,  max(age) ,  avg(age) FROM people": "( the minimum of ( age ) ) , ( the maximum of ( age ) ) , ( the average of ( age ) ) that belongs to ( people )",
    "SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1": "( order id of addresses ) that belongs to ( ( orders ) , and ( ( order items ) satisfied that ( ( order id of addresses ) equal to ( order id of staff ) ) ) ) , grouped by ( order id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT t2.unit_of_measure ,  t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"chervil\"": "( unit of measure of member of club ) , ( product category code of member of club ) that belongs to ( ( products ) , and ( ( ref product categories ) satisfied that ( ( product category code of club ) equal to ( product category code of member of club ) ) ) ) , that have ( ( product name of club ) equal to ( chervil ) )",
    "SELECT avg(T1.HS) ,  max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'": "( the average of ( hs of addresses ) ) , ( the maximum of ( hs of addresses ) ) that belongs to ( ( player ) , and ( ( tryout ) satisfied that ( ( pid of addresses ) equal to ( pid of staff ) ) ) ) , that have ( ( decision of staff ) equal to ( 'yes' ) )",
    "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1": "( name of staff ) that belongs to ( ( album ) , and ( ( artist ) satisfied that ( ( artistid of addresses ) equal to ( artistid of staff ) ) ) ) , grouped by ( name of staff ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5": "( surname of addresses ) , ( driverid of addresses ) that belongs to ( ( drivers ) , and ( ( pitstops ) satisfied that ( ( driverid of addresses ) equal to ( driverid of staff ) ) ) ) , grouped by ( driverid of addresses ) , that have ( ( the number of ( all items ) ) equal to ( 11 ) ), and intersect with ( ( surname of addresses ) , ( driverid of addresses ) that belongs to ( ( drivers ) , and ( ( results ) satisfied that ( ( driverid of addresses ) equal to ( driverid of staff ) ) ) ) , grouped by ( driverid of addresses ) , that have ( ( the number of ( all items ) ) greater than ( 5 ) ))",
    "SELECT T2.department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T2.department_name": "( department name of staff ) , ( the number of ( all items ) ) that belongs to ( ( employees ) , and ( ( departments ) satisfied that ( ( department id of addresses ) equal to ( department id of staff ) ) ) ) , grouped by ( department name of staff )",
    "SELECT Team FROM player ORDER BY Team ASC": "( team ) that belongs to ( player ) , ordered by ( ( team ) in ascending order )",
    "SELECT flno FROM Flight WHERE distance  >  2000": "( flno ) that belongs to ( flight ) , that have ( ( distance ) greater than ( 2000 ) )",
    "SELECT DISTINCT address_type_code FROM customer_addresses": "( distinct ( address type code ) ) that belongs to ( customer addresses )",
    "SELECT * FROM College ORDER BY enr": "all items that belongs to ( college ) , ordered by ( ( enr ) )",
    "SELECT T1.project_id ,  count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC": "( project id of addresses ) , ( the number of ( all items ) ) that belongs to ( ( project staff ) , and ( ( projects ) satisfied that ( ( project id of addresses ) equal to ( project id of staff ) ) ) ) , grouped by ( project id of addresses ) , ordered by ( ( the number of ( all items ) ) in ascending order )",
    "SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1": "( payment method ) that belongs to ( customers ) , grouped by ( payment method ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'": "( name of addresses ) that belongs to ( ( tracks ) , and ( ( playlist tracks ) satisfied that ( ( id of addresses ) equal to ( track id of staff ) ) ) , and ( ( playlists ) satisfied that ( ( playlist id of staff ) equal to ( id of enzyme ) ) ) ) , that have ( ( name of enzyme ) equal to ( 'movies' ) ), and intersect with ( ( name of addresses ) that belongs to ( ( tracks ) , and ( ( playlist tracks ) satisfied that ( ( id of addresses ) equal to ( track id of staff ) ) ) , and ( ( playlists ) satisfied that ( ( playlist id of staff ) equal to ( id of enzyme ) ) ) ) , that have ( ( name of enzyme ) equal to ( 'music' ) ))",
    "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'": "( state of addresses ) that belongs to ( ( college ) , and ( ( tryout ) satisfied that ( ( cname of addresses ) equal to ( cname of staff ) ) ) ) , that have ( ( ppos of staff ) equal to ( 'goalie' ) ), and intersect with ( ( state of addresses ) that belongs to ( ( college ) , and ( ( tryout ) satisfied that ( ( cname of addresses ) equal to ( cname of staff ) ) ) ) , that have ( ( ppos of staff ) equal to ( 'mid' ) ))",
    "SELECT count(*) FROM Settlements": "( the number of ( all items ) ) that belongs to ( settlements )",
    "SELECT count(*) FROM postseason WHERE YEAR  =  1885 AND ties  =  1;": "( the number of ( all items ) ) that belongs to ( postseason ) , that have ( ( ( year ) equal to ( 1885 ) ) and ( ( ties ) equal to ( 1 ) ) )",
    "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)": "( the number of ( all items ) ) that belongs to ( customers ) , that have ( ( customer_id ) not in ( ( customer id ) that belongs to ( accounts ) ) )",
    "SELECT f_id FROM files WHERE formats  =  \"mp3\"": "( f id ) that belongs to ( files ) , that have ( ( formats ) equal to ( mp3 ) )",
    "SELECT eid FROM Employee WHERE salary  >  100000": "( eid ) that belongs to ( employee ) , that have ( ( salary ) greater than ( 100000 ) )",
    "SELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1": "( user name ) , ( password ) that belongs to ( users ) , grouped by ( role code ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;": "( roomname of staff ) , ( rate of addresses ) , ( checkin of addresses ) , ( checkout of addresses ) that belongs to ( ( reservations ) , and ( ( rooms ) satisfied that ( ( room of addresses ) equal to ( roomid of staff ) ) ) ) , grouped by ( room of addresses ) , ordered by ( ( rate of addresses ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC": "( the number of ( all items ) ) , ( city ) that belongs to ( airports ) , that have ( ( country ) equal to ( 'united states' ) ) , grouped by ( city ) , ordered by ( ( the number of ( all items ) ) in descending order )",
    "SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1": "( dept name of staff ) , ( dept code of addresses ) that belongs to ( ( professor ) , and ( ( department ) satisfied that ( ( dept code of addresses ) equal to ( dept code of staff ) ) ) ) , that have ( ( prof high degree of addresses ) equal to ( 'ph.d.' ) ) , grouped by ( dept code of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID JOIN Products AS T3 ON T2.Product_ID  =  T3.Product_ID WHERE T3.Product_price  >  1000": "( order date of addresses ) that belongs to ( ( customer orders ) , and ( ( order items ) satisfied that ( ( order id of addresses ) equal to ( order id of staff ) ) ) , and ( ( products ) satisfied that ( ( product id of staff ) equal to ( product id of enzyme ) ) ) ) , that have ( ( product price of enzyme ) greater than ( 1000 ) )",
    "SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person)": "( distinct ( name of staff ) ) that belongs to ( ( person ) , and ( ( personfriend ) satisfied that ( ( name of addresses ) equal to ( friend of staff ) ) ) ) , that have ( ( age of addresses ) less than ( the average of ( age ) ) that belongs to ( person ) )",
    "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"": "( city of staff ) that belongs to ( ( customer ) , and ( ( employee ) satisfied that ( ( supportrepid of addresses ) equal to ( employeeid of staff ) ) ) ) , that have ( ( postalcode of addresses ) equal to ( 70174 ) )",
    "SELECT name FROM people WHERE height  >  200 OR height  <  190": "( name ) that belongs to ( people ) , that have ( ( ( height ) greater than ( 200 ) ) or ( ( height ) less than ( 190 ) ) )",
    "SELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T2.Type  =  \"Program Talent Show\"": "( festival name of enzyme ) that belongs to ( ( nomination ) , and ( ( artwork ) satisfied that ( ( artwork id of addresses ) equal to ( artwork id of staff ) ) ) , and ( ( festival detail ) satisfied that ( ( festival id of addresses ) equal to ( festival id of enzyme ) ) ) ) , that have ( ( type of staff ) equal to ( program talent show ) )",
    "SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote": "( distinct ( major of addresses ) ) that belongs to ( ( student ) , and ( ( voting record ) satisfied that ( ( stuid of addresses ) equal to ( treasurer vote of staff ) ) ) )",
    "SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Editor\"": "( employee name of addresses ) that belongs to ( ( employees ) , and ( ( roles ) satisfied that ( ( role code of addresses ) equal to ( role code of staff ) ) ) ) , that have ( ( role name of staff ) equal to ( editor ) )",
    "SELECT count(*) FROM WINE WHERE Winery  =  \"Robert Biale\"": "( the number of ( all items ) ) that belongs to ( wine ) , that have ( ( winery ) equal to ( robert biale ) )",
    "SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != \"null\" GROUP BY director": "( title of staff ) , ( stars of addresses ) , ( director of staff ) , ( the maximum of ( stars of addresses ) ) that belongs to ( ( rating ) , and ( ( movie ) satisfied that ( ( mid of addresses ) equal to ( mid of staff ) ) ) ) , that have ( ( director ) is existed ) , grouped by ( director )",
    "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";": "( city of addresses ) that belongs to ( ( addresses ) , and ( ( staff ) satisfied that ( ( address id of addresses ) equal to ( staff address id of staff ) ) ) ) , that have ( ( ( first name of staff ) equal to ( janessa ) ) and ( ( last name of staff ) equal to ( sawayn ) ) )",
    "SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1": "( cust name ) , ( acc type ) , ( acc bal ) that belongs to ( customer ) , ordered by ( ( credit score ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1": "( campus of addresses ) that belongs to ( ( campuses ) , and ( ( faculty ) satisfied that ( ( id of addresses ) equal to ( campus of staff ) ) ) ) , that have ( ( year of staff ) equal to ( 2003 ) ) , ordered by ( ( faculty of staff ) in descending order ) , limited to the top ( 1 )",
    "SELECT YEAR ,  book_title ,  publisher FROM book_club ORDER BY YEAR DESC": "( year ) , ( book title ) , ( publisher ) that belongs to ( book club ) , ordered by ( ( year ) in descending order )",
    "SELECT name FROM head WHERE born_state != 'California'": "( name ) that belongs to ( head ) , that have ( ( born state ) not equal to ( 'california' ) )",
    "SELECT T1.first_name ,  T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id": "( first name of addresses ) , ( department name of staff ) that belongs to ( ( employees ) , and ( ( departments ) satisfied that ( ( department id of addresses ) equal to ( department id of staff ) ) ) )",
    "SELECT Name ,  LOCATION FROM wrestler": "( name ) , ( location ) that belongs to ( wrestler )",
    "SELECT transaction_type_code ,  avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code": "( transaction type code ) , ( the average of ( amount of transaction ) ) that belongs to ( transactions ) , grouped by ( transaction type code )",
    "SELECT t1.name ,  t2.price_in_dollar FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID": "( name of club ) , ( price in dollar of member of club ) that belongs to ( ( furniture ) , and ( ( furniture manufacte ) satisfied that ( ( furniture id of club ) equal to ( furniture id of member of club ) ) ) )",
    "SELECT brand ,  name FROM camera_lens ORDER BY max_aperture DESC": "( brand ) , ( name ) that belongs to ( camera lens ) , ordered by ( ( max aperture ) in descending order )",
    "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\"": "( name ) that belongs to ( web client accelerator ) , that have ( ( name ) like ( %opera% ) )",
    "SELECT name FROM Person WHERE age  =  (SELECT max(age) FROM person)": "( name ) that belongs to ( person ) , that have ( ( age ) equal to ( the maximum of ( age ) ) that belongs to ( person ) )",
    "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"MADLOCK\" AND T1.lastname  =  \"RAY\"": "( the number of ( all items ) ) that belongs to ( ( list ) , and ( ( teachers ) satisfied that ( ( classroom of addresses ) equal to ( classroom of staff ) ) ) ) , that have ( ( ( firstname of addresses ) equal to ( madlock ) ) and ( ( lastname of addresses ) equal to ( ray ) ) )",
    "SELECT count(*) FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM protein)": "( the number of ( all items ) ) that belongs to ( institution ) , that have ( ( institution_id ) not in ( ( institution id ) that belongs to ( protein ) ) )",
    "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id ORDER BY T2.Feb DESC LIMIT 1": "( city of addresses ) that belongs to ( ( city ) , and ( ( temperature ) satisfied that ( ( city id of addresses ) equal to ( city id of staff ) ) ) ) , ordered by ( ( feb of staff ) in descending order ) , limited to the top ( 1 )",
    "SELECT DISTINCT T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T2.velocity  <  200": "( distinct ( type of addresses ) ) that belongs to ( ( operate company ) , and ( ( flight ) satisfied that ( ( id of addresses ) equal to ( company id of staff ) ) ) ) , that have ( ( velocity of staff ) less than ( 200 ) )",
    "SELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  4": "( winery ) that belongs to ( wine ) , grouped by ( winery ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 4 ) )",
    "SELECT count(*) FROM COURSES": "( the number of ( all items ) ) that belongs to ( courses )",
    "SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)": "( name ) that belongs to ( city ) , that have ( ( county id ) equal to ( county id ) that belongs to ( county public safety ) , ordered by ( ( police officers ) in descending order ) , limited to the top ( 1 ) )",
    "SELECT T2.Party FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes ASC LIMIT 1": "( party of staff ) that belongs to ( ( election ) , and ( ( representative ) satisfied that ( ( representative id of addresses ) equal to ( representative id of staff ) ) ) ) , ordered by ( ( votes ) in ascending order ) , limited to the top ( 1 )",
    "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1": "( student details of addresses ) that belongs to ( ( students ) , and ( ( student course registrations ) satisfied that ( ( student id of addresses ) equal to ( student id of staff ) ) ) ) , grouped by ( student id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT CName FROM COURSE WHERE Credits  =  1": "( cname ) that belongs to ( course ) , that have ( ( credits ) equal to ( 1 ) )",
    "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games": "( stuid ) that belongs to ( student ), and except that ( ( stuid ) that belongs to ( plays games ))",
    "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2": "( hometown of staff ) that belongs to ( ( gymnast ) , and ( ( people ) satisfied that ( ( gymnast id of addresses ) equal to ( people id of staff ) ) ) ) , grouped by ( hometown of staff ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)": "( customer phone ) that belongs to ( available policies ) , that have ( ( policy type code ) equal to ( policy type code ) that belongs to ( available policies ) , grouped by ( policy type code ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 ) )",
    "SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id": "( product id ) , ( the number of ( distinct ( order id ) ) ) that belongs to ( order items ) , grouped by ( product id )",
    "SELECT sum(gamesplayed) FROM Sportsinfo": "( the sum of ( gamesplayed ) ) that belongs to ( sportsinfo )",
    "SELECT DISTINCT last_name FROM Maintenance_Engineers": "( distinct ( last name ) ) that belongs to ( maintenance engineers )",
    "SELECT count(DISTINCT city) FROM station": "( the number of ( distinct ( city ) ) ) that belongs to ( station )",
    "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')": "( the number of ( all items ) ) that belongs to ( person ) , that have ( ( age ) greater than ( the maximum of ( age ) ) that belongs to ( person ) , that have ( ( job ) equal to ( 'engineer' ) ) )",
    "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"CHRISSY\" AND T1.lastname  =  \"NABOZNY\"": "( the number of ( all items ) ) that belongs to ( ( list ) , and ( ( teachers ) satisfied that ( ( classroom of addresses ) equal to ( classroom of staff ) ) ) ) , that have ( ( ( firstname of addresses ) equal to ( chrissy ) ) and ( ( lastname of addresses ) equal to ( nabozny ) ) )",
    "SELECT t1.address ,  t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id  =  t2.shop_id WHERE MONTH  =  'May'": "( address of club ) , ( shop id of club ) that belongs to ( ( shop ) , and ( ( happy hour ) satisfied that ( ( shop id of club ) equal to ( shop id of member of club ) ) ) ) , that have ( ( month ) equal to ( 'may' ) )",
    "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1": "( effective date of club ) that belongs to ( ( claims ) , and ( ( settlements ) satisfied that ( ( claim id of club ) equal to ( claim id of member of club ) ) ) ) , grouped by ( claim id of club ) , ordered by ( ( the sum of ( settlement amount of member of club ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'": "( cust name ) that belongs to ( customer ), and except that ( ( cust name ) that belongs to ( customer ) , that have ( ( acc type ) equal to ( 'saving' ) ))",
    "SELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  \"Zinfandel\"": "( the average of ( price ) ) , ( the average of ( cases ) ) that belongs to ( wine ) , that have ( ( ( year ) equal to ( 2009 ) ) and ( ( grape ) equal to ( zinfandel ) ) )",
    "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"keyboard\"": "( distinct ( customer name of addresses ) ) that belongs to ( ( customers ) , and ( ( customer orders ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) , and ( ( order items ) satisfied that ( ( order id of staff ) equal to ( order id of enzyme ) ) ) , and ( ( products ) satisfied that ( ( product id of enzyme ) equal to ( product id of trip ) ) ) ) , that have ( ( product name of trip ) equal to ( keyboard ) )",
    "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100": "( bname of staff ) that belongs to ( ( loan ) , and ( ( bank ) satisfied that ( ( branch id of addresses ) equal to ( branch id of staff ) ) ) , and ( ( customer ) satisfied that ( ( cust id of addresses ) equal to ( cust id of enzyme ) ) ) ) , that have ( ( credit score of enzyme ) less than ( 100 ) )",
    "SELECT max(Weeks_on_Top) ,  min(Weeks_on_Top) FROM volume": "( the maximum of ( weeks on top ) ) , ( the minimum of ( weeks on top ) ) that belongs to ( volume )",
    "SELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name": "( part name of addresses ) , ( the number of ( all items ) ) that belongs to ( ( parts ) , and ( ( asset parts ) satisfied that ( ( part id of addresses ) equal to ( part id of staff ) ) ) ) , grouped by ( part name of addresses )",
    "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.dribbling  =  ( SELECT max(overall_rating) FROM Player_Attributes)": "( distinct ( player name of addresses ) ) that belongs to ( ( player ) , and ( ( player attributes ) satisfied that ( ( player api id of addresses ) equal to ( player api id of staff ) ) ) ) , that have ( ( dribbling of staff ) equal to ( the maximum of ( overall rating ) ) that belongs to ( player attributes ) )",
    "SELECT document_status_description FROM Ref_Document_Status WHERE document_status_code = \"working\";": "( document status description ) that belongs to ( ref document status ) , that have ( ( document status code ) equal to ( working ) )",
    "SELECT count(*) FROM roller_coaster": "( the number of ( all items ) ) that belongs to ( roller coaster )",
    "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC": "( case burden ) that belongs to ( county public safety ) , ordered by ( ( population ) in descending order )",
    "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"": "( the maximum of ( fastestlapspeed of staff ) ) that belongs to ( ( races ) , and ( ( results ) satisfied that ( ( raceid of addresses ) equal to ( raceid of staff ) ) ) ) , that have ( ( ( year of addresses ) equal to ( 2008 ) ) and ( ( name of addresses ) equal to ( monaco grand prix ) ) )",
    "SELECT LOCATION FROM school WHERE School_ID NOT IN (SELECT School_ID FROM Player)": "( location ) that belongs to ( school ) , that have ( ( school_id ) not in ( ( school id ) that belongs to ( player ) ) )",
    "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC": "( date of addresses ) , ( player of staff ) that belongs to ( ( game ) , and ( ( injury accident ) satisfied that ( ( id of addresses ) equal to ( game id of staff ) ) ) ) , ordered by ( ( season of addresses ) in descending order )",
    "SELECT COUNT(DISTINCT Country) FROM climber": "( the number of ( distinct ( country ) ) ) that belongs to ( climber )",
    "SELECT Major FROM STUDENT WHERE Sex  =  \"M\"": "( major ) that belongs to ( student ) , that have ( ( sex ) equal to ( m ) )",
    "SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;": "( birth country ) that belongs to ( player ) , grouped by ( birth country ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( 3 )",
    "SELECT cell_mobile_number ,  email_address FROM STUDENTS": "( cell mobile number ) , ( email address ) that belongs to ( students )",
    "SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )": "( date claim made ) that belongs to ( claims ) , that have ( ( amount settled ) less than or equal to ( the average of ( amount settled ) ) that belongs to ( claims ) )",
    "SELECT ResTypeDescription FROM Restaurant_Type WHERE ResTypeName = \"Sandwich\";": "( restypedescription ) that belongs to ( restaurant type ) , that have ( ( restypename ) equal to ( sandwich ) )",
    "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)": "( official name ) that belongs to ( city ) , that have ( ( city_id ) not in ( ( host city id ) that belongs to ( farm competition ) ) )",
    "SELECT name FROM stadium WHERE capacity  <  (SELECT avg(capacity) FROM stadium)": "( name ) that belongs to ( stadium ) , that have ( ( capacity ) less than ( the average of ( capacity ) ) that belongs to ( stadium ) )",
    "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T2.first_name  =  \"Lyla\"": "( zip postcode of addresses ) that belongs to ( ( addresses ) , and ( ( teachers ) satisfied that ( ( address id of addresses ) equal to ( address id of staff ) ) ) ) , that have ( ( first name of staff ) equal to ( lyla ) )",
    "SELECT name FROM products WHERE price  <=  200": "( name ) that belongs to ( products ) , that have ( ( price ) less than or equal to ( 200 ) )",
    "SELECT country ,  count(*) FROM stadium GROUP BY country": "( country ) , ( the number of ( all items ) ) that belongs to ( stadium ) , grouped by ( country )",
    "SELECT StuID FROM Student WHERE sex  =  'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"": "( stuid ) that belongs to ( student ) , that have ( ( sex ) equal to ( 'm' ) ), and except that ( ( stuid ) that belongs to ( sportsinfo ) , that have ( ( sportname ) equal to ( football ) ))",
    "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"": "( invoice number ) that belongs to ( invoices ) , that have ( ( ( invoice date ) less than ( 1989-09-03 ) ) or ( ( invoice date ) greater than ( 2007-12-25 ) ) )",
    "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) LIMIT 1": "( title of addresses ) that belongs to ( ( item ) , and ( ( review ) satisfied that ( ( i id of addresses ) equal to ( i id of staff ) ) ) ) , grouped by ( i id of staff ) , ordered by ( ( the average of ( rating of staff ) ) ) , limited to the top ( 1 )",
    "SELECT classroom ,  count(*) FROM list GROUP BY classroom": "( classroom ) , ( the number of ( all items ) ) that belongs to ( list ) , grouped by ( classroom )",
    "SELECT T2.lname ,  T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.SportName  =  \"Football\" OR T1.SportName  =  \"Lacrosse\"": "( lname of staff ) , ( fname of staff ) that belongs to ( ( sportsinfo ) , and ( ( student ) satisfied that ( ( stuid of addresses ) equal to ( stuid of staff ) ) ) ) , that have ( ( ( sportname of addresses ) equal to ( football ) ) or ( ( sportname of addresses ) equal to ( lacrosse ) ) )",
    "SELECT star_rating_code ,  avg(price_range) FROM HOTELS GROUP BY star_rating_code": "( star rating code ) , ( the average of ( price range ) ) that belongs to ( hotels ) , grouped by ( star rating code )",
    "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121": "( distinct ( clubname of club ) ) that belongs to ( ( club ) , and ( ( member of club ) satisfied that ( ( clubid of club ) equal to ( clubid of member of club ) ) ) , and ( ( student ) satisfied that ( ( stuid of member of club ) equal to ( stuid of student ) ) ) ) , that have ( ( advisor of student ) equal to ( 1121 ) )",
    "SELECT fname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Football\" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Lacrosse\")": "( fname ) , ( age ) that belongs to ( student ) , that have ( ( stuid ) in ( ( stuid ) that belongs to ( sportsinfo ) , that have ( ( sportname ) equal to ( football ) ), and intersect with ( ( stuid ) that belongs to ( sportsinfo ) , that have ( ( sportname ) equal to ( lacrosse ) )) ) )",
    "SELECT T2.Name ,  COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative  =  T2.People_ID GROUP BY T2.Name": "( name of staff ) , ( the number of ( all items ) ) that belongs to ( ( debate people ) , and ( ( people ) satisfied that ( ( affirmative of addresses ) equal to ( people id of staff ) ) ) ) , grouped by ( name of staff )",
    "SELECT count(DISTINCT class_section) FROM CLASS WHERE crs_code  =  'ACCT-211'": "( the number of ( distinct ( class section ) ) ) that belongs to ( class ) , that have ( ( crs code ) equal to ( 'acct-211' ) )",
    "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  \"San Francisco State University\"": "( faculty ) that belongs to ( ( faculty ) , and ( ( campuses ) satisfied that ( ( campus of addresses ) equal to ( id of staff ) ) ) ) , that have ( ( ( year of addresses ) equal to ( 2004 ) ) and ( ( campus of staff ) equal to ( san francisco state university ) ) )",
    "SELECT avg(velocity) FROM flight WHERE pilot  =  'Thompson'": "( the average of ( velocity ) ) that belongs to ( flight ) , that have ( ( pilot ) equal to ( 'thompson' ) )",
    "SELECT avg(Number_of_hosts) FROM party": "( the average of ( number of hosts ) ) that belongs to ( party )",
    "SELECT T2.protein_name ,  T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id": "( protein name of staff ) , ( institution of addresses ) that belongs to ( ( institution ) , and ( ( protein ) satisfied that ( ( institution id of addresses ) equal to ( institution id of staff ) ) ) )",
    "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1": "( policy type code ) that belongs to ( policies ) , grouped by ( policy type code ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1": "( product id ) that belongs to ( invoices ) , grouped by ( product id ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100": "( zip code ) that belongs to ( weather ) , grouped by ( zip code ) , that have ( ( the average of ( mean humidity ) ) less than ( 70 ) ), and intersect with ( ( zip code ) that belongs to ( trip ) , grouped by ( zip code ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 100 ) ))",
    "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed": "( distinct ( destruction authorised by employee id ) ) that belongs to ( documents to be destroyed )",
    "SELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000": "( publisher ) that belongs to ( publication ) , that have ( ( price ) greater than ( 10000000 ) ), and intersect with ( ( publisher ) that belongs to ( publication ) , that have ( ( price ) less than ( 5000000 ) ))",
    "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1": "( building of staff ) that belongs to ( ( course ) , and ( ( faculty ) satisfied that ( ( instructor of addresses ) equal to ( facid of staff ) ) ) ) , grouped by ( instructor of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\"": "( mid ) that belongs to ( rating ), and except that ( ( mid of addresses ) that belongs to ( ( rating ) , and ( ( reviewer ) satisfied that ( ( rid of addresses ) equal to ( rid of staff ) ) ) ) , that have ( ( name of staff ) equal to ( brittany harris ) ))",
    "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1": "( name of club ) , ( age of club ) that belongs to ( ( pilot ) , and ( ( match ) satisfied that ( ( pilot id of club ) equal to ( winning pilot of member of club ) ) ) ) , ordered by ( ( age of club ) ) , limited to the top ( 1 )",
    "SELECT t3.characteristic_name ,  t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"cumin\"": "( characteristic name of student ) , ( characteristic data type of student ) that belongs to ( ( products ) , and ( ( product characteristics ) satisfied that ( ( product id of club ) equal to ( product id of member of club ) ) ) , and ( ( characteristics ) satisfied that ( ( characteristic id of member of club ) equal to ( characteristic id of student ) ) ) ) , that have ( ( product name of club ) equal to ( cumin ) )",
    "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1": "( customer id ) , ( the number of ( all items ) ) that belongs to ( accounts ) , grouped by ( customer id ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) ,  Competition FROM MATCH GROUP BY Competition": "( the number of ( all items ) ) , ( competition ) that belongs to ( match ) , grouped by ( competition )",
    "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR": "( the number of ( all items ) ) , ( semester ) , ( year ) that belongs to ( section ) , grouped by ( semester ) , ( year )",
    "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania'": "( name of enzyme ) that belongs to ( ( affected region ) , and ( ( region ) satisfied that ( ( region id of addresses ) equal to ( region id of staff ) ) ) , and ( ( storm ) satisfied that ( ( storm id of addresses ) equal to ( storm id of enzyme ) ) ) ) , that have ( ( region name of staff ) equal to ( 'afghanistan' ) ), and intersect with ( ( name of enzyme ) that belongs to ( ( affected region ) , and ( ( region ) satisfied that ( ( region id of addresses ) equal to ( region id of staff ) ) ) , and ( ( storm ) satisfied that ( ( storm id of addresses ) equal to ( storm id of enzyme ) ) ) ) , that have ( ( region name of staff ) equal to ( 'albania' ) ))",
    "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"2192\"": "( distinct ( lname of addresses ) ) that belongs to ( ( student ) , and ( ( voting record ) satisfied that ( ( stuid of addresses ) equal to ( president vote ) ) ) ), and except that ( ( distinct ( lname ) ) that belongs to ( student ) , that have ( ( advisor ) equal to ( 2192 ) ))",
    "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country": "( country ) , ( the number of ( all items ) ) that belongs to ( perpetrator ) , grouped by ( country )",
    "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code  =  T3.outcome_code WHERE T3.outcome_description LIKE '%Published%'": "( project details of addresses ) that belongs to ( ( projects ) , and ( ( project outcomes ) satisfied that ( ( project id of addresses ) equal to ( project id of staff ) ) ) , and ( ( research outcomes ) satisfied that ( ( outcome code of staff ) equal to ( outcome code of enzyme ) ) ) ) , that have ( ( t3.outcome_description ) like ( '%published%' ) )",
    "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1": "( balance of staff ) , ( name of addresses ) that belongs to ( ( accounts ) , and ( ( checking ) satisfied that ( ( custid of addresses ) equal to ( custid of staff ) ) ) , and ( ( savings ) satisfied that ( ( custid of addresses ) equal to ( custid of enzyme ) ) ) ) , ordered by ( ( balance of enzyme ) ) , limited to the top ( 1 )",
    "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"": "( date opened of member of club ) , ( date closed of member of club ) that belongs to ( ( customers ) , and ( ( customers policies ) satisfied that ( ( customer id of club ) equal to ( customer id of member of club ) ) ) ) , that have ( ( t1.customer_name ) like ( %diana% ) )",
    "SELECT count(*) FROM Student WHERE age  =  18": "( the number of ( all items ) ) that belongs to ( student ) , that have ( ( age ) equal to ( 18 ) )",
    "SELECT T1.duration ,  T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.genre_is  =  \"pop\" ORDER BY T2.song_name": "( duration of addresses ) , ( file size of addresses ) , ( formats of addresses ) that belongs to ( ( files ) , and ( ( song ) satisfied that ( ( f id of addresses ) equal to ( f id of staff ) ) ) ) , that have ( ( genre is of staff ) equal to ( pop ) ) , ordered by ( ( song name of staff ) )",
    "SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = \"UPS\";": "( shipping agent code ) that belongs to ( ref shipping agents ) , that have ( ( shipping agent name ) equal to ( ups ) )",
    "SELECT T2.name ,  count(*) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id": "( name of staff ) , ( the number of ( all items ) ) that belongs to ( ( train station ) , and ( ( station ) satisfied that ( ( station id of addresses ) equal to ( station id of staff ) ) ) ) , grouped by ( station id of addresses )",
    "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200": "( campus of addresses ) that belongs to ( ( campuses ) , and ( ( enrollments ) satisfied that ( ( id of club ) equal to ( campus of member of club ) ) ) ) , that have ( ( ( year of member of club ) equal to ( 1956 ) ) and ( ( totalenrollment ay ) greater than ( 400 ) ) and ( ( fte ay ) greater than ( 200 ) ) )",
    "SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid": "( the number of ( all items ) ) , ( dormid of addresses ) that belongs to ( ( dorm ) , and ( ( has amenity ) satisfied that ( ( dormid of addresses ) equal to ( dormid of staff ) ) ) ) , that have ( ( student capacity of addresses ) greater than ( 100 ) ) , grouped by ( dormid of addresses )",
    "SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT 3": "( other hotel details ) that belongs to ( hotels ) , ordered by ( ( price range ) in descending order ) , limited to the top ( 3 )",
    "SELECT count(*) FROM technician": "( the number of ( all items ) ) that belongs to ( technician )",
    "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)": "( title ) that belongs to ( movie ) , that have ( ( year ) equal to ( the maximum of ( year ) ) that belongs to ( movie ) )",
    "SELECT T2.name ,  T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id ORDER BY T1.compatible_since_year DESC": "( name of staff ) , ( name of enzyme ) that belongs to ( ( accelerator compatible browser ) , and ( ( browser ) satisfied that ( ( browser id of addresses ) equal to ( id of staff ) ) ) , and ( ( web client accelerator ) satisfied that ( ( accelerator id of addresses ) equal to ( id of enzyme ) ) ) ) , ordered by ( ( compatible since year of addresses ) in descending order )",
    "SELECT DISTINCT Name FROM WINE ORDER BY Name": "( distinct ( name ) ) that belongs to ( wine ) , ordered by ( ( name ) )",
    "SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1": "( first name ) that belongs to ( actor ) , grouped by ( first name ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Bob'": "( friend of staff ) that belongs to ( ( person ) , and ( ( personfriend ) satisfied that ( ( name of addresses ) equal to ( name of staff ) ) ) ) , that have ( ( name of addresses ) equal to ( 'bob' ) )",
    "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'": "( name ) that belongs to ( instructor ) , that have ( ( dept name ) equal to ( 'comp. sci.' ) )",
    "SELECT T2.Author ,  COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author": "( author of staff ) , ( the number of ( distinct ( workshop id of addresses ) ) ) that belongs to ( ( acceptance ) , and ( ( submission ) satisfied that ( ( submission id of addresses ) equal to ( submission id of staff ) ) ) ) , grouped by ( author of staff )",
    "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)": "( the average of ( followers ) ) that belongs to ( user profiles ) , that have ( ( uid ) in ( ( uid ) that belongs to ( tweets ) ) )",
    "SELECT T1.datetime_detention_start ,  datetime_detention_end FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.last_name  =  \"Schultz\"": "( datetime detention start of addresses ) , ( datetime detention end ) that belongs to ( ( detention ) , and ( ( teachers ) satisfied that ( ( teacher id of addresses ) equal to ( teacher id of staff ) ) ) ) , that have ( ( last name of staff ) equal to ( schultz ) )",
    "SELECT LOCATION FROM bridge WHERE name  =  'Kolob Arch' OR name  =  'Rainbow Bridge'": "( location ) that belongs to ( bridge ) , that have ( ( ( name ) equal to ( 'kolob arch' ) ) or ( ( name ) equal to ( 'rainbow bridge' ) ) )",
    "SELECT name FROM Person ORDER BY age DESC": "( name ) that belongs to ( person ) , ordered by ( ( age ) in descending order )",
    "SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\"": "( unit of measure ) that belongs to ( ref product categories ) , that have ( ( product category code ) equal to ( herbs ) )",
    "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id": "( distinct ( customer name of addresses ) ) that belongs to ( ( customers ) , and ( ( customer orders ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , that have ( ( order status code of staff ) equal to ( pending ) ) , ordered by ( ( customer id of staff ) )",
    "SELECT title ,  director FROM movie WHERE YEAR  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1": "( title ) , ( director ) that belongs to ( movie ) , that have ( ( year ) less than or equal to ( 2000 ) ) , ordered by ( ( gross worldwide ) in descending order ) , limited to the top ( 1 )",
    "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_Senator_VOTE": "( distinct ( fname of addresses ) ) that belongs to ( ( student ) , and ( ( voting record ) satisfied that ( ( stuid of addresses ) equal to ( class senator vote of staff ) ) ) )",
    "SELECT \tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code": "( booking status code ) , ( the number of ( all items ) ) that belongs to ( apartment bookings ) , grouped by ( booking status code )",
    "SELECT director FROM Movie WHERE title  = 'Avatar'": "( director ) that belongs to ( movie ) , that have ( ( title ) equal to ( 'avatar' ) )",
    "SELECT Product_Name ,  Product_Type_Code FROM Products": "( product name ) , ( product type code ) that belongs to ( products )",
    "SELECT Phone FROM EMPLOYEE": "( phone ) that belongs to ( employee )",
    "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5": "( catalog entry name ) that belongs to ( catalog contents ) , that have ( ( ( length ) less than ( 3 ) ) or ( ( width ) greater than ( 5 ) ) )",
    "SELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  2": "( student id of addresses ) , ( middle name of staff ) that belongs to ( ( student course enrolment ) , and ( ( students ) satisfied that ( ( student id of addresses ) equal to ( student id of staff ) ) ) ) , grouped by ( student id of addresses ) , that have ( ( the number of ( all items ) ) less than or equal to ( 2 ) )",
    "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000": "( name ) that belongs to ( mountain ) , that have ( ( ( height ) greater than ( 5000 ) ) or ( ( prominence ) greater than ( 1000 ) ) )",
    "SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)": "( distinct ( name of staff ) ) , ( friend of staff ) , ( age of addresses ) that belongs to ( ( person ) , and ( ( personfriend ) satisfied that ( ( name of addresses ) equal to ( friend of staff ) ) ) ) , that have ( ( age of addresses ) greater than ( the average of ( age ) ) that belongs to ( person ) )",
    "SELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name  =  \"Ashley\"": "( customer phone ) that belongs to ( performers ) , that have ( ( customer name ) equal to ( ashley ) )",
    "SELECT sum(student_capacity) FROM dorm": "( the sum of ( student capacity ) ) that belongs to ( dorm )",
    "SELECT LOCATION FROM performance WHERE Attendance  >  2000 INTERSECT SELECT LOCATION FROM performance WHERE Attendance  <  1000": "( location ) that belongs to ( performance ) , that have ( ( attendance ) greater than ( 2000 ) ), and intersect with ( ( location ) that belongs to ( performance ) , that have ( ( attendance ) less than ( 1000 ) ))",
    "SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Price DESC": "( title of addresses ) that belongs to ( ( book ) , and ( ( publication ) satisfied that ( ( book id of addresses ) equal to ( book id of staff ) ) ) ) , ordered by ( ( price of staff ) in descending order )",
    "SELECT max(Enrollment) FROM university": "( the maximum of ( enrollment ) ) that belongs to ( university )",
    "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.Lastname  =  \"Heilo\"": "( title of enzyme ) that belongs to ( ( performance ) , and ( ( band ) satisfied that ( ( bandmate of addresses ) equal to ( id of staff ) ) ) , and ( ( songs ) satisfied that ( ( songid of enzyme ) equal to ( songid of addresses ) ) ) ) , that have ( ( lastname of staff ) equal to ( heilo ) )",
    "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = \"Text\" OR T1.RAM_MiB  >  32;": "( hardware model name of staff ) that belongs to ( ( chip model ) , and ( ( phone ) satisfied that ( ( model name of addresses ) equal to ( chip model of staff ) ) ) , and ( ( screen mode ) satisfied that ( ( screen mode of staff ) equal to ( graphics mode of enzyme ) ) ) ) , that have ( ( ( type of enzyme ) equal to ( text ) ) or ( ( ram mib of addresses ) greater than ( 32 ) ) )",
    "SELECT sum(enrollment) ,  avg(enrollment) FROM school": "( the sum of ( enrollment ) ) , ( the average of ( enrollment ) ) that belongs to ( school )",
    "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1": "( organization name ) that belongs to ( organizations ) , ordered by ( ( date formed ) in descending order ) , limited to the top ( 1 )",
    "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25": "( the average of ( weeks on top of staff ) ) that belongs to ( ( artist ) , and ( ( volume ) satisfied that ( ( artist id of addresses ) equal to ( artist id of staff ) ) ) ) , that have ( ( age of addresses ) less than or equal to ( 25 ) )",
    "SELECT Country FROM mountain WHERE Height  >  5000": "( country ) that belongs to ( mountain ) , that have ( ( height ) greater than ( 5000 ) )",
    "SELECT DISTINCT gtype FROM Video_games": "( distinct ( gtype ) ) that belongs to ( video games )",
    "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2 ORDER BY T1.Product_Name": "( product name of addresses ) that belongs to ( ( products ) , and ( ( products in events ) satisfied that ( ( product id of addresses ) equal to ( product id of staff ) ) ) ) , grouped by ( product name of addresses ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) ) , ordered by ( ( product name of addresses ) )",
    "SELECT origin ,  count(*) FROM train GROUP BY origin": "( origin ) , ( the number of ( all items ) ) that belongs to ( train ) , grouped by ( origin )",
    "SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name": "( grape ) , ( appelation ) , ( name ) that belongs to ( wine ) , that have ( ( score ) greater than ( 93 ) ) , ordered by ( ( name ) )",
    "SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2;": "( shipping agent name of ref shipping agents ) that belongs to ( ref shipping agents , and ( documents satisfied that ( ( shipping agent code of documents ) equal to ( shipping agent code of ref shipping agents ) ) ) ) , that have ( ( document id of documents ) equal to ( 2 ) )",
    "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000": "( distinct ( driverid of addresses ) ) , ( nationality of addresses ) that belongs to ( ( drivers ) , and ( ( laptimes ) satisfied that ( ( driverid of addresses ) equal to ( driverid of staff ) ) ) ) , that have ( ( milliseconds of staff ) greater than ( 100000 ) )",
    "SELECT Working_year_starts FROM manager ORDER BY LEVEL DESC": "( working year starts ) that belongs to ( manager ) , ordered by ( ( level ) in descending order )",
    "SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id  =  T2.engineer_id GROUP BY T1.engineer_id ORDER BY count(*) ASC LIMIT 1": "( engineer id of addresses ) , ( first name of addresses ) , ( last name of addresses ) that belongs to ( ( maintenance engineers ) , and ( ( engineer visits ) satisfied that ( ( engineer id of addresses ) equal to ( engineer id of staff ) ) ) ) , grouped by ( engineer id of addresses ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( 1 )",
    "SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\"": "( artist name of addresses ) , ( gender of addresses ) that belongs to ( ( artist ) , and ( ( song ) satisfied that ( ( artist name of addresses ) equal to ( artist name of staff ) ) ) ) , that have ( ( t2.releasedate ) like ( %mar% ) )",
    "SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"operating system\" OR T2.course_name  =  \"data structure\"": "( address line 1 of addresses ) that belongs to ( ( course authors and tutors ) , and ( ( courses ) satisfied that ( ( author id of addresses ) equal to ( author id of staff ) ) ) ) , that have ( ( ( course name of staff ) equal to ( operating system ) ) or ( ( course name of staff ) equal to ( data structure ) ) )",
    "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1": "( candidate id ) that belongs to ( candidate assessments ) , ordered by ( ( assessment date ) in descending order ) , limited to the top ( 1 )",
    "SELECT name ,  born_state ,  age FROM head ORDER BY age": "( name ) , ( born state ) , ( age ) that belongs to ( head ) , ordered by ( ( age ) )",
    "SELECT name FROM stadium WHERE name LIKE \"%Bank%\"": "( name ) that belongs to ( stadium ) , that have ( ( name ) like ( %bank% ) )",
    "SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id": "( name of staff ) , ( the number of ( all items ) ) that belongs to ( ( membership register branch ) , and ( ( branch ) satisfied that ( ( branch id of addresses ) equal to ( branch id of staff ) ) ) ) , that have ( ( register year of addresses ) greater than ( 2015 ) ) , grouped by ( branch id of staff )",
    "SELECT individual_first_name ,  individual_middle_name ,  individual_last_name FROM individuals ORDER BY individual_last_name": "( individual first name ) , ( individual middle name ) , ( individual last name ) that belongs to ( individuals ) , ordered by ( ( individual last name ) )",
    "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id JOIN Ref_Company_Types AS T3 ON T1.company_type_code  =  T3.company_type_code ORDER BY T2.contract_end_date DESC LIMIT 1": "( company name of addresses ) that belongs to ( ( third party companies ) , and ( ( maintenance contracts ) satisfied that ( ( company id of addresses ) equal to ( maintenance contract company id of staff ) ) ) , and ( ( ref company types ) satisfied that ( ( company type code of addresses ) equal to ( company type code of enzyme ) ) ) ) , ordered by ( ( contract end date of staff ) in descending order ) , limited to the top ( 1 )",
    "SELECT County_name FROM county ORDER BY Population DESC LIMIT 1": "( county name ) that belongs to ( county ) , ordered by ( ( population ) in descending order ) , limited to the top ( 1 )",
    "SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )": "( project details ) that belongs to ( projects ) , that have ( ( organisation_id ) in ( ( organisation id ) that belongs to ( projects ) , grouped by ( organisation id ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 ) ) )",
    "SELECT count(*) FROM tryout WHERE decision  =  'yes'": "( the number of ( all items ) ) that belongs to ( tryout ) , that have ( ( decision ) equal to ( 'yes' ) )",
    "SELECT count(*) FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Enrolment)": "( the number of ( all items ) ) that belongs to ( students ) , that have ( ( student_id ) not in ( ( student id ) that belongs to ( student course enrolment ) ) )",
    "SELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')": "( fname of addresses ) , ( lname of addresses ) that belongs to ( ( student ) , and ( ( lives in ) satisfied that ( ( stuid of addresses ) equal to ( stuid of staff ) ) ) ) , that have ( ( t2.dormid ) in ( ( dormid of enzyme ) that belongs to ( ( has amenity ) , and ( ( dorm amenity ) satisfied that ( ( amenid of enzyme ) equal to ( amenid of trip ) ) ) ) , that have ( ( amenity name of trip ) equal to ( 'tv lounge' ) ) ) )",
    "SELECT count(*) FROM tweets": "( the number of ( all items ) ) that belongs to ( tweets )",
    "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  \"Clara\") AND first_name != \"Clara\"": "( first name ) , ( last name ) , ( hire date ) that belongs to ( employees ) , that have ( ( ( department id ) equal to ( department id ) that belongs to ( employees ) , that have ( ( first name ) equal to ( clara ) ) ) and ( ( first name ) not equal to ( clara ) ) )",
    "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')": "( rid ) that belongs to ( routes ) , that have ( ( ( dst apid ) in ( ( apid ) that belongs to ( airports ) , that have ( ( country ) equal to ( 'united states' ) ) ) ) and ( ( src apid ) in ( ( apid ) that belongs to ( airports ) , that have ( ( country ) equal to ( 'united states' ) ) ) ) )",
    "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)": "( party email of club ) that belongs to ( ( parties ) , and ( ( party forms ) satisfied that ( ( party id of club ) equal to ( party id of member of club ) ) ) ) , that have ( ( form id of member of club ) equal to ( form id ) that belongs to ( party forms ) , grouped by ( form id ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 ) )",
    "SELECT DISTINCT LOCATION FROM station WHERE number_of_platforms  >=  15 AND total_passengers  >  25": "( distinct ( location ) ) that belongs to ( station ) , that have ( ( ( number of platforms ) greater than or equal to ( 15 ) ) and ( ( total passengers ) greater than ( 25 ) ) )",
    "SELECT T1.Royal_Family_Details ,  T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID  =  T2.Tourist_Attraction_ID": "( royal family details of addresses ) , ( how to get there of staff ) that belongs to ( ( royal family ) , and ( ( tourist attractions ) satisfied that ( ( royal family id of addresses ) equal to ( tourist attraction id of staff ) ) ) )",
    "SELECT id ,  market_share FROM browser WHERE name  =  'Safari'": "( id ) , ( market share ) that belongs to ( browser ) , that have ( ( name ) equal to ( 'safari' ) )",
    "SELECT name ,  average_attendance ,  total_attendance FROM stadium EXCEPT SELECT T2.name ,  T2.average_attendance ,  T2.total_attendance FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id": "( name ) , ( average attendance ) , ( total attendance ) that belongs to ( stadium ), and except that ( ( name of staff ) , ( average attendance of staff ) , ( total attendance of staff ) that belongs to ( ( game ) , and ( ( stadium ) satisfied that ( ( stadium id of addresses ) equal to ( id of staff ) ) ) , and ( ( injury accident ) satisfied that ( ( id of addresses ) equal to ( game id of enzyme ) ) ) ))",
    "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1": "( customer name of addresses ) that belongs to ( ( customers ) , and ( ( customer orders ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , grouped by ( customer id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT name FROM station WHERE station_id NOT IN (SELECT station_id FROM train_station)": "( name ) that belongs to ( station ) , that have ( ( station_id ) not in ( ( station id ) that belongs to ( train station ) ) )",
    "SELECT sum(Amount_Settled) FROM Settlements": "( the sum of ( amount settled ) ) that belongs to ( settlements )",
    "SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING count(*)  >  2": "( month ) that belongs to ( happy hour ) , grouped by ( month ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )",
    "SELECT Country FROM member GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1": "( country ) that belongs to ( member ) , grouped by ( country ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(DISTINCT city) FROM Person": "( the number of ( distinct ( city ) ) ) that belongs to ( person )",
    "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Badlands\"": "( instrument of trip ) that belongs to ( ( performance ) , and ( ( band ) satisfied that ( ( bandmate of addresses ) equal to ( id of staff ) ) ) , and ( ( songs ) satisfied that ( ( songid of enzyme ) equal to ( songid of addresses ) ) ) , and ( ( instruments ) satisfied that ( ( ( songid of trip ) equal to ( songid of enzyme ) ) and ( ( bandmateid of trip ) equal to ( id of staff ) ) ) ) ) , that have ( ( ( lastname of staff ) equal to ( heilo ) ) and ( ( title of enzyme ) equal to ( badlands ) ) )",
    "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"": "( cname ) , ( enr ) that belongs to ( college ) , that have ( ( ( enr ) greater than ( 10000 ) ) and ( ( state ) equal to ( la ) ) )",
    "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID": "( name ) , ( course id ) that belongs to ( ( instructor ) , and ( ( teaches ) satisfied that ( ( id of addresses ) equal to ( id of staff ) ) ) )",
    "SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id  =  T2.master_customer_id WHERE T3.cmi_details != 'Schmidt ,  Kertzmann and Lubowitz'": "( council tax id of addresses ) that belongs to ( ( rent arrears ) , and ( ( cmi cross references ) satisfied that ( ( cmi cross ref id of addresses ) equal to ( cmi cross ref id of staff ) ) ) , and ( ( customer master index ) satisfied that ( ( master customer id of enzyme ) equal to ( master customer id of staff ) ) ) ) , that have ( ( cmi details of enzyme ) not equal to ( 'schmidt , kertzmann and lubowitz' ) )",
    "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3": "( start station name ) , ( end station name ) that belongs to ( trip ) , ordered by ( ( id ) ) , limited to the top ( 3 )",
    "SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1": "( main industry ) , ( the number of ( all items ) ) that belongs to ( company ) , grouped by ( main industry ) , ordered by ( ( the sum of ( market value ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(DISTINCT Company) FROM entrepreneur": "( the number of ( distinct ( company ) ) ) that belongs to ( entrepreneur )",
    "SELECT avg(num_of_staff) ,  avg(score) FROM shop": "( the average of ( num of staff ) ) , ( the average of ( score ) ) that belongs to ( shop )",
    "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2": "( location ) that belongs to ( wrestler ) , grouped by ( location ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )",
    "SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director": "( title of staff ) , ( stars of addresses ) , ( director of staff ) , ( the minimum of ( stars of addresses ) ) that belongs to ( ( rating ) , and ( ( movie ) satisfied that ( ( mid of addresses ) equal to ( mid of staff ) ) ) ) , grouped by ( director of staff )",
    "SELECT lname ,  sex FROM Student WHERE StuID IN (SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  \"Call of Destiny\" INTERSECT SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  \"Works of Widenius\")": "( lname ) , ( sex ) that belongs to ( student ) , that have ( ( stuid ) in ( ( stuid of addresses ) that belongs to ( ( plays games ) , and ( ( video games ) satisfied that ( ( gameid of addresses ) equal to ( gameid of staff ) ) ) ) , that have ( ( gname of staff ) equal to ( call of destiny ) ), and intersect with ( ( stuid of addresses ) that belongs to ( ( plays games ) , and ( ( video games ) satisfied that ( ( gameid of addresses ) equal to ( gameid of staff ) ) ) ) , that have ( ( gname of staff ) equal to ( works of widenius ) )) ) )",
    "SELECT T1.document_type_name ,  T1.document_type_description ,  T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code  =  T2.document_type_code": "( document type name of addresses ) , ( document type description of addresses ) , ( document date of staff ) that belongs to ( ( ref document types ) , and ( ( documents ) satisfied that ( ( document type code of addresses ) equal to ( document type code of staff ) ) ) )",
    "SELECT gender FROM TEACHERS WHERE last_name  =  \"Medhurst\"": "( gender ) that belongs to ( teachers ) , that have ( ( last name ) equal to ( medhurst ) )",
    "SELECT max(amount_of_transaction) FROM TRANSACTIONS": "( the maximum of ( amount of transaction ) ) that belongs to ( transactions )",
    "SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )": "( the number of ( all items ) ) that belongs to ( documents ) , that have ( ( document_id ) not in ( ( document id ) that belongs to ( documents with expenses ) ) )",
    "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10": "( zip code ) that belongs to ( weather ) , grouped by ( zip code ) , that have ( ( the average of ( mean visibility miles ) ) less than ( 10 ) )",
    "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"660 Shea Crescent\" OR T2.How_to_Get_There  =  \"walk\"": "( name of staff ) that belongs to ( ( locations ) , and ( ( tourist attractions ) satisfied that ( ( location id of addresses ) equal to ( location id of staff ) ) ) ) , that have ( ( ( address of addresses ) equal to ( 660 shea crescent ) ) or ( ( how to get there of staff ) equal to ( walk ) ) )",
    "SELECT player FROM match_season ORDER BY College ASC": "( player ) that belongs to ( match season ) , ordered by ( ( college ) in ascending order )",
    "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1": "( creation ) that belongs to ( department ) , grouped by ( creation ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID WHERE T2.Year  =  1995": "( distinct ( director of addresses ) ) that belongs to ( ( film ) , and ( ( film market estimation ) satisfied that ( ( film id of addresses ) equal to ( film id of staff ) ) ) ) , that have ( ( year of staff ) equal to ( 1995 ) )",
    "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id": "( the number of ( all items ) ) , ( product id of staff ) that belongs to ( ( problems ) , and ( ( product ) satisfied that ( ( product id of addresses ) equal to ( product id of staff ) ) ) ) , that have ( ( date problem reported of addresses ) greater than ( 1986-11-13 ) ) , grouped by ( product id of staff )",
    "SELECT T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID WHERE T3.Sales_in_Billion  >  200": "( name of staff ) that belongs to ( ( employment ) , and ( ( people ) satisfied that ( ( people id of addresses ) equal to ( people id of staff ) ) ) , and ( ( company ) satisfied that ( ( company id of addresses ) equal to ( company id of enzyme ) ) ) ) , that have ( ( sales in billion of enzyme ) greater than ( 200 ) )",
    "SELECT T1.Name ,  T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID": "( name of addresses ) , ( name of staff ) that belongs to ( ( city ) , and ( ( county public safety ) satisfied that ( ( county id of addresses ) equal to ( county id of staff ) ) ) )",
    "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Negative  =  T3.People_ID ORDER BY T3.Name ASC": "( name of enzyme ) , ( date of staff ) , ( venue of staff ) that belongs to ( ( debate people ) , and ( ( debate ) satisfied that ( ( debate id of addresses ) equal to ( debate id of staff ) ) ) , and ( ( people ) satisfied that ( ( negative of addresses ) equal to ( people id of enzyme ) ) ) ) , ordered by ( ( name of enzyme ) in ascending order )",
    "SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id  =  T2.organization_id WHERE T2.organization_details  =  'Denesik and Sons Party'": "( distinct ( service type code of addresses ) ) that belongs to ( ( services ) , and ( ( organizations ) satisfied that ( ( organization id of addresses ) equal to ( organization id of staff ) ) ) ) , that have ( ( organization details of staff ) equal to ( 'denesik and sons party' ) )",
    "SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Carole\" AND T2.last_name = \"Bernhard\"": "( the sum of ( amount payment of addresses ) ) that belongs to ( ( customer payments ) , and ( ( customers ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , that have ( ( ( first name of staff ) equal to ( carole ) ) and ( ( last name of staff ) equal to ( bernhard ) ) )",
    "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'": "( name ) , ( course id ) that belongs to ( ( instructor ) , and ( ( teaches ) satisfied that ( ( id of addresses ) equal to ( id of staff ) ) ) ) , that have ( ( dept name of addresses ) equal to ( 'art' ) )",
    "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3": "( id ) , ( duration ) that belongs to ( trip ) , ordered by ( ( duration ) in descending order ) , limited to the top ( 3 )",
    "SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount  <  9": "( donator name ) that belongs to ( endowment ), and except that ( ( donator name ) that belongs to ( endowment ) , that have ( ( amount ) less than ( 9 ) ))",
    "SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num GROUP BY T1.prof_num HAVING count(*)  >  1": "( emp fname of staff ) that belongs to ( ( class ) , and ( ( employee ) satisfied that ( ( prof num of addresses ) equal to ( emp num of staff ) ) ) ) , grouped by ( prof num of addresses ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT roomName FROM Rooms ORDER BY basePrice;": "( roomname ) that belongs to ( rooms ) , ordered by ( ( baseprice ) )",
    "SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"": "( the number of ( distinct ( product id of student ) ) ) that belongs to ( ( customers ) , and ( ( customer orders ) satisfied that ( ( customer id of club ) equal to ( customer id of member of club ) ) ) , and ( ( order items ) satisfied that ( ( order id of member of club ) equal to ( order id of student ) ) ) ) , that have ( ( customer name of club ) equal to ( rodrick heaney ) )",
    "SELECT DName FROM DEPARTMENT WHERE Building  =  \"Mergenthaler\"": "( dname ) that belongs to ( department ) , that have ( ( building ) equal to ( mergenthaler ) )",
    "SELECT count(DISTINCT i_id) FROM review": "( the number of ( distinct ( i id ) ) ) that belongs to ( review )",
    "SELECT publisher ,  count(*) FROM book_club GROUP BY publisher": "( publisher ) , ( the number of ( all items ) ) that belongs to ( book club ) , grouped by ( publisher )",
    "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5": "( cname of addresses ) that belongs to ( ( course ) , and ( ( enrolled in ) satisfied that ( ( cid of addresses ) equal to ( cid of staff ) ) ) ) , grouped by ( cid of staff ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 5 ) )",
    "SELECT date_incident_start ,  date_incident_end FROM Behavior_Incident WHERE incident_type_code  =  \"NOISE\"": "( date incident start ) , ( date incident end ) that belongs to ( behavior incident ) , that have ( ( incident type code ) equal to ( noise ) )",
    "SELECT COUNT (DISTINCT church_id) FROM wedding WHERE YEAR  =  2016": "( the number of ( distinct ( church id ) ) ) that belongs to ( wedding ) , that have ( ( year ) equal to ( 2016 ) )",
    "SELECT DISTINCT T1.EMP_FNAME ,  T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE CRS_CODE  =  \"ACCT-211\"": "( distinct ( emp fname of addresses ) ) , ( emp dob of addresses ) that belongs to ( ( employee ) , and ( ( class ) satisfied that ( ( emp num of addresses ) equal to ( prof num of staff ) ) ) ) , that have ( ( crs code ) equal to ( acct-211 ) )",
    "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1": "( studio ) that belongs to ( film ) , grouped by ( studio ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT DISTINCT T2.Hardware_Model_name , T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb BETWEEN 10 AND 15;": "( distinct ( hardware model name of staff ) ) , ( company name of staff ) that belongs to ( ( screen mode ) , and ( ( phone ) satisfied that ( ( graphics mode of addresses ) equal to ( screen mode of staff ) ) ) ) , that have ( ( t1.used_kb ) between ( 10 ) and ( 15 ) )",
    "SELECT count(*) FROM book_club": "( the number of ( all items ) ) that belongs to ( book club )",
    "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance": "( student id of staff ) that belongs to ( ( courses ) , and ( ( student course attendance ) satisfied that ( ( course id of addresses ) equal to ( course id of staff ) ) ) ) , that have ( ( course name of addresses ) equal to ( statistics ) ) , ordered by ( ( date of attendance of staff ) )",
    "SELECT sum(Points) FROM player": "( the sum of ( points ) ) that belongs to ( player )",
    "SELECT T3.service_id ,  T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID   =  T3.Event_ID JOIN services AS T4 ON T3.service_id  =  T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT 1": "( service id of enzyme ) , ( service type code of trip ) that belongs to ( ( participants ) , and ( ( participants in events ) satisfied that ( ( participant id of addresses ) equal to ( participant id of staff ) ) ) , and ( ( events ) satisfied that ( ( event id of staff ) equal to ( event id of enzyme ) ) ) , and ( ( services ) satisfied that ( ( service id of enzyme ) equal to ( service id of trip ) ) ) ) , grouped by ( service id of enzyme ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( 1 )",
    "SELECT Zip_code FROM county WHERE County_name  =  \"Howard\"": "( zip code ) that belongs to ( county ) , that have ( ( county name ) equal to ( howard ) )",
    "SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008": "( location ) that belongs to ( shop ) , that have ( ( open year ) greater than ( 2012 ) ), and intersect with ( ( location ) that belongs to ( shop ) , that have ( ( open year ) less than ( 2008 ) ))",
    "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)": "( city ) that belongs to ( airports ) , grouped by ( city ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) ) , ordered by ( ( the number of ( all items ) ) )",
    "SELECT count(*) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident )": "( the number of ( all items ) ) that belongs to ( students ) , that have ( ( student_id ) not in ( ( student id ) that belongs to ( behavior incident ) ) )",
    "SELECT name FROM Reviewer UNION SELECT title FROM Movie": "( name ) that belongs to ( reviewer ) and ( title ) that belongs to ( movie )",
    "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id": "( distinct ( individual last name of club ) ) that belongs to ( ( individuals ) , and ( ( organization contact individuals ) satisfied that ( ( individual id of club ) equal to ( individual id of member of club ) ) ) )",
    "SELECT Grape ,  Appelation FROM WINE": "( grape ) , ( appelation ) that belongs to ( wine )",
    "SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code": "( card type code ) , ( the number of ( all items ) ) that belongs to ( customers cards ) , grouped by ( card type code )",
    "SELECT T1.gender ,  T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1": "( gender of addresses ) , ( artist name of addresses ) that belongs to ( ( artist ) , and ( ( song ) satisfied that ( ( artist name of addresses ) equal to ( artist name of staff ) ) ) ) , ordered by ( ( resolution of staff ) ) , limited to the top ( 1 )",
    "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  1": "( apt number of addresses ) that belongs to ( ( apartments ) , and ( ( view unit status ) satisfied that ( ( apt id of addresses ) equal to ( apt id of staff ) ) ) ) , that have ( ( available yn of staff ) equal to ( 0 ) ), and intersect with ( ( apt number of addresses ) that belongs to ( ( apartments ) , and ( ( view unit status ) satisfied that ( ( apt id of addresses ) equal to ( apt id of staff ) ) ) ) , that have ( ( available yn of staff ) equal to ( 1 ) ))",
    "SELECT role_description FROM ROLES WHERE role_name  =  \"Proof Reader\"": "( role description ) that belongs to ( roles ) , that have ( ( role name ) equal to ( proof reader ) )",
    "SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination ORDER BY COUNT(*) DESC": "( denomination ) , ( the number of ( all items ) ) that belongs to ( school ) , grouped by ( denomination ) , ordered by ( ( the number of ( all items ) ) in descending order )",
    "SELECT product_name ,  product_description FROM products_for_hire WHERE product_type_code  =  'Cutlery' AND daily_hire_cost  <  20": "( product name ) , ( product description ) that belongs to ( products for hire ) , that have ( ( ( product type code ) equal to ( 'cutlery' ) ) and ( ( daily hire cost ) less than ( 20 ) ) )",
    "SELECT T3.id ,  count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id JOIN airport AS T3 ON T2.airport_id  =  T3.id GROUP BY T3.id": "( id of enzyme ) , ( the number of ( all items ) ) that belongs to ( ( operate company ) , and ( ( flight ) satisfied that ( ( id of addresses ) equal to ( company id of staff ) ) ) , and ( ( airport ) satisfied that ( ( airport id of staff ) equal to ( id of enzyme ) ) ) ) , grouped by ( id of enzyme )",
    "SELECT T3.name ,  T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id": "( name of enzyme ) , ( name of staff ) that belongs to ( ( office locations ) , and ( ( buildings ) satisfied that ( ( building id of addresses ) equal to ( id of staff ) ) ) , and ( ( companies ) satisfied that ( ( company id of addresses ) equal to ( id of enzyme ) ) ) )",
    "SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4": "( account id of addresses ) , ( account name of staff ) that belongs to ( ( financial transactions ) , and ( ( accounts ) satisfied that ( ( account id of addresses ) equal to ( account id of staff ) ) ) ) , grouped by ( account id of addresses ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 4 ) )",
    "SELECT Team ,  COUNT(*) FROM technician GROUP BY Team": "( team ) , ( the number of ( all items ) ) that belongs to ( technician ) , grouped by ( team )",
    "SELECT BirthDate FROM EMPLOYEE WHERE City  =  \"Edmonton\"": "( birthdate ) that belongs to ( employee ) , that have ( ( city ) equal to ( edmonton ) )",
    "SELECT gender FROM staff GROUP BY gender ORDER BY count(*) DESC LIMIT 1": "( gender ) that belongs to ( staff ) , grouped by ( gender ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings';": "( the maximum of ( wins of addresses ) ) that belongs to ( ( postseason ) , and ( ( team ) satisfied that ( ( team id winner of addresses ) equal to ( team id br of staff ) ) ) ) , that have ( ( name of staff ) equal to ( 'boston red stockings' ) )",
    "SELECT aid FROM Aircraft WHERE distance  >  1000": "( aid ) that belongs to ( aircraft ) , that have ( ( distance ) greater than ( 1000 ) )",
    "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.crossing  >  90 AND T2.preferred_foot  =  \"right\"": "( distinct ( player name of addresses ) ) that belongs to ( ( player ) , and ( ( player attributes ) satisfied that ( ( player api id of addresses ) equal to ( player api id of staff ) ) ) ) , that have ( ( ( crossing of staff ) greater than ( 90 ) ) and ( ( preferred foot of staff ) equal to ( right ) ) )",
    "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1": "( semester ) , ( year ) that belongs to ( takes ) , grouped by ( semester ) , ( year ) , ordered by ( ( the number of ( all items ) ) ) , limited to the top ( 1 )",
    "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')": "( the number of ( distinct ( name ) ) ) that belongs to ( personfriend ) , that have ( ( friend ) not in ( ( name ) that belongs to ( person ) , that have ( ( city ) equal to ( 'austin' ) ) ) )",
    "SELECT count(*) FROM inventory WHERE store_id  =  1": "( the number of ( all items ) ) that belongs to ( inventory ) , that have ( ( store id ) equal to ( 1 ) )",
    "SELECT count(*) FROM employees WHERE country = \"Canada\";": "( the number of ( all items ) ) that belongs to ( employees ) , that have ( ( country ) equal to ( canada ) )",
    "SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3": "( team ) that belongs to ( elimination ) , grouped by ( team ) , that have ( ( the number of ( all items ) ) greater than ( 3 ) )",
    "SELECT count(*) FROM station": "( the number of ( all items ) ) that belongs to ( station )",
    "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";": "( the number of ( all items ) ) that belongs to ( ( albums ) , and ( ( artists ) satisfied that ( ( artist id of addresses ) equal to ( id of staff ) ) ) ) , that have ( ( name of staff ) equal to ( billy cobham ) )",
    "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')": "( name ) that belongs to ( student ) , that have ( ( id ) not in ( ( id of addresses ) that belongs to ( ( takes ) , and ( ( course ) satisfied that ( ( course id of addresses ) equal to ( course id of staff ) ) ) ) , that have ( ( dept name of staff ) equal to ( 'biology' ) ) ) )",
    "SELECT T1.transaction_type_description ,  T2.date_of_transaction FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code WHERE T2.share_count  <  10": "( transaction type description of addresses ) , ( date of transaction of staff ) that belongs to ( ( ref transaction types ) , and ( ( transactions ) satisfied that ( ( transaction type code of addresses ) equal to ( transaction type code of staff ) ) ) ) , that have ( ( share count of staff ) less than ( 10 ) )",
    "SELECT product_type_code ,  avg(product_price) FROM products GROUP BY product_type_code": "( product type code ) , ( the average of ( product price ) ) that belongs to ( products ) , grouped by ( product type code )",
    "SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName": "( cname ) that belongs to ( college ) , that have ( ( enr ) greater than ( 18000 ) ) , ordered by ( ( cname ) )",
    "SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)": "( title of enzyme ) , ( credits of enzyme ) that belongs to ( ( classroom ) , and ( ( section ) satisfied that ( ( ( building of addresses ) equal to ( building of staff ) ) and ( ( room number of addresses ) equal to ( room number of staff ) ) ) ) , and ( ( course ) satisfied that ( ( course id of staff ) equal to ( course id of enzyme ) ) ) ) , that have ( ( capacity of addresses ) equal to ( the maximum of ( capacity ) ) that belongs to ( classroom ) )",
    "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'": "( fname ) , ( lname ) , ( age ) that belongs to ( student ) , that have ( ( sex ) equal to ( 'f' ) )",
    "SELECT count(*) FROM Rating WHERE stars  >  3": "( the number of ( all items ) ) that belongs to ( rating ) , that have ( ( stars ) greater than ( 3 ) )",
    "SELECT address FROM shop ORDER BY open_year": "( address ) that belongs to ( shop ) , ordered by ( ( open year ) )",
    "SELECT gender ,  count(*) FROM Customers GROUP BY gender": "( gender ) , ( the number of ( all items ) ) that belongs to ( customers ) , grouped by ( gender )",
    "SELECT count(DISTINCT Software_Platform) FROM device": "( the number of ( distinct ( software platform ) ) ) that belongs to ( device )",
    "SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id WHERE T2.player  =  'Walter Samuel'": "( season of addresses ) that belongs to ( ( game ) , and ( ( injury accident ) satisfied that ( ( id of addresses ) equal to ( game id of staff ) ) ) ) , that have ( ( player of staff ) equal to ( 'walter samuel' ) )",
    "SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3": "( city ) that belongs to ( airports ) , that have ( ( country ) equal to ( 'united states' ) ) , grouped by ( city ) , that have ( ( the number of ( all items ) ) greater than ( 3 ) )",
    "SELECT advisor FROM Student GROUP BY advisor HAVING count(*)  >=  2": "( advisor ) that belongs to ( student ) , grouped by ( advisor ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"": "( distinct ( invoice details ) ) that belongs to ( invoices ) , that have ( ( ( invoice date ) less than ( 1989-09-03 ) ) or ( ( invoice date ) greater than ( 2007-12-25 ) ) )",
    "SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  <  315": "( height of staff ) that belongs to ( ( body builder ) , and ( ( people ) satisfied that ( ( people id of addresses ) equal to ( people id of staff ) ) ) ) , that have ( ( total of addresses ) less than ( 315 ) )",
    "SELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \"England\"": "( the number of ( all items ) ) that belongs to ( ( country ) , and ( ( league ) satisfied that ( ( id of addresses ) equal to ( country id of staff ) ) ) ) , that have ( ( name of addresses ) equal to ( england ) )",
    "SELECT POSITION ,  avg(Points) FROM player GROUP BY POSITION": "( position ) , ( the average of ( points ) ) that belongs to ( player ) , grouped by ( position )",
    "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'": "( name of addresses ) , ( trade name of addresses ) that belongs to ( ( medicine ) , and ( ( medicine enzyme interaction ) satisfied that ( ( medicine id of staff ) equal to ( id of addresses ) ) ) ) , that have ( ( interaction type ) equal to ( 'inhibitor' ) ), and intersect with ( ( name of addresses ) , ( trade name of addresses ) that belongs to ( ( medicine ) , and ( ( medicine enzyme interaction ) satisfied that ( ( medicine id of staff ) equal to ( id of addresses ) ) ) ) , that have ( ( interaction type ) equal to ( 'activitor' ) ))",
    "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName": "( pname of addresses ) that belongs to ( ( player ) , and ( ( tryout ) satisfied that ( ( pid of addresses ) equal to ( pid of staff ) ) ) ) , ordered by ( ( pname of addresses ) )",
    "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'": "( name of addresses ) that belongs to ( ( tracks ) , and ( ( playlist tracks ) satisfied that ( ( id of addresses ) equal to ( track id of staff ) ) ) , and ( ( playlists ) satisfied that ( ( playlist id of staff ) equal to ( id of enzyme ) ) ) ) , that have ( ( name of enzyme ) equal to ( 'movies' ) ), and except that ( ( name of addresses ) that belongs to ( ( tracks ) , and ( ( playlist tracks ) satisfied that ( ( id of addresses ) equal to ( track id of staff ) ) ) , and ( ( playlists ) satisfied that ( ( playlist id of staff ) equal to ( id of enzyme ) ) ) ) , that have ( ( name of enzyme ) equal to ( 'music' ) ))",
    "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7": "( id ) that belongs to ( station ) , that have ( ( lat ) greater than ( 4 of 37 ) ), and except that ( ( station id ) that belongs to ( status ) , grouped by ( station id ) , that have ( ( the minimum of ( bikes available ) ) less than ( 7 ) ))",
    "SELECT min(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  \"PUR\" AND share_count  >  50": "( the minimum of ( amount of transaction ) ) that belongs to ( transactions ) , that have ( ( ( transaction type code ) equal to ( pur ) ) and ( ( share count ) greater than ( 50 ) ) )",
    "SELECT count(*) FROM camera_lens WHERE focal_length_mm  >  15": "( the number of ( all items ) ) that belongs to ( camera lens ) , that have ( ( focal length mm ) greater than ( 15 ) )",
    "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')": "( name ) that belongs to ( instructor ) , that have ( ( salary ) greater than ( the minimum of ( salary ) ) that belongs to ( instructor ) , that have ( ( dept name ) equal to ( 'biology' ) ) )",
    "SELECT date FROM weather WHERE max_temperature_f  >  85": "( date ) that belongs to ( weather ) , that have ( ( max temperature f ) greater than ( 85 ) )",
    "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"": "( the number of ( all items ) ) that belongs to ( allergy type ) , that have ( ( allergytype ) equal to ( animal ) )",
    "SELECT Injured FROM perpetrator ORDER BY Injured ASC": "( injured ) that belongs to ( perpetrator ) , ordered by ( ( injured ) in ascending order )",
    "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1": "( name ) , ( location ) , ( seating ) that belongs to ( track ) , ordered by ( ( year opened ) in descending order ) , limited to the top ( 1 )",
    "SELECT guest_first_name ,  guest_last_name FROM Guests": "( guest first name ) , ( guest last name ) that belongs to ( guests )",
    "SELECT local_authority ,  services FROM station": "( local authority ) , ( services ) that belongs to ( station )",
    "SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2": "( headquarters ) that belongs to ( company ) , that have ( ( main industry ) equal to ( 'banking' ) ) , grouped by ( headquarters ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID": "( delegate of addresses ) , ( party of staff ) that belongs to ( ( election ) , and ( ( party ) satisfied that ( ( party of addresses ) equal to ( party id of staff ) ) ) )",
    "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1": "( claim status name of member of club ) that belongs to ( ( claims processing ) , and ( ( claims processing stages ) satisfied that ( ( claim stage id of club ) equal to ( claim stage id of member of club ) ) ) ) , grouped by ( claim stage id of club ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)": "( dept name ) , ( building ) that belongs to ( department ) , that have ( ( budget ) greater than ( the average of ( budget ) ) that belongs to ( department ) )",
    "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\"": "( distinct ( address of addresses ) ) that belongs to ( ( customer ) , and ( ( invoice ) satisfied that ( ( customerid of addresses ) equal to ( customerid of staff ) ) ) ) , that have ( ( country of addresses ) equal to ( germany ) )",
    "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2": "( class ) that belongs to ( race ) , grouped by ( class ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING count(*)  >  3": "( payment method code ) that belongs to ( parties ) , grouped by ( payment method code ) , that have ( ( the number of ( all items ) ) greater than ( 3 ) )",
    "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\"": "( candidate id of staff ) that belongs to ( ( people ) , and ( ( candidates ) satisfied that ( ( person id of addresses ) equal to ( candidate id of staff ) ) ) ) , that have ( ( email address of addresses ) equal to ( stanley.monahan@example.org ) )",
    "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher": "( publisher ) , ( the number of ( all items ) ) that belongs to ( publication ) , grouped by ( publisher )",
    "SELECT count(*) FROM College": "( the number of ( all items ) ) that belongs to ( college )",
    "SELECT document_type_code ,  document_type_name FROM Ref_document_types": "( document type code ) , ( document type name ) that belongs to ( ref document types )",
    "SELECT avg(Enrollment) FROM school": "( the average of ( enrollment ) ) that belongs to ( school )",
    "SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers": "( customer id ) , ( customer first name ) , ( customer last name ) , ( customer phone ) that belongs to ( customers )",
    "SELECT major ,  avg(age) ,  min(age) ,  max(age) FROM Student GROUP BY major": "( major ) , ( the average of ( age ) ) , ( the minimum of ( age ) ) , ( the maximum of ( age ) ) that belongs to ( student ) , grouped by ( major )",
    "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\";": "( name of addresses ) that belongs to ( ( tracks ) , and ( ( playlist tracks ) satisfied that ( ( id of addresses ) equal to ( track id of staff ) ) ) , and ( ( playlists ) satisfied that ( ( id of enzyme ) equal to ( playlist id of staff ) ) ) ) , that have ( ( name of enzyme ) equal to ( movies ) )",
    "SELECT count(DISTINCT dept_name) FROM department": "( the number of ( distinct ( dept name ) ) ) that belongs to ( department )",
    "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting'": "( the number of ( all items ) ) that belongs to ( ( class ) , and ( ( enroll ) satisfied that ( ( class code of addresses ) equal to ( class code of staff ) ) ) , and ( ( course ) satisfied that ( ( crs code of addresses ) equal to ( crs code of enzyme ) ) ) , and ( ( department ) satisfied that ( ( dept code of enzyme ) equal to ( dept code of trip ) ) ) ) , that have ( ( dept name of trip ) equal to ( 'accounting' ) )",
    "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"": "( date order placed of staff ) that belongs to ( ( customers ) , and ( ( orders ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , that have ( ( customer name of addresses ) equal to ( jeramie ) )",
    "SELECT T1.id ,  T1.name FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id GROUP BY T1.id HAVING count(*)  >  1": "( id of addresses ) , ( name of addresses ) that belongs to ( ( operate company ) , and ( ( flight ) satisfied that ( ( id of addresses ) equal to ( company id of staff ) ) ) ) , grouped by ( id of addresses ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT sum(amount) FROM payment": "( the sum of ( amount ) ) that belongs to ( payment )",
    "SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'": "( cname ) that belongs to ( tryout ) , that have ( ( ppos ) equal to ( 'goalie' ) ), and intersect with ( ( cname ) that belongs to ( tryout ) , that have ( ( ppos ) equal to ( 'mid' ) ))",
    "SELECT count(*) ,  crs_code FROM CLASS GROUP BY crs_code": "( the number of ( all items ) ) , ( crs code ) that belongs to ( class ) , grouped by ( crs code )",
    "SELECT AVG(UnitPrice) FROM TRACK": "( the average of ( unitprice ) ) that belongs to ( track )",
    "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Airbus A340-300\"": "( name of addresses ) that belongs to ( ( employee ) , and ( ( certificate ) satisfied that ( ( eid of addresses ) equal to ( eid of staff ) ) ) , and ( ( aircraft ) satisfied that ( ( aid of enzyme ) equal to ( aid of staff ) ) ) ) , that have ( ( name of enzyme ) equal to ( boeing 737-800 ) ), and intersect with ( ( name of addresses ) that belongs to ( ( employee ) , and ( ( certificate ) satisfied that ( ( eid of addresses ) equal to ( eid of staff ) ) ) , and ( ( aircraft ) satisfied that ( ( aid of enzyme ) equal to ( aid of staff ) ) ) ) , that have ( ( name of enzyme ) equal to ( airbus a340-300 ) ))",
    "SELECT Starting_Year FROM technician WHERE Team  =  \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  \"CWS\"": "( starting year ) that belongs to ( technician ) , that have ( ( team ) equal to ( cle ) ), and intersect with ( ( starting year ) that belongs to ( technician ) , that have ( ( team ) equal to ( cws ) ))",
    "SELECT age FROM Person WHERE job  =  'doctor' AND name  =  'Zach'": "( age ) that belongs to ( person ) , that have ( ( ( job ) equal to ( 'doctor' ) ) and ( ( name ) equal to ( 'zach' ) ) )",
    "SELECT TYPE FROM institution GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1": "( type ) that belongs to ( institution ) , grouped by ( type ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT country FROM stadium GROUP BY country HAVING count(*)  <=  3": "( country ) that belongs to ( stadium ) , grouped by ( country ) , that have ( ( the number of ( all items ) ) less than or equal to ( 3 ) )",
    "SELECT Dependent_name FROM dependent WHERE relationship  =  'Spouse'": "( dependent name ) that belongs to ( dependent ) , that have ( ( relationship ) equal to ( 'spouse' ) )",
    "SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1": "( payment date ) that belongs to ( payment ) , ordered by ( ( payment date ) in ascending order ) , limited to the top ( 1 )",
    "SELECT avg(T1.age) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid GROUP BY T3.dorm_name": "( the average of ( age of addresses ) ) , ( dorm name of enzyme ) that belongs to ( ( student ) , and ( ( lives in ) satisfied that ( ( stuid of addresses ) equal to ( stuid of staff ) ) ) , and ( ( dorm ) satisfied that ( ( dormid of enzyme ) equal to ( dormid of staff ) ) ) ) , grouped by ( dorm name of enzyme )",
    "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\"": "( distinct ( title of club ) ) that belongs to ( ( papers ) , and ( ( authorship ) satisfied that ( ( paperid of club ) equal to ( paperid of member of club ) ) ) , and ( ( inst ) satisfied that ( ( instid of member of club ) equal to ( instid of student ) ) ) ) , that have ( ( name of student ) equal to ( indiana university ) )",
    "SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30": "( first name of staff ) , ( last name of staff ) that belongs to ( ( film actor ) , and ( ( actor ) satisfied that ( ( actor id of addresses ) equal to ( actor id of staff ) ) ) ) , grouped by ( actor id of staff ) , that have ( ( the number of ( all items ) ) greater than ( 30 ) )",
    "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5": "( the number of ( distinct ( dept name ) ) ) , ( school code ) that belongs to ( department ) , grouped by ( school code ) , that have ( ( the number of ( distinct ( dept name ) ) ) less than ( 5 ) )",
    "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'": "( name ) that belongs to ( track ), and except that ( ( name of staff ) that belongs to ( ( race ) , and ( ( track ) satisfied that ( ( track id of addresses ) equal to ( track id of staff ) ) ) ) , that have ( ( class of addresses ) equal to ( 'gt' ) ))",
    "SELECT clubname FROM club WHERE clublocation  =  \"AKW\"": "( clubname ) that belongs to ( club ) , that have ( ( clublocation ) equal to ( akw ) )",
    "SELECT Name FROM manager ORDER BY LEVEL ASC": "( name ) that belongs to ( manager ) , ordered by ( ( level ) in ascending order )",
    "SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products)": "( product id of addresses ) that belongs to ( ( product suppliers ) , and ( ( products ) satisfied that ( ( product id of addresses ) equal to ( product id of staff ) ) ) ) , that have ( ( ( supplier id of addresses ) equal to ( 2 ) ) and ( ( product price of staff ) greater than ( the average of ( product price ) ) that belongs to ( products ) ) )",
    "SELECT min(T2.HS) ,   T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID GROUP BY T1.pPos": "( the minimum of ( hs of staff ) ) , ( ppos of addresses ) that belongs to ( ( tryout ) , and ( ( player ) satisfied that ( ( pid of addresses ) equal to ( pid of staff ) ) ) ) , grouped by ( ppos of addresses )",
    "SELECT Product_Name FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events)": "( product name ) that belongs to ( products ) , that have ( ( product_id ) not in ( ( product id ) that belongs to ( products in events ) ) )",
    "SELECT count(*) FROM artwork": "( the number of ( all items ) ) that belongs to ( artwork )",
    "SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1": "( dept name of trip ) that belongs to ( ( class ) , and ( ( enroll ) satisfied that ( ( class code of addresses ) equal to ( class code of staff ) ) ) , and ( ( course ) satisfied that ( ( crs code of addresses ) equal to ( crs code of enzyme ) ) ) , and ( ( department ) satisfied that ( ( dept code of enzyme ) equal to ( dept code of trip ) ) ) ) , grouped by ( dept code of enzyme ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT avg(Quantity) FROM stock": "( the average of ( quantity ) ) that belongs to ( stock )",
    "SELECT count(*) FROM Invoices": "( the number of ( all items ) ) that belongs to ( invoices )",
    "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\"": "( title of student ) that belongs to ( ( authors ) , and ( ( authorship ) satisfied that ( ( authid of club ) equal to ( authid of member of club ) ) ) , and ( ( papers ) satisfied that ( ( paperid of member of club ) equal to ( paperid of student ) ) ) , and ( ( inst ) satisfied that ( ( instid of member of club ) equal to ( instid of inst ) ) ) ) , that have ( ( ( country of inst ) equal to ( japan ) ) and ( ( authorder of member of club ) equal to ( 1 ) ) and ( ( lname of club ) equal to ( ohori ) ) )",
    "SELECT DISTINCT building FROM classroom WHERE capacity  >  50": "( distinct ( building ) ) that belongs to ( classroom ) , that have ( ( capacity ) greater than ( 50 ) )",
    "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'": "( balance of staff ) that belongs to ( ( accounts ) , and ( ( checking ) satisfied that ( ( custid of addresses ) equal to ( custid of staff ) ) ) ) , that have ( ( t1.name ) like ( '%ee%' ) )",
    "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1": "( last name of club ) that belongs to ( ( staff ) , and ( ( complaints ) satisfied that ( ( staff id of club ) equal to ( staff id of member of club ) ) ) ) , ordered by ( ( date complaint raised of member of club ) ) , limited to the top ( 1 )",
    "SELECT T3.EMP_FNAME ,  T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM  =  T3.EMP_NUM WHERE DEPT_NAME  =  \"Biology\"": "( emp fname of enzyme ) , ( emp lname of enzyme ) that belongs to ( ( professor ) , and ( ( department ) satisfied that ( ( dept code of addresses ) equal to ( dept code of staff ) ) ) , and ( ( employee ) satisfied that ( ( emp num of addresses ) equal to ( emp num of enzyme ) ) ) ) , that have ( ( dept name ) equal to ( biology ) )",
    "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1": "( customer name of addresses ) that belongs to ( ( customers ) join ( ( orders ) ) join ( ( order items ) ) , and ( ( products ) satisfied that ( ( ( customer id of addresses ) equal to ( customer id of staff ) ) and ( ( order id of staff ) equal to ( order id of enzyme ) ) and ( ( product id of enzyme ) equal to ( product id of trip ) ) ) ) ) , that have ( ( product name of trip ) equal to ( food ) ) , grouped by ( customer id of addresses ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 1 ) )",
    "SELECT Wheels ,  LOCATION FROM railway": "( wheels ) , ( location ) that belongs to ( railway )",
    "SELECT min(age) ,  job FROM Person GROUP BY job": "( the minimum of ( age ) ) , ( job ) that belongs to ( person ) , grouped by ( job )",
    "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title": "( building of staff ) , ( room number of staff ) , ( semester of staff ) , ( year of staff ) that belongs to ( ( course ) , and ( ( section ) satisfied that ( ( course id of addresses ) equal to ( course id of staff ) ) ) ) , that have ( ( dept name of addresses ) equal to ( 'psychology' ) ) , ordered by ( ( title of addresses ) )",
    "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC": "( age of staff ) that belongs to ( ( gymnast ) , and ( ( people ) satisfied that ( ( gymnast id of addresses ) equal to ( people id of staff ) ) ) ) , ordered by ( ( total points of addresses ) in descending order )",
    "SELECT DISTINCT location_code FROM Document_locations": "( distinct ( location code ) ) that belongs to ( document locations )",
    "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1": "( customer details of addresses ) , ( customer id of addresses ) that belongs to ( ( customers ) , and ( ( customer policies ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , grouped by ( customer id of addresses ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\"": "( team ) that belongs to ( elimination ) , that have ( ( eliminated by ) equal to ( orton ) ), and intersect with ( ( team ) that belongs to ( elimination ) , that have ( ( eliminated by ) equal to ( benjamin ) ))",
    "SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100": "( name ) that belongs to ( station ) , that have ( ( city ) equal to ( palo alto ) ), and except that ( ( end station name ) that belongs to ( trip ) , grouped by ( end station name ) , that have ( ( the number of ( all items ) ) greater than ( 100 ) ))",
    "SELECT DISTINCT payment_method_code FROM INVOICES": "( distinct ( payment method code ) ) that belongs to ( invoices )",
    "SELECT T1.name ,  T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg(T2.salary) ASC LIMIT 1;": "( name of addresses ) , ( team id of addresses ) that belongs to ( ( team ) , and ( ( salary ) satisfied that ( ( team id of addresses ) equal to ( team id of staff ) ) ) ) , grouped by ( team id of addresses ) , ordered by ( ( the average of ( salary of staff ) ) in ascending order ) , limited to the top ( 1 )",
    "SELECT Votes FROM election ORDER BY Votes DESC": "( votes ) that belongs to ( election ) , ordered by ( ( votes ) in descending order )",
    "SELECT avg(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200": "( the average of ( total of addresses ) ) that belongs to ( ( body builder ) , and ( ( people ) satisfied that ( ( people id of addresses ) equal to ( people id of staff ) ) ) ) , that have ( ( height of staff ) greater than ( 200 ) )",
    "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000": "( the average of ( working horses ) ) that belongs to ( farm ) , that have ( ( total horses ) greater than ( 5000 ) )",
    "SELECT name FROM artist ORDER BY year_join DESC LIMIT 1": "( name ) that belongs to ( artist ) , ordered by ( ( year join ) in descending order ) , limited to the top ( 1 )",
    "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate)": "( name ) that belongs to ( people ) , that have ( ( people_id ) not in ( ( people id ) that belongs to ( candidate ) ) )",
    "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";": "( country ) that belongs to ( customers ) , that have ( ( ( first name ) equal to ( roberto ) ) and ( ( last name ) equal to ( almeida ) ) )",
    "SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state": "( the sum of ( acc bal ) ) , ( state ) that belongs to ( customer ) , that have ( ( credit score ) greater than ( 100 ) ) , grouped by ( state )",
    "SELECT LOCATION ,  COUNT(*) FROM performance GROUP BY LOCATION": "( location ) , ( the number of ( all items ) ) that belongs to ( performance ) , grouped by ( location )",
    "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";": "( title of addresses ) that belongs to ( ( albums ) , and ( ( artists ) satisfied that ( ( artist id of addresses ) equal to ( id of staff ) ) ) ) , that have ( ( name of staff ) equal to ( aerosmith ) )",
    "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1": "( title of addresses ) , ( film id of addresses ) that belongs to ( ( film ) , and ( ( inventory ) satisfied that ( ( film id of addresses ) equal to ( film id of staff ) ) ) ) , grouped by ( film id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  57.5": "( distinct ( hometown of staff ) ) that belongs to ( ( gymnast ) , and ( ( people ) satisfied that ( ( gymnast id of addresses ) equal to ( people id of staff ) ) ) ) , that have ( ( total points of addresses ) greater than ( 5 of 57 ) )",
    "SELECT T2.year FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city WHERE T1.city  =  \"Taizhou ( Zhejiang )\"": "( year of staff ) that belongs to ( ( city ) , and ( ( hosting city ) satisfied that ( ( city id of addresses ) equal to ( host city of staff ) ) ) ) , that have ( ( city of addresses ) equal to ( taizhou ( zhejiang ) ) )",
    "SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name": "( name of addresses ) , ( the maximum of ( price of addresses ) ) , ( name of staff ) that belongs to ( ( products ) , and ( ( manufacturers ) satisfied that ( ( manufacturer of addresses ) equal to ( code of staff ) ) ) ) , grouped by ( name of staff )",
    "SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_type_description  =  'Sponsor' ORDER BY organisation_details": "( organisation details ) that belongs to ( ( organisations ) , and ( ( organisation types ) satisfied that ( ( organisation type of addresses ) equal to ( organisation type of staff ) ) ) ) , that have ( ( organisation type description of staff ) equal to ( 'sponsor' ) ) , ordered by ( ( organisation details ) )",
    "SELECT document_name ,  access_count FROM documents ORDER BY document_name": "( document name ) , ( access count ) that belongs to ( documents ) , ordered by ( ( document name ) )",
    "SELECT dorm_name FROM dorm WHERE student_capacity  >  300": "( dorm name ) that belongs to ( dorm ) , that have ( ( student capacity ) greater than ( 300 ) )",
    "SELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY count(*) DESC LIMIT 1": "( country ) that belongs to ( airlines ) , that have ( ( active ) equal to ( 'y' ) ) , grouped by ( country ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.name FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id  =  T1.id WHERE T1.brand  =  'Sigma' OR T1.brand  =  'Olympus'": "( name of addresses ) that belongs to ( ( camera lens ) , and ( ( photos ) satisfied that ( ( camera lens id of staff ) equal to ( id of addresses ) ) ) ) , that have ( ( ( brand of addresses ) equal to ( 'sigma' ) ) or ( ( brand of addresses ) equal to ( 'olympus' ) ) )",
    "SELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations": "( organization id ) that belongs to ( organizations ), and except that ( ( parent organization id ) that belongs to ( organizations ))",
    "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) DESC LIMIT 1": "( title of addresses ) , ( i id of addresses ) that belongs to ( ( item ) , and ( ( review ) satisfied that ( ( i id of addresses ) equal to ( i id of staff ) ) ) ) , grouped by ( i id of staff ) , ordered by ( ( the average of ( rating of staff ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type": "( transaction type ) , ( the number of ( all items ) ) that belongs to ( financial transactions ) , grouped by ( transaction type )",
    "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'": "( customer name of club ) that belongs to ( ( customers ) , and ( ( customer orders ) satisfied that ( ( customer id of club ) equal to ( customer id of member of club ) ) ) , and ( ( order items ) satisfied that ( ( order id of member of club ) equal to ( order id of student ) ) ) , and ( ( products ) satisfied that ( ( product id of student ) equal to ( product id of inst ) ) ) ) , that have ( ( product details of inst ) equal to ( 'latte' ) ), and intersect with ( ( customer name of club ) that belongs to ( ( customers ) , and ( ( customer orders ) satisfied that ( ( customer id of club ) equal to ( customer id of member of club ) ) ) , and ( ( order items ) satisfied that ( ( order id of member of club ) equal to ( order id of student ) ) ) , and ( ( products ) satisfied that ( ( product id of student ) equal to ( product id of inst ) ) ) ) , that have ( ( product details of inst ) equal to ( 'americano' ) ))",
    "SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR": "( grape ) , ( winery ) , ( year ) that belongs to ( wine ) , that have ( ( price ) greater than ( 100 ) ) , ordered by ( ( year ) )",
    "SELECT city_code ,  count(*) FROM Student GROUP BY city_code": "( city code ) , ( the number of ( all items ) ) that belongs to ( student ) , grouped by ( city code )",
    "SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id": "( product name of enzyme ) , ( the number of ( all items ) ) that belongs to ( ( orders ) join ( ( order items ) ) , and ( ( products ) satisfied that ( ( ( order id of addresses ) equal to ( order id of staff ) ) and ( ( product id of staff ) equal to ( product id of enzyme ) ) ) ) ) , grouped by ( product id of enzyme )",
    "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1": "( customer last name of staff ) , ( customer id of addresses ) , ( phone number of staff ) that belongs to ( ( orders ) , and ( ( customers ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , grouped by ( customer id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1": "( name of addresses ) that belongs to ( ( patient ) , and ( ( appointment ) satisfied that ( ( ssn of addresses ) equal to ( patient of staff ) ) ) ) , ordered by ( ( start of staff ) in descending order ) , limited to the top ( 1 )",
    "SELECT Attendance FROM performance WHERE LOCATION  =  \"TD Garden\" OR LOCATION  =  \"Bell Centre\"": "( attendance ) that belongs to ( performance ) , that have ( ( ( location ) equal to ( td garden ) ) or ( ( location ) equal to ( bell centre ) ) )",
    "SELECT name ,  LOCATION FROM track": "( name ) , ( location ) that belongs to ( track )",
    "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5": "( card type code ) that belongs to ( customers cards ) , grouped by ( card type code ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 5 ) )",
    "SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code": "( document type code ) , ( the number of ( all items ) ) that belongs to ( documents ) , grouped by ( document type code )",
    "SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name": "( product name of club ) , ( the number of ( all items ) ) that belongs to ( ( products ) , and ( ( complaints ) satisfied that ( ( product id of club ) equal to ( product id of member of club ) ) ) ) , grouped by ( product name of club )",
    "SELECT count(*) FROM follows": "( the number of ( all items ) ) that belongs to ( follows )",
    "SELECT subject_name FROM SUBJECTS": "( subject name ) that belongs to ( subjects )",
    "SELECT count(*) FROM Statements": "( the number of ( all items ) ) that belongs to ( statements )",
    "SELECT Fname , Lname FROM Student WHERE Major  =  600;": "( fname ) , ( lname ) that belongs to ( student ) , that have ( ( major ) equal to ( 600 ) )",
    "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );": "( the number of ( all items ) ) that belongs to ( enzyme ) , that have ( ( id ) not in ( ( enzyme id ) that belongs to ( medicine enzyme interaction ) ) )",
    "SELECT count(DISTINCT Industry) FROM Companies": "( the number of ( distinct ( industry ) ) ) that belongs to ( companies )",
    "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code ORDER BY COUNT(*) DESC LIMIT 1": "( product type code ) that belongs to ( products ) , grouped by ( product type code ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_events )": "( the number of ( all items ) ) that belongs to ( customers ) , that have ( ( customer_id ) not in ( ( customer id ) that belongs to ( customer events ) ) )",
    "SELECT T2.name ,  T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id": "( name of staff ) , ( name of enzyme ) that belongs to ( ( train station ) , and ( ( station ) satisfied that ( ( station id of addresses ) equal to ( station id of staff ) ) ) , and ( ( train ) satisfied that ( ( train id of enzyme ) equal to ( train id of addresses ) ) ) )",
    "SELECT fname FROM authors ORDER BY fname": "( fname ) that belongs to ( authors ) , ordered by ( ( fname ) )",
    "SELECT id ,  country ,  city ,  name FROM airport ORDER BY name": "( id ) , ( country ) , ( city ) , ( name ) that belongs to ( airport ) , ordered by ( ( name ) )",
    "SELECT min(age) ,  avg(age) ,  max(age) FROM Student": "( the minimum of ( age ) ) , ( the average of ( age ) ) , ( the maximum of ( age ) ) that belongs to ( student )",
    "SELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company": "( the minimum of ( market value ) ) , ( the maximum of ( market value ) ) , ( the average of ( market value ) ) that belongs to ( company )",
    "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;": "( shipping agent name of ref shipping agents ) , ( the number of ( document id of documents ) ) that belongs to ( ref shipping agents , and ( documents satisfied that ( ( shipping agent code of documents ) equal to ( shipping agent code of ref shipping agents ) ) ) ) , grouped by ( shipping agent code of ref shipping agents ) , ordered by ( ( the number of ( document id of documents ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM participants WHERE participant_type_code  =  'Organizer'": "( the number of ( all items ) ) that belongs to ( participants ) , that have ( ( participant type code ) equal to ( 'organizer' ) )",
    "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700": "( catalog entry name ) , ( capacity ) that belongs to ( catalog contents ) , that have ( ( price in dollars ) greater than ( 700 ) )",
    "SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T2.Name ASC": "( name of staff ) , ( location of enzyme ) that belongs to ( ( member attendance ) , and ( ( member ) satisfied that ( ( member id of addresses ) equal to ( member id of staff ) ) ) , and ( ( performance ) satisfied that ( ( performance id of addresses ) equal to ( performance id of enzyme ) ) ) ) , ordered by ( ( name of staff ) in ascending order )",
    "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010": "( course id ) that belongs to ( section ) , that have ( ( ( semester ) equal to ( 'fall' ) ) and ( ( year ) equal to ( 2009 ) ) ) and ( course id ) that belongs to ( section ) , that have ( ( ( semester ) equal to ( 'spring' ) ) and ( ( year ) equal to ( 2010 ) ) )",
    "SELECT DISTINCT country FROM artist": "( distinct ( country ) ) that belongs to ( artist )",
    "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'": "( the number of ( all items ) ) that belongs to ( classroom ) , that have ( ( building ) equal to ( 'lamberton' ) )",
    "SELECT director FROM movie WHERE YEAR  =  2000 INTERSECT SELECT director FROM movie WHERE YEAR  =  1999": "( director ) that belongs to ( movie ) , that have ( ( year ) equal to ( 2000 ) ), and intersect with ( ( director ) that belongs to ( movie ) , that have ( ( year ) equal to ( 1999 ) ))",
    "SELECT * FROM instructor ORDER BY salary": "all items that belongs to ( instructor ) , ordered by ( ( salary ) )",
    "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  \"Spanish\"": "( date of enrolment of staff ) that belongs to ( ( courses ) , and ( ( student course enrolment ) satisfied that ( ( course id of addresses ) equal to ( course id of staff ) ) ) ) , that have ( ( course name of addresses ) equal to ( spanish ) )",
    "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Bob'": "( name of addresses ) that belongs to ( ( person ) , and ( ( personfriend ) satisfied that ( ( name of addresses ) equal to ( name of staff ) ) ) ) , that have ( ( friend of staff ) equal to ( 'bob' ) )",
    "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3": "( distinct ( range ) ) that belongs to ( mountain ) , ordered by ( ( prominence ) in descending order ) , limited to the top ( 3 )",
    "SELECT CName FROM COURSE WHERE Days  =  \"MTW\"": "( cname ) that belongs to ( course ) , that have ( ( days ) equal to ( mtw ) )",
    "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'": "( name ) , ( operating system ) that belongs to ( web client accelerator ) , that have ( ( connection ) not equal to ( 'broadband' ) )",
    "SELECT city ,  count(*) FROM branch WHERE open_year  <  2010 GROUP BY city": "( city ) , ( the number of ( all items ) ) that belongs to ( branch ) , that have ( ( open year ) less than ( 2010 ) ) , grouped by ( city )",
    "SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   \"Cancelled\" ORDER BY order_date": "( order id ) , ( customer id ) that belongs to ( customer orders ) , that have ( ( order status code ) equal to ( cancelled ) ) , ordered by ( ( order date ) )",
    "SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Injured DESC": "( height of addresses ) that belongs to ( ( people ) , and ( ( perpetrator ) satisfied that ( ( people id of addresses ) equal to ( people id of staff ) ) ) ) , ordered by ( ( injured of staff ) in descending order )",
    "SELECT Nationality FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1": "( nationality ) that belongs to ( pilot ) , grouped by ( nationality ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT date_left_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";": "( date left staff ) that belongs to ( staff ) , that have ( ( ( first name ) equal to ( janessa ) ) and ( ( last name ) equal to ( sawayn ) ) )",
    "SELECT County_name FROM county ORDER BY Population ASC LIMIT 3": "( county name ) that belongs to ( county ) , ordered by ( ( population ) in ascending order ) , limited to the top ( 3 )",
    "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff": "( last name ) that belongs to ( customers ), and intersect with ( ( last name ) that belongs to ( staff ))",
    "SELECT count(*) FROM people WHERE is_male  =  'F' AND age  >  30": "( the number of ( all items ) ) that belongs to ( people ) , that have ( ( ( is male ) equal to ( 'f' ) ) and ( ( age ) greater than ( 30 ) ) )",
    "SELECT count(*) FROM Apartment_Bookings": "( the number of ( all items ) ) that belongs to ( apartment bookings )",
    "SELECT Customer_Phone ,  Customer_Email_Address FROM CUSTOMERS WHERE Customer_Name  =  \"Harold\"": "( customer phone ) , ( customer email address ) that belongs to ( customers ) , that have ( ( customer name ) equal to ( harold ) )",
    "SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex": "( name of club ) , ( sex of club ) , ( the minimum of ( oppose rate ) ) that belongs to ( ( people ) , and ( ( candidate ) satisfied that ( ( people id of club ) equal to ( people id of member of club ) ) ) ) , grouped by ( sex of club )",
    "SELECT name ,  age ,  country FROM artist ORDER BY Year_Join": "( name ) , ( age ) , ( country ) that belongs to ( artist ) , ordered by ( ( year join ) )",
    "SELECT count(DISTINCT SOURCE) FROM injury_accident": "( the number of ( distinct ( source ) ) ) that belongs to ( injury accident )",
    "SELECT DISTINCT city_code FROM Student": "( distinct ( city code ) ) that belongs to ( student )",
    "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games": "( stuid ) that belongs to ( sportsinfo ), and intersect with ( ( stuid ) that belongs to ( plays games ))",
    "SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  <  6 INTERSECT SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  >  10": "( name of student ) that belongs to ( ( furniture ) , and ( ( furniture manufacte ) satisfied that ( ( furniture id of club ) equal to ( furniture id of member of club ) ) ) , and ( ( manufacturer ) satisfied that ( ( manufacturer id of member of club ) equal to ( manufacturer id of student ) ) ) ) , that have ( ( num of component of club ) less than ( 6 ) ), and intersect with ( ( name of student ) that belongs to ( ( furniture ) , and ( ( furniture manufacte ) satisfied that ( ( furniture id of club ) equal to ( furniture id of member of club ) ) ) , and ( ( manufacturer ) satisfied that ( ( manufacturer id of member of club ) equal to ( manufacturer id of student ) ) ) ) , that have ( ( num of component of club ) greater than ( 10 ) ))",
    "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id": "( student id of addresses ) , ( the number of ( all items ) ) that belongs to ( ( students ) , and ( ( student course registrations ) satisfied that ( ( student id of addresses ) equal to ( student id of staff ) ) ) ) , grouped by ( student id of addresses )",
    "SELECT country FROM competition WHERE competition_type  =  'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type  =  'Tournament'": "( country ) that belongs to ( competition ) , that have ( ( competition type ) equal to ( 'friendly' ) ), and intersect with ( ( country ) that belongs to ( competition ) , that have ( ( competition type ) equal to ( 'tournament' ) ))",
    "SELECT count(DISTINCT customer_id) FROM Accounts": "( the number of ( distinct ( customer id ) ) ) that belongs to ( accounts )",
    "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'": "( school ) , ( location ) that belongs to ( university ) , that have ( ( affiliation ) equal to ( 'public' ) )",
    "SELECT name FROM people ORDER BY date_of_birth": "( name ) that belongs to ( people ) , ordered by ( ( date of birth ) )",
    "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3": "( name ) that belongs to ( employee ) , ordered by ( ( salary ) in ascending order ) , limited to the top ( 3 )",
    "SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex": "( rank ) , ( sex ) , ( the number of ( all items ) ) that belongs to ( faculty ) , grouped by ( rank ) , ( sex )",
    "SELECT Num_of_Component ,  name FROM furniture WHERE Num_of_Component  >  10": "( num of component ) , ( name ) that belongs to ( furniture ) , that have ( ( num of component ) greater than ( 10 ) )",
    "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Tokohu University\"": "( the number of ( distinct ( title of club ) ) ) that belongs to ( ( papers ) , and ( ( authorship ) satisfied that ( ( paperid of club ) equal to ( paperid of member of club ) ) ) , and ( ( inst ) satisfied that ( ( instid of member of club ) equal to ( instid of student ) ) ) ) , that have ( ( name of student ) equal to ( tokohu university ) )",
    "SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1": "( payment method ) that belongs to ( customers ) , grouped by ( payment method ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT decor , count(*) FROM Rooms WHERE basePrice  >  120 GROUP BY decor;": "( decor ) , ( the number of ( all items ) ) that belongs to ( rooms ) , that have ( ( baseprice ) greater than ( 120 ) ) , grouped by ( decor )",
    "SELECT Name FROM People ORDER BY Weight ASC": "( name ) that belongs to ( people ) , ordered by ( ( weight ) in ascending order )",
    "SELECT home_city FROM driver EXCEPT SELECT home_city FROM driver WHERE age  >  40": "( home city ) that belongs to ( driver ), and except that ( ( home city ) that belongs to ( driver ) , that have ( ( age ) greater than ( 40 ) ))",
    "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  =  10": "( title of addresses ) that belongs to ( ( item ) , and ( ( review ) satisfied that ( ( i id of addresses ) equal to ( i id of staff ) ) ) ) , that have ( ( rating of staff ) equal to ( 10 ) )",
    "SELECT name FROM Person WHERE job  =  'student' AND age  =  (SELECT max(age) FROM person WHERE job  =  'student' )": "( name ) that belongs to ( person ) , that have ( ( ( job ) equal to ( 'student' ) ) and ( ( age ) equal to ( the maximum of ( age ) ) that belongs to ( person ) , that have ( ( job ) equal to ( 'student' ) ) ) )",
    "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID WHERE T2.Rank_in_Round  >  3": "( name of addresses ) that belongs to ( ( member ) , and ( ( round ) satisfied that ( ( member id of addresses ) equal to ( member id of staff ) ) ) ) , that have ( ( rank in round of staff ) greater than ( 3 ) )",
    "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1": "( city of staff ) , ( the number of ( all items ) ) , ( city id of addresses ) that belongs to ( ( address ) , and ( ( city ) satisfied that ( ( city id of addresses ) equal to ( city id of staff ) ) ) ) , grouped by ( city id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1": "( country of club ) that belongs to ( ( inst ) , and ( ( authorship ) satisfied that ( ( instid of club ) equal to ( instid of member of club ) ) ) , and ( ( papers ) satisfied that ( ( paperid of member of club ) equal to ( paperid of student ) ) ) ) , grouped by ( country of club ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  1": "( location of staff ) that belongs to ( ( player ) , and ( ( school ) satisfied that ( ( school id of addresses ) equal to ( school id of staff ) ) ) ) , grouped by ( school id of addresses ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT Company ,  Investor FROM entrepreneur": "( company ) , ( investor ) that belongs to ( entrepreneur )",
    "SELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5": "( stu gpa ) , ( stu phone ) , ( stu fname ) that belongs to ( student ) , ordered by ( ( stu gpa ) in descending order ) , limited to the top ( 5 )",
    "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\"": "( customer name of club ) , ( order date of member of club ) that belongs to ( ( customers ) , and ( ( customer orders ) satisfied that ( ( customer id of club ) equal to ( customer id of member of club ) ) ) ) , that have ( ( order status ) equal to ( delivered ) )",
    "SELECT COUNT(DISTINCT transaction_type_code) FROM TRANSACTIONS": "( the number of ( distinct ( transaction type code ) ) ) that belongs to ( transactions )",
    "SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director": "( the number of ( all items ) ) , ( director of addresses ) that belongs to ( ( movie ) , and ( ( rating ) satisfied that ( ( mid of addresses ) equal to ( mid of staff ) ) ) ) , grouped by ( director of addresses )",
    "SELECT date_became_customer FROM Customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\";": "( date became customer ) that belongs to ( customers ) , that have ( ( ( first name ) equal to ( carole ) ) and ( ( last name ) equal to ( bernhard ) ) )",
    "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2": "( project id ) that belongs to ( documents ) , grouped by ( project id ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT Total FROM body_builder ORDER BY Total ASC": "( total ) that belongs to ( body builder ) , ordered by ( ( total ) in ascending order )",
    "SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1": "all items that belongs to ( airport ) , ordered by ( ( international passengers ) in descending order ) , limited to the top ( 1 )",
    "SELECT Party ,  COUNT(*) FROM representative GROUP BY Party": "( party ) , ( the number of ( all items ) ) that belongs to ( representative ) , grouped by ( party )",
    "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500": "all items that belongs to ( employees ) , that have ( ( salary ) between ( the minimum of ( salary ) ) that belongs to ( employees ) and ( 2500 ) )",
    "SELECT count(*) FROM driver": "( the number of ( all items ) ) that belongs to ( driver )",
    "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000": "( cust name of addresses ) that belongs to ( ( customer ) , and ( ( loan ) satisfied that ( ( cust id of addresses ) equal to ( cust id of staff ) ) ) ) , that have ( ( amount ) greater than ( 3000 ) )",
    "SELECT * FROM people": "all items that belongs to ( people )",
    "SELECT name ,  dates_active ,  number_deaths FROM storm WHERE number_deaths  >=  1": "( name ) , ( dates active ) , ( number deaths ) that belongs to ( storm ) , that have ( ( number deaths ) greater than or equal to ( 1 ) )",
    "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city'": "( name of staff ) that belongs to ( ( person ) , and ( ( personfriend ) satisfied that ( ( name of addresses ) equal to ( friend of staff ) ) ) ) , that have ( ( city of addresses ) equal to ( 'new york city' ) )",
    "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)": "( name ) that belongs to ( storm ) , that have ( ( storm_id ) not in ( ( storm id ) that belongs to ( affected region ) ) )",
    "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)": "( customer details of member of club ) that belongs to ( ( policies ) , and ( ( customers ) satisfied that ( ( customer id of club ) equal to ( customer id of member of club ) ) ) ) , that have ( ( start date of club ) equal to ( the maximum of ( start date ) ) that belongs to ( policies ) )",
    "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code": "( the number of ( distinct ( dept name ) ) ) , ( school code ) that belongs to ( department ) , grouped by ( school code )",
    "SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name": "( country of addresses ) , ( name of addresses ) , ( the number of ( all items ) ) that belongs to ( ( airlines ) , and ( ( routes ) satisfied that ( ( alid of addresses ) equal to ( alid of staff ) ) ) ) , grouped by ( country of addresses ) , ( name of addresses )",
    "SELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job": "( the average of ( age ) ) , ( job ) that belongs to ( person ) , that have ( ( gender ) equal to ( 'male' ) ) , grouped by ( job )",
    "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\"": "( name of staff ) that belongs to ( ( genres ) , and ( ( tracks ) satisfied that ( ( id of addresses ) equal to ( genre id of staff ) ) ) ) , that have ( ( ( name of addresses ) equal to ( rock ) ) or ( ( name of addresses ) equal to ( jazz ) ) )",
    "SELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  'LINDA'": "( address of staff ) , ( email of addresses ) that belongs to ( ( customer ) , and ( ( address ) satisfied that ( ( address id of staff ) equal to ( address id of addresses ) ) ) ) , that have ( ( first name of addresses ) equal to ( 'linda' ) )",
    "SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID": "( name of staff ) , ( location of enzyme ) that belongs to ( ( member attendance ) , and ( ( member ) satisfied that ( ( member id of addresses ) equal to ( member id of staff ) ) ) , and ( ( performance ) satisfied that ( ( performance id of addresses ) equal to ( performance id of enzyme ) ) ) )",
    "SELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle": "( election cycle ) , ( the number of ( all items ) ) that belongs to ( voting record ) , grouped by ( election cycle )",
    "SELECT count(DISTINCT gender) FROM dorm": "( the number of ( distinct ( gender ) ) ) that belongs to ( dorm )",
    "SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'": "( cname ) that belongs to ( tryout ) , that have ( ( ( decision ) equal to ( 'yes' ) ) and ( ( ppos ) equal to ( 'goalie' ) ) )",
    "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3": "( product id ) that belongs to ( product suppliers ) , ordered by ( ( total amount purchased ) in descending order ) , limited to the top ( 3 )",
    "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1": "( cust name of addresses ) that belongs to ( ( customer ) , and ( ( loan ) satisfied that ( ( cust id of addresses ) equal to ( cust id of staff ) ) ) ) , grouped by ( cust name of addresses ) , ordered by ( ( the sum of ( amount of staff ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"": "( catalog entry name ) that belongs to ( catalog contents ) , that have ( ( product_stock_number ) like ( 2% ) )",
    "SELECT Advisor ,  count(*) FROM Student GROUP BY Advisor ORDER BY count(Advisor) DESC LIMIT 1;": "( advisor ) , ( the number of ( all items ) ) that belongs to ( student ) , grouped by ( advisor ) , ordered by ( ( the number of ( advisor ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT name FROM Person WHERE age  <  30": "( name ) that belongs to ( person ) , that have ( ( age ) less than ( 30 ) )",
    "SELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC": "( the number of ( all items ) ) , ( country ) that belongs to ( airports ) , grouped by ( country ) , ordered by ( ( the number of ( all items ) ) in descending order )",
    "SELECT product_id FROM products_booked GROUP BY product_id HAVING count(*)  =  3": "( product id ) that belongs to ( products booked ) , grouped by ( product id ) , that have ( ( the number of ( all items ) ) equal to ( 3 ) )",
    "SELECT max(Age) ,  min(Age) FROM STUDENT WHERE Major  =  600": "( the maximum of ( age ) ) , ( the minimum of ( age ) ) that belongs to ( student ) , that have ( ( major ) equal to ( 600 ) )",
    "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn": "( name ) that belongs to ( ( appointment ) , and ( ( patient ) satisfied that ( ( patient of addresses ) equal to ( ssn of staff ) ) ) )",
    "SELECT TIME ,  train_number FROM train WHERE destination  =  'Chennai' ORDER BY TIME": "( time ) , ( train number ) that belongs to ( train ) , that have ( ( destination ) equal to ( 'chennai' ) ) , ordered by ( ( time ) )",
    "SELECT cust_name FROM customer ORDER BY acc_bal": "( cust name ) that belongs to ( customer ) , ordered by ( ( acc bal ) )",
    "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1": "( gdp ) that belongs to ( city ) , ordered by ( ( regional population ) in descending order ) , limited to the top ( 1 )",
    "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )": "( project details ) that belongs to ( projects ) , that have ( ( project_id ) not in ( ( project id ) that belongs to ( project staff ) , that have ( ( role code ) equal to ( 'researcher' ) ) ) )",
    "SELECT Birth_Place ,  COUNT(*) FROM people GROUP BY Birth_Place": "( birth place ) , ( the number of ( all items ) ) that belongs to ( people ) , grouped by ( birth place )",
    "SELECT name ,  open_date FROM church ORDER BY open_date DESC LIMIT 3": "( name ) , ( open date ) that belongs to ( church ) , ordered by ( ( open date ) in descending order ) , limited to the top ( 3 )",
    "SELECT date_stored FROM All_documents WHERE Document_name  =  \"Marry CV\"": "( date stored ) that belongs to ( all documents ) , that have ( ( document name ) equal to ( marry cv ) )",
    "SELECT Leader_Name ,  College_Location FROM college": "( leader name ) , ( college location ) that belongs to ( college )",
    "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"": "( name ) that belongs to ( employee ), and except that ( ( name of addresses ) that belongs to ( ( employee ) , and ( ( certificate ) satisfied that ( ( eid of addresses ) equal to ( eid of staff ) ) ) , and ( ( aircraft ) satisfied that ( ( aid of enzyme ) equal to ( aid of staff ) ) ) ) , that have ( ( name of enzyme ) equal to ( boeing 737-800 ) ))",
    "SELECT count(DISTINCT client) FROM web_client_accelerator": "( the number of ( distinct ( client ) ) ) that belongs to ( web client accelerator )",
    "SELECT date_of_latest_logon FROM Students WHERE family_name  =  \"Jaskolski\" OR family_name  =  \"Langosh\"": "( date of latest logon ) that belongs to ( students ) , that have ( ( ( family name ) equal to ( jaskolski ) ) or ( ( family name ) equal to ( langosh ) ) )",
    "SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1": "( the sum of ( access count ) ) that belongs to ( documents ) , grouped by ( document type code ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT avg(t1.age) ,  avg(Years_working) ,  t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type": "( the average of ( age of club ) ) , ( the average of ( years working ) ) , ( work type of member of club ) that belongs to ( ( journalist ) , and ( ( news report ) satisfied that ( ( journalist id of club ) equal to ( journalist id of member of club ) ) ) ) , grouped by ( work type of member of club )",
    "SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id  =  T2.people_id WHERE T1.year  =  2016 AND T2.is_male  =  'F' AND T2.country  =  'Canada'": "( name of staff ) that belongs to ( ( wedding ) , and ( ( people ) satisfied that ( ( female id of addresses ) equal to ( people id of staff ) ) ) ) , that have ( ( ( year of addresses ) equal to ( 2016 ) ) and ( ( is male of staff ) equal to ( 'f' ) ) and ( ( country of staff ) equal to ( 'canada' ) ) )",
    "SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != 'Brown'": "( the sum of ( balance of staff ) ) that belongs to ( ( accounts ) , and ( ( savings ) satisfied that ( ( custid of addresses ) equal to ( custid of staff ) ) ) ) , that have ( ( name of addresses ) not equal to ( 'brown' ) )",
    "SELECT count(*) FROM manufacturers WHERE founder  =  'Andy'": "( the number of ( all items ) ) that belongs to ( manufacturers ) , that have ( ( founder ) equal to ( 'andy' ) )",
    "SELECT name FROM procedures ORDER BY cost LIMIT 3": "( name ) that belongs to ( procedures ) , ordered by ( ( cost ) ) , limited to the top ( 3 )",
    "SELECT Join_Year FROM pilot ORDER BY Rank ASC LIMIT 1": "( join year ) that belongs to ( pilot ) , ordered by ( ( rank ) in ascending order ) , limited to the top ( 1 )",
    "SELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1": "( skill id of addresses ) , ( skill description of addresses ) that belongs to ( ( skills ) , and ( ( skills required to fix ) satisfied that ( ( skill id of addresses ) equal to ( skill id of staff ) ) ) ) , grouped by ( skill id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON  T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  >  100 AND T3.transaction_type_code  =  \"PUR\"": "( lot details of addresses ) that belongs to ( ( lots ) , and ( ( transactions lots ) satisfied that ( ( lot id of addresses ) equal to ( transaction id of staff ) ) ) , and ( ( transactions ) satisfied that ( ( transaction id of staff ) equal to ( transaction id of enzyme ) ) ) ) , that have ( ( ( share count of enzyme ) greater than ( 100 ) ) and ( ( transaction type code of enzyme ) equal to ( pur ) ) )",
    "SELECT DISTINCT classroom FROM list WHERE grade  =  4": "( distinct ( classroom ) ) that belongs to ( list ) , that have ( ( grade ) equal to ( 4 ) )",
    "SELECT project_id ,  project_details FROM Projects": "( project id ) , ( project details ) that belongs to ( projects )",
    "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Monadic%\"": "( lname of club ) that belongs to ( ( authors ) , and ( ( authorship ) satisfied that ( ( authid of club ) equal to ( authid of member of club ) ) ) , and ( ( papers ) satisfied that ( ( paperid of member of club ) equal to ( paperid of student ) ) ) ) , that have ( ( t3.title ) like ( %monadic% ) )",
    "SELECT T2.Fname ,  T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1": "( fname of staff ) , ( lname of staff ) that belongs to ( ( sportsinfo ) , and ( ( student ) satisfied that ( ( stuid of addresses ) equal to ( stuid of staff ) ) ) ) , grouped by ( stuid of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation": "( the average of ( price ) ) , ( the average of ( score ) ) , ( appelation ) that belongs to ( wine ) , grouped by ( appelation )",
    "SELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)": "( the number of ( all items ) ) that belongs to ( scientists ) , that have ( ( ssn ) not in ( ( scientist ) that belongs to ( assignedto ) ) )",
    "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")": "( fname ) , ( sex ) that belongs to ( student ) , that have ( ( stuid ) in ( ( stuid ) that belongs to ( has allergy ) , that have ( ( allergy ) equal to ( milk ) ), and except that ( ( stuid ) that belongs to ( has allergy ) , that have ( ( allergy ) equal to ( cat ) )) ) )",
    "SELECT STATEMENT_ID ,  count(*) FROM Accounts GROUP BY STATEMENT_ID": "( statement id ) , ( the number of ( all items ) ) that belongs to ( accounts ) , grouped by ( statement id )",
    "SELECT count(*) FROM follows GROUP BY f1": "( the number of ( all items ) ) that belongs to ( follows ) , grouped by ( f1 )",
    "SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)": "( name ) , ( location ) , ( year opened ) that belongs to ( track ) , that have ( ( seating ) greater than ( the average of ( seating ) ) that belongs to ( track ) )",
    "SELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id  =  (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)": "( the average of ( total amount purchased ) ) , ( the average of ( total value purchased ) ) that belongs to ( product suppliers ) , that have ( ( supplier id ) equal to ( supplier id ) that belongs to ( product suppliers ) , grouped by ( supplier id ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 ) )",
    "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID": "( name of enzyme ) , ( district of staff ) that belongs to ( ( phone market ) , and ( ( market ) satisfied that ( ( market id of addresses ) equal to ( market id of staff ) ) ) , and ( ( phone ) satisfied that ( ( phone id of addresses ) equal to ( phone id of enzyme ) ) ) )",
    "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.major  =  \"600\"": "( fname of student ) , ( lname of student ) that belongs to ( ( club ) , and ( ( member of club ) satisfied that ( ( clubid of club ) equal to ( clubid of member of club ) ) ) , and ( ( student ) satisfied that ( ( stuid of member of club ) equal to ( stuid of student ) ) ) ) , that have ( ( ( clubname of club ) equal to ( bootup baltimore ) ) and ( ( major of student ) equal to ( 600 ) ) )",
    "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"": "( census ranking ) that belongs to ( city ) , that have ( ( status ) not equal to ( village ) )",
    "SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1": "( name of club ) that belongs to ( ( stadium ) , and ( ( event ) satisfied that ( ( id of club ) equal to ( stadium id of member of club ) ) ) ) , grouped by ( stadium id of member of club ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'": "( headquarters ) that belongs to ( company ), and except that ( ( headquarters ) that belongs to ( company ) , that have ( ( main industry ) equal to ( 'banking' ) ))",
    "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" OR T1.name  =  \"Susan\"": "( f1 of staff ) that belongs to ( ( user profiles ) , and ( ( follows ) satisfied that ( ( uid of addresses ) equal to ( f2 of staff ) ) ) ) , that have ( ( ( name of addresses ) equal to ( mary ) ) or ( ( name of addresses ) equal to ( susan ) ) )",
    "SELECT count(DISTINCT state) FROM college WHERE enr  <  (SELECT avg(enr) FROM college)": "( the number of ( distinct ( state ) ) ) that belongs to ( college ) , that have ( ( enr ) less than ( the average of ( enr ) ) that belongs to ( college ) )",
    "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards": "( card id ) , ( customer id ) , ( card type code ) , ( card number ) that belongs to ( customers cards )",
    "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.hours  >  300 GROUP BY T1.name": "( the number of ( all items ) ) , ( name of addresses ) that belongs to ( ( projects ) , and ( ( assignedto ) satisfied that ( ( code of addresses ) equal to ( project of staff ) ) ) ) , that have ( ( hours of addresses ) greater than ( 300 ) ) , grouped by ( name of addresses )",
    "SELECT Name FROM technician ORDER BY Age ASC": "( name ) that belongs to ( technician ) , ordered by ( ( age ) in ascending order )",
    "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend": "( name ) that belongs to ( person ), and except that ( ( name ) that belongs to ( personfriend ))",
    "SELECT name ,  followers FROM user_profiles ORDER BY followers DESC": "( name ) , ( followers ) that belongs to ( user profiles ) , ordered by ( ( followers ) in descending order )",
    "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id": "( customer details of addresses ) , ( customer id of addresses ) that belongs to ( ( customers ) , and ( ( customer policies ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , grouped by ( customer id of addresses ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) ), and except that ( ( customer details of addresses ) , ( customer id of addresses ) that belongs to ( ( customers ) , and ( ( customer policies ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) , and ( ( claims ) satisfied that ( ( policy id of staff ) equal to ( policy id of enzyme ) ) ) ))",
    "SELECT city FROM city ORDER BY regional_population DESC LIMIT 3": "( city ) that belongs to ( city ) , ordered by ( ( regional population ) in descending order ) , limited to the top ( 3 )",
    "SELECT count(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year  <  1850 );": "( the number of ( all items ) ) that belongs to ( architect ) , that have ( ( id ) not in ( ( architect id ) that belongs to ( mill ) , that have ( ( built year ) less than ( 1850 ) ) ) )",
    "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1": "( region name of staff ) that belongs to ( ( affected region ) , and ( ( region ) satisfied that ( ( region id of addresses ) equal to ( region id of staff ) ) ) , and ( ( storm ) satisfied that ( ( storm id of addresses ) equal to ( storm id of enzyme ) ) ) ) , ordered by ( ( number deaths of enzyme ) in descending order ) , limited to the top ( 1 )",
    "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1": "( issue date ) that belongs to ( volume ) , ordered by ( ( weeks on top ) in ascending order ) , limited to the top ( 1 )",
    "SELECT Major ,  count(*) FROM Student GROUP BY Major HAVING count(Major) BETWEEN 2 AND 30;": "( major ) , ( the number of ( all items ) ) that belongs to ( student ) , grouped by ( major ) , that have ( ( the number of ( major ) ) between ( 2 ) and ( 30 ) )",
    "SELECT avg(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID WHERE T2.work_type  =  'Photo'": "( the average of ( sales of addresses ) ) that belongs to ( ( journal ) , and ( ( journal committee ) satisfied that ( ( journal id of addresses ) equal to ( journal id of staff ) ) ) ) , that have ( ( work type of staff ) equal to ( 'photo' ) )",
    "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  8 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  <  5": "( title of addresses ) that belongs to ( ( item ) , and ( ( review ) satisfied that ( ( i id of addresses ) equal to ( i id of staff ) ) ) ) , that have ( ( rating of staff ) greater than ( 8 ) ), and intersect with ( ( title of addresses ) that belongs to ( ( item ) , and ( ( review ) satisfied that ( ( i id of addresses ) equal to ( i id of staff ) ) ) ) , that have ( ( rating of staff ) less than ( 5 ) ))",
    "SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn' INTERSECT SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Triton'": "( donator name of addresses ) that belongs to ( ( endowment ) , and ( ( school ) satisfied that ( ( school id of addresses ) equal to ( school id of staff ) ) ) ) , that have ( ( school name of staff ) equal to ( 'glenn' ) ), and intersect with ( ( donator name of addresses ) that belongs to ( ( endowment ) , and ( ( school ) satisfied that ( ( school id of addresses ) equal to ( school id of staff ) ) ) ) , that have ( ( school name of staff ) equal to ( 'triton' ) ))",
    "SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T1.Aircraft  =  \"Robinson R-22\"": "( the average of ( total passengers of enzyme ) ) that belongs to ( ( aircraft ) , and ( ( airport aircraft ) satisfied that ( ( aircraft id of addresses ) equal to ( aircraft id of staff ) ) ) , and ( ( airport ) satisfied that ( ( airport id of staff ) equal to ( airport id of enzyme ) ) ) ) , that have ( ( aircraft of addresses ) equal to ( robinson r-22 ) )",
    "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  \"PIT\"": "( distinct ( fname of addresses ) ) that belongs to ( ( student ) , and ( ( voting record ) satisfied that ( ( stuid of addresses ) equal to ( vice president vote of staff ) ) ) ), and except that ( ( distinct ( fname ) ) that belongs to ( student ) , that have ( ( city code ) equal to ( pit ) ))",
    "SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  \"ACCT-211\"": "( the number of ( distinct ( prof num ) ) ) that belongs to ( class ) , that have ( ( crs code ) equal to ( acct-211 ) )",
    "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'": "( bname of addresses ) , ( city of addresses ) that belongs to ( ( bank ) , and ( ( loan ) satisfied that ( ( branch id of addresses ) equal to ( branch id of staff ) ) ) ) , that have ( ( loan type of staff ) equal to ( 'business' ) )",
    "SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1": "( color of addresses ) that belongs to ( ( grapes ) , and ( ( wine ) satisfied that ( ( grape of addresses ) equal to ( grape of staff ) ) ) ) , grouped by ( grape of staff ) , ordered by ( ( the average of ( price ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT Category FROM music_festival WHERE RESULT  =  \"Awarded\"": "( category ) that belongs to ( music festival ) , that have ( ( result ) equal to ( awarded ) )",
    "SELECT address FROM member WHERE age  <  30 INTERSECT SELECT address FROM member WHERE age  >  40": "( address ) that belongs to ( member ) , that have ( ( age ) less than ( 30 ) ), and intersect with ( ( address ) that belongs to ( member ) , that have ( ( age ) greater than ( 40 ) ))",
    "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM player_coach)": "( player name ) that belongs to ( player ) , that have ( ( player_id ) not in ( ( player id ) that belongs to ( player coach ) ) )",
    "SELECT Birth_Date FROM People ORDER BY Height ASC": "( birth date ) that belongs to ( people ) , ordered by ( ( height ) in ascending order )",
    "SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'": "( title ) that belongs to ( course ) , that have ( ( dept name ) equal to ( 'statistics' ) ), and except that ( ( title ) that belongs to ( course ) , that have ( ( dept name ) equal to ( 'psychology' ) ))",
    "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"": "( the average of ( age of student ) ) that belongs to ( ( club ) , and ( ( member of club ) satisfied that ( ( clubid of club ) equal to ( clubid of member of club ) ) ) , and ( ( student ) satisfied that ( ( stuid of member of club ) equal to ( stuid of student ) ) ) ) , that have ( ( clubname of club ) equal to ( bootup baltimore ) )",
    "SELECT T1.name ,  count(*) FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id GROUP BY T1.building_id": "( name of addresses ) , ( the number of ( all items ) ) that belongs to ( ( building ) , and ( ( institution ) satisfied that ( ( building id of addresses ) equal to ( building id of staff ) ) ) ) , grouped by ( building id of addresses )",
    "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  >  300": "( name of staff ) that belongs to ( ( body builder ) , and ( ( people ) satisfied that ( ( people id of addresses ) equal to ( people id of staff ) ) ) ) , that have ( ( total of addresses ) greater than ( 300 ) )",
    "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed": "( destroyed by employee id ) that belongs to ( documents to be destroyed ) and ( destruction authorised by employee id ) that belongs to ( documents to be destroyed )",
    "SELECT T1.sales_details ,  T2.date_of_transaction FROM SALES AS T1 JOIN TRANSACTIONS AS T2 ON T1.sales_transaction_id  =  T2.transaction_id WHERE T2.amount_of_transaction  <  3000": "( sales details of addresses ) , ( date of transaction of staff ) that belongs to ( ( sales ) , and ( ( transactions ) satisfied that ( ( sales transaction id of addresses ) equal to ( transaction id of staff ) ) ) ) , that have ( ( amount of transaction of staff ) less than ( 3000 ) )",
    "SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank": "( rank of addresses ) , ( the number of ( all items ) ) that belongs to ( ( faculty ) , and ( ( student ) satisfied that ( ( facid of addresses ) equal to ( advisor of staff ) ) ) ) , grouped by ( rank of addresses )",
    "SELECT Date ,  Vote_Percent FROM election": "( date ) , ( vote percent ) that belongs to ( election )",
    "SELECT Nationality FROM ship GROUP BY Nationality HAVING COUNT(*)  >  2": "( nationality ) that belongs to ( ship ) , grouped by ( nationality ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )",
    "SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T2.Rank  =  1": "( player name of enzyme ) that belongs to ( ( player coach ) , and ( ( coach ) satisfied that ( ( coach id of addresses ) equal to ( coach id of staff ) ) ) , and ( ( player ) satisfied that ( ( player id of addresses ) equal to ( player id of enzyme ) ) ) ) , that have ( ( rank of staff ) equal to ( 1 ) )",
    "SELECT DISTINCT LOCATION FROM track": "( distinct ( location ) ) that belongs to ( track )",
    "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"": "( name ) that belongs to ( procedures ) , that have ( ( cost ) greater than ( 1000 ) ), and except that ( ( name of enzyme ) that belongs to ( ( physician ) , and ( ( trained in ) satisfied that ( ( employeeid of addresses ) equal to ( physician of staff ) ) ) , and ( ( procedures ) satisfied that ( ( code of enzyme ) equal to ( treatment of staff ) ) ) ) , that have ( ( name of addresses ) equal to ( john wen ) ))",
    "SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"900\"": "( customer first name of staff ) , ( customer last name of staff ) that belongs to ( ( accounts ) , and ( ( customers ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , that have ( ( account name of addresses ) equal to ( 900 ) )",
    "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005": "( the number of ( all items ) ) that belongs to ( exhibition ) , that have ( ( year ) greater than or equal to ( 2005 ) )",
    "SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id": "( the average of ( lat of addresses ) ) , ( the average of ( long of addresses ) ) that belongs to ( ( station ) , and ( ( trip ) satisfied that ( ( id of addresses ) equal to ( start station id of staff ) ) ) )",
    "SELECT T2.Name ,  T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID": "( name of staff ) , ( name of addresses ) that belongs to ( ( country ) , and ( ( roller coaster ) satisfied that ( ( country id of addresses ) equal to ( country id of staff ) ) ) )",
    "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"Blackville\"": "( headquartered city of student ) that belongs to ( ( store ) , and ( ( store district ) satisfied that ( ( store id of club ) equal to ( store id of member of club ) ) ) , and ( ( district ) satisfied that ( ( district id of member of club ) equal to ( district id of student ) ) ) ) , that have ( ( store name of club ) equal to ( blackville ) )",
    "SELECT T1.name_first ,  T1.name_last ,  T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3;": "( name first of addresses ) , ( name last of addresses ) , ( player id of addresses ) that belongs to ( ( player ) , and ( ( player award ) satisfied that ( ( player id of addresses ) equal to ( player id of staff ) ) ) ) , grouped by ( player id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 3 )",
    "SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2": "( driverid of addresses ) , ( forename of addresses ) , ( the number of ( all items ) ) that belongs to ( ( drivers ) , and ( ( results ) satisfied that ( ( driverid of addresses ) equal to ( driverid of staff ) ) ) , and ( ( races ) satisfied that ( ( raceid of staff ) equal to ( raceid of enzyme ) ) ) ) , grouped by ( driverid of addresses ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT count(*) FROM products WHERE product_category_code  =  \"Spices\" AND typical_buying_price  >  1000": "( the number of ( all items ) ) that belongs to ( products ) , that have ( ( ( product category code ) equal to ( spices ) ) and ( ( typical buying price ) greater than ( 1000 ) ) )",
    "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%'": "( document id of addresses ) that belongs to ( ( documents ) , and ( ( documents with expenses ) satisfied that ( ( document id of addresses ) equal to ( document id of staff ) ) ) ) , that have ( ( t1.document_name ) like ( '%s%' ) )",
    "SELECT T1.claim_id ,  T1.date_claim_made ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1": "( claim id of addresses ) , ( date claim made of addresses ) , ( the number of ( all items ) ) that belongs to ( ( claims ) , and ( ( settlements ) satisfied that ( ( claim id of addresses ) equal to ( claim id of staff ) ) ) ) , grouped by ( claim id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT name FROM station WHERE lat  <  37.5": "( name ) that belongs to ( station ) , that have ( ( lat ) less than ( 5 of 37 ) )",
    "SELECT sum(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  1.84": "( the sum of ( killed of staff ) ) that belongs to ( ( people ) , and ( ( perpetrator ) satisfied that ( ( people id of addresses ) equal to ( people id of staff ) ) ) ) , that have ( ( height of addresses ) greater than ( 84 of 1 ) )",
    "SELECT sum(T2.hours) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name  =  'Michael Rogers' OR T3.name  =  'Carol Smith'": "( the sum of ( hours of staff ) ) that belongs to ( ( assignedto ) , and ( ( projects ) satisfied that ( ( project of addresses ) equal to ( code of staff ) ) ) , and ( ( scientists ) satisfied that ( ( scientist of addresses ) equal to ( ssn of enzyme ) ) ) ) , that have ( ( ( name of enzyme ) equal to ( 'michael rogers' ) ) or ( ( name of enzyme ) equal to ( 'carol smith' ) ) )",
    "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1": "( name of addresses ) , ( the number of ( all items ) ) that belongs to ( ( user profiles ) , and ( ( tweets ) satisfied that ( ( uid of addresses ) equal to ( uid of staff ) ) ) ) , grouped by ( uid of staff ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1": "( duration ) that belongs to ( actor ) , ordered by ( ( age ) in descending order ) , limited to the top ( 1 )",
    "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0": "( attribute name of club ) , ( attribute id of club ) that belongs to ( ( attribute definitions ) , and ( ( catalog contents additional attributes ) satisfied that ( ( attribute id of club ) equal to ( attribute id of member of club ) ) ) ) , that have ( ( attribute value of member of club ) equal to ( 0 ) )",
    "SELECT count(*) ,  address FROM member GROUP BY address": "( the number of ( all items ) ) , ( address ) that belongs to ( member ) , grouped by ( address )",
    "SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID  =  T2.Service_ID WHERE T2.Service_Type_Code  =  'Marriage'": "( event details of addresses ) that belongs to ( ( events ) , and ( ( services ) satisfied that ( ( service id of addresses ) equal to ( service id of staff ) ) ) ) , that have ( ( service type code of staff ) equal to ( 'marriage' ) )",
    "SELECT T2.Location ,  T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft": "( location of staff ) , ( aircraft of addresses ) that belongs to ( ( aircraft ) , and ( ( match ) satisfied that ( ( aircraft id of addresses ) equal to ( winning aircraft of staff ) ) ) )",
    "SELECT problem_id FROM problems WHERE date_problem_reported > \"1978-06-26\"": "( problem id ) that belongs to ( problems ) , that have ( ( date problem reported ) greater than ( 1978-06-26 ) )",
    "SELECT T2.Name ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID": "( name of staff ) , ( location of addresses ) that belongs to ( ( railway ) , and ( ( train ) satisfied that ( ( railway id of addresses ) equal to ( railway id of staff ) ) ) )",
    "SELECT LOCATION ,  COUNT(*) FROM railway GROUP BY LOCATION": "( location ) , ( the number of ( all items ) ) that belongs to ( railway ) , grouped by ( location )",
    "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"animal\")": "( the average of ( age ) ) that belongs to ( student ) , that have ( ( stuid ) in ( ( stuid of addresses ) that belongs to ( ( has allergy ) , and ( ( allergy type ) satisfied that ( ( allergy of addresses ) equal to ( allergy of staff ) ) ) ) , that have ( ( allergytype of staff ) equal to ( food ) ), and intersect with ( ( stuid of addresses ) that belongs to ( ( has allergy ) , and ( ( allergy type ) satisfied that ( ( allergy of addresses ) equal to ( allergy of staff ) ) ) ) , that have ( ( allergytype of staff ) equal to ( animal ) )) ) )",
    "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments": "( the minimum of ( bathroom count ) ) , ( the maximum of ( bathroom count ) ) that belongs to ( apartments )",
    "SELECT avg(RAM_MiB) FROM chip_model WHERE model_name NOT IN (SELECT chip_model FROM phone)": "( the average of ( ram mib ) ) that belongs to ( chip model ) , that have ( ( model_name ) not in ( ( chip model ) that belongs to ( phone ) ) )",
    "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1": "( area of addresses ) that belongs to ( ( appellations ) , and ( ( wine ) satisfied that ( ( appelation of addresses ) equal to ( appelation of staff ) ) ) ) , grouped by ( appelation of staff ) , that have ( ( year of staff ) less than ( 2010 ) ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Position  =  \"Right Wing\"": "( name of addresses ) that belongs to ( ( club ) , and ( ( player ) satisfied that ( ( club id of addresses ) equal to ( club id of staff ) ) ) ) , that have ( ( position of staff ) equal to ( right wing ) )",
    "SELECT DISTINCT lot_details FROM LOTS": "( distinct ( lot details ) ) that belongs to ( lots )",
    "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  \"2018-03-17 07:13:53\"": "( the sum of ( order quantity of member of club ) ) that belongs to ( ( customer orders ) , and ( ( order items ) satisfied that ( ( order id of club ) equal to ( order id of member of club ) ) ) ) , that have ( ( order date of club ) less than ( 2018-03-17 07:13:53 ) )",
    "SELECT sum(enrollment) ,  min(enrollment) FROM university": "( the sum of ( enrollment ) ) , ( the minimum of ( enrollment ) ) that belongs to ( university )",
    "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID": "( name of enzyme ) , ( date of staff ) , ( venue of staff ) that belongs to ( ( debate people ) , and ( ( debate ) satisfied that ( ( debate id of addresses ) equal to ( debate id of staff ) ) ) , and ( ( people ) satisfied that ( ( affirmative of addresses ) equal to ( people id of enzyme ) ) ) )",
    "SELECT T1.name ,  T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id": "( name of addresses ) , ( name of staff ) that belongs to ( ( country ) , and ( ( league ) satisfied that ( ( id of addresses ) equal to ( country id of staff ) ) ) )",
    "SELECT count(*) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T1.age  >  20 GROUP BY T3.dorm_name": "( the number of ( all items ) ) , ( dorm name of enzyme ) that belongs to ( ( student ) , and ( ( lives in ) satisfied that ( ( stuid of addresses ) equal to ( stuid of staff ) ) ) , and ( ( dorm ) satisfied that ( ( dormid of enzyme ) equal to ( dormid of staff ) ) ) ) , that have ( ( age of addresses ) greater than ( 20 ) ) , grouped by ( dorm name of enzyme )",
    "SELECT product FROM product WHERE max_page_size  =  \"A4\" AND pages_per_minute_color  <  5": "( product ) that belongs to ( product ) , that have ( ( ( max page size ) equal to ( a4 ) ) and ( ( pages per minute color ) less than ( 5 ) ) )",
    "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\"": "( owner of club ) that belongs to ( ( program ) , and ( ( broadcast ) satisfied that ( ( program id of club ) equal to ( program id of member of club ) ) ) ) , that have ( ( time of day of member of club ) equal to ( morning ) ), and intersect with ( ( owner of club ) that belongs to ( ( program ) , and ( ( broadcast ) satisfied that ( ( program id of club ) equal to ( program id of member of club ) ) ) ) , that have ( ( time of day of member of club ) equal to ( night ) ))",
    "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Lysanne\" AND T4.staff_last_name = \"Turcotte\" )": "( problem id of addresses ) that belongs to ( ( problems ) , and ( ( staff ) satisfied that ( ( reported by staff id of addresses ) equal to ( staff id of staff ) ) ) ) , that have ( ( date problem reported ) less than ( the minimum of ( date problem reported ) ) that belongs to ( ( problems ) , and ( ( staff ) satisfied that ( ( reported by staff id of enzyme ) equal to ( staff id of trip ) ) ) ) , that have ( ( ( staff first name of trip ) equal to ( lysanne ) ) and ( ( staff last name of trip ) equal to ( turcotte ) ) ) )",
    "SELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1": "( project details of addresses ) , ( project id of addresses ) that belongs to ( ( projects ) , and ( ( project outcomes ) satisfied that ( ( project id of addresses ) equal to ( project id of staff ) ) ) ) , grouped by ( project id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\"": "( problem description of addresses ) that belongs to ( ( problems ) , and ( ( staff ) satisfied that ( ( reported by staff id of addresses ) equal to ( staff id of staff ) ) ) ) , that have ( ( staff first name of staff ) equal to ( christop ) )",
    "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"": "( address line 1 ) , ( address line 2 ) that belongs to ( customers ) , that have ( ( email address ) equal to ( vbogisich@example.org ) )",
    "SELECT count(*) FROM railway": "( the number of ( all items ) ) that belongs to ( railway )",
    "SELECT T1.role_description ,  T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code  =  T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1": "( role description of addresses ) , ( staff id of staff ) that belongs to ( ( staff roles ) , and ( ( project staff ) satisfied that ( ( role code of addresses ) equal to ( role code of staff ) ) ) , and ( ( project outcomes ) satisfied that ( ( project id of staff ) equal to ( project id of enzyme ) ) ) ) , grouped by ( staff id of staff ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT first_name FROM people ORDER BY first_name": "( first name ) that belongs to ( people ) , ordered by ( ( first name ) )",
    "SELECT name FROM channel WHERE OWNER != 'CCTV'": "( name ) that belongs to ( channel ) , that have ( ( owner ) not equal to ( 'cctv' ) )",
    "SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1": "( location ) that belongs to ( party ) , ordered by ( ( number of hosts ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'": "( cust name of addresses ) that belongs to ( ( customer ) , and ( ( loan ) satisfied that ( ( cust id of addresses ) equal to ( cust id of staff ) ) ) ) , that have ( ( loan type ) equal to ( 'mortgages' ) ), and intersect with ( ( cust name of addresses ) that belongs to ( ( customer ) , and ( ( loan ) satisfied that ( ( cust id of addresses ) equal to ( cust id of staff ) ) ) ) , that have ( ( loan type ) equal to ( 'auto' ) ))",
    "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3": "( artist name of addresses ) that belongs to ( ( artist ) , and ( ( song ) satisfied that ( ( artist name of addresses ) equal to ( artist name of staff ) ) ) ) , that have ( ( languages of staff ) equal to ( bangla ) ) , grouped by ( artist name of staff ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 3 )",
    "SELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)": "( the number of ( all items ) ) that belongs to ( events ) , that have ( ( event_id ) not in ( ( event id ) that belongs to ( participants in events ) ) )",
    "SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10": "( school name of staff ) that belongs to ( ( endowment ) , and ( ( school ) satisfied that ( ( school id of addresses ) equal to ( school id of staff ) ) ) ) , grouped by ( school id of addresses ) , that have ( ( the sum of ( amount of addresses ) ) less than or equal to ( 10 ) )",
    "SELECT minister FROM party WHERE party_name != 'Progress Party'": "( minister ) that belongs to ( party ) , that have ( ( party name ) not equal to ( 'progress party' ) )",
    "SELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id": "( name of staff ) , ( the number of ( all items ) ) that belongs to ( ( exhibition ) , and ( ( artist ) satisfied that ( ( artist id of addresses ) equal to ( artist id of staff ) ) ) ) , grouped by ( artist id of addresses )",
    "SELECT Name FROM Artwork WHERE Artwork_ID NOT IN (SELECT Artwork_ID FROM nomination)": "( name ) that belongs to ( artwork ) , that have ( ( artwork_id ) not in ( ( artwork id ) that belongs to ( nomination ) ) )",
    "SELECT director FROM Movie WHERE director != \"null\" GROUP BY director HAVING count(*)  =  1": "( director ) that belongs to ( movie ) , that have ( ( director ) is existed ) , grouped by ( director ) , that have ( ( the number of ( all items ) ) equal to ( 1 ) )",
    "SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1": "( host city ) that belongs to ( hosting city ) , ordered by ( ( year ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'": "( pname of addresses ) , ( cname of staff ) that belongs to ( ( player ) , and ( ( tryout ) satisfied that ( ( pid of addresses ) equal to ( pid of staff ) ) ) ) , that have ( ( decision of staff ) equal to ( 'yes' ) )",
    "SELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  \"BK\"": "( document name ) , ( document id ) that belongs to ( documents ) , that have ( ( document type code ) equal to ( bk ) )",
    "SELECT count(DISTINCT school_code) FROM department": "( the number of ( distinct ( school code ) ) ) that belongs to ( department )",
    "SELECT count(*) FROM editor": "( the number of ( all items ) ) that belongs to ( editor )",
    "SELECT T2.first_name ,  T2.last_name ,  T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1": "( first name of staff ) , ( last name of staff ) , ( actor id of staff ) that belongs to ( ( film actor ) , and ( ( actor ) satisfied that ( ( actor id of addresses ) equal to ( actor id of staff ) ) ) ) , grouped by ( actor id of staff ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM Project_Staff WHERE role_code  =  'leader' OR date_from  <  '1989-04-24 23:51:54'": "( the number of ( all items ) ) that belongs to ( project staff ) , that have ( ( ( role code ) equal to ( 'leader' ) ) or ( ( date from ) less than ( '1989-04-24 23:51:54' ) ) )",
    "SELECT gameid ,  sum(hours_played) FROM Plays_games GROUP BY gameid": "( gameid ) , ( the sum of ( hours played ) ) that belongs to ( plays games ) , grouped by ( gameid )",
    "SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85": "( the sum of ( money requested of addresses ) ) that belongs to ( ( entrepreneur ) , and ( ( people ) satisfied that ( ( people id of addresses ) equal to ( people id of staff ) ) ) ) , that have ( ( height of staff ) greater than ( 85 of 1 ) )",
    "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\" AND nickname LIKE \"%s%\";": "( lesson id of addresses ) that belongs to ( ( lessons ) , and ( ( staff ) satisfied that ( ( staff id of addresses ) equal to ( staff id of staff ) ) ) ) , that have ( ( ( first name of staff ) equal to ( janessa ) ) and ( ( last name of staff ) equal to ( sawayn ) ) and ( ( nickname ) like ( %s% ) ) )",
    "SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;": "( name of staff ) , ( position of staff ) that belongs to ( ( department ) , and ( ( physician ) satisfied that ( ( head of addresses ) equal to ( employeeid of staff ) ) ) ) , grouped by ( departmentid ) , ordered by ( ( the number of ( departmentid ) ) ) , limited to the top ( 1 )",
    "SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 GROUP BY T1.engineer_id ORDER BY count(*) DESC LIMIT 1": "( engineer id of addresses ) , ( first name of addresses ) , ( last name of addresses ) that belongs to ( ( maintenance engineers ) join ( ( engineer visits ) ) ) , grouped by ( engineer id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"": "( the average of ( distance ) ) , ( the average of ( price ) ) that belongs to ( flight ) , that have ( ( origin ) equal to ( los angeles ) )",
    "SELECT salary FROM salary WHERE YEAR  =  2001 ORDER BY salary DESC LIMIT 3;": "( salary ) that belongs to ( salary ) , that have ( ( year ) equal to ( 2001 ) ) , ordered by ( ( salary ) in descending order ) , limited to the top ( 3 )",
    "SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id": "( subject id of addresses ) , ( subject name of staff ) , ( the number of ( all items ) ) that belongs to ( ( courses ) , and ( ( subjects ) satisfied that ( ( subject id of addresses ) equal to ( subject id of staff ) ) ) ) , grouped by ( subject id of addresses )",
    "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;": "( billing country ) , ( the number of ( all items ) ) that belongs to ( invoices ) , grouped by ( billing country ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 5 )",
    "SELECT sex ,  count(*) FROM Faculty WHERE rank  =  \"AsstProf\" GROUP BY sex": "( sex ) , ( the number of ( all items ) ) that belongs to ( faculty ) , that have ( ( rank ) equal to ( asstprof ) ) , grouped by ( sex )",
    "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"": "( apt number of staff ) that belongs to ( ( apartment bookings ) , and ( ( apartments ) satisfied that ( ( apt id of addresses ) equal to ( apt id of staff ) ) ) ) , that have ( ( booking status code of addresses ) equal to ( confirmed ) ), and intersect with ( ( apt number of staff ) that belongs to ( ( apartment bookings ) , and ( ( apartments ) satisfied that ( ( apt id of addresses ) equal to ( apt id of staff ) ) ) ) , that have ( ( booking status code of addresses ) equal to ( provisional ) ))",
    "SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'Order' INTERSECT SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'No Response'": "( customer name of staff ) , ( payment method of staff ) that belongs to ( ( mailshot customers ) , and ( ( customers ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , that have ( ( outcome code of addresses ) equal to ( 'order' ) ), and intersect with ( ( customer name of staff ) , ( payment method of staff ) that belongs to ( ( mailshot customers ) , and ( ( customers ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , that have ( ( outcome code of addresses ) equal to ( 'no response' ) ))",
    "SELECT sum(balance) FROM checking": "( the sum of ( balance ) ) that belongs to ( checking )",
    "SELECT TYPE FROM school GROUP BY TYPE HAVING count(*)  =  2": "( type ) that belongs to ( school ) , grouped by ( type ) , that have ( ( the number of ( all items ) ) equal to ( 2 ) )",
    "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1": "( starting year ) that belongs to ( technician ) , ordered by ( ( age ) in descending order ) , limited to the top ( 1 )",
    "SELECT title FROM papers WHERE title LIKE \"%Database%\"": "( title ) that belongs to ( papers ) , that have ( ( title ) like ( %database% ) )",
    "SELECT name FROM airport WHERE name LIKE '%international%'": "( name ) that belongs to ( airport ) , that have ( ( name ) like ( '%international%' ) )",
    "SELECT text FROM tweets ORDER BY createdate": "( text ) that belongs to ( tweets ) , ordered by ( ( createdate ) )",
    "SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  2": "( team ) that belongs to ( technician ) , grouped by ( team ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  'History' AND T2.prof_high_degree  =  'Ph.D.'": "( emp fname of addresses ) , ( prof office of staff ) that belongs to ( ( employee ) , and ( ( professor ) satisfied that ( ( emp num of addresses ) equal to ( emp num of staff ) ) ) , and ( ( department ) satisfied that ( ( dept code of enzyme ) equal to ( dept code of staff ) ) ) ) , that have ( ( ( dept name of enzyme ) equal to ( 'history' ) ) and ( ( prof high degree of staff ) equal to ( 'ph.d.' ) ) )",
    "SELECT avg(pages_per_minute_color) FROM product": "( the average of ( pages per minute color ) ) that belongs to ( product )",
    "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5": "( name ) that belongs to ( user profiles ) , ordered by ( ( followers ) in descending order ) , limited to the top ( 5 )",
    "SELECT County_name ,  Population FROM county": "( county name ) , ( population ) that belongs to ( county )",
    "SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1;": "( park name of staff ) that belongs to ( ( home game ) , and ( ( park ) satisfied that ( ( park id of addresses ) equal to ( park id of staff ) ) ) ) , that have ( ( year of addresses ) equal to ( 2008 ) ) , ordered by ( ( attendance of addresses ) in descending order ) , limited to the top ( 1 )",
    "SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  \"Vincent\"": "( visit date of staff ) , ( visit details of staff ) that belongs to ( ( visitors ) , and ( ( visits ) satisfied that ( ( tourist id of addresses ) equal to ( tourist id of staff ) ) ) ) , that have ( ( tourist details of addresses ) equal to ( vincent ) )",
    "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\"": "( date of completion of addresses ) that belongs to ( ( student course enrolment ) , and ( ( student tests taken ) satisfied that ( ( registration id of addresses ) equal to ( registration id of staff ) ) ) ) , that have ( ( test result of staff ) equal to ( fail ) )",
    "SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  >  60 INTERSECT SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  <  55": "( name of addresses ) , ( area of addresses ) , ( population of addresses ) that belongs to ( ( country ) , and ( ( roller coaster ) satisfied that ( ( country id of addresses ) equal to ( country id of staff ) ) ) ) , that have ( ( speed of staff ) greater than ( 60 ) ), and intersect with ( ( name of addresses ) , ( area of addresses ) , ( population of addresses ) that belongs to ( ( country ) , and ( ( roller coaster ) satisfied that ( ( country id of addresses ) equal to ( country id of staff ) ) ) ) , that have ( ( speed of staff ) less than ( 55 ) ))",
    "SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student": "( facid ) that belongs to ( faculty ), and except that ( ( advisor ) that belongs to ( student ))",
    "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;": "( roomname of staff ) that belongs to ( ( reservations ) , and ( ( rooms ) satisfied that ( ( room of addresses ) equal to ( roomid of staff ) ) ) ) , grouped by ( room of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"": "( customer name of addresses ) , ( customer address of addresses ) that belongs to ( ( customers ) , and ( ( customer orders ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , that have ( ( order status code of staff ) equal to ( new ) ), and intersect with ( ( customer name of addresses ) , ( customer address of addresses ) that belongs to ( ( customers ) , and ( ( customer orders ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , that have ( ( order status code of staff ) equal to ( pending ) ))",
    "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND T2.year  =  1996": "( campusfee ) that belongs to ( ( campuses ) , and ( ( csu fees ) satisfied that ( ( id of addresses ) equal to ( campus of member of club ) ) ) ) , that have ( ( ( campus of club ) equal to ( san francisco state university ) ) and ( ( year of staff ) equal to ( 1996 ) ) )",
    "SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR": "( the maximum of ( price ) ) , ( the maximum of ( score ) ) , ( year ) that belongs to ( wine ) , grouped by ( year )",
    "SELECT payment_date FROM payments WHERE amount_paid  >  300 OR payment_type_code  =  'Check'": "( payment date ) that belongs to ( payments ) , that have ( ( ( amount paid ) greater than ( 300 ) ) or ( ( payment type code ) equal to ( 'check' ) ) )",
    "SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T1.Launched_Year  >  1928": "( name of staff ) that belongs to ( ( mission ) , and ( ( ship ) satisfied that ( ( ship id of addresses ) equal to ( ship id of staff ) ) ) ) , that have ( ( launched year of addresses ) greater than ( 1928 ) )",
    "SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1": "( date of staff ) that belongs to ( ( people ) , and ( ( perpetrator ) satisfied that ( ( people id of addresses ) equal to ( people id of staff ) ) ) ) , ordered by ( ( height of addresses ) in descending order ) , limited to the top ( 1 )",
    "SELECT DISTINCT main_industry FROM company": "( distinct ( main industry ) ) that belongs to ( company )",
    "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70": "( distinct ( zip code ) ) that belongs to ( weather ), and except that ( ( distinct ( zip code ) ) that belongs to ( weather ) , that have ( ( max dew point f ) greater than or equal to ( 70 ) ))",
    "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1": "( customer name of club ) that belongs to ( ( customers ) , and ( ( customer orders ) satisfied that ( ( customer id of club ) equal to ( customer id of member of club ) ) ) ) , ordered by ( ( order date of member of club ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Atsushi\" AND t1.lname  =  \"Ohori\"": "( the number of ( all items ) ) that belongs to ( ( authors ) , and ( ( authorship ) satisfied that ( ( authid of club ) equal to ( authid of member of club ) ) ) , and ( ( papers ) satisfied that ( ( paperid of member of club ) equal to ( paperid of student ) ) ) ) , that have ( ( ( fname of club ) equal to ( atsushi ) ) and ( ( lname of club ) equal to ( ohori ) ) )",
    "SELECT Market_Rate ,  name FROM furniture WHERE Furniture_ID NOT IN (SELECT Furniture_ID FROM furniture_manufacte)": "( market rate ) , ( name ) that belongs to ( furniture ) , that have ( ( furniture_id ) not in ( ( furniture id ) that belongs to ( furniture manufacte ) ) )",
    "SELECT T1.Claim_id ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id": "( claim id of addresses ) , ( the number of ( all items ) ) that belongs to ( ( claims ) , and ( ( settlements ) satisfied that ( ( claim id of addresses ) equal to ( claim id of staff ) ) ) ) , grouped by ( claim id of addresses )",
    "SELECT id ,  color ,  name FROM photos": "( id ) , ( color ) , ( name ) that belongs to ( photos )",
    "SELECT count(*) ,  T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id": "( the number of ( all items ) ) , ( product id of enzyme ) that belongs to ( ( orders ) join ( ( order items ) ) , and ( ( products ) satisfied that ( ( ( order id of addresses ) equal to ( order id of staff ) ) and ( ( product id of staff ) equal to ( product id of enzyme ) ) ) ) ) , grouped by ( product id of enzyme )",
    "SELECT company ,  main_industry FROM company WHERE headquarters != 'USA'": "( company ) , ( main industry ) that belongs to ( company ) , that have ( ( headquarters ) not equal to ( 'usa' ) )",
    "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";": "( zip postcode of addresses ) that belongs to ( ( addresses ) , and ( ( staff ) satisfied that ( ( address id of addresses ) equal to ( staff address id of staff ) ) ) ) , that have ( ( ( first name of staff ) equal to ( janessa ) ) and ( ( last name of staff ) equal to ( sawayn ) ) )",
    "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017": "( distinct ( name ) ) that belongs to ( races ) , that have ( ( year ) between ( 2014 ) and ( 2017 ) )",
    "SELECT count(DISTINCT school_id) FROM basketball_match": "( the number of ( distinct ( school id ) ) ) that belongs to ( basketball match )",
    "SELECT sum(market_rate) FROM furniture ORDER BY market_rate DESC LIMIT 2": "( the sum of ( market rate ) ) that belongs to ( furniture ) , ordered by ( ( market rate ) in descending order ) , limited to the top ( 2 )",
    "SELECT Name FROM representative WHERE Representative_ID NOT IN (SELECT Representative_ID FROM election)": "( name ) that belongs to ( representative ) , that have ( ( representative_id ) not in ( ( representative id ) that belongs to ( election ) ) )",
    "SELECT Name FROM ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission)": "( name ) that belongs to ( ship ) , that have ( ( ship_id ) not in ( ( ship id ) that belongs to ( mission ) ) )",
    "SELECT building ,  count(*) FROM Faculty GROUP BY building": "( building ) , ( the number of ( all items ) ) that belongs to ( faculty ) , grouped by ( building )",
    "SELECT count(DISTINCT complaint_type_code) FROM complaints": "( the number of ( distinct ( complaint type code ) ) ) that belongs to ( complaints )",
    "SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  \"NYC\"": "( the maximum of ( gradepoint of staff ) ) , ( the minimum of ( gradepoint of staff ) ) that belongs to ( ( enrolled in ) join ( ( gradeconversion ) ) , and ( ( student ) satisfied that ( ( ( grade of addresses ) equal to ( lettergrade of staff ) ) and ( ( stuid of addresses ) equal to ( stuid of enzyme ) ) ) ) ) , that have ( ( city code of enzyme ) equal to ( nyc ) )",
    "SELECT problem_id FROM problems WHERE date_problem_reported < \"1978-06-26\"": "( problem id ) that belongs to ( problems ) , that have ( ( date problem reported ) less than ( 1978-06-26 ) )",
    "SELECT avg(Age) FROM manager": "( the average of ( age ) ) that belongs to ( manager )",
    "SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1": "( name of addresses ) , ( max speed of addresses ) that belongs to ( ( storm ) , and ( ( affected region ) satisfied that ( ( storm id of addresses ) equal to ( storm id of staff ) ) ) ) , grouped by ( storm id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10": "( date order placed of addresses ) that belongs to ( ( orders ) , and ( ( shipments ) satisfied that ( ( order id of addresses ) equal to ( order id of staff ) ) ) ) , that have ( ( invoice number of staff ) equal to ( 10 ) )",
    "SELECT major ,  count(*) FROM Student GROUP BY major": "( major ) , ( the number of ( all items ) ) that belongs to ( student ) , grouped by ( major )",
    "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5": "( title of staff ) that belongs to ( ( rating ) , and ( ( movie ) satisfied that ( ( mid of addresses ) equal to ( mid of staff ) ) ) ) , that have ( ( t1.stars ) between ( 3 ) and ( 5 ) )",
    "SELECT count(DISTINCT incident_type_code) FROM Behavior_Incident": "( the number of ( distinct ( incident type code ) ) ) that belongs to ( behavior incident )",
    "SELECT school ,  nickname FROM university ORDER BY founded": "( school ) , ( nickname ) that belongs to ( university ) , ordered by ( ( founded ) )",
    "SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  \"Colorado\"": "( customer name of club ) that belongs to ( ( customers ) , and ( ( customer addresses ) satisfied that ( ( customer id of club ) equal to ( customer id of member of club ) ) ) , and ( ( addresses ) satisfied that ( ( address id of member of club ) equal to ( address id of student ) ) ) ) , that have ( ( state province county of student ) equal to ( colorado ) )",
    "SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id  =  t2.id JOIN stadium AS t3 ON t3.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1": "( name of student ) that belongs to ( ( record ) , and ( ( event ) satisfied that ( ( event id of club ) equal to ( id of member of club ) ) ) , and ( ( stadium ) satisfied that ( ( id of student ) equal to ( stadium id of member of club ) ) ) ) , grouped by ( stadium id of member of club ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM park WHERE state  =  'NY';": "( the number of ( all items ) ) that belongs to ( park ) , that have ( ( state ) equal to ( 'ny' ) )",
    "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1": "( zip code ) that belongs to ( weather ) , grouped by ( zip code ) , ordered by ( ( the average of ( mean sea level pressure inches ) ) ) , limited to the top ( 1 )",
    "SELECT count(*) FROM premises": "( the number of ( all items ) ) that belongs to ( premises )",
    "SELECT order_shipping_charges ,  customer_id FROM customer_orders WHERE order_status_code  =  'Cancelled' OR order_status_code  =  'Paid'": "( order shipping charges ) , ( customer id ) that belongs to ( customer orders ) , that have ( ( ( order status code ) equal to ( 'cancelled' ) ) or ( ( order status code ) equal to ( 'paid' ) ) )",
    "SELECT transaction_type_description FROM Ref_Transaction_Types WHERE transaction_type_code\t  =  \"PUR\"": "( transaction type description ) that belongs to ( ref transaction types ) , that have ( ( transaction type code ) equal to ( pur ) )",
    "SELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\"": "( the maximum of ( points ) ) that belongs to ( climber ) , that have ( ( country ) equal to ( united kingdom ) )",
    "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1": "( weight ) that belongs to ( people ) , ordered by ( ( height ) in ascending order ) , limited to the top ( 1 )",
    "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"": "( name ) that belongs to ( races ) , that have ( ( ( time ) greater than ( 12:00:00 ) ) or ( ( time ) less than ( 09:00:00 ) ) )",
    "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1": "( amenity name of addresses ) that belongs to ( ( dorm amenity ) , and ( ( has amenity ) satisfied that ( ( amenid of addresses ) equal to ( amenid of staff ) ) ) ) , grouped by ( amenid of staff ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  4000000": "( writer of addresses ) that belongs to ( ( book ) , and ( ( publication ) satisfied that ( ( book id of addresses ) equal to ( book id of staff ) ) ) ) , that have ( ( price of staff ) greater than ( 4000000 ) )",
    "SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status  =  \"Cancelled\"": "( the number of ( distinct ( customer id ) ) ) that belongs to ( customer orders ) , that have ( ( order status ) equal to ( cancelled ) )",
    "SELECT name ,  openning_year FROM cinema ORDER BY openning_year DESC": "( name ) , ( openning year ) that belongs to ( cinema ) , ordered by ( ( openning year ) in descending order )",
    "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1": "( date of latest revision ) that belongs to ( catalogs ) , grouped by ( date of latest revision ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT sales_details FROM sales UNION SELECT purchase_details FROM purchases": "( sales details ) that belongs to ( sales ) and ( purchase details ) that belongs to ( purchases )",
    "SELECT T2.Name ,  sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name": "( name of staff ) , ( the sum of ( num of stock of addresses ) ) that belongs to ( ( phone market ) , and ( ( phone ) satisfied that ( ( phone id of addresses ) equal to ( phone id of staff ) ) ) ) , grouped by ( name of staff )",
    "SELECT Pilot_name FROM pilot WHERE Team  =  \"Bradley\" OR Team  =  \"Fordham\"": "( pilot name ) that belongs to ( pilot ) , that have ( ( ( team ) equal to ( bradley ) ) or ( ( team ) equal to ( fordham ) ) )",
    "SELECT max(T1.RAM_MiB) ,  min(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";": "( the maximum of ( ram mib of addresses ) ) , ( the minimum of ( ram mib of addresses ) ) that belongs to ( ( chip model ) , and ( ( phone ) satisfied that ( ( model name of addresses ) equal to ( chip model of staff ) ) ) ) , that have ( ( company name of staff ) equal to ( nokia corporation ) )",
    "SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)": "( employee id ) that belongs to ( employees ) , that have ( ( salary ) greater than ( the average of ( salary ) ) that belongs to ( employees ) )",
    "SELECT id FROM trip ORDER BY duration LIMIT 1": "( id ) that belongs to ( trip ) , ordered by ( ( duration ) ) , limited to the top ( 1 )",
    "SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name LIKE '%Smith%'": "( name of staff ) that belongs to ( ( assignedto ) , and ( ( projects ) satisfied that ( ( project of addresses ) equal to ( code of staff ) ) ) , and ( ( scientists ) satisfied that ( ( scientist of addresses ) equal to ( ssn of enzyme ) ) ) ) , that have ( ( t3.name ) like ( '%smith%' ) )",
    "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\"": "( distinct ( title ) ) that belongs to ( ( vocals ) , and ( ( songs ) satisfied that ( ( songid of club ) equal to ( songid of member of club ) ) ) ), and except that ( ( title of member of club ) that belongs to ( ( vocals ) , and ( ( songs ) satisfied that ( ( songid of club ) equal to ( songid of member of club ) ) ) ) , that have ( ( type ) equal to ( lead ) ))",
    "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1": "( shop name of staff ) that belongs to ( ( stock ) , and ( ( shop ) satisfied that ( ( shop id of addresses ) equal to ( shop id of staff ) ) ) ) , grouped by ( shop id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1": "( apt type code ) that belongs to ( apartments ) , that have ( ( bathroom count ) greater than ( 1 ) ) , grouped by ( apt type code ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  23": "( issue date ) that belongs to ( ( artist ) , and ( ( volume ) satisfied that ( ( artist id of addresses ) equal to ( artist id of staff ) ) ) ) , that have ( ( age of addresses ) less than or equal to ( 23 ) )",
    "SELECT Status FROM roller_coaster GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1": "( status ) that belongs to ( roller coaster ) , grouped by ( status ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT Name FROM journalist WHERE journalist_ID NOT IN (SELECT journalist_ID FROM news_report)": "( name ) that belongs to ( journalist ) , that have ( ( journalist_id ) not in ( ( journalist id ) that belongs to ( news report ) ) )",
    "SELECT name FROM channel WHERE OWNER  =  'CCTV' OR OWNER  =  'HBS'": "( name ) that belongs to ( channel ) , that have ( ( ( owner ) equal to ( 'cctv' ) ) or ( ( owner ) equal to ( 'hbs' ) ) )",
    "SELECT Address FROM Restaurant WHERE ResName = \"Subway\";": "( address ) that belongs to ( restaurant ) , that have ( ( resname ) equal to ( subway ) )",
    "SELECT Nationality FROM journalist GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1": "( nationality ) that belongs to ( journalist ) , grouped by ( nationality ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  3 AND T2.firstname != \"COVIN\" AND T2.lastname != \"JEROME\"": "( distinct ( lastname of addresses ) ) that belongs to ( ( list ) , and ( ( teachers ) satisfied that ( ( classroom of addresses ) equal to ( classroom of staff ) ) ) ) , that have ( ( ( grade of addresses ) equal to ( 3 ) ) and ( ( firstname of staff ) not equal to ( covin ) ) and ( ( lastname of staff ) not equal to ( jerome ) ) )",
    "SELECT T2.lot_id ,  avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id  =  T2.transaction_id GROUP BY T2.lot_id": "( lot id of staff ) , ( the average of ( amount of transaction ) ) that belongs to ( ( transactions ) , and ( ( transactions lots ) satisfied that ( ( transaction id of addresses ) equal to ( transaction id of staff ) ) ) ) , grouped by ( lot id of staff )",
    "SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines": "( cmi cross ref id ) that belongs to ( cmi cross references ), and except that ( ( cmi cross ref id ) that belongs to ( parking fines ))",
    "SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1": "( name of club ) that belongs to ( ( inst ) , and ( ( authorship ) satisfied that ( ( instid of club ) equal to ( instid of member of club ) ) ) , and ( ( papers ) satisfied that ( ( paperid of member of club ) equal to ( paperid of student ) ) ) ) , grouped by ( name of club ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT name FROM swimmer ORDER BY meter_100": "( name ) that belongs to ( swimmer ) , ordered by ( ( meter 100 ) )",
    "SELECT T1.Participant_ID ,  T1.Participant_Type_Code ,  count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID GROUP BY T1.Participant_ID": "( participant id of addresses ) , ( participant type code of addresses ) , ( the number of ( all items ) ) that belongs to ( ( participants ) , and ( ( participants in events ) satisfied that ( ( participant id of addresses ) equal to ( participant id of staff ) ) ) ) , grouped by ( participant id of addresses )",
    "SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'": "( first name of addresses ) , ( last name of addresses ) , ( city of enzyme ) that belongs to ( ( employees ) , and ( ( departments ) satisfied that ( ( department id of addresses ) equal to ( department id of staff ) ) ) , and ( ( locations ) satisfied that ( ( location id of staff ) equal to ( location id of enzyme ) ) ) ) , that have ( ( t1.first_name ) like ( '%z%' ) )",
    "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Olin\" AND t1.lname  =  \"Shivers\"": "( title of student ) that belongs to ( ( authors ) , and ( ( authorship ) satisfied that ( ( authid of club ) equal to ( authid of member of club ) ) ) , and ( ( papers ) satisfied that ( ( paperid of member of club ) equal to ( paperid of student ) ) ) ) , that have ( ( ( fname of club ) equal to ( olin ) ) and ( ( lname of club ) equal to ( shivers ) ) )",
    "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"": "( nominee ) that belongs to ( musical ) , that have ( ( award ) equal to ( tony award ) ), and intersect with ( ( nominee ) that belongs to ( musical ) , that have ( ( award ) equal to ( drama desk award ) ))",
    "SELECT sum(T1.budgeted) FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn'": "( the sum of ( budgeted of addresses ) ) that belongs to ( ( budget ) , and ( ( school ) satisfied that ( ( school id of addresses ) equal to ( school id of staff ) ) ) ) , that have ( ( school name of staff ) equal to ( 'glenn' ) )",
    "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"": "( distinct ( firstname of addresses ) ) , ( lastname of addresses ) that belongs to ( ( list ) , and ( ( teachers ) satisfied that ( ( classroom of addresses ) equal to ( classroom of staff ) ) ) ) , that have ( ( grade of addresses ) equal to ( 1 ) ), and except that ( ( firstname of addresses ) , ( lastname of addresses ) that belongs to ( ( list ) , and ( ( teachers ) satisfied that ( ( classroom of addresses ) equal to ( classroom of staff ) ) ) ) , that have ( ( ( firstname of staff ) equal to ( otha ) ) and ( ( lastname of staff ) equal to ( moyer ) ) ))",
    "SELECT Memory_in_G ,  Carrier FROM phone": "( memory in g ) , ( carrier ) that belongs to ( phone )",
    "SELECT product_category_code FROM products WHERE product_name  =  \"flax\"": "( product category code ) that belongs to ( products ) , that have ( ( product name ) equal to ( flax ) )",
    "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM employment)": "( name ) that belongs to ( people ) , that have ( ( people_id ) not in ( ( people id ) that belongs to ( employment ) ) )",
    "SELECT max(OMIM) FROM enzyme": "( the maximum of ( omim ) ) that belongs to ( enzyme )",
    "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1": "( date claim made ) that belongs to ( claims ) , ordered by ( ( date claim made ) in ascending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6": "( the number of ( all items ) ) that belongs to ( ( purchase ) , and ( ( member ) satisfied that ( ( member id of addresses ) equal to ( member id of staff ) ) ) ) , that have ( ( level of staff ) equal to ( 6 ) )",
    "SELECT Date FROM debate WHERE Num_of_Audience  >  150": "( date ) that belongs to ( debate ) , that have ( ( num of audience ) greater than ( 150 ) )",
    "SELECT T1.grant_amount FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id WHERE T2.sent_date  <  '1986-08-26 20:49:27' INTERSECT SELECT grant_amount FROM grants WHERE grant_end_date  >  '1989-03-16 18:27:16'": "( grant amount of addresses ) that belongs to ( ( grants ) , and ( ( documents ) satisfied that ( ( grant id of addresses ) equal to ( grant id of staff ) ) ) ) , that have ( ( sent date of staff ) less than ( '1986-08-26 20:49:27' ) ), and intersect with ( ( grant amount ) that belongs to ( grants ) , that have ( ( grant end date ) greater than ( '1989-03-16 18:27:16' ) ))",
    "SELECT Country FROM perpetrator WHERE Injured  >  50 INTERSECT SELECT Country FROM perpetrator WHERE Injured  <  20": "( country ) that belongs to ( perpetrator ) , that have ( ( injured ) greater than ( 50 ) ), and intersect with ( ( country ) that belongs to ( perpetrator ) , that have ( ( injured ) less than ( 20 ) ))",
    "SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T1.Result  =  \"Nominated\"": "( song of staff ) that belongs to ( ( music festival ) , and ( ( volume ) satisfied that ( ( volume of addresses ) equal to ( volume id of staff ) ) ) ) , that have ( ( result of addresses ) equal to ( nominated ) )",
    "SELECT city ,  max(lat) FROM station GROUP BY city": "( city ) , ( the maximum of ( lat ) ) that belongs to ( station ) , grouped by ( city )",
    "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance": "( name of addresses ) , ( ( balance of enzyme ) add ( balance of staff ) ) that belongs to ( ( accounts ) , and ( ( checking ) satisfied that ( ( custid of addresses ) equal to ( custid of staff ) ) ) , and ( ( savings ) satisfied that ( ( custid of addresses ) equal to ( custid of enzyme ) ) ) ) , that have ( ( balance of enzyme ) less than ( balance of staff ) )",
    "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'": "( dorm name ) that belongs to ( dorm ), and except that ( ( dorm name of addresses ) that belongs to ( ( dorm ) , and ( ( has amenity ) satisfied that ( ( dormid of addresses ) equal to ( dormid of staff ) ) ) , and ( ( dorm amenity ) satisfied that ( ( amenid of staff ) equal to ( amenid of enzyme ) ) ) ) , that have ( ( amenity name of enzyme ) equal to ( 'tv lounge' ) ))",
    "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id": "( the number of ( all items ) ) , ( product id of staff ) that belongs to ( ( problems ) , and ( ( product ) satisfied that ( ( product id of addresses ) equal to ( product id of staff ) ) ) ) , grouped by ( product id of staff )",
    "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'": "( balance of staff ) , ( balance of enzyme ) that belongs to ( ( accounts ) , and ( ( checking ) satisfied that ( ( custid of addresses ) equal to ( custid of staff ) ) ) , and ( ( savings ) satisfied that ( ( custid of addresses ) equal to ( custid of enzyme ) ) ) ) , that have ( ( name of addresses ) equal to ( 'brown' ) )",
    "SELECT count(*) ,  sex FROM people WHERE weight  >  85 GROUP BY sex": "( the number of ( all items ) ) , ( sex ) that belongs to ( people ) , that have ( ( weight ) greater than ( 85 ) ) , grouped by ( sex )",
    "SELECT name ,  salary FROM Employee ORDER BY salary": "( name ) , ( salary ) that belongs to ( employee ) , ordered by ( ( salary ) )",
    "SELECT lname FROM authors WHERE fname  =  \"Amal\"": "( lname ) that belongs to ( authors ) , that have ( ( fname ) equal to ( amal ) )",
    "SELECT Age ,  COUNT(*) FROM editor GROUP BY Age": "( age ) , ( the number of ( all items ) ) that belongs to ( editor ) , grouped by ( age )",
    "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\"": "( the number of ( all items ) ) that belongs to ( ( products ) , and ( ( product characteristics ) satisfied that ( ( product id of club ) equal to ( product id of member of club ) ) ) , and ( ( characteristics ) satisfied that ( ( characteristic id of member of club ) equal to ( characteristic id of student ) ) ) ) , that have ( ( characteristic name of student ) equal to ( hot ) )",
    "SELECT Name ,  Age FROM editor": "( name ) , ( age ) that belongs to ( editor )",
    "SELECT avg(elevation) ,  country FROM airports GROUP BY country": "( the average of ( elevation ) ) , ( country ) that belongs to ( airports ) , grouped by ( country )",
    "SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2": "( party ) that belongs to ( party ) , grouped by ( party ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\"": "( firstname ) , ( lastname ) that belongs to ( employee ) , that have ( ( city ) equal to ( calgary ) )",
    "SELECT DName FROM DEPARTMENT WHERE Division  =  \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  \"EN\" AND Building  =  \"NEB\"": "( dname ) that belongs to ( department ) , that have ( ( division ) equal to ( as ) ) and ( dname ) that belongs to ( department ) , that have ( ( ( division ) equal to ( en ) ) and ( ( building ) equal to ( neb ) ) )",
    "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK": "( the maximum of ( milliseconds ) ) , ( the minimum of ( milliseconds ) ) that belongs to ( track )",
    "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)": "( distinct ( driverid ) ) , ( stop ) that belongs to ( pitstops ) , that have ( ( duration ) less than ( the maximum of ( duration ) ) that belongs to ( pitstops ) , that have ( ( raceid ) equal to ( 841 ) ) )",
    "SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1": "( school colors ) that belongs to ( school ) , ordered by ( ( enrollment ) in descending order ) , limited to the top ( 1 )",
    "SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1": "( country ) that belongs to ( competition ) , that have ( ( competition type ) equal to ( 'tournament' ) ) , grouped by ( country ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT name ,  city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)": "( name ) , ( city ) that belongs to ( branch ) , that have ( ( branch_id ) not in ( ( branch id ) that belongs to ( membership register branch ) ) )",
    "SELECT team_name FROM basketball_match ORDER BY All_Home DESC": "( team name ) that belongs to ( basketball match ) , ordered by ( ( all home ) in descending order )",
    "SELECT count(*) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )": "( the number of ( all items ) ) that belongs to ( game ) , that have ( ( id ) not in ( ( game id ) that belongs to ( injury accident ) ) )",
    "SELECT LOCATION FROM cinema WHERE openning_year  >=  2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1": "( location ) that belongs to ( cinema ) , that have ( ( openning year ) greater than or equal to ( 2010 ) ) , grouped by ( location ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"": "( the number of ( all items ) ) that belongs to ( ( club ) , and ( ( member of club ) satisfied that ( ( clubid of club ) equal to ( clubid of member of club ) ) ) , and ( ( student ) satisfied that ( ( stuid of member of club ) equal to ( stuid of student ) ) ) ) , that have ( ( clubname of club ) equal to ( tennis club ) )",
    "SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1": "( publication date ) that belongs to ( publication ) , grouped by ( publication date ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT Status FROM roller_coaster WHERE LENGTH  >  3300 OR Height  >  100": "( status ) that belongs to ( roller coaster ) , that have ( ( ( length ) greater than ( 3300 ) ) or ( ( height ) greater than ( 100 ) ) )",
    "SELECT max(height) ,  avg(height) FROM mountain": "( the maximum of ( height ) ) , ( the average of ( height ) ) that belongs to ( mountain )",
    "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)": "( name ) that belongs to ( instructor ) , that have ( ( id ) not in ( ( id ) that belongs to ( teaches ) ) )",
    "SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date  >  (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code  =  \"Cancelled\")": "( distinct ( customer id ) ) that belongs to ( customer orders ) , that have ( ( order date ) greater than ( the minimum of ( order date ) ) that belongs to ( customer orders ) , that have ( ( order status code ) equal to ( cancelled ) ) )",
    "SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;": "( document id ) , ( the number of ( copy number ) ) that belongs to ( draft copies ) , grouped by ( document id ) , ordered by ( ( the number of ( copy number ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T3.Pilot_name ,  T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID ORDER BY T3.Rank": "( pilot name of enzyme ) , ( fleet series of staff ) that belongs to ( ( pilot record ) , and ( ( aircraft ) satisfied that ( ( aircraft id of addresses ) equal to ( aircraft id of staff ) ) ) , and ( ( pilot ) satisfied that ( ( pilot id of addresses ) equal to ( pilot id of enzyme ) ) ) ) , ordered by ( ( rank of enzyme ) )",
    "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5": "( catalog name of club ) , ( date of publication of club ) that belongs to ( ( catalogs ) , and ( ( catalog structure ) satisfied that ( ( catalog id of club ) equal to ( catalog id of member of club ) ) ) ) , that have ( ( catalog level number ) greater than ( 5 ) )",
    "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;": "( name of staff ) that belongs to ( ( playlist tracks ) , and ( ( playlists ) satisfied that ( ( id of staff ) equal to ( playlist id of addresses ) ) ) ) , grouped by ( playlist id of addresses ) , that have ( ( the number of ( track id of addresses ) ) greater than ( 100 ) )",
    "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot  =  \"left\" AND T2.overall_rating  >=  85 AND T2.overall_rating  <=  90": "( distinct ( player name of addresses ) ) that belongs to ( ( player ) , and ( ( player attributes ) satisfied that ( ( player api id of addresses ) equal to ( player api id of staff ) ) ) ) , that have ( ( ( preferred foot of staff ) equal to ( left ) ) and ( ( overall rating of staff ) greater than or equal to ( 85 ) ) and ( ( overall rating of staff ) less than or equal to ( 90 ) ) )",
    "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1": "( name ) , ( lat ) , ( city ) that belongs to ( station ) , ordered by ( ( lat ) ) , limited to the top ( 1 )",
    "SELECT decor , avg(basePrice) ,  min(basePrice) FROM Rooms GROUP BY decor;": "( decor ) , ( the average of ( baseprice ) ) , ( the minimum of ( baseprice ) ) that belongs to ( rooms ) , grouped by ( decor )",
    "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY count(*) DESC LIMIT 1": "( name of club ) that belongs to ( ( swimmer ) , and ( ( record ) satisfied that ( ( id of club ) equal to ( swimmer id of member of club ) ) ) ) , grouped by ( swimmer id of member of club ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1": "( cust name ) that belongs to ( customer ) , ordered by ( ( credit score ) ) , limited to the top ( 1 )",
    "SELECT avg(floors) ,  max(floors) ,  min(floors) FROM building": "( the average of ( floors ) ) , ( the maximum of ( floors ) ) , ( the minimum of ( floors ) ) that belongs to ( building )",
    "SELECT name FROM airports WHERE city  =  'Goroka'": "( name ) that belongs to ( airports ) , that have ( ( city ) equal to ( 'goroka' ) )",
    "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID ORDER BY T3.Votes DESC": "( player name of enzyme ) , ( coach name of staff ) that belongs to ( ( player coach ) , and ( ( coach ) satisfied that ( ( coach id of addresses ) equal to ( coach id of staff ) ) ) , and ( ( player ) satisfied that ( ( player id of addresses ) equal to ( player id of enzyme ) ) ) ) , ordered by ( ( votes of enzyme ) in descending order )",
    "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC": "( software platform ) that belongs to ( device ) , grouped by ( software platform ) , ordered by ( ( the number of ( all items ) ) in descending order )",
    "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"": "( distinct ( catalog publisher ) ) that belongs to ( catalogs ) , that have ( ( catalog_publisher ) like ( %murray% ) )",
    "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'": "( name ) that belongs to ( manufacturers ), and except that ( ( name of staff ) that belongs to ( ( products ) , and ( ( manufacturers ) satisfied that ( ( manufacturer of addresses ) equal to ( code of staff ) ) ) ) , that have ( ( name of addresses ) equal to ( 'dvd drive' ) ))",
    "SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'Fasterfox'": "( name of enzyme ) that belongs to ( ( web client accelerator ) , and ( ( accelerator compatible browser ) satisfied that ( ( accelerator id of staff ) equal to ( id of addresses ) ) ) , and ( ( browser ) satisfied that ( ( browser id of staff ) equal to ( id of enzyme ) ) ) ) , that have ( ( name of addresses ) equal to ( 'cachebox' ) ), and intersect with ( ( name of enzyme ) that belongs to ( ( web client accelerator ) , and ( ( accelerator compatible browser ) satisfied that ( ( accelerator id of staff ) equal to ( id of addresses ) ) ) , and ( ( browser ) satisfied that ( ( browser id of staff ) equal to ( id of enzyme ) ) ) ) , that have ( ( name of addresses ) equal to ( 'fasterfox' ) ))",
    "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1": "( dname of addresses ) that belongs to ( ( department ) , and ( ( minor in ) satisfied that ( ( dno of addresses ) equal to ( dno of staff ) ) ) ) , grouped by ( dno of staff ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T2.name ,  T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id WHERE T1.year  >  2014": "( name of staff ) , ( name of enzyme ) that belongs to ( ( wedding ) , and ( ( people ) satisfied that ( ( male id of addresses ) equal to ( people id of staff ) ) ) , and ( ( people ) satisfied that ( ( female id of addresses ) equal to ( people id of enzyme ) ) ) ) , that have ( ( year of addresses ) greater than ( 2014 ) )",
    "SELECT count(DISTINCT label) FROM albums": "( the number of ( distinct ( label ) ) ) that belongs to ( albums )",
    "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)": "( customer details of student ) that belongs to ( ( claim headers ) , and ( ( policies ) satisfied that ( ( policy id of club ) equal to ( policy id of member of club ) ) ) , and ( ( customers ) satisfied that ( ( customer id of member of club ) equal to ( customer id of student ) ) ) ) , that have ( ( amount claimed of club ) equal to ( the maximum of ( amount claimed ) ) that belongs to ( claim headers ) )",
    "SELECT count(*) FROM cinema": "( the number of ( all items ) ) that belongs to ( cinema )",
    "SELECT count(*) FROM employee": "( the number of ( all items ) ) that belongs to ( employee )",
    "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name": "( course name of addresses ) , ( the number of ( all items ) ) that belongs to ( ( courses ) , and ( ( student course enrolment ) satisfied that ( ( course id of addresses ) equal to ( course id of staff ) ) ) ) , grouped by ( course name of addresses )",
    "SELECT count(DISTINCT scientist) FROM assignedto": "( the number of ( distinct ( scientist ) ) ) that belongs to ( assignedto )",
    "SELECT min(low_temperature) ,  max(wind_speed_mph) FROM weekly_weather": "( the minimum of ( low temperature ) ) , ( the maximum of ( wind speed mph ) ) that belongs to ( weekly weather )",
    "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"": "( customer name of addresses ) that belongs to ( ( customers ) , and ( ( orders ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , that have ( ( order status of staff ) equal to ( on road ) ), and intersect with ( ( customer name of addresses ) that belongs to ( ( customers ) , and ( ( orders ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , that have ( ( order status of staff ) equal to ( shipped ) ))",
    "SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1": "( distinct ( firstname of staff ) ) that belongs to ( ( list ) , and ( ( teachers ) satisfied that ( ( classroom of addresses ) equal to ( classroom of staff ) ) ) ) , that have ( ( grade ) equal to ( 1 ) )",
    "SELECT directed_by ,  count(*) FROM film GROUP BY directed_by": "( directed by ) , ( the number of ( all items ) ) that belongs to ( film ) , grouped by ( directed by )",
    "SELECT fname ,  lname FROM employee WHERE salary  >  30000": "( fname ) , ( lname ) that belongs to ( employee ) , that have ( ( salary ) greater than ( 30000 ) )",
    "SELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1": "( customer name of addresses ) , ( customer phone of addresses ) , ( customer email of addresses ) that belongs to ( ( customers ) , and ( ( customer orders ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , grouped by ( customer id of staff ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT document_name FROM documents WHERE document_name LIKE \"%CV%\"": "( document name ) that belongs to ( documents ) , that have ( ( document_name ) like ( %cv% ) )",
    "SELECT T2.Name ,  T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T3.Attendance DESC": "( name of staff ) , ( date of enzyme ) that belongs to ( ( member attendance ) , and ( ( member ) satisfied that ( ( member id of addresses ) equal to ( member id of staff ) ) ) , and ( ( performance ) satisfied that ( ( performance id of addresses ) equal to ( performance id of enzyme ) ) ) ) , ordered by ( ( attendance of enzyme ) in descending order )",
    "SELECT T1.teacher_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 3": "( teacher id of addresses ) , ( first name of staff ) that belongs to ( ( assessment notes ) , and ( ( teachers ) satisfied that ( ( teacher id of addresses ) equal to ( teacher id of staff ) ) ) ) , grouped by ( teacher id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 3 )",
    "SELECT max(Number_cities) ,  min(Number_cities) FROM market": "( the maximum of ( number cities ) ) , ( the minimum of ( number cities ) ) that belongs to ( market )",
    "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)": "( distinct ( driverid ) ) , ( stop ) that belongs to ( pitstops ) , that have ( ( duration ) greater than ( the minimum of ( duration ) ) that belongs to ( pitstops ) , that have ( ( raceid ) equal to ( 841 ) ) )",
    "SELECT T2.theme ,  T1.date ,  T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T2.year  =  2004": "( theme of staff ) , ( date of addresses ) , ( attendance of addresses ) that belongs to ( ( exhibition record ) , and ( ( exhibition ) satisfied that ( ( exhibition id of addresses ) equal to ( exhibition id of staff ) ) ) ) , that have ( ( year of staff ) equal to ( 2004 ) )",
    "SELECT role_code FROM Project_Staff WHERE date_from  >  '2003-04-19 15:06:20' AND date_to  <  '2016-03-15 00:33:18'": "( role code ) that belongs to ( project staff ) , that have ( ( ( date from ) greater than ( '2003-04-19 15:06:20' ) ) and ( ( date to ) less than ( '2016-03-15 00:33:18' ) ) )",
    "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups": "( the number of ( distinct ( currency code ) ) ) that belongs to ( drama workshop groups )",
    "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  <  5": "( title of addresses ) that belongs to ( ( item ) , and ( ( review ) satisfied that ( ( i id of addresses ) equal to ( i id of staff ) ) ) ) , that have ( ( rating of staff ) less than ( 5 ) )",
    "SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id": "( region name of addresses ) , ( the number of ( all items ) ) that belongs to ( ( region ) , and ( ( affected region ) satisfied that ( ( region id of addresses ) equal to ( region id of staff ) ) ) ) , grouped by ( region id of addresses )",
    "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1": "( campus ) that belongs to ( degrees ) , grouped by ( campus ) , ordered by ( ( the sum of ( degrees ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1": "( name of club ) that belongs to ( ( ship ) , and ( ( captain ) satisfied that ( ( ship id of club ) equal to ( ship id of member of club ) ) ) ) , ordered by ( ( age of member of club ) ) , limited to the top ( 1 )",
    "SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )": "( first name ) that belongs to ( customer ) , that have ( ( customer_id ) not in ( ( ( customer id ) that belongs to ( rental ) , that have ( ( rental date ) greater than ( '2005-08-23 02:06:01' ) ) ) ) )",
    "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1": "( state ) that belongs to ( bank ) , grouped by ( state ) , ordered by ( ( the sum of ( no of customers ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT avg(revenue) ,  max(revenue) ,  sum(revenue) FROM manufacturers": "( the average of ( revenue ) ) , ( the maximum of ( revenue ) ) , ( the sum of ( revenue ) ) that belongs to ( manufacturers )",
    "SELECT count(DISTINCT T2.Location_Code) FROM Things AS T1 JOIN Timed_Locations_of_Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.service_details  =  'Unsatisfied'": "( the number of ( distinct ( location code of staff ) ) ) that belongs to ( ( things ) , and ( ( timed locations of things ) satisfied that ( ( thing id of addresses ) equal to ( thing id of staff ) ) ) ) , that have ( ( service details of addresses ) equal to ( 'unsatisfied' ) )",
    "SELECT T2.address_id ,  T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id ORDER BY AVG(monthly_rental) DESC LIMIT 1": "( address id of staff ) , ( city of addresses ) that belongs to ( ( addresses ) , and ( ( student addresses ) satisfied that ( ( address id of addresses ) equal to ( address id of staff ) ) ) ) , grouped by ( address id of staff ) , ordered by ( ( the average of ( monthly rental ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT region_code ,  region_name FROM region ORDER BY region_code": "( region code ) , ( region name ) that belongs to ( region ) , ordered by ( ( region code ) )",
    "SELECT count(*) FROM Staff;": "( the number of ( all items ) ) that belongs to ( staff )",
    "SELECT count(*) ,  gender FROM artist GROUP BY gender": "( the number of ( all items ) ) , ( gender ) that belongs to ( artist ) , grouped by ( gender )",
    "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1": "( country ) , ( the number of ( all items ) ) that belongs to ( perpetrator ) , grouped by ( country ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'": "( the average of ( height ) ) , ( the average of ( weight ) ) that belongs to ( people ) , that have ( ( sex ) equal to ( 'm' ) )",
    "SELECT first_name ,  last_name FROM Customers WHERE amount_outstanding BETWEEN 1000 AND 3000;": "( first name ) , ( last name ) that belongs to ( customers ) , that have ( ( amount_outstanding ) between ( 1000 ) and ( 3000 ) )",
    "SELECT product_id ,  product_name FROM products WHERE product_price  <  600 OR product_price  >  900": "( product id ) , ( product name ) that belongs to ( products ) , that have ( ( ( product price ) less than ( 600 ) ) or ( ( product price ) greater than ( 900 ) ) )",
    "SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id  =  T2.student_id": "( personal name ) that belongs to ( students ), and except that ( ( personal name of addresses ) that belongs to ( ( students ) , and ( ( student course enrolment ) satisfied that ( ( student id of addresses ) equal to ( student id of staff ) ) ) ))",
    "SELECT asset_model FROM Assets WHERE asset_id NOT IN (SELECT asset_id FROM Fault_Log)": "( asset model ) that belongs to ( assets ) , that have ( ( asset_id ) not in ( ( asset id ) that belongs to ( fault log ) ) )",
    "SELECT TYPE FROM artwork GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1": "( type ) that belongs to ( artwork ) , grouped by ( type ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200": "( title ) that belongs to ( film ) , that have ( ( ( length ) greater than ( 100 ) ) or ( ( rating ) equal to ( 'pg' ) ) ), and except that ( ( title ) that belongs to ( film ) , that have ( ( replacement cost ) greater than ( 200 ) ))",
    "SELECT avg(price) FROM products": "( the average of ( price ) ) that belongs to ( products )",
    "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3": "( county of addresses ) that belongs to ( ( appellations ) , and ( ( wine ) satisfied that ( ( appelation of addresses ) equal to ( appelation of staff ) ) ) ) , grouped by ( appelation of staff ) , that have ( ( the number of ( all items ) ) less than or equal to ( 3 ) )",
    "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100": "( location of enzyme ) that belongs to ( ( station company ) , and ( ( company ) satisfied that ( ( company id of addresses ) equal to ( company id of staff ) ) ) , and ( ( gas station ) satisfied that ( ( station id of addresses ) equal to ( station id of enzyme ) ) ) ) , that have ( ( market value of staff ) greater than ( 100 ) )",
    "SELECT count(*) FROM Student WHERE Advisor =  1121;": "( the number of ( all items ) ) that belongs to ( student ) , that have ( ( advisor ) equal to ( 1121 ) )",
    "SELECT avg(Horizontal_Bar_Points) FROM gymnast": "( the average of ( horizontal bar points ) ) that belongs to ( gymnast )",
    "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\" AND T1.lesson_status_code = \"Completed\";": "( the number of ( all items ) ) that belongs to ( ( lessons ) , and ( ( customers ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , that have ( ( ( first name of staff ) equal to ( rylan ) ) and ( ( last name of staff ) equal to ( goodwin ) ) and ( ( lesson status code of addresses ) equal to ( completed ) ) )",
    "SELECT emp_jobcode ,  count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1": "( emp jobcode ) , ( the number of ( all items ) ) that belongs to ( employee ) , grouped by ( emp jobcode ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(DISTINCT UID) FROM tweets": "( the number of ( distinct ( uid ) ) ) that belongs to ( tweets )",
    "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'": "( address ) that belongs to ( member ), and except that ( ( address ) that belongs to ( member ) , that have ( ( membership card ) equal to ( 'black' ) ))",
    "SELECT DISTINCT Registration_Date ,  Election_Cycle FROM VOTING_RECORD": "( distinct ( registration date ) ) , ( election cycle ) that belongs to ( voting record )",
    "SELECT count(*) ,  t1.name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id GROUP BY t1.manufacturer_id": "( the number of ( all items ) ) , ( name of club ) that belongs to ( ( manufacturer ) , and ( ( furniture manufacte ) satisfied that ( ( manufacturer id of club ) equal to ( manufacturer id of member of club ) ) ) ) , grouped by ( manufacturer id of club )",
    "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id": "( product name ) that belongs to ( products ), and except that ( ( product name of addresses ) that belongs to ( ( products ) , and ( ( order items ) satisfied that ( ( product id of addresses ) equal to ( product id of staff ) ) ) ))",
    "SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC": "( hotel id ) , ( star rating code ) that belongs to ( hotels ) , ordered by ( ( price range ) in ascending order )",
    "SELECT count(DISTINCT payment_method) FROM customers": "( the number of ( distinct ( payment method ) ) ) that belongs to ( customers )",
    "SELECT title FROM papers WHERE title LIKE \"%ML%\"": "( title ) that belongs to ( papers ) , that have ( ( title ) like ( %ml% ) )",
    "SELECT Name FROM Representative WHERE Party != \"Republican\"": "( name ) that belongs to ( representative ) , that have ( ( party ) not equal to ( republican ) )",
    "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'": "( school ) that belongs to ( university ) , that have ( ( ( founded ) greater than ( 1850 ) ) or ( ( affiliation ) equal to ( 'public' ) ) )",
    "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"": "( name of addresses ) that belongs to ( ( people ) , and ( ( perpetrator ) satisfied that ( ( people id of addresses ) equal to ( people id of staff ) ) ) ) , that have ( ( ( country of staff ) equal to ( china ) ) or ( ( country of staff ) equal to ( japan ) ) )",
    "SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;": "( roomname ) , ( baseprice ) that belongs to ( rooms ) , ordered by ( ( baseprice ) in ascending order ) , limited to the top ( 1 )",
    "SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE  =  \"Fall\"": "( distinct ( secretary vote ) ) that belongs to ( voting record ) , that have ( ( election cycle ) equal to ( fall ) )",
    "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code": "( zip code ) , ( the average of ( mean temperature f ) ) that belongs to ( weather ) , that have ( ( date ) like ( 8/% ) ) , grouped by ( zip code )",
    "SELECT StuID ,  count(*) ,  sum(gamesplayed) FROM Sportsinfo GROUP BY StuID": "( stuid ) , ( the number of ( all items ) ) , ( the sum of ( gamesplayed ) ) that belongs to ( sportsinfo ) , grouped by ( stuid )",
    "SELECT name FROM program ORDER BY launch": "( name ) that belongs to ( program ) , ordered by ( ( launch ) )",
    "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred": "( name of staff ) that belongs to ( ( advisor ) , and ( ( instructor ) satisfied that ( ( i id of addresses ) equal to ( id of staff ) ) ) , and ( ( student ) satisfied that ( ( s id of addresses ) equal to ( id of enzyme ) ) ) ) , that have ( ( dept name of enzyme ) equal to ( 'math' ) ) , ordered by ( ( tot cred of enzyme ) )",
    "SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1": "( city code ) that belongs to ( student ) , grouped by ( city code ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name": "( the number of ( all items ) ) , ( dept name ) that belongs to ( student ) , grouped by ( dept name )",
    "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name": "( product name of staff ) , ( the sum of ( product quantity of addresses ) ) that belongs to ( ( order items ) , and ( ( products ) satisfied that ( ( product id of addresses ) equal to ( product id of staff ) ) ) ) , grouped by ( product name of staff )",
    "SELECT count(*) FROM party_events": "( the number of ( all items ) ) that belongs to ( party events )",
    "SELECT avg(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE T2.Party  =  \"Republican\"": "( the average of ( votes of addresses ) ) that belongs to ( ( election ) , and ( ( representative ) satisfied that ( ( representative id of addresses ) equal to ( representative id of staff ) ) ) ) , that have ( ( party of staff ) equal to ( republican ) )",
    "SELECT t3.name ,  t3.time FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id JOIN train AS t3 ON t2.train_id  =  t3.id WHERE t1.local_authority  =  \"Chiltern\"": "( name of student ) , ( time of student ) that belongs to ( ( station ) , and ( ( route ) satisfied that ( ( id of club ) equal to ( station id of member of club ) ) ) , and ( ( train ) satisfied that ( ( train id of member of club ) equal to ( id of student ) ) ) ) , that have ( ( local authority of club ) equal to ( chiltern ) )",
    "SELECT LOCATION FROM station GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1": "( location ) that belongs to ( station ) , grouped by ( location ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T2.Birth_Date LIKE \"%January%\";": "( total of addresses ) that belongs to ( ( body builder ) , and ( ( people ) satisfied that ( ( people id of addresses ) equal to ( people id of staff ) ) ) ) , that have ( ( t2.birth_date ) like ( %january% ) )",
    "SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport": "( the maximum of ( transit passengers ) ) , ( the minimum of ( transit passengers ) ) that belongs to ( airport )",
    "SELECT sum(Rating_in_percent) ,  OWNER FROM channel GROUP BY OWNER": "( the sum of ( rating in percent ) ) , ( owner ) that belongs to ( channel ) , grouped by ( owner )",
    "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1": "( store id ) that belongs to ( inventory ) , grouped by ( store id ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\"": "( the maximum of ( account details ) ) that belongs to ( accounts ) and ( account details ) that belongs to ( accounts ) , that have ( ( account_details ) like ( %5% ) )",
    "SELECT name FROM Aircraft ORDER BY distance LIMIT 3": "( name ) that belongs to ( aircraft ) , ordered by ( ( distance ) ) , limited to the top ( 3 )",
    "SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code": "( apt type code ) , ( the maximum of ( room count ) ) , ( the minimum of ( room count ) ) that belongs to ( apartments ) , grouped by ( apt type code )",
    "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.Artist  =  \"Gorgoroth\"": "( issue date of staff ) that belongs to ( ( artist ) , and ( ( volume ) satisfied that ( ( artist id of addresses ) equal to ( artist id of staff ) ) ) ) , that have ( ( artist of addresses ) equal to ( gorgoroth ) )",
    "SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT(*) DESC LIMIT 1": "( occupation ) that belongs to ( player ) , grouped by ( occupation ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT avg(Profits_billion) FROM Companies": "( the average of ( profits billion ) ) that belongs to ( companies )",
    "SELECT built_year FROM ship GROUP BY built_year ORDER BY count(*) DESC LIMIT 1": "( built year ) that belongs to ( ship ) , grouped by ( built year ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT company ,  rank FROM company ORDER BY Sales_billion DESC": "( company ) , ( rank ) that belongs to ( company ) , ordered by ( ( sales billion ) in descending order )",
    "SELECT t1.product_name ,   t1.product_price FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t2.product_id ORDER BY count(*) DESC LIMIT 1": "( product name of club ) , ( product price of club ) that belongs to ( ( products ) , and ( ( regular order products ) satisfied that ( ( product id of club ) equal to ( product id of member of club ) ) ) ) , grouped by ( product id of member of club ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM customer_orders WHERE order_details  =  \"Second time\"": "( the number of ( all items ) ) that belongs to ( customer orders ) , that have ( ( order details ) equal to ( second time ) )",
    "SELECT T1.fault_log_entry_id ,  T1.fault_description ,  T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1": "( fault log entry id of addresses ) , ( fault description of addresses ) , ( fault log entry datetime of addresses ) that belongs to ( ( fault log ) , and ( ( fault log parts ) satisfied that ( ( fault log entry id of addresses ) equal to ( fault log entry id of staff ) ) ) ) , grouped by ( fault log entry id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;": "( head ) that belongs to ( department ) , grouped by ( departmentid ) , ordered by ( ( the number of ( departmentid ) ) ) , limited to the top ( 1 )",
    "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"warm\"": "( distinct ( product name of club ) ) that belongs to ( ( products ) , and ( ( product characteristics ) satisfied that ( ( product id of club ) equal to ( product id of member of club ) ) ) , and ( ( characteristics ) satisfied that ( ( characteristic id of member of club ) equal to ( characteristic id of student ) ) ) ) , that have ( ( characteristic name of student ) equal to ( warm ) )",
    "SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos": "( the maximum of ( hs of addresses ) ) , ( ppos ) that belongs to ( ( player ) , and ( ( tryout ) satisfied that ( ( pid of addresses ) equal to ( pid of staff ) ) ) ) , that have ( ( hs of addresses ) greater than ( 1000 ) ) , grouped by ( ppos of staff )",
    "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID ORDER BY Rank_in_Round ASC": "( name of addresses ) that belongs to ( ( member ) , and ( ( round ) satisfied that ( ( member id of addresses ) equal to ( member id of staff ) ) ) ) , ordered by ( ( rank in round ) in ascending order )",
    "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type": "( the average of ( acc bal ) ) , ( acc type ) that belongs to ( customer ) , that have ( ( credit score ) less than ( 50 ) ) , grouped by ( acc type )",
    "SELECT Occupation ,  COUNT(*) FROM player GROUP BY Occupation": "( occupation ) , ( the number of ( all items ) ) that belongs to ( player ) , grouped by ( occupation )",
    "SELECT DISTINCT directed_by FROM film": "( distinct ( directed by ) ) that belongs to ( film )",
    "SELECT T1.staff_name ,  T3.first_name ,  T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id  =  T3.engineer_id": "( staff name of addresses ) , ( first name of enzyme ) , ( last name of enzyme ) that belongs to ( ( staff ) , and ( ( engineer visits ) satisfied that ( ( staff id of addresses ) equal to ( contact staff id of staff ) ) ) , and ( ( maintenance engineers ) satisfied that ( ( engineer id of staff ) equal to ( engineer id of enzyme ) ) ) )",
    "SELECT count(*) FROM race": "( the number of ( all items ) ) that belongs to ( race )",
    "SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_price  >  2000": "( other item details of addresses ) that belongs to ( ( order items ) , and ( ( products ) satisfied that ( ( product id of addresses ) equal to ( product id of staff ) ) ) ) , that have ( ( product price of staff ) greater than ( 2000 ) )",
    "SELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2": "( course description of addresses ) , ( course name of addresses ) that belongs to ( ( courses ) , and ( ( student course enrolment ) satisfied that ( ( course id of addresses ) equal to ( course id of staff ) ) ) ) , grouped by ( course name of addresses ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )",
    "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1": "( customer name of addresses ) that belongs to ( ( customers ) , and ( ( orders ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , grouped by ( customer id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT name ,  prominence FROM mountain EXCEPT SELECT T1.name ,  T1.prominence FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T3.brand  =  'Sigma'": "( name ) , ( prominence ) that belongs to ( mountain ), and except that ( ( name of addresses ) , ( prominence of addresses ) that belongs to ( ( mountain ) , and ( ( photos ) satisfied that ( ( id of addresses ) equal to ( mountain id of staff ) ) ) , and ( ( camera lens ) satisfied that ( ( camera lens id of staff ) equal to ( id of enzyme ) ) ) ) , that have ( ( brand of enzyme ) equal to ( 'sigma' ) ))",
    "SELECT T1.incident_type_code ,  T2.incident_type_description FROM Behavior_Incident AS T1 JOIN Ref_Incident_Type AS T2 ON T1.incident_type_code  =  T2.incident_type_code GROUP BY T1.incident_type_code ORDER BY count(*) DESC LIMIT 1": "( incident type code of addresses ) , ( incident type description of staff ) that belongs to ( ( behavior incident ) , and ( ( ref incident type ) satisfied that ( ( incident type code of addresses ) equal to ( incident type code of staff ) ) ) ) , grouped by ( incident type code of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1": "( name of addresses ) , ( tourist attraction id of addresses ) that belongs to ( ( tourist attractions ) , and ( ( visits ) satisfied that ( ( tourist attraction id of addresses ) equal to ( tourist attraction id of staff ) ) ) ) , grouped by ( tourist attraction id of staff ) , that have ( ( the number of ( all items ) ) less than or equal to ( 1 ) )",
    "SELECT DISTINCT Publisher FROM publication WHERE Price  >  5000000": "( distinct ( publisher ) ) that belongs to ( publication ) , that have ( ( price ) greater than ( 5000000 ) )",
    "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3": "( title ) , ( film id ) that belongs to ( film ) , that have ( ( rental rate ) equal to ( 99 of 0 ) ), and intersect with ( ( title of addresses ) , ( film id of addresses ) that belongs to ( ( film ) , and ( ( inventory ) satisfied that ( ( film id of addresses ) equal to ( film id of staff ) ) ) ) , grouped by ( film id of addresses ) , that have ( ( the number of ( all items ) ) less than ( 3 ) ))",
    "SELECT StuID FROM Student WHERE major  =  600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'": "( stuid ) that belongs to ( student ) , that have ( ( major ) equal to ( 600 ) ), and intersect with ( ( stuid ) that belongs to ( sportsinfo ) , that have ( ( onscholarship ) equal to ( 'y' ) ))",
    "SELECT T4.crs_description ,  T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num JOIN course AS T4 ON T4.crs_code  =  T1.crs_code WHERE T3.stu_lname  =  'Smithson'": "( crs description of trip ) , ( crs credit of trip ) that belongs to ( ( class ) , and ( ( enroll ) satisfied that ( ( class code of addresses ) equal to ( class code of staff ) ) ) , and ( ( student ) satisfied that ( ( stu num of enzyme ) equal to ( stu num of staff ) ) ) , and ( ( course ) satisfied that ( ( crs code of trip ) equal to ( crs code of addresses ) ) ) ) , that have ( ( stu lname of enzyme ) equal to ( 'smithson' ) )",
    "SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35": "( nationality ) that belongs to ( host ) , that have ( ( age ) greater than ( 45 ) ), and intersect with ( ( nationality ) that belongs to ( host ) , that have ( ( age ) less than ( 35 ) ))",
    "SELECT T2.name ,  sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id  =  T2.cinema_id GROUP BY T1.cinema_id": "( name of staff ) , ( the sum of ( show times per day of addresses ) ) that belongs to ( ( schedule ) , and ( ( cinema ) satisfied that ( ( cinema id of addresses ) equal to ( cinema id of staff ) ) ) ) , grouped by ( cinema id of addresses )",
    "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1": "( first name of addresses ) , ( last name of addresses ) , ( customer id of addresses ) that belongs to ( ( customer ) , and ( ( payment ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , grouped by ( customer id of addresses ) , ordered by ( ( the sum of ( amount ) ) in ascending order ) , limited to the top ( 1 )",
    "SELECT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"": "( instrument ) that belongs to ( ( instruments ) , and ( ( songs ) satisfied that ( ( songid of addresses ) equal to ( songid of staff ) ) ) ) , that have ( ( title ) equal to ( le pop ) )",
    "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\";": "( name of addresses ) that belongs to ( ( tracks ) , and ( ( invoice lines ) satisfied that ( ( id of addresses ) equal to ( track id of staff ) ) ) , and ( ( invoices ) satisfied that ( ( id of enzyme ) equal to ( invoice id of staff ) ) ) , and ( ( customers ) satisfied that ( ( id of trip ) equal to ( customer id of enzyme ) ) ) ) , that have ( ( ( first name of trip ) equal to ( daan ) ) and ( ( last name of trip ) equal to ( peeters ) ) )",
    "SELECT clublocation FROM club WHERE clubname  =  \"Tennis Club\"": "( clublocation ) that belongs to ( club ) , that have ( ( clubname ) equal to ( tennis club ) )",
    "SELECT T1.cmi_cross_ref_id ,  T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*)  >=  1": "( cmi cross ref id of addresses ) , ( source system code of addresses ) that belongs to ( ( cmi cross references ) , and ( ( council tax ) satisfied that ( ( cmi cross ref id of addresses ) equal to ( cmi cross ref id of staff ) ) ) ) , grouped by ( cmi cross ref id of addresses ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 1 ) )",
    "SELECT count(*) FROM catalog_contents": "( the number of ( all items ) ) that belongs to ( catalog contents )",
    "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1": "( year ) that belongs to ( degrees ) , grouped by ( year ) , ordered by ( ( the sum of ( degrees ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating": "( name ) , ( seating ) that belongs to ( track ) , that have ( ( year opened ) greater than ( 2000 ) ) , ordered by ( ( seating ) )",
    "SELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID": "( title of addresses ) , ( publication date of staff ) that belongs to ( ( book ) , and ( ( publication ) satisfied that ( ( book id of addresses ) equal to ( book id of staff ) ) ) )",
    "SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1": "( age ) that belongs to ( editor ) , grouped by ( age ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN 2002 AND 2004;": "( model name ) that belongs to ( chip model ) , that have ( ( launch_year ) between ( 2002 ) and ( 2004 ) )",
    "SELECT date_to FROM Project_Staff ORDER BY date_to DESC LIMIT 1": "( date to ) that belongs to ( project staff ) , ordered by ( ( date to ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.Claim_id HAVING count(*)  >  2 UNION SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id WHERE T1.Amount_Claimed  =  ( SELECT max(Amount_Claimed) FROM Claims )": "( date claim made of addresses ) , ( claim id of addresses ) that belongs to ( ( claims ) , and ( ( settlements ) satisfied that ( ( claim id of addresses ) equal to ( claim id of staff ) ) ) ) , grouped by ( claim id of addresses ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) ) and ( date claim made of addresses ) , ( claim id of addresses ) that belongs to ( ( claims ) , and ( ( settlements ) satisfied that ( ( claim id of addresses ) equal to ( claim id of staff ) ) ) ) , that have ( ( amount claimed of addresses ) equal to ( the maximum of ( amount claimed ) ) that belongs to ( claims ) )",
    "SELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"": "( name ) that belongs to ( circuits ) , that have ( ( ( country ) equal to ( uk ) ) or ( ( country ) equal to ( malaysia ) ) )",
    "SELECT DISTINCT District FROM election": "( distinct ( district ) ) that belongs to ( election )",
    "SELECT count(*) FROM appointment": "( the number of ( all items ) ) that belongs to ( appointment )",
    "SELECT DISTINCT payment_type_code FROM payments": "( distinct ( payment type code ) ) that belongs to ( payments )",
    "SELECT count(*) FROM driver WHERE home_city  =  'Hartford' OR age  <  40": "( the number of ( all items ) ) that belongs to ( driver ) , that have ( ( ( home city ) equal to ( 'hartford' ) ) or ( ( age ) less than ( 40 ) ) )",
    "SELECT Venue FROM debate ORDER BY Num_of_Audience ASC": "( venue ) that belongs to ( debate ) , ordered by ( ( num of audience ) in ascending order )",
    "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10": "( region name of staff ) that belongs to ( ( affected region ) , and ( ( region ) satisfied that ( ( region id of addresses ) equal to ( region id of staff ) ) ) , and ( ( storm ) satisfied that ( ( storm id of addresses ) equal to ( storm id of enzyme ) ) ) ) , that have ( ( number deaths of enzyme ) greater than or equal to ( 10 ) )",
    "SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count(*) DESC LIMIT 1": "( participant type code ) that belongs to ( participants ) , grouped by ( participant type code ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT Name FROM company WHERE Industry  =  \"Banking\" OR Industry  =  \"Retailing\"": "( name ) that belongs to ( company ) , that have ( ( ( industry ) equal to ( banking ) ) or ( ( industry ) equal to ( retailing ) ) )",
    "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)": "( name ) that belongs to ( musical ) , that have ( ( musical_id ) not in ( ( musical id ) that belongs to ( actor ) ) )",
    "SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  2": "( state ) that belongs to ( representative ) , grouped by ( state ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT avg(Num_of_Audience) FROM festival_detail": "( the average of ( num of audience ) ) that belongs to ( festival detail )",
    "SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%'": "( the number of ( all items ) ) that belongs to ( ( participants ) , and ( ( participants in events ) satisfied that ( ( participant id of addresses ) equal to ( participant id of staff ) ) ) ) , that have ( ( t1.participant_details ) like ( '%dr.%' ) )",
    "SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0": "( distinct ( blockcode ) ) that belongs to ( room ) , that have ( ( unavailable ) equal to ( 0 ) )",
    "SELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id": "( the number of ( all items ) ) , ( company id of addresses ) that belongs to ( ( third party companies ) , and ( ( assets ) satisfied that ( ( company id of addresses ) equal to ( supplier company id of staff ) ) ) ) , grouped by ( company id of addresses )",
    "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1;": "( hardware model name of staff ) that belongs to ( ( chip model ) , and ( ( phone ) satisfied that ( ( model name of addresses ) equal to ( chip model of staff ) ) ) ) , that have ( ( launch year of addresses ) equal to ( 2002 ) ) , ordered by ( ( ram mib of addresses ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'": "( fname of addresses ) that belongs to ( ( student ) , and ( ( lives in ) satisfied that ( ( stuid of addresses ) equal to ( stuid of staff ) ) ) , and ( ( dorm ) satisfied that ( ( dormid of enzyme ) equal to ( dormid of staff ) ) ) ) , that have ( ( dorm name of enzyme ) equal to ( 'smith hall' ) )",
    "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1": "( characteristic name of student ) that belongs to ( ( products ) , and ( ( product characteristics ) satisfied that ( ( product id of club ) equal to ( product id of member of club ) ) ) , and ( ( characteristics ) satisfied that ( ( characteristic id of member of club ) equal to ( characteristic id of student ) ) ) ) , grouped by ( characteristic name of student ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.first_name ,  T1.last_name ,  T2.department_name ,  T3.city ,  T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id": "( first name of addresses ) , ( last name of addresses ) , ( department name of staff ) , ( city of enzyme ) , ( state province of enzyme ) that belongs to ( ( employees ) , and ( ( departments ) satisfied that ( ( department id of addresses ) equal to ( department id of staff ) ) ) , and ( ( locations ) satisfied that ( ( location id of staff ) equal to ( location id of enzyme ) ) ) )",
    "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1": "( shop name of staff ) that belongs to ( ( stock ) , and ( ( shop ) satisfied that ( ( shop id of addresses ) equal to ( shop id of staff ) ) ) ) , grouped by ( shop id of addresses ) , ordered by ( ( the sum of ( quantity of addresses ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT * FROM customer_master_index ORDER BY cmi_details DESC": "all items that belongs to ( customer master index ) , ordered by ( ( cmi details ) in descending order )",
    "SELECT Name ,  Party FROM representative": "( name ) , ( party ) that belongs to ( representative )",
    "SELECT first_name ,  last_name FROM Teachers ORDER BY last_name": "( first name ) , ( last name ) that belongs to ( teachers ) , ordered by ( ( last name ) )",
    "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'CIS-220'": "( crs credit ) , ( crs description ) that belongs to ( course ) , that have ( ( crs code ) equal to ( 'cis-220' ) )",
    "SELECT name ,  LOCATION FROM enzyme": "( name ) , ( location ) that belongs to ( enzyme )",
    "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname": "( the sum of ( amount ) ) , ( bname of addresses ) that belongs to ( ( bank ) , and ( ( loan ) satisfied that ( ( branch id of addresses ) equal to ( branch id of staff ) ) ) ) , grouped by ( bname of addresses )",
    "SELECT location_name ,  location_description FROM Ref_locations WHERE location_code  =  \"x\"": "( location name ) , ( location description ) that belongs to ( ref locations ) , that have ( ( location code ) equal to ( x ) )",
    "SELECT Writer FROM book ORDER BY Writer ASC": "( writer ) that belongs to ( book ) , ordered by ( ( writer ) in ascending order )",
    "SELECT Elimination_Move FROM Elimination WHERE Team  =  \"Team Orton\"": "( elimination move ) that belongs to ( elimination ) , that have ( ( team ) equal to ( team orton ) )",
    "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\"": "( the average of ( rating ) ) , ( the average of ( resolution ) ) that belongs to ( song ) , that have ( ( languages ) equal to ( bangla ) )",
    "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses": "( town city ) that belongs to ( addresses ) and ( state province county ) that belongs to ( addresses )",
    "SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id HAVING max(t1.precipitation)  >  50": "( id of member of club ) , ( local authority of member of club ) that belongs to ( ( weekly weather ) , and ( ( station ) satisfied that ( ( station id of club ) equal to ( id of member of club ) ) ) ) , grouped by ( station id of club ) , that have ( ( the maximum of ( precipitation of club ) ) greater than ( 50 ) )",
    "SELECT count(DISTINCT source_system_code) FROM CMI_cross_references": "( the number of ( distinct ( source system code ) ) ) that belongs to ( cmi cross references )",
    "SELECT max(home_games) ,  min(home_games) ,  avg(home_games) FROM stadium": "( the maximum of ( home games ) ) , ( the minimum of ( home games ) ) , ( the average of ( home games ) ) that belongs to ( stadium )",
    "SELECT count(*) FROM user_profiles": "( the number of ( all items ) ) that belongs to ( user profiles )",
    "SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id JOIN bridge AS T3 ON T3.architect_id  =  T2.id WHERE T3.length_meters  >  80": "( distinct ( name of addresses ) ) that belongs to ( ( mill ) , and ( ( architect ) satisfied that ( ( architect id of addresses ) equal to ( id of staff ) ) ) , and ( ( bridge ) satisfied that ( ( architect id of enzyme ) equal to ( id of staff ) ) ) ) , that have ( ( length meters of enzyme ) greater than ( 80 ) )",
    "SELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor;": "( decor ) , ( the number of ( all items ) ) that belongs to ( rooms ) , that have ( ( bedtype ) equal to ( king ) ) , grouped by ( decor )",
    "SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3": "( born state ) that belongs to ( head ) , grouped by ( born state ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 3 ) )",
    "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"": "( distinct ( channel code ) ) that belongs to ( ( customers ) , and ( ( customer contact channels ) satisfied that ( ( customer id of club ) equal to ( customer id of member of club ) ) ) ) , that have ( ( customer name of club ) equal to ( tillman ernser ) )",
    "SELECT avg(length_feet) FROM bridge": "( the average of ( length feet ) ) that belongs to ( bridge )",
    "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id)": "( city ) that belongs to ( addresses ) , that have ( ( city ) not in ( ( distinct ( city of student ) ) that belongs to ( ( customers ) , and ( ( customer addresses ) satisfied that ( ( customer id of club ) equal to ( customer id of member of club ) ) ) , and ( ( addresses ) satisfied that ( ( address id of member of club ) equal to ( address id of student ) ) ) ) ) )",
    "SELECT customer_email ,  customer_name FROM customers WHERE payment_method  =  'Visa'": "( customer email ) , ( customer name ) that belongs to ( customers ) , that have ( ( payment method ) equal to ( 'visa' ) )",
    "SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)": "( name ) that belongs to ( projects ) , that have ( ( code ) not in ( ( project ) that belongs to ( assignedto ) ) )",
    "SELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC": "( name ) that belongs to ( company ) , that have ( ( sales in billion ) greater than ( 200 ) ) , ordered by ( ( sales in billion ),( profits in billion ) in descending order )",
    "SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = \"voluptatem\" AND T1.date_problem_reported > \"1995\"": "( problem id of addresses ) that belongs to ( ( problems ) , and ( ( product ) satisfied that ( ( product id of addresses ) equal to ( product id of staff ) ) ) ) , that have ( ( ( product name of staff ) equal to ( voluptatem ) ) and ( ( date problem reported of addresses ) greater than ( 1995 ) ) )",
    "SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)": "( author ) that belongs to ( submission ) , that have ( ( submission_id ) not in ( ( submission id ) that belongs to ( acceptance ) ) )",
    "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1": "( amount settled ) , ( amount claimed ) that belongs to ( claims ) , ordered by ( ( amount claimed ) in descending order ) , limited to the top ( 1 )",
    "SELECT login_name FROM Students WHERE family_name  =  \"Ward\"": "( login name ) that belongs to ( students ) , that have ( ( family name ) equal to ( ward ) )",
    "SELECT name ,  manufacturer_id FROM manufacturer ORDER BY open_year": "( name ) , ( manufacturer id ) that belongs to ( manufacturer ) , ordered by ( ( open year ) )",
    "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code": "all items that belongs to ( ( products ) , and ( ( manufacturers ) satisfied that ( ( manufacturer of addresses ) equal to ( code of staff ) ) ) )",
    "SELECT min(Vote_Percent) ,  max(Vote_Percent) FROM election": "( the minimum of ( vote percent ) ) , ( the maximum of ( vote percent ) ) that belongs to ( election )",
    "SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25": "( the number of ( all items ) ) that belongs to ( student ) , that have ( ( ( sex ) equal to ( 'f' ) ) and ( ( age ) less than ( 25 ) ) )",
    "SELECT Name FROM ship WHERE Nationality != \"United States\"": "( name ) that belongs to ( ship ) , that have ( ( nationality ) not equal to ( united states ) )",
    "SELECT T1.Festival_ID ,  T3.Festival_Name ,  COUNT(*) FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID": "( festival id of addresses ) , ( festival name of enzyme ) , ( the number of ( all items ) ) that belongs to ( ( nomination ) , and ( ( artwork ) satisfied that ( ( artwork id of addresses ) equal to ( artwork id of staff ) ) ) , and ( ( festival detail ) satisfied that ( ( festival id of addresses ) equal to ( festival id of enzyme ) ) ) ) , grouped by ( festival id of addresses )",
    "SELECT avg(Age) FROM artist": "( the average of ( age ) ) that belongs to ( artist )",
    "SELECT T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  3": "( customer id of addresses ) , ( customer details of addresses ) that belongs to ( ( customers ) , and ( ( customer events ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , grouped by ( customer id of addresses ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 3 ) )",
    "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1": "( title of addresses ) , ( credits of addresses ) , ( dept name of addresses ) that belongs to ( ( course ) , and ( ( prereq ) satisfied that ( ( course id of addresses ) equal to ( course id of staff ) ) ) ) , grouped by ( course id of staff ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT Date_of_ceremony FROM music_festival WHERE Category  =  \"Best Song\" AND RESULT  =  \"Awarded\"": "( date of ceremony ) that belongs to ( music festival ) , that have ( ( ( category ) equal to ( best song ) ) and ( ( result ) equal to ( awarded ) ) )",
    "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';": "( the number of ( all items ) ) that belongs to ( ( home game ) , and ( ( park ) satisfied that ( ( park id of addresses ) equal to ( park id of staff ) ) ) ) , that have ( ( ( year of addresses ) equal to ( 1907 ) ) and ( ( park name of staff ) equal to ( 'columbia park' ) ) )",
    "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1": "( name of addresses ) that belongs to ( ( student ) , and ( ( advisor ) satisfied that ( ( id of addresses ) equal to ( s id of staff ) ) ) ) , grouped by ( s id of staff ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed": "( distinct ( destroyed by employee id ) ) that belongs to ( documents to be destroyed )",
    "SELECT open_year FROM branch GROUP BY open_year HAVING count(*)  >=  2": "( open year ) that belongs to ( branch ) , grouped by ( open year ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT T1.date_incident_start ,  date_incident_end FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.last_name  =  \"Fahey\"": "( date incident start of addresses ) , ( date incident end ) that belongs to ( ( behavior incident ) , and ( ( students ) satisfied that ( ( student id of addresses ) equal to ( student id of staff ) ) ) ) , that have ( ( last name of staff ) equal to ( fahey ) )",
    "SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1": "( clean jerk ) that belongs to ( body builder ) , ordered by ( ( total ) in descending order ) , limited to the top ( 1 )",
    "SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code": "( the maximum of ( product price ) ) , ( the minimum of ( product price ) ) , ( product type code ) that belongs to ( products ) , grouped by ( product type code ) , ordered by ( ( product type code ) )",
    "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3": "( cloud cover ) that belongs to ( weather ) , that have ( ( zip code ) equal to ( 94107 ) ) , grouped by ( cloud cover ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 3 )",
    "SELECT max(share_count) FROM TRANSACTIONS WHERE amount_of_transaction  <  10000": "( the maximum of ( share count ) ) that belongs to ( transactions ) , that have ( ( amount of transaction ) less than ( 10000 ) )",
    "SELECT T1.student_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1": "( student id of addresses ) , ( first name of staff ) that belongs to ( ( assessment notes ) , and ( ( students ) satisfied that ( ( student id of addresses ) equal to ( student id of staff ) ) ) ) , grouped by ( student id of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT Name FROM country WHERE Languages != \"German\"": "( name ) that belongs to ( country ) , that have ( ( languages ) not equal to ( german ) )",
    "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1": "( dept name ) , ( building ) that belongs to ( department ) , ordered by ( ( budget ) in descending order ) , limited to the top ( 1 )",
    "SELECT i_id FROM item WHERE title  =  \"orange\"": "( i id ) that belongs to ( item ) , that have ( ( title ) equal to ( orange ) )",
    "SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) ASC LIMIT 1": "( transaction type code ) that belongs to ( transactions ) , grouped by ( transaction type code ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM dependent WHERE sex  =  'F'": "( the number of ( all items ) ) that belongs to ( dependent ) , that have ( ( sex ) equal to ( 'f' ) )",
    "SELECT name ,  city ,  country FROM airports ORDER BY elevation DESC LIMIT 1": "( name ) , ( city ) , ( country ) that belongs to ( airports ) , ordered by ( ( elevation ) in descending order ) , limited to the top ( 1 )",
    "SELECT job_id FROM job_history WHERE end_date - start_date  > 300 GROUP BY job_id HAVING COUNT(*) >= 2": "( job id ) that belongs to ( job history ) , that have ( ( ( end date ) minus ( start date ) ) greater than ( 300 ) ) , grouped by ( job id ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT DISTINCT date_moved_in FROM residents": "( distinct ( date moved in ) ) that belongs to ( residents )",
    "SELECT count(DISTINCT T1.donator_name) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  \"Glenn\"": "( the number of ( distinct ( donator name of addresses ) ) ) that belongs to ( ( endowment ) , and ( ( school ) satisfied that ( ( school id of addresses ) equal to ( school id of staff ) ) ) ) , that have ( ( school name of staff ) equal to ( glenn ) )",
    "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  \"Ananthapuri Express\" INTERSECT SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  \"Guruvayur Express\"": "( name of staff ) that belongs to ( ( train station ) , and ( ( station ) satisfied that ( ( station id of addresses ) equal to ( station id of staff ) ) ) , and ( ( train ) satisfied that ( ( train id of enzyme ) equal to ( train id of addresses ) ) ) ) , that have ( ( name of enzyme ) equal to ( ananthapuri express ) ), and intersect with ( ( name of staff ) that belongs to ( ( train station ) , and ( ( station ) satisfied that ( ( station id of addresses ) equal to ( station id of staff ) ) ) , and ( ( train ) satisfied that ( ( train id of enzyme ) equal to ( train id of addresses ) ) ) ) , that have ( ( name of enzyme ) equal to ( guruvayur express ) ))",
    "SELECT T1.transaction_type_description FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code GROUP BY T1.transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1": "( transaction type description of addresses ) that belongs to ( ( ref transaction types ) , and ( ( transactions ) satisfied that ( ( transaction type code of addresses ) equal to ( transaction type code of staff ) ) ) ) , grouped by ( transaction type code of addresses ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city": "( city of addresses ) that belongs to ( ( city ) , and ( ( temperature ) satisfied that ( ( city id of addresses ) equal to ( city id of staff ) ) ) ) , that have ( ( mar of staff ) less than ( jul of staff ) ), and intersect with ( ( city of enzyme ) that belongs to ( ( city ) , and ( ( hosting city ) satisfied that ( ( city id of enzyme ) equal to ( host city of trip ) ) ) ))",
    "SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name HAVING COUNT(*)  >  1": "( name of enzyme ) that belongs to ( ( news report ) , and ( ( event ) satisfied that ( ( event id of addresses ) equal to ( event id of staff ) ) ) , and ( ( journalist ) satisfied that ( ( journalist id of addresses ) equal to ( journalist id of enzyme ) ) ) ) , grouped by ( name of enzyme ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT sum(revenue) FROM manufacturers WHERE Headquarter  =  'Tokyo' OR Headquarter  =  'Taiwan'": "( the sum of ( revenue ) ) that belongs to ( manufacturers ) , that have ( ( ( headquarter ) equal to ( 'tokyo' ) ) or ( ( headquarter ) equal to ( 'taiwan' ) ) )",
    "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID  =  T3.Tourist_ID WHERE T3.Tourist_Details  =  \"Vincent\"": "( name of addresses ) that belongs to ( ( tourist attractions ) , and ( ( visits ) satisfied that ( ( tourist attraction id of addresses ) equal to ( tourist attraction id of staff ) ) ) , and ( ( visitors ) satisfied that ( ( tourist id of staff ) equal to ( tourist id of enzyme ) ) ) ) , that have ( ( tourist details of enzyme ) equal to ( vincent ) )",
    "SELECT premises_type ,  premise_details FROM premises ORDER BY premises_type": "( premises type ) , ( premise details ) that belongs to ( premises ) , ordered by ( ( premises type ) )",
    "SELECT DISTINCT product_name FROM product ORDER BY product_id": "( distinct ( product name ) ) that belongs to ( product ) , ordered by ( ( product id ) )",
    "SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID": "( customer name ) that belongs to ( clients ), and except that ( ( customer name of staff ) that belongs to ( ( bookings ) , and ( ( clients ) satisfied that ( ( customer id of addresses ) equal to ( client id of staff ) ) ) ))",
    "SELECT home_city FROM driver WHERE age  >  40 GROUP BY home_city HAVING count(*)  >=  2": "( home city ) that belongs to ( driver ) , that have ( ( age ) greater than ( 40 ) ) , grouped by ( home city ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING avg(Product_Price)  <  1000000": "( product name ) that belongs to ( products ) , grouped by ( product name ) , that have ( ( the average of ( product price ) ) less than ( 1000000 ) )",
    "SELECT Age FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";": "( age ) that belongs to ( student ) , that have ( ( ( fname ) equal to ( linda ) ) and ( ( lname ) equal to ( smith ) ) )",
    "SELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;": "( bedtype ) , ( the number of ( all items ) ) that belongs to ( rooms ) , grouped by ( bedtype )",
    "SELECT Lifespan FROM representative WHERE State  =  \"New York\" OR State  =  \"Indiana\"": "( lifespan ) that belongs to ( representative ) , that have ( ( ( state ) equal to ( new york ) ) or ( ( state ) equal to ( indiana ) ) )",
    "SELECT T1.source_system_code ,  T1.master_customer_id ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Parking_Fines AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id": "( source system code of addresses ) , ( master customer id of addresses ) , ( council tax id of staff ) that belongs to ( ( cmi cross references ) , and ( ( parking fines ) satisfied that ( ( cmi cross ref id of addresses ) equal to ( cmi cross ref id of staff ) ) ) )",
    "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636": "( the sum of ( duration ) ) , ( the maximum of ( duration ) ) that belongs to ( trip ) , that have ( ( bike id ) equal to ( 636 ) )",
    "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments );": "( the number of ( all items ) ) that belongs to ( customers ) , that have ( ( customer_id ) not in ( ( customer id ) that belongs to ( customer payments ) ) )",
    "SELECT document_type_description FROM Ref_Document_Types WHERE document_type_code = \"Paper\";": "( document type description ) that belongs to ( ref document types ) , that have ( ( document type code ) equal to ( paper ) )",
    "SELECT date_of_notes FROM Assessment_Notes": "( date of notes ) that belongs to ( assessment notes )",
    "SELECT T2.team_id ,  T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id WHERE T1.year  =  2014 GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT 1;": "( team id of staff ) , ( rank of staff ) that belongs to ( ( home game ) , and ( ( team ) satisfied that ( ( team id of addresses ) equal to ( team id of staff ) ) ) ) , that have ( ( year of addresses ) equal to ( 2014 ) ) , grouped by ( team id of addresses ) , ordered by ( ( the average of ( attendance of addresses ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)": "( id ) that belongs to ( trip ) , that have ( ( duration ) greater than or equal to ( the average of ( duration ) ) that belongs to ( trip ) , that have ( ( zip code ) equal to ( 94103 ) ) )",
    "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'photo' INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'film'": "( service type description of addresses ) that belongs to ( ( ref service types ) , and ( ( services ) satisfied that ( ( service type code of addresses ) equal to ( service type code of staff ) ) ) ) , that have ( ( product name of staff ) equal to ( 'photo' ) ), and intersect with ( ( service type description of addresses ) that belongs to ( ( ref service types ) , and ( ( services ) satisfied that ( ( service type code of addresses ) equal to ( service type code of staff ) ) ) ) , that have ( ( product name of staff ) equal to ( 'film' ) ))",
    "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id": "( customer id ) , ( the number of ( all items ) ) that belongs to ( accounts ) , grouped by ( customer id )",
    "SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500": "( pname ) that belongs to ( player ) , that have ( ( hs ) between ( 500 ) and ( 1500 ) )",
    "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"": "( draft pick number ) , ( draft class ) that belongs to ( match season ) , that have ( ( position ) equal to ( defender ) )",
    "SELECT Nationality ,  COUNT(*) FROM journalist GROUP BY Nationality": "( nationality ) , ( the number of ( all items ) ) that belongs to ( journalist ) , grouped by ( nationality )",
    "SELECT Rating FROM Restaurant WHERE ResName = \"Subway\";": "( rating ) that belongs to ( restaurant ) , that have ( ( resname ) equal to ( subway ) )",
    "SELECT DISTINCT Major FROM Student": "( distinct ( major ) ) that belongs to ( student )",
    "SELECT count(*) FROM architect WHERE gender  =  'female'": "( the number of ( all items ) ) that belongs to ( architect ) , that have ( ( gender ) equal to ( 'female' ) )",
    "SELECT Author FROM submission ORDER BY Scores ASC": "( author ) that belongs to ( submission ) , ordered by ( ( scores ) in ascending order )",
    "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC LIMIT 1": "( part name of addresses ) that belongs to ( ( parts ) , and ( ( part faults ) satisfied that ( ( part id of addresses ) equal to ( part id of staff ) ) ) ) , grouped by ( part name of addresses ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( 1 )",
    "SELECT DISTINCT T1.stageposition FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE Firstname  =  \"Solveig\"": "( distinct ( stageposition of addresses ) ) that belongs to ( ( performance ) , and ( ( band ) satisfied that ( ( bandmate of addresses ) equal to ( id of staff ) ) ) ) , that have ( ( firstname ) equal to ( solveig ) )",
    "SELECT avg(rating) ,  languages FROM song GROUP BY languages": "( the average of ( rating ) ) , ( languages ) that belongs to ( song ) , grouped by ( languages )",
    "SELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people)": "( name ) that belongs to ( people ) , that have ( ( people_id ) not in ( ( affirmative ) that belongs to ( debate people ) ) )",
    "SELECT location_code ,  date_in_location_from ,  date_in_locaton_to FROM Document_locations": "( location code ) , ( date in location from ) , ( date in locaton to ) that belongs to ( document locations )",
    "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC": "all items that belongs to ( employees ) , that have ( ( ( first name ) like ( '%d%' ) ) or ( ( first name ) like ( '%s%' ) ) ) , ordered by ( ( salary ) in descending order )",
    "SELECT Residence FROM player GROUP BY Residence HAVING COUNT(*)  >=  2": "( residence ) that belongs to ( player ) , grouped by ( residence ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000": "( campusfee of club ) that belongs to ( ( csu fees ) , and ( ( campuses ) satisfied that ( ( campus of club ) equal to ( id of member of club ) ) ) ) , that have ( ( ( campus of member of club ) equal to ( san francisco state university ) ) and ( ( year of club ) equal to ( 2000 ) ) )",
    "SELECT receipt_date FROM Documents WHERE document_id = 3;": "( receipt date ) that belongs to ( documents ) , that have ( ( document id ) equal to ( 3 ) )",
    "SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name": "( trade name ) , ( the number of ( all items ) ) that belongs to ( medicine ) , grouped by ( trade name )",
    "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id": "( customer name ) that belongs to ( customers ), and except that ( ( customer name of club ) that belongs to ( ( customers ) , and ( ( first notification of loss ) satisfied that ( ( customer id of club ) equal to ( customer id of member of club ) ) ) ))",
    "SELECT name FROM event ORDER BY YEAR DESC LIMIT 1": "( name ) that belongs to ( event ) , ordered by ( ( year ) in descending order ) , limited to the top ( 1 )",
    "SELECT name FROM church ORDER BY open_date DESC": "( name ) that belongs to ( church ) , ordered by ( ( open date ) in descending order )",
    "SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  \"Professor\"": "( the number of ( all items ) ) that belongs to ( faculty ) , that have ( ( ( sex ) equal to ( 'f' ) ) and ( ( rank ) equal to ( professor ) ) )",
    "SELECT T1.Char_cells ,  T1.Pixels ,  T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = \"LG-P760\";": "( char cells of addresses ) , ( pixels of addresses ) , ( hardware colours of addresses ) that belongs to ( ( screen mode ) , and ( ( phone ) satisfied that ( ( graphics mode of addresses ) equal to ( screen mode of staff ) ) ) ) , that have ( ( hardware model name of staff ) equal to ( lg-p760 ) )",
    "SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );": "( roomname ) that belongs to ( rooms ) , that have ( ( baseprice ) greater than ( the average of ( baseprice ) ) that belongs to ( rooms ) )",
    "SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)": "( name ) that belongs to ( editor ) , that have ( ( editor_id ) not in ( ( editor id ) that belongs to ( journal committee ) ) )",
    "SELECT institution ,  LOCATION FROM institution WHERE founded  >  1990 AND TYPE  =  'Private'": "( institution ) , ( location ) that belongs to ( institution ) , that have ( ( ( founded ) greater than ( 1990 ) ) and ( ( type ) equal to ( 'private' ) ) )",
    "SELECT count(DISTINCT Team) FROM match_season": "( the number of ( distinct ( team ) ) ) that belongs to ( match season )",
    "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM member_attendance)": "( name ) that belongs to ( member ) , that have ( ( member_id ) not in ( ( member id ) that belongs to ( member attendance ) ) )",
    "SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id GROUP BY T1.id HAVING count(*)  >=  2": "( id of addresses ) , ( name of addresses ) that belongs to ( ( mountain ) , and ( ( photos ) satisfied that ( ( id of addresses ) equal to ( mountain id of staff ) ) ) ) , grouped by ( id of addresses ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS": "( planned delivery date ) , ( actual delivery date ) that belongs to ( bookings )",
    "SELECT country FROM airport GROUP BY country HAVING count(*)  >  2": "( country ) that belongs to ( airport ) , grouped by ( country ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )",
    "SELECT count(DISTINCT card_type_code) FROM Customers_Cards": "( the number of ( distinct ( card type code ) ) ) that belongs to ( customers cards )",
    "SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1": "( classroom ) that belongs to ( list ) , grouped by ( classroom ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) ,  formats FROM files GROUP BY formats": "( the number of ( all items ) ) , ( formats ) that belongs to ( files ) , grouped by ( formats )",
    "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \"Gym\"": "( the sum of ( room count of staff ) ) that belongs to ( ( apartment facilities ) , and ( ( apartments ) satisfied that ( ( apt id of addresses ) equal to ( apt id of staff ) ) ) ) , that have ( ( facility code of addresses ) equal to ( gym ) )",
    "SELECT count(*) FROM Products": "( the number of ( all items ) ) that belongs to ( products )",
    "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'": "( customer name ) that belongs to ( customers ), and except that ( ( customer name of club ) that belongs to ( ( customers ) , and ( ( customer addresses ) satisfied that ( ( customer id of club ) equal to ( customer id of member of club ) ) ) , and ( ( addresses ) satisfied that ( ( address id of member of club ) equal to ( address id of student ) ) ) ) , that have ( ( state province county of student ) equal to ( 'california' ) ))",
    "SELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2": "( product id of club ) , ( color description of member of club ) that belongs to ( ( products ) , and ( ( ref colors ) satisfied that ( ( color code of club ) equal to ( color code of member of club ) ) ) , and ( ( product characteristics ) satisfied that ( ( product id of club ) equal to ( product id of student ) ) ) ) , grouped by ( product id of club ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT name FROM mill WHERE name LIKE '%Moulin%'": "( name ) that belongs to ( mill ) , that have ( ( name ) like ( '%moulin%' ) )",
    "SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\"": "( the number of ( distinct ( characteristic name of student ) ) ) that belongs to ( ( products ) , and ( ( product characteristics ) satisfied that ( ( product id of club ) equal to ( product id of member of club ) ) ) , and ( ( characteristics ) satisfied that ( ( characteristic id of member of club ) equal to ( characteristic id of student ) ) ) ) , that have ( ( product name of club ) equal to ( sesame ) )",
    "SELECT founder FROM manufacturers WHERE name LIKE 'S%'": "( founder ) that belongs to ( manufacturers ) , that have ( ( name ) like ( 's%' ) )",
    "SELECT max(booked_count) ,  min(booked_count) ,  avg(booked_count) FROM products_booked": "( the maximum of ( booked count ) ) , ( the minimum of ( booked count ) ) , ( the average of ( booked count ) ) that belongs to ( products booked )",
    "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Paper' INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Patent'": "( project details of addresses ) that belongs to ( ( projects ) , and ( ( project outcomes ) satisfied that ( ( project id of addresses ) equal to ( project id of staff ) ) ) ) , that have ( ( outcome code of staff ) equal to ( 'paper' ) ), and intersect with ( ( project details of addresses ) that belongs to ( ( projects ) , and ( ( project outcomes ) satisfied that ( ( project id of addresses ) equal to ( project id of staff ) ) ) ) , that have ( ( outcome code of staff ) equal to ( 'patent' ) ))",
    "SELECT count(*) FROM scientists": "( the number of ( all items ) ) that belongs to ( scientists )",
    "SELECT count(*) FROM Draft_Copies WHERE document_id = 2;": "( the number of ( all items ) ) that belongs to ( draft copies ) , that have ( ( document id ) equal to ( 2 ) )",
    "SELECT country FROM stadium EXCEPT SELECT country FROM stadium WHERE opening_year  >  2006": "( country ) that belongs to ( stadium ), and except that ( ( country ) that belongs to ( stadium ) , that have ( ( opening year ) greater than ( 2006 ) ))",
    "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country HAVING COUNT(*)  >=  2": "( country ) , ( the number of ( all items ) ) that belongs to ( perpetrator ) , grouped by ( country ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT * FROM Student_Addresses ORDER BY monthly_rental DESC": "all items that belongs to ( student addresses ) , ordered by ( ( monthly rental ) in descending order )",
    "SELECT school_name FROM school ORDER BY school_name": "( school name ) that belongs to ( school ) , ordered by ( ( school name ) )",
    "SELECT Player_name ,  residence FROM player WHERE Occupation != \"Researcher\"": "( player name ) , ( residence ) that belongs to ( player ) , that have ( ( occupation ) not equal to ( researcher ) )",
    "SELECT DISTINCT Country FROM manager": "( distinct ( country ) ) that belongs to ( manager )",
    "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'": "( the number of ( all items ) ) that belongs to ( ( student ) , and ( ( lives in ) satisfied that ( ( stuid of addresses ) equal to ( stuid of staff ) ) ) , and ( ( dorm ) satisfied that ( ( dormid of enzyme ) equal to ( dormid of staff ) ) ) ) , that have ( ( ( dorm name of enzyme ) equal to ( 'smith hall' ) ) and ( ( sex of addresses ) equal to ( 'f' ) ) )",
    "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"": "( color description of member of club ) that belongs to ( ( products ) , and ( ( ref colors ) satisfied that ( ( color code of club ) equal to ( color code of member of club ) ) ) ) , that have ( ( product name of club ) equal to ( catnip ) )",
    "SELECT Builder ,  COUNT(*) FROM railway GROUP BY Builder": "( builder ) , ( the number of ( all items ) ) that belongs to ( railway ) , grouped by ( builder )",
    "SELECT avg(Injured) FROM perpetrator": "( the average of ( injured ) ) that belongs to ( perpetrator )",
    "SELECT Name FROM pilot ORDER BY Name ASC": "( name ) that belongs to ( pilot ) , ordered by ( ( name ) in ascending order )",
    "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id": "( customer id of addresses ) , ( customer first name of staff ) , ( customer last name of staff ) , ( the number of ( all items ) ) that belongs to ( ( accounts ) , and ( ( customers ) satisfied that ( ( customer id of addresses ) equal to ( customer id of staff ) ) ) ) , grouped by ( customer id of addresses )",
    "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)": "( the number of ( all items ) ) that belongs to ( artist ) , that have ( ( artistid ) not in ( ( ( artistid ) that belongs to ( album ) ) ) )",
    "SELECT max(Population) ,  min(Population) FROM county": "( the maximum of ( population ) ) , ( the minimum of ( population ) ) that belongs to ( county )",
    "SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE T1.first_name  =  'Elsa'": "( address of staff ) that belongs to ( ( staff ) , and ( ( address ) satisfied that ( ( address id of addresses ) equal to ( address id of staff ) ) ) ) , that have ( ( first name of addresses ) equal to ( 'elsa' ) )",
    "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"": "( name of staff ) that belongs to ( ( album ) , and ( ( artist ) satisfied that ( ( artistid of addresses ) equal to ( artistid of staff ) ) ) ) , that have ( ( title of addresses ) equal to ( balls to the wall ) )",
    "SELECT DISTINCT LOCATION FROM station": "( distinct ( location ) ) that belongs to ( station )",
    "SELECT Studio FROM film WHERE Director  =  \"Nicholas Meyer\" INTERSECT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"": "( studio ) that belongs to ( film ) , that have ( ( director ) equal to ( nicholas meyer ) ), and intersect with ( ( studio ) that belongs to ( film ) , that have ( ( director ) equal to ( walter hill ) ))",
    "SELECT Model_name ,  RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1;": "( model name ) , ( ram mib ) that belongs to ( chip model ) , ordered by ( ( ram mib ) in ascending order ) , limited to the top ( 1 )",
    "SELECT count(DISTINCT T2.camera_lens_id) FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.country  =  'Ethiopia'": "( the number of ( distinct ( camera lens id of staff ) ) ) that belongs to ( ( mountain ) , and ( ( photos ) satisfied that ( ( id of addresses ) equal to ( mountain id of staff ) ) ) ) , that have ( ( country of addresses ) equal to ( 'ethiopia' ) )"
}