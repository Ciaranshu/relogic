{
    "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made": "( name of people ) that belongs to ( ( people ) , and ( ( poker player ) satisfied that ( ( people id of people ) equal to ( people id of poker player ) ) ) ) , ordered by ( ( final table made of poker player ) )",
    "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)": "( airportname ) that belongs to ( airports ) , that have ( ( airportcode ) not in ( ( sourceairport ) that belongs to ( flights ) and ( destairport ) that belongs to ( flights ) ) )",
    "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"": "( the average of ( gnp ) ) , ( the sum of ( population ) ) that belongs to ( country ) , that have ( ( governmentform ) equal to ( us territory ) )",
    "SELECT count(DISTINCT Nationality) FROM conductor": "( the number of ( distinct ( nationality ) ) ) that belongs to ( conductor )",
    "SELECT template_id ,  version_number ,  template_type_code FROM Templates": "( template id ) , ( version number ) , ( template type code ) that belongs to ( templates )",
    "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1": "( money rank of poker player ) that belongs to ( ( people ) , and ( ( poker player ) satisfied that ( ( people id of people ) equal to ( people id of poker player ) ) ) ) , ordered by ( ( height of people ) in descending order ) , limited to the top ( 1 )",
    "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown": "( hometown ) , ( the number of ( all items ) ) that belongs to ( teacher ) , grouped by ( hometown )",
    "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000": "( name ) that belongs to ( city ) , that have ( ( population ) between ( 160000 ) and ( 900000 ) )",
    "SELECT count(*) FROM Paragraphs": "( the number of ( all items ) ) that belongs to ( paragraphs )",
    "SELECT avg(loser_age) ,  avg(winner_age) FROM matches": "( the average of ( loser age ) ) , ( the average of ( winner age ) ) that belongs to ( matches )",
    "SELECT Title FROM Cartoon ORDER BY title": "( title ) that belongs to ( cartoon ) , ordered by ( ( title ) )",
    "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;": "( countryname of people ) that belongs to ( ( countries ) , and ( ( continents ) satisfied that ( ( continent of people ) equal to ( contid of poker player ) ) ) , and ( ( car makers ) satisfied that ( ( countryid of people ) equal to ( country of car makers ) ) ) ) , that have ( ( continent of poker player ) equal to ( 'europe' ) ) , grouped by ( countryname of people ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 3 ) )",
    "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC": "( major record format ) that belongs to ( orchestra ) , grouped by ( major record format ) , ordered by ( ( the number of ( all items ) ) in ascending order )",
    "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"": "( the sum of ( population ) ) , ( the maximum of ( gnp ) ) that belongs to ( country ) , that have ( ( continent ) equal to ( asia ) )",
    "SELECT max(SHARE) , min(SHARE) FROM TV_series;": "( the maximum of ( share ) ) , ( the minimum of ( share ) ) that belongs to ( tv series )",
    "SELECT Name FROM teacher ORDER BY Age ASC": "( name ) that belongs to ( teacher ) , ordered by ( ( age ) in ascending order )",
    "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1": "( citizenship ) that belongs to ( singer ) , grouped by ( citizenship ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';": "( accelerate of people ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of people ) equal to ( makeid of poker player ) ) ) ) , that have ( ( make of poker player ) equal to ( 'amc hornet sportabout (sw)' ) )",
    "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id": "( date of treatment of people ) , ( first name of poker player ) that belongs to ( ( treatments ) , and ( ( professionals ) satisfied that ( ( professional id of people ) equal to ( professional id of poker player ) ) ) )",
    "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"": "( flightno of people ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( destairport of people ) equal to ( airportcode of poker player ) ) ) ) , that have ( ( city of poker player ) equal to ( aberdeen ) )",
    "SELECT Name FROM country WHERE IndepYear  >  1950": "( name ) that belongs to ( country ) , that have ( ( indepyear ) greater than ( 1950 ) )",
    "SELECT DISTINCT breed_code ,  size_code FROM dogs": "( distinct ( breed code ) ) , ( size code ) that belongs to ( dogs )",
    "SELECT min(Number_products) ,  max(Number_products) FROM shop": "( the minimum of ( number products ) ) , ( the maximum of ( number products ) ) that belongs to ( shop )",
    "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20": "( the number of ( all items ) ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of people ) equal to ( stuid of poker player ) ) ) ) , that have ( ( age of people ) greater than ( 20 ) )",
    "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000": "( name of people ) that belongs to ( ( people ) , and ( ( poker player ) satisfied that ( ( people id of people ) equal to ( people id of poker player ) ) ) ) , that have ( ( earnings of poker player ) greater than ( 300000 ) )",
    "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;": "( horsepower of people ) that belongs to ( ( cars data ) ) , ordered by ( ( accelerate of people ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM players": "( the number of ( all items ) ) that belongs to ( players )",
    "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"": "( abbreviation ) that belongs to ( airlines ) , that have ( ( airline ) equal to ( jetblue airways ) )",
    "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;": "( the average of ( horsepower ) ) that belongs to ( cars data ) , that have ( ( year ) less than ( 1980 ) )",
    "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1": "( id of poker player ) , ( name of poker player ) that belongs to ( ( death ) , and ( ( ship ) satisfied that ( ( caused by ship id of people ) equal to ( id of poker player ) ) ) ) , grouped by ( id of poker player ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( destairport of people ) equal to ( airportcode of poker player ) ) ) ) , that have ( ( city of poker player ) equal to ( aberdeen ) )",
    "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC": "( name ) , ( location ) , ( district ) that belongs to ( shop ) , ordered by ( ( number products ) in descending order )",
    "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1": "( the number of ( all items ) ) , ( student course id ) that belongs to ( transcript contents ) , grouped by ( student course id ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id": "( name of poker player ) , ( the number of ( all items ) ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( student id of people ) equal to ( id of poker player ) ) ) ) , grouped by ( student id of people )",
    "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id": "( name of poker player ) , ( the number of ( all items ) ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of people ) equal to ( id of poker player ) ) ) ) , grouped by ( student id of people )",
    "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'": "( first name of students ) that belongs to ( ( students ) , and ( ( addresses ) satisfied that ( ( permanent address id of students ) equal to ( address id of ship ) ) ) ) , that have ( ( ( country of ship ) equal to ( 'haiti' ) ) or ( ( cell mobile number of students ) equal to ( '09700166582' ) ) )",
    "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype": "( the average of ( weight ) ) , ( pettype ) that belongs to ( pets ) , grouped by ( pettype )",
    "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'": "( name of people ) , ( date of people ) that belongs to ( ( battle ) , and ( ( ship ) satisfied that ( ( id of people ) equal to ( lost in battle of poker player ) ) ) ) , that have ( ( name of poker player ) equal to ( 'lettice' ) ), and intersect with ( ( name of people ) , ( date of people ) that belongs to ( ( battle ) , and ( ( ship ) satisfied that ( ( id of people ) equal to ( lost in battle of poker player ) ) ) ) , that have ( ( name of poker player ) equal to ( 'hms atalanta' ) ))",
    "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014": "( name of poker player ) that belongs to ( ( singer in concert ) , and ( ( singer ) satisfied that ( ( singer id of people ) equal to ( singer id of poker player ) ) ) , and ( ( concert ) satisfied that ( ( concert id of people ) equal to ( concert id of car makers ) ) ) ) , that have ( ( year of car makers ) equal to ( 2014 ) )",
    "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid": "( distinct ( fname of people ) ) , ( age of people ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of people ) equal to ( stuid of poker player ) ) ) )",
    "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"": "( country ) that belongs to ( airlines ) , that have ( ( airline ) equal to ( jetblue airways ) )",
    "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';": "( the number of ( all items ) ) that belongs to ( ( car makers ) , and ( ( model list ) satisfied that ( ( id of people ) equal to ( maker of poker player ) ) ) ) , that have ( ( fullname of people ) equal to ( 'american motor company' ) )",
    "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1": "( fname of people ) , ( sex of people ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of people ) equal to ( stuid of poker player ) ) ) ) , grouped by ( stuid of people ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT count(*) FROM pets WHERE weight  >  10": "( the number of ( all items ) ) that belongs to ( pets ) , that have ( ( weight ) greater than ( 10 ) )",
    "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1": "( treatment type description of people ) that belongs to ( ( treatment types ) , and ( ( treatments ) satisfied that ( ( treatment type code of people ) equal to ( treatment type code of poker player ) ) ) ) , grouped by ( treatment type code of people ) , ordered by ( ( the sum of ( cost of treatment ) ) in ascending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );": "( the number of ( all items ) ) that belongs to ( battle ) , that have ( ( id ) not in ( ( lost in battle ) that belongs to ( ship ) , that have ( ( tonnage ) equal to ( '225' ) ) ) )",
    "SELECT name FROM Highschooler WHERE grade  =  10": "( name ) that belongs to ( highschooler ) , that have ( ( grade ) equal to ( 10 ) )",
    "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date": "( title ) , ( directed by ) that belongs to ( cartoon ) , ordered by ( ( original air date ) )",
    "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1": "( area code of people ) that belongs to ( ( area code state ) , and ( ( votes ) satisfied that ( ( state of people ) equal to ( state of poker player ) ) ) ) , grouped by ( area code of people ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship": "( citizenship ) , ( the maximum of ( net worth millions ) ) that belongs to ( singer ) , grouped by ( citizenship )",
    "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";": "( title ) that belongs to ( cartoon ) , that have ( ( directed by ) equal to ( ben jones ) )",
    "SELECT weight FROM pets ORDER BY pet_age LIMIT 1": "( weight ) that belongs to ( pets ) , ordered by ( ( pet age ) ) , limited to the top ( 1 )",
    "SELECT min(Version_Number) ,  template_type_code FROM Templates": "( the minimum of ( version number ) ) , ( template type code ) that belongs to ( templates )",
    "SELECT count(DISTINCT department_id) FROM Degree_Programs": "( the number of ( distinct ( department id ) ) ) that belongs to ( degree programs )",
    "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"": "( template type description ) that belongs to ( ref template types ) , that have ( ( template type code ) equal to ( ad ) )",
    "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";": "( title ) that belongs to ( cartoon ) , that have ( ( ( directed by ) equal to ( ben jones ) ) or ( ( directed by ) equal to ( brandon vietti ) ) )",
    "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id": "( student id ) , ( the number of ( all items ) ) that belongs to ( friend ) , grouped by ( student id )",
    "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID": "( distinct ( template type description of people ) ) that belongs to ( ( ref template types ) , and ( ( templates ) satisfied that ( ( template type code of people ) equal to ( template type code of poker player ) ) ) , and ( ( documents ) satisfied that ( ( template id of poker player ) equal to ( template id of car makers ) ) ) )",
    "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';": "( the average of ( edispl of poker player ) ) that belongs to ( ( car names ) , and ( ( cars data ) satisfied that ( ( makeid of people ) equal to ( id of poker player ) ) ) ) , that have ( ( model of people ) equal to ( 'volvo' ) )",
    "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)": "( name ) that belongs to ( shop ) , that have ( ( shop_id ) not in ( ( shop id ) that belongs to ( hiring ) ) )",
    "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;": "( country ) , ( the number of ( all items ) ) that belongs to ( tv channel ) , grouped by ( country ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id": "( template id ) , ( the number of ( all items ) ) that belongs to ( documents ) , grouped by ( template id )",
    "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id": "( name of poker player ) , ( the number of ( all items ) ) that belongs to ( ( concert ) , and ( ( stadium ) satisfied that ( ( stadium id of people ) equal to ( stadium id of poker player ) ) ) ) , grouped by ( stadium id of people )",
    "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)": "( orchestra ) that belongs to ( orchestra ) , that have ( ( orchestra_id ) not in ( ( orchestra id ) that belongs to ( performance ) ) )",
    "SELECT template_type_code ,  template_type_description FROM Ref_template_types": "( template type code ) , ( template type description ) that belongs to ( ref template types )",
    "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2": "( name of poker player ) that belongs to ( ( course arrange ) , and ( ( teacher ) satisfied that ( ( teacher id of people ) equal to ( teacher id of poker player ) ) ) ) , grouped by ( name of poker player ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1": "( contestant number of people ) , ( contestant name of people ) that belongs to ( ( contestants ) , and ( ( votes ) satisfied that ( ( contestant number of people ) equal to ( contestant number of poker player ) ) ) ) , grouped by ( contestant number of people ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( 1 )",
    "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955": "( citizenship ) that belongs to ( singer ) , that have ( ( birth year ) less than ( 1945 ) ), and intersect with ( ( citizenship ) that belongs to ( singer ) , that have ( ( birth year ) greater than ( 1955 ) ))",
    "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'": "( the average of ( age ) ) , ( the minimum of ( age ) ) , ( the maximum of ( age ) ) that belongs to ( singer ) , that have ( ( country ) equal to ( 'france' ) )",
    "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( destairport of people ) equal to ( airportcode of poker player ) ) ) , and ( ( airports ) satisfied that ( ( sourceairport of people ) equal to ( airportcode of car makers ) ) ) ) , that have ( ( ( city of poker player ) equal to ( ashley ) ) and ( ( city of car makers ) equal to ( aberdeen ) ) )",
    "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1": "( year of founded ) that belongs to ( ( orchestra ) , and ( ( performance ) satisfied that ( ( orchestra id of people ) equal to ( orchestra id of poker player ) ) ) ) , grouped by ( orchestra id of poker player ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10": "( tourney name ) that belongs to ( matches ) , grouped by ( tourney name ) , that have ( ( the number of ( all items ) ) greater than ( 10 ) )",
    "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company": "( record company ) , ( the number of ( all items ) ) that belongs to ( orchestra ) , grouped by ( record company )",
    "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality": "( nationality ) , ( the number of ( all items ) ) that belongs to ( people ) , grouped by ( nationality )",
    "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;": "( the number of ( all items ) ) that belongs to ( cars data ) , that have ( ( year ) equal to ( 1980 ) )",
    "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"": "( the number of ( all items ) ) that belongs to ( country ) , that have ( ( governmentform ) equal to ( republic ) )",
    "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name": "( the average of ( ranking ) ) , ( first name of people ) that belongs to ( ( players ) , and ( ( rankings ) satisfied that ( ( player id of people ) equal to ( player id of poker player ) ) ) ) , grouped by ( first name of people )",
    "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"": "( airline of people ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of people ) equal to ( airline of poker player ) ) ) ) , that have ( ( sourceairport of poker player ) equal to ( apg ) ), and intersect with ( ( airline of people ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of people ) equal to ( airline of poker player ) ) ) ) , that have ( ( sourceairport of poker player ) equal to ( cvo ) ))",
    "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1": "( abbreviation of people ) , ( country of people ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of people ) equal to ( airline of poker player ) ) ) ) , grouped by ( airline of people ) , ordered by ( ( the number of ( all items ) ) ) , limited to the top ( 1 )",
    "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;": "( language ) , ( the number of ( all items ) ) that belongs to ( tv channel ) , grouped by ( language ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( 1 )",
    "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode": "( countrycode ) , ( the maximum of ( percentage ) ) that belongs to ( countrylanguage ) , that have ( ( language ) equal to ( spanish ) ) , grouped by ( countrycode )",
    "SELECT Name FROM conductor ORDER BY Age ASC": "( name ) that belongs to ( conductor ) , ordered by ( ( age ) in ascending order )",
    "SELECT count(*) FROM teacher": "( the number of ( all items ) ) that belongs to ( teacher )",
    "SELECT count(DISTINCT professional_id) FROM Treatments": "( the number of ( distinct ( professional id ) ) ) that belongs to ( treatments )",
    "SELECT Maker ,  Model FROM MODEL_LIST;": "( maker ) , ( model ) that belongs to ( model list )",
    "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"": "( package option ) , ( series name ) that belongs to ( tv channel ) , that have ( ( hight definition tv ) equal to ( yes ) )",
    "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;": "( the average of ( mpg ) ) that belongs to ( cars data ) , that have ( ( cylinders ) equal to ( 4 ) )",
    "SELECT count(*) FROM CONTINENTS;": "( the number of ( all items ) ) that belongs to ( continents )",
    "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1": "( winner name ) that belongs to ( matches ) , that have ( ( tourney name ) equal to ( 'australian open' ) ) , ordered by ( ( winner rank points ) in descending order ) , limited to the top ( 1 )",
    "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2": "( document id ) that belongs to ( paragraphs ) , grouped by ( document id ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC": "( record company ) that belongs to ( orchestra ) , ordered by ( ( year of founded ) in descending order )",
    "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)": "( name ) that belongs to ( museum ) , that have ( ( museum_id ) not in ( ( museum id ) that belongs to ( visit ) ) )",
    "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID": "( title of poker player ) , ( name of people ) that belongs to ( ( singer ) , and ( ( song ) satisfied that ( ( singer id of people ) equal to ( singer id of poker player ) ) ) )",
    "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1": "( document id ) that belongs to ( paragraphs ) , grouped by ( document id ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( 1 )",
    "SELECT count(DISTINCT dog_id) FROM Treatments": "( the number of ( distinct ( dog id ) ) ) that belongs to ( treatments )",
    "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"": "( code ) that belongs to ( country ) , that have ( ( governmentform ) not equal to ( republic ) ), and except that ( ( countrycode ) that belongs to ( countrylanguage ) , that have ( ( language ) equal to ( english ) ))",
    "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code": "( cost of treatment of people ) , ( treatment type description of poker player ) that belongs to ( ( treatments ) , and ( ( treatment types ) satisfied that ( ( treatment type code of people ) equal to ( treatment type code of poker player ) ) ) )",
    "SELECT avg(transcript_date) FROM Transcripts": "( the average of ( transcript date ) ) that belongs to ( transcripts )",
    "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;": "( the number of ( all items ) ) that belongs to ( cars data ) , that have ( ( horsepower ) greater than ( 150 ) )",
    "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date": "( first name ) , ( last name ) that belongs to ( players ) , that have ( ( hand ) equal to ( 'l' ) ) , ordered by ( ( birth date ) )",
    "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1": "( degree summary name of people ) that belongs to ( ( degree programs ) , and ( ( student enrolment ) satisfied that ( ( degree program id of people ) equal to ( degree program id of poker player ) ) ) ) , grouped by ( degree summary name of people ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT Name FROM people WHERE Nationality != \"Russia\"": "( name ) that belongs to ( people ) , that have ( ( nationality ) not equal to ( russia ) )",
    "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1": "( name of people ) that belongs to ( ( conductor ) , and ( ( orchestra ) satisfied that ( ( conductor id of people ) equal to ( conductor id of poker player ) ) ) ) , grouped by ( conductor id of poker player ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2": "( the number of ( all items ) ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of students ) equal to ( country of ship ) ) ) ) , grouped by ( countryid of students ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )",
    "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1": "( language ) that belongs to ( countrylanguage ) , grouped by ( language ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT name ,  country ,  age FROM singer ORDER BY age DESC": "( name ) , ( country ) , ( age ) that belongs to ( singer ) , ordered by ( ( age ) in descending order )",
    "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;": "( model of people ) that belongs to ( ( car names ) , and ( ( cars data ) satisfied that ( ( makeid of people ) equal to ( id of poker player ) ) ) ) , that have ( ( cylinders of poker player ) equal to ( 4 ) ) , ordered by ( ( horsepower of poker player ) in descending order ) , limited to the top ( 1 )",
    "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"": "( name ) that belongs to ( country ) , that have ( ( ( continent ) equal to ( europe ) ) and ( ( population ) equal to ( 80000 ) ) )",
    "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'": "( the number of ( all items ) ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of people ) equal to ( stuid of poker player ) ) ) , and ( ( pets ) satisfied that ( ( petid of poker player ) equal to ( petid of car makers ) ) ) ) , that have ( ( ( sex of people ) equal to ( 'f' ) ) and ( ( pettype of car makers ) equal to ( 'dog' ) ) )",
    "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200": "( airline of people ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of people ) equal to ( airline of poker player ) ) ) ) , grouped by ( airline of people ) , that have ( ( the number of ( all items ) ) less than ( 200 ) )",
    "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'": "( pixel aspect ratio par ) , ( country ) that belongs to ( tv channel ) , that have ( ( language ) not equal to ( 'english' ) )",
    "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"": "( the number of ( all items ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of people ) equal to ( countrycode of poker player ) ) ) ) , that have ( ( ( name of people ) equal to ( afghanistan ) ) and ( ( isofficial ) equal to ( t ) ) )",
    "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code": "( distinct ( first name of people ) ) , ( treatment type description of car makers ) that belongs to ( ( professionals ) , and ( ( treatments ) satisfied that ( ( professional id of people ) equal to ( professional id of poker player ) ) ) , and ( ( treatment types ) satisfied that ( ( treatment type code of poker player ) equal to ( treatment type code of car makers ) ) ) )",
    "SELECT count(*) FROM Highschooler": "( the number of ( all items ) ) that belongs to ( highschooler )",
    "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"": "( continent ) that belongs to ( country ) , that have ( ( name ) equal to ( anguilla ) )",
    "SELECT other_student_details FROM Students ORDER BY other_student_details DESC": "( other student details ) that belongs to ( students ) , ordered by ( ( other student details ) in descending order )",
    "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode": "( the number of ( all items ) ) , ( the maximum of ( percentage ) ) that belongs to ( countrylanguage ) , that have ( ( language ) equal to ( spanish ) ) , grouped by ( countrycode )",
    "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1": "( name of ship ) , ( capacity of ship ) that belongs to ( ( concert ) , and ( ( stadium ) satisfied that ( ( stadium id of students ) equal to ( stadium id of ship ) ) ) ) , that have ( ( year of students ) greater than ( 2013 ) ) , grouped by ( stadium id of ship ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1": "( course name of people ) that belongs to ( ( courses ) , and ( ( student enrolment courses ) satisfied that ( ( course id of people ) equal to ( course id of poker player ) ) ) ) , grouped by ( course name of people ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';": "( the number of ( all items ) ) that belongs to ( ( model list ) , and ( ( car makers ) satisfied that ( ( maker of people ) equal to ( id of poker player ) ) ) , and ( ( countries ) satisfied that ( ( country of poker player ) equal to ( countryid of car makers ) ) ) ) , that have ( ( countryname of car makers ) equal to ( 'usa' ) )",
    "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by": "( the number of ( all items ) ) , ( directed by ) that belongs to ( cartoon ) , grouped by ( directed by )",
    "SELECT name FROM employee ORDER BY age": "( name ) that belongs to ( employee ) , ordered by ( ( age ) )",
    "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5": "( name ) , ( surfacearea ) that belongs to ( country ) , ordered by ( ( surfacearea ) in descending order ) , limited to the top ( 5 )",
    "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2": "( the number of ( language of poker player ) ) , ( name of people ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of people ) equal to ( countrycode of poker player ) ) ) ) , grouped by ( name of people ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )",
    "SELECT Name FROM country ORDER BY Population DESC LIMIT 3": "( name ) that belongs to ( country ) , ordered by ( ( population ) in descending order ) , limited to the top ( 3 )",
    "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"": "( the sum of ( surfacearea ) ) that belongs to ( country ) , that have ( ( region ) equal to ( caribbean ) )",
    "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id": "( name ) that belongs to ( highschooler ), and except that ( ( name of poker player ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of people ) equal to ( id of poker player ) ) ) ))",
    "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'": "( the number of ( distinct ( winner name ) ) ) that belongs to ( matches ) , that have ( ( ( tourney name ) equal to ( 'wta championships' ) ) and ( ( winner hand ) equal to ( 'l' ) ) )",
    "SELECT Age ,  Hometown FROM teacher": "( age ) , ( hometown ) that belongs to ( teacher )",
    "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'": "( department description ) that belongs to ( departments ) , that have ( ( department_name ) like ( '%computer%' ) )",
    "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'": "( petid of poker player ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of people ) equal to ( stuid of poker player ) ) ) ) , that have ( ( lname of people ) equal to ( 'smith' ) )",
    "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'": "( the number of ( all items ) ) that belongs to ( ( documents ) , and ( ( templates ) satisfied that ( ( template id of people ) equal to ( template id of poker player ) ) ) ) , that have ( ( template type code of poker player ) equal to ( 'ppt' ) )",
    "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1": "( city of people ) that belongs to ( ( airports ) , and ( ( flights ) satisfied that ( ( airportcode of people ) equal to ( sourceairport of poker player ) ) ) ) , grouped by ( city of people ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade": "( grade ) , ( the number of ( all items ) ) that belongs to ( highschooler ) , grouped by ( grade )",
    "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1": "( name ) , ( capacity ) that belongs to ( stadium ) , ordered by ( ( average ) in descending order ) , limited to the top ( 1 )",
    "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";": "( title of poker player ) that belongs to ( ( tv channel ) , and ( ( cartoon ) satisfied that ( ( id of people ) equal to ( channel of poker player ) ) ) ) , that have ( ( series name of people ) equal to ( sky radio ) )",
    "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'": "( num of staff ) , ( open year ) that belongs to ( museum ) , that have ( ( name ) equal to ( 'plaza museum' ) )",
    "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1": "( first name ) , ( middle name ) , ( last name ) that belongs to ( students ) , ordered by ( ( date left ) in ascending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;": "( the number of ( all items ) ) that belongs to ( cars data ) , that have ( ( cylinders ) greater than ( 4 ) )",
    "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1": "( owner id of people ) , ( last name of people ) that belongs to ( ( owners ) , and ( ( dogs ) satisfied that ( ( owner id of people ) equal to ( owner id of poker player ) ) ) , and ( ( treatments ) satisfied that ( ( dog id of poker player ) equal to ( dog id of car makers ) ) ) ) , grouped by ( owner id of people ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;": "( countryname of people ) , ( countryid of people ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of people ) equal to ( country of poker player ) ) ) ) , grouped by ( countryid of people ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 1 ) )",
    "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;": "( fullname of people ) , ( id of people ) that belongs to ( ( car makers ) , and ( ( model list ) satisfied that ( ( id of people ) equal to ( maker of poker player ) ) ) ) , grouped by ( id of people ) , that have ( ( the number of ( all items ) ) greater than ( 3 ) )",
    "select other_details from paragraphs where paragraph_text like 'korea'": "( other details ) that belongs to ( paragraphs ) , that have ( ( paragraph_text ) like ( 'korea' ) )",
    "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs": "( the number of ( distinct ( degree summary name ) ) ) that belongs to ( degree programs )",
    "SELECT count(*) FROM poker_player": "( the number of ( all items ) ) that belongs to ( poker player )",
    "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"": "( the number of ( distinct ( governmentform ) ) ) that belongs to ( country ) , that have ( ( continent ) equal to ( africa ) )",
    "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1": "( name ) , ( population ) , ( lifeexpectancy ) that belongs to ( country ) , that have ( ( continent ) equal to ( asia ) ) , ordered by ( ( surfacearea ) in descending order ) , limited to the top ( 1 )",
    "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1": "( name of students ) that belongs to ( ( employee ) , and ( ( evaluation ) satisfied that ( ( employee id of students ) equal to ( employee id of ship ) ) ) ) , grouped by ( employee id of ship ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(DISTINCT pettype) FROM pets": "( the number of ( distinct ( pettype ) ) ) that belongs to ( pets )",
    "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'": "( id ) that belongs to ( tv channel ), and except that ( ( channel ) that belongs to ( cartoon ) , that have ( ( directed by ) equal to ( 'ben jones' ) ))",
    "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1": "( city of people ) that belongs to ( ( airports ) , and ( ( flights ) satisfied that ( ( airportcode of people ) equal to ( destairport of poker player ) ) ) ) , grouped by ( city of people ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT avg(Attendance) FROM SHOW": "( the average of ( attendance ) ) that belongs to ( show )",
    "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')": "( major ) , ( age ) that belongs to ( student ) , that have ( ( stuid ) not in ( ( stuid of people ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of people ) equal to ( stuid of poker player ) ) ) , and ( ( pets ) satisfied that ( ( petid of car makers ) equal to ( petid of poker player ) ) ) ) , that have ( ( pettype of car makers ) equal to ( 'cat' ) ) ) )",
    "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016": "( the number of ( all items ) ) that belongs to ( matches ) , that have ( ( ( year ) equal to ( 2013 ) ) or ( ( year ) equal to ( 2016 ) ) )",
    "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"": "( name of car makers ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of people ) equal to ( id of poker player ) ) ) , and ( ( highschooler ) satisfied that ( ( friend id of people ) equal to ( id of car makers ) ) ) ) , that have ( ( name of poker player ) equal to ( kyle ) )",
    "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'": "( country of people ) that belongs to ( ( tv channel ) , and ( ( cartoon ) satisfied that ( ( id of people ) equal to ( channel of poker player ) ) ) ) , that have ( ( written by of poker player ) equal to ( 'todd casey' ) )",
    "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)": "( the average of ( grade ) ) that belongs to ( highschooler ) , that have ( ( id ) in ( ( student id of people ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of people ) equal to ( id of poker player ) ) ) ) ) )",
    "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1": "( name ) that belongs to ( conductor ) , ordered by ( ( year of work ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'": "( the number of ( all items ) ) that belongs to ( ( departments ) , and ( ( degree programs ) satisfied that ( ( department id of people ) equal to ( department id of poker player ) ) ) ) , that have ( ( department name of people ) equal to ( 'engineer' ) )",
    "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')": "( fname of people ) , ( age of people ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of people ) equal to ( stuid of poker player ) ) ) , and ( ( pets ) satisfied that ( ( petid of car makers ) equal to ( petid of poker player ) ) ) ) , that have ( ( ( pettype of car makers ) equal to ( 'dog' ) ) and ( ( t1.stuid ) not in ( ( stuid of people ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of people ) equal to ( stuid of poker player ) ) ) , and ( ( pets ) satisfied that ( ( petid of car makers ) equal to ( petid of poker player ) ) ) ) , that have ( ( pettype of car makers ) equal to ( 'cat' ) ) ) ) )",
    "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype": "( the average of ( pet age ) ) , ( the maximum of ( pet age ) ) , ( pettype ) that belongs to ( pets ) , grouped by ( pettype )",
    "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;": "( distinct ( model of people ) ) that belongs to ( ( model list ) , and ( ( car names ) satisfied that ( ( model of people ) equal to ( model of poker player ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of poker player ) equal to ( id of car makers ) ) ) ) , that have ( ( year of car makers ) greater than ( 1980 ) )",
    "select avg(horsepower) from cars_data where year  <  1980;": "( the average of ( horsepower ) ) that belongs to ( cars data ) , that have ( ( year ) less than ( 1980 ) )",
    "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id": "( last name of people ) that belongs to ( ( students ) , and ( ( addresses ) satisfied that ( ( current address id of people ) equal to ( address id of poker player ) ) ) ) , that have ( ( state province county of poker player ) equal to ( 'northcarolina' ) ), and except that ( ( distinct ( last name of car makers ) ) that belongs to ( ( students ) , and ( ( student enrolment ) satisfied that ( ( student id of car makers ) equal to ( student id of student enrolment ) ) ) ))",
    "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")": "( the number of ( all items ) ) that belongs to ( \"l ( name of people ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of people ) equal to ( countrycode of poker player ) ) ) ) , that have ( ( language of poker player ) equal to ( english ) ), and intersect with ( ( name of people ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of people ) equal to ( countrycode of poker player ) ) ) ) , that have ( ( language of poker player ) equal to ( dutch ) )) r\" )",
    "SELECT count(DISTINCT template_id) FROM Documents": "( the number of ( distinct ( template id ) ) ) that belongs to ( documents )",
    "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'": "( distinct ( first name of people ) ) , ( middle name of people ) , ( last name of people ) that belongs to ( ( students ) , and ( ( student enrolment ) satisfied that ( ( student id of people ) equal to ( student id of poker player ) ) ) , and ( ( degree programs ) satisfied that ( ( degree program id of poker player ) equal to ( degree program id of car makers ) ) ) ) , that have ( ( degree summary name of car makers ) equal to ( 'bachelor' ) )",
    "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';": "( countryid of students ) , ( countryname of students ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of students ) equal to ( country of ship ) ) ) ) , grouped by ( countryid of students ) , that have ( ( the number of ( all items ) ) greater than ( 3 ) ) and ( countryid of students ) , ( countryname of students ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of students ) equal to ( country of ship ) ) ) , and ( ( model list ) satisfied that ( ( id of ship ) equal to ( maker of model list ) ) ) ) , that have ( ( model of model list ) equal to ( 'fiat' ) )",
    "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'": "( killed of people ) , ( injured of people ) that belongs to ( ( death ) , and ( ( ship ) satisfied that ( ( caused by ship id of people ) equal to ( id of poker player ) ) ) ) , that have ( ( tonnage of poker player ) equal to ( 't' ) )",
    "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airlines ) satisfied that ( ( airline of people ) equal to ( uid of poker player ) ) ) ) , that have ( ( airline of poker player ) equal to ( jetblue airways ) )",
    "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2": "( professional id of people ) , ( cell number of people ) that belongs to ( ( professionals ) , and ( ( treatments ) satisfied that ( ( professional id of people ) equal to ( professional id of poker player ) ) ) ) , grouped by ( professional id of people ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3": "( name of poker player ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of people ) equal to ( id of poker player ) ) ) ) , grouped by ( student id of people ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 3 ) )",
    "select avg(age) from student where stuid not in (select stuid from has_pet)": "( the average of ( age ) ) that belongs to ( student ) , that have ( ( stuid ) not in ( ( ( stuid ) that belongs to ( has pet ) ) ) )",
    "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'": "( role code ) , ( street ) , ( city ) , ( state ) that belongs to ( professionals ) , that have ( ( city ) like ( '%west%' ) )",
    "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE": "( language ) , ( the number of ( all items ) ) that belongs to ( tv channel ) , grouped by ( language )",
    "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID": "( name of car makers ) , ( course of poker player ) that belongs to ( ( course arrange ) , and ( ( course ) satisfied that ( ( course id of people ) equal to ( course id of poker player ) ) ) , and ( ( teacher ) satisfied that ( ( teacher id of people ) equal to ( teacher id of car makers ) ) ) )",
    "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1": "( name ) , ( population ) , ( headofstate ) that belongs to ( country ) , ordered by ( ( surfacearea ) in descending order ) , limited to the top ( 1 )",
    "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)": "( name ) that belongs to ( singer ) , that have ( ( singer_id ) not in ( ( singer id ) that belongs to ( song ) ) )",
    "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1": "( name ) that belongs to ( singer ) , ordered by ( ( net worth millions ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1": "( template id of people ) , ( template type code of poker player ) that belongs to ( ( documents ) , and ( ( templates ) satisfied that ( ( template id of people ) equal to ( template id of poker player ) ) ) ) , grouped by ( template id of people ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT min(loser_rank) FROM matches": "( the minimum of ( loser rank ) ) that belongs to ( matches )",
    "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"": "( the number of ( all items ) ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( airline of poker player ) equal to ( uid of people ) ) ) ) , that have ( ( ( airline of people ) equal to ( united airlines ) ) and ( ( sourceairport of poker player ) equal to ( ahd ) ) )",
    "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1": "( name of ship ) that belongs to ( ( hiring ) , and ( ( shop ) satisfied that ( ( shop id of students ) equal to ( shop id of ship ) ) ) ) , grouped by ( shop id of students ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"": "( the number of ( distinct ( language of poker player ) ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of people ) equal to ( countrycode of poker player ) ) ) ) , that have ( ( ( indepyear ) less than ( 1930 ) ) and ( ( isofficial of poker player ) equal to ( t ) ) )",
    "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949": "( name ) that belongs to ( singer ) , that have ( ( ( birth year ) equal to ( 1948 ) ) or ( ( birth year ) equal to ( 1949 ) ) )",
    "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'": "( country ) that belongs to ( tv channel ), and except that ( ( country of people ) that belongs to ( ( tv channel ) , and ( ( cartoon ) satisfied that ( ( id of people ) equal to ( channel of poker player ) ) ) ) , that have ( ( written by of poker player ) equal to ( 'todd casey' ) ))",
    "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( destairport of people ) equal to ( airportcode of poker player ) ) ) ) , that have ( ( ( city of poker player ) equal to ( aberdeen ) ) or ( ( city of poker player ) equal to ( abilene ) ) )",
    "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );": "( the number of ( all items ) ) that belongs to ( cars data ) , that have ( ( accelerate ) greater than ( accelerate ) that belongs to ( cars data ) , ordered by ( ( horsepower ) in descending order ) , limited to the top ( 1 ) )",
    "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)": "( name ) that belongs to ( teacher ) , that have ( ( teacher_id ) not in ( ( teacher id ) that belongs to ( course arrange ) ) )",
    "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"": "( distinct ( region of people ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of people ) equal to ( countrycode of poker player ) ) ) ) , that have ( ( ( language of poker player ) equal to ( english ) ) or ( ( language of poker player ) equal to ( dutch ) ) )",
    "SELECT count(*) ,  hand FROM players GROUP BY hand": "( the number of ( all items ) ) , ( hand ) that belongs to ( players ) , grouped by ( hand )",
    "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)": "( model of people ) that belongs to ( ( car names ) , and ( ( cars data ) satisfied that ( ( makeid of people ) equal to ( id of poker player ) ) ) ) , that have ( ( weight of poker player ) less than ( the average of ( weight ) ) that belongs to ( cars data ) )",
    "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;": "( distinct ( model of poker player ) ) that belongs to ( ( car names ) , and ( ( model list ) satisfied that ( ( model of people ) equal to ( model of poker player ) ) ) , and ( ( car makers ) satisfied that ( ( maker of poker player ) equal to ( id of car makers ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of people ) equal to ( id of student enrolment ) ) ) ) , that have ( ( ( fullname of car makers ) equal to ( 'general motors' ) ) or ( ( weight of student enrolment ) greater than ( 3500 ) ) )",
    "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"": "( city ) , ( country ) that belongs to ( airports ) , that have ( ( airportname ) equal to ( alton ) )",
    "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;": "( the number of ( all items ) ) , ( fullname of ship ) that belongs to ( ( model list ) , and ( ( car makers ) satisfied that ( ( maker of students ) equal to ( id of ship ) ) ) ) , grouped by ( id of ship )",
    "SELECT max(area_code) ,  min(area_code) FROM area_code_state": "( the maximum of ( area code ) ) , ( the minimum of ( area code ) ) that belongs to ( area code state )",
    "SELECT date_arrived ,  date_departed FROM Dogs": "( date arrived ) , ( date departed ) that belongs to ( dogs )",
    "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2": "( contestant number of people ) , ( contestant name of people ) that belongs to ( ( contestants ) , and ( ( votes ) satisfied that ( ( contestant number of people ) equal to ( contestant number of poker player ) ) ) ) , grouped by ( contestant number of people ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID": "( name of people ) , ( orchestra of poker player ) that belongs to ( ( conductor ) , and ( ( orchestra ) satisfied that ( ( conductor id of people ) equal to ( conductor id of poker player ) ) ) )",
    "select citizenship from singer group by citizenship order by count(*) desc limit 1": "( citizenship ) that belongs to ( singer ) , grouped by ( citizenship ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1": "( name of people ) , ( population of people ) that belongs to ( ( city ) , and ( ( countrylanguage ) satisfied that ( ( countrycode of people ) equal to ( countrycode of poker player ) ) ) ) , that have ( ( language of poker player ) equal to ( english ) ) , ordered by ( ( population of people ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;": "( the number of ( distinct ( series name ) ) ) , ( the number of ( distinct ( content ) ) ) that belongs to ( tv channel )",
    "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"": "( the number of ( all items ) ) that belongs to ( airlines ) , that have ( ( country ) equal to ( usa ) )",
    "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);": "( make of poker player ) , ( year of people ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of people ) equal to ( makeid of poker player ) ) ) ) , that have ( ( year of people ) equal to ( the minimum of ( year ) ) that belongs to ( cars data ) )",
    "SELECT document_id ,  document_name ,  document_description FROM Documents": "( document id ) , ( document name ) , ( document description ) that belongs to ( documents )",
    "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"": "( template id ) that belongs to ( templates ) , that have ( ( ( template type code ) equal to ( pp ) ) or ( ( template type code ) equal to ( ppt ) ) )",
    "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1": "( owner id of people ) , ( zip code of people ) that belongs to ( ( owners ) , and ( ( dogs ) satisfied that ( ( owner id of people ) equal to ( owner id of poker player ) ) ) , and ( ( treatments ) satisfied that ( ( dog id of poker player ) equal to ( dog id of car makers ) ) ) ) , grouped by ( owner id of people ) , ordered by ( ( the sum of ( cost of treatment of car makers ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM COUNTRIES;": "( the number of ( all items ) ) that belongs to ( countries )",
    "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'": "( the number of ( all items ) ) that belongs to ( ( paragraphs ) , and ( ( documents ) satisfied that ( ( document id of people ) equal to ( document id of poker player ) ) ) ) , that have ( ( document name of poker player ) equal to ( 'summer show' ) )",
    "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1": "( template type code of people ) that belongs to ( ( templates ) , and ( ( documents ) satisfied that ( ( template id of people ) equal to ( template id of poker player ) ) ) ) , grouped by ( template type code of people ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM singer": "( the number of ( all items ) ) that belongs to ( singer )",
    "select count(*) from dogs where dog_id not in ( select dog_id from treatments )": "( the number of ( all items ) ) that belongs to ( dogs ) , that have ( ( dog_id ) not in ( ( ( dog id ) that belongs to ( treatments ) ) ) )",
    "select avg(capacity) ,  max(capacity) from stadium": "( the average of ( capacity ) ) , ( the maximum of ( capacity ) ) that belongs to ( stadium )",
    "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1": "( nationality ) that belongs to ( people ) , grouped by ( nationality ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1": "( money rank ) that belongs to ( poker player ) , ordered by ( ( earnings ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1": "( airline of people ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of people ) equal to ( airline of poker player ) ) ) ) , grouped by ( airline of people ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"": "( airline of people ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of people ) equal to ( airline of poker player ) ) ) ) , that have ( ( sourceairport of poker player ) equal to ( cvo ) ), and except that ( ( airline of people ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of people ) equal to ( airline of poker player ) ) ) ) , that have ( ( sourceairport of poker player ) equal to ( apg ) ))",
    "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id": "( first name of people ) , ( last name of people ) , ( size code of poker player ) that belongs to ( ( owners ) , and ( ( dogs ) satisfied that ( ( owner id of people ) equal to ( owner id of poker player ) ) ) )",
    "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008": "( the number of ( all items ) ) that belongs to ( museum ) , that have ( ( ( open year ) greater than ( 2013 ) ) or ( ( open year ) less than ( 2008 ) ) )",
    "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION": "( the number of ( all items ) ) , ( location ) that belongs to ( shop ) , grouped by ( location )",
    "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"": "( the sum of ( surfacearea ) ) that belongs to ( country ) , that have ( ( ( continent ) equal to ( asia ) ) or ( ( continent ) equal to ( europe ) ) )",
    "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4": "( the average of ( age ) ) that belongs to ( visitor ) , that have ( ( level of membership ) less than or equal to ( 4 ) )",
    "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";": "( air date ) that belongs to ( tv series ) , that have ( ( episode ) equal to ( a love of a lifetime ) )",
    "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'": "( distinct ( semester id of poker player ) ) that belongs to ( ( degree programs ) , and ( ( student enrolment ) satisfied that ( ( degree program id of people ) equal to ( degree program id of poker player ) ) ) ) , that have ( ( degree summary name ) equal to ( 'master' ) ), and intersect with ( ( distinct ( semester id of poker player ) ) that belongs to ( ( degree programs ) , and ( ( student enrolment ) satisfied that ( ( degree program id of people ) equal to ( degree program id of poker player ) ) ) ) , that have ( ( degree summary name ) equal to ( 'bachelor' ) ))",
    "SELECT avg(age) FROM Dogs": "( the average of ( age ) ) that belongs to ( dogs )",
    "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"": "( flightno ) that belongs to ( flights ) , that have ( ( destairport ) equal to ( apg ) )",
    "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date": "( the sum of ( tours ) ) , ( ranking date ) that belongs to ( rankings ) , grouped by ( ranking date )",
    "SELECT max(weight) ,  petType FROM pets GROUP BY petType": "( the maximum of ( weight ) ) , ( pettype ) that belongs to ( pets ) , grouped by ( pettype )",
    "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name": "( name of car makers ) , ( course of poker player ) that belongs to ( ( course arrange ) , and ( ( course ) satisfied that ( ( course id of people ) equal to ( course id of poker player ) ) ) , and ( ( teacher ) satisfied that ( ( teacher id of people ) equal to ( teacher id of car makers ) ) ) ) , ordered by ( ( name of car makers ) )",
    "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)": "( the number of ( all items ) ) that belongs to ( concert ) , that have ( ( stadium id ) equal to ( ( ( stadium id ) that belongs to ( stadium ) , ordered by ( ( capacity ) in descending order ) , limited to the top ( 1 ) ) ) )",
    "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'": "( document id ) that belongs to ( paragraphs ) , that have ( ( paragraph text ) equal to ( 'brazil' ) ), and intersect with ( ( document id ) that belongs to ( paragraphs ) , that have ( ( paragraph text ) equal to ( 'ireland' ) ))",
    "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID": "( name of people ) that belongs to ( ( people ) , and ( ( poker player ) satisfied that ( ( people id of people ) equal to ( people id of poker player ) ) ) )",
    "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)": "( song name ) that belongs to ( singer ) , that have ( ( age ) greater than ( the average of ( age ) ) that belongs to ( singer ) )",
    "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"": "( template type code ) that belongs to ( ref template types ) , that have ( ( template type description ) equal to ( book ) )",
    "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"": "( the average of ( lifeexpectancy ) ) that belongs to ( country ) , that have ( ( ( continent ) equal to ( africa ) ) and ( ( governmentform ) equal to ( republic ) ) )",
    "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1": "( winner name ) , ( winner rank points ) that belongs to ( matches ) , grouped by ( winner name ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2": "( transcript date of poker player ) , ( transcript id of people ) that belongs to ( ( transcript contents ) , and ( ( transcripts ) satisfied that ( ( transcript id of people ) equal to ( transcript id of poker player ) ) ) ) , grouped by ( transcript id of people ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72": "( the sum of ( population ) ) , ( governmentform ) that belongs to ( country ) , grouped by ( governmentform ) , that have ( ( the average of ( lifeexpectancy ) ) greater than ( 72 ) )",
    "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1": "( language of poker player ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of people ) equal to ( countrycode of poker player ) ) ) ) , that have ( ( governmentform of people ) equal to ( republic ) ) , grouped by ( language of poker player ) , that have ( ( the number of ( all items ) ) equal to ( 1 ) )",
    "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"": "( the number of ( language of poker player ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of people ) equal to ( countrycode of poker player ) ) ) ) , that have ( ( name of people ) equal to ( aruba ) )",
    "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2": "( professional id ) , ( last name ) , ( cell number ) that belongs to ( professionals ) , that have ( ( state ) equal to ( 'indiana' ) ) and ( professional id of people ) , ( last name of people ) , ( cell number of people ) that belongs to ( ( professionals ) , and ( ( treatments ) satisfied that ( ( professional id of people ) equal to ( professional id of poker player ) ) ) ) , grouped by ( professional id of people ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )",
    "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"": "( airline of people ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of people ) equal to ( airline of poker player ) ) ) ) , that have ( ( destairport of poker player ) equal to ( ahd ) )",
    "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id": "( name of poker player ) , ( the number of ( all items ) ) that belongs to ( ( singer in concert ) , and ( ( singer ) satisfied that ( ( singer id of people ) equal to ( singer id of poker player ) ) ) ) , grouped by ( singer id of poker player )",
    "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1": "( transcript date ) that belongs to ( transcripts ) , ordered by ( ( transcript date ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM AIRLINES": "( the number of ( all items ) ) that belongs to ( airlines )",
    "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1": "( airportcode of people ) that belongs to ( ( airports ) , and ( ( flights ) satisfied that ( ( ( airportcode of people ) equal to ( destairport of poker player ) ) or ( ( airportcode of people ) equal to ( sourceairport of poker player ) ) ) ) ) , grouped by ( airportcode of people ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1": "( language of poker player ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of people ) equal to ( countrycode of poker player ) ) ) ) , that have ( ( name of people ) equal to ( aruba ) ) , ordered by ( ( percentage ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";": "( series name of people ) that belongs to ( ( tv channel ) , and ( ( cartoon ) satisfied that ( ( id of people ) equal to ( channel of poker player ) ) ) ) , that have ( ( title of poker player ) equal to ( the rise of the blue beetle! ) )",
    "SELECT section_description FROM Sections WHERE section_name  =  'h'": "( section description ) that belongs to ( sections ) , that have ( ( section name ) equal to ( 'h' ) )",
    "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'": "( first name ) , ( last name ) , ( email address ) that belongs to ( owners ) , that have ( ( state ) like ( '%north%' ) )",
    "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1": "( manager name ) , ( district ) that belongs to ( shop ) , ordered by ( ( number products ) in descending order ) , limited to the top ( 1 )",
    "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )": "( distinct ( first name of people ) ) , ( last name of people ) that belongs to ( ( professionals ) join ( ( treatments ) ) ) , that have ( ( cost of treatment ) less than ( the average of ( cost of treatment ) ) that belongs to ( treatments ) )",
    "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1": "( museum id ) , ( name ) that belongs to ( museum ) , ordered by ( ( num of staff ) in descending order ) , limited to the top ( 1 )",
    "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30": "( country ) that belongs to ( singer ) , that have ( ( age ) greater than ( 40 ) ), and intersect with ( ( country ) that belongs to ( singer ) , that have ( ( age ) less than ( 30 ) ))",
    "SELECT count(DISTINCT RESULT) FROM battle": "( the number of ( distinct ( result ) ) ) that belongs to ( battle )",
    "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id": "( first name ) that belongs to ( students ) , that have ( ( current address id ) not equal to ( permanent address id ) )",
    "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1": "( address id of people ) , ( line 1 of people ) , ( line 2 of people ) that belongs to ( ( addresses ) , and ( ( students ) satisfied that ( ( address id of people ) equal to ( current address id of poker player ) ) ) ) , grouped by ( address id of people ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend": "( id ) that belongs to ( highschooler ), and except that ( ( student id ) that belongs to ( friend ))",
    "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes": "( student id ) that belongs to ( friend ), and intersect with ( ( liked id ) that belongs to ( likes ))",
    "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003": "( record company ) that belongs to ( orchestra ) , that have ( ( year of founded ) less than ( 2003 ) ), and intersect with ( ( record company ) that belongs to ( orchestra ) , that have ( ( year of founded ) greater than ( 2003 ) ))",
    "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";": "( series name of people ) that belongs to ( ( tv channel ) , and ( ( tv series ) satisfied that ( ( id of people ) equal to ( channel of poker player ) ) ) ) , that have ( ( episode of poker player ) equal to ( a love of a lifetime ) )",
    "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";": "( content ) that belongs to ( tv channel ) , that have ( ( series name ) equal to ( sky radio ) )",
    "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id": "( first name of people ) , ( name of poker player ) that belongs to ( ( owners ) , and ( ( dogs ) satisfied that ( ( owner id of people ) equal to ( owner id of poker player ) ) ) )",
    "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"": "( the number of ( all items ) ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of people ) equal to ( id of poker player ) ) ) ) , that have ( ( name of poker player ) equal to ( kyle ) )",
    "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1": "( cost of treatment ) that belongs to ( treatments ) , ordered by ( ( date of treatment ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1": "( birth date of people ) that belongs to ( ( people ) , and ( ( poker player ) satisfied that ( ( people id of people ) equal to ( people id of poker player ) ) ) ) , ordered by ( ( earnings of poker player ) in ascending order ) , limited to the top ( 1 )",
    "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'": "( paragraph id of people ) , ( paragraph text of people ) that belongs to ( ( paragraphs ) , and ( ( documents ) satisfied that ( ( document id of people ) equal to ( document id of poker player ) ) ) ) , that have ( ( document name of poker player ) equal to ( 'welcome to ny' ) )",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)": "( name ) that belongs to ( stadium ) , that have ( ( stadium_id ) not in ( ( stadium id ) that belongs to ( concert ) ) )",
    "SELECT count(*) FROM visitor WHERE age  <  30": "( the number of ( all items ) ) that belongs to ( visitor ) , that have ( ( age ) less than ( 30 ) )",
    "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1": "( continent of people ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of people ) equal to ( countrycode of poker player ) ) ) ) , grouped by ( continent of people ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT max(charge_amount) FROM Charges": "( the maximum of ( charge amount ) ) that belongs to ( charges )",
    "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2": "( nationality ) that belongs to ( people ) , grouped by ( nationality ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";": "( episode of poker player ) that belongs to ( ( tv channel ) , and ( ( tv series ) satisfied that ( ( id of people ) equal to ( channel of poker player ) ) ) ) , that have ( ( series name of people ) equal to ( sky radio ) )",
    "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;": "( the maximum of ( accelerate ) ) , ( cylinders ) that belongs to ( cars data ) , grouped by ( cylinders )",
    "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2": "( professional id of people ) , ( role code of people ) , ( first name of people ) that belongs to ( ( professionals ) , and ( ( treatments ) satisfied that ( ( professional id of people ) equal to ( professional id of poker player ) ) ) ) , grouped by ( professional id of people ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980": "( the maximum of ( mpg ) ) that belongs to ( cars data ) , that have ( ( ( cylinders ) equal to ( 8 ) ) or ( ( year ) less than ( 1980 ) ) )",
    "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1": "( owner id of people ) , ( first name of poker player ) , ( last name of poker player ) that belongs to ( ( dogs ) , and ( ( owners ) satisfied that ( ( owner id of people ) equal to ( owner id of poker player ) ) ) ) , grouped by ( owner id of people ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id": "( distinct ( course name of people ) ) that belongs to ( ( courses ) , and ( ( student enrolment courses ) satisfied that ( ( course id of people ) equal to ( course id of poker player ) ) ) )",
    "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)": "( the minimum of ( grade ) ) that belongs to ( highschooler ) , that have ( ( id ) not in ( ( student id of people ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of people ) equal to ( id of poker player ) ) ) ) ) )",
    "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'": "( the number of ( all items ) ) that belongs to ( ship ) , that have ( ( disposition of ship ) equal to ( 'captured' ) )",
    "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"": "( the number of ( distinct ( continent ) ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of people ) equal to ( countrycode of poker player ) ) ) ) , that have ( ( language of poker player ) equal to ( chinese ) )",
    "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"": "( template type code of people ) that belongs to ( ( templates ) , and ( ( documents ) satisfied that ( ( template id of people ) equal to ( template id of poker player ) ) ) ) , that have ( ( document name of poker player ) equal to ( data base ) )",
    "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200": "( the average of ( earnings of poker player ) ) that belongs to ( ( people ) , and ( ( poker player ) satisfied that ( ( people id of people ) equal to ( people id of poker player ) ) ) ) , that have ( ( height of people ) greater than ( 200 ) )",
    "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"": "( the number of ( all items ) ) that belongs to ( orchestra ) , that have ( ( ( major record format ) equal to ( cd ) ) or ( ( major record format ) equal to ( dvd ) ) )",
    "SELECT petid ,  weight FROM pets WHERE pet_age  >  1": "( petid ) , ( weight ) that belongs to ( pets ) , that have ( ( pet age ) greater than ( 1 ) )",
    "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"": "( name of people ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of people ) equal to ( countrycode of poker player ) ) ) ) , that have ( ( ( language of poker player ) equal to ( english ) ) and ( ( isofficial of poker player ) equal to ( t ) ) ), and intersect with ( ( name of people ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of people ) equal to ( countrycode of poker player ) ) ) ) , that have ( ( ( language of poker player ) equal to ( french ) ) and ( ( isofficial of poker player ) equal to ( t ) ) ))",
    "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1": "( airportcode of people ) that belongs to ( ( airports ) , and ( ( flights ) satisfied that ( ( ( airportcode of people ) equal to ( destairport of poker player ) ) or ( ( airportcode of people ) equal to ( sourceairport of poker player ) ) ) ) ) , grouped by ( airportcode of people ) , ordered by ( ( the number of ( all items ) ) ) , limited to the top ( 1 )",
    "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")": "( name ) that belongs to ( country ) , that have ( ( surfacearea ) greater than ( the minimum of ( surfacearea ) ) that belongs to ( country ) , that have ( ( continent ) equal to ( europe ) ) )",
    "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id": "( template type code ) that belongs to ( templates ), and except that ( ( template type code ) that belongs to ( ( templates ) , and ( ( documents ) satisfied that ( ( template id of people ) equal to ( template id of poker player ) ) ) ))",
    "SELECT max(created) FROM votes WHERE state  =  'CA'": "( the maximum of ( created ) ) that belongs to ( votes ) , that have ( ( state ) equal to ( 'ca' ) )",
    "SELECT email_address ,  cell_number ,  home_phone FROM professionals": "( email address ) , ( cell number ) , ( home phone ) that belongs to ( professionals )",
    "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')": "( package option ) that belongs to ( tv channel ) , that have ( ( id ) not in ( ( channel ) that belongs to ( cartoon ) , that have ( ( directed by ) equal to ( 'ben jones' ) ) ) )",
    "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id": "( distinct ( date arrived of people ) ) , ( date departed of people ) that belongs to ( ( dogs ) , and ( ( treatments ) satisfied that ( ( dog id of people ) equal to ( dog id of poker player ) ) ) )",
    "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2": "( course name of people ) , ( course id of people ) that belongs to ( ( courses ) , and ( ( sections ) satisfied that ( ( course id of people ) equal to ( course id of poker player ) ) ) ) , grouped by ( course id of people ) , that have ( ( the number of ( all items ) ) less than or equal to ( 2 ) )",
    "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"": "( the number of ( all items ) ) that belongs to ( flights ) , that have ( ( destairport ) equal to ( ato ) )",
    "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016": "( winner name ) that belongs to ( matches ) , that have ( ( year ) equal to ( 2013 ) ), and intersect with ( ( winner name ) that belongs to ( matches ) , that have ( ( year ) equal to ( 2016 ) ))",
    "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"": "( document name ) , ( template id ) that belongs to ( documents ) , that have ( ( document_description ) like ( %w% ) )",
    "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"": "( airportname ) that belongs to ( airports ) , that have ( ( city ) equal to ( aberdeen ) )",
    "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code": "( template type code ) , ( the number of ( all items ) ) that belongs to ( templates ) , grouped by ( template type code )",
    "SELECT country ,  count(*) FROM singer GROUP BY country": "( country ) , ( the number of ( all items ) ) that belongs to ( singer ) , grouped by ( country )",
    "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'": "( lname of people ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of people ) equal to ( stuid of poker player ) ) ) , and ( ( pets ) satisfied that ( ( petid of car makers ) equal to ( petid of poker player ) ) ) ) , that have ( ( ( pet age of car makers ) equal to ( 3 ) ) and ( ( pettype of car makers ) equal to ( 'cat' ) ) )",
    "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10": "( id of people ) , ( name of people ) that belongs to ( ( battle ) , and ( ( ship ) satisfied that ( ( id of people ) equal to ( lost in battle of poker player ) ) ) , and ( ( death ) satisfied that ( ( id of poker player ) equal to ( caused by ship id of car makers ) ) ) ) , grouped by ( id of people ) , that have ( ( the sum of ( killed of car makers ) ) greater than ( 10 ) )",
    "SELECT count(*) FROM Documents": "( the number of ( all items ) ) that belongs to ( documents )",
    "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1": "( department name of ship ) , ( department id of students ) that belongs to ( ( degree programs ) , and ( ( departments ) satisfied that ( ( department id of students ) equal to ( department id of ship ) ) ) ) , grouped by ( department id of students ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"": "( region ) that belongs to ( ( country ) , and ( ( city ) satisfied that ( ( code of people ) equal to ( countrycode of poker player ) ) ) ) , that have ( ( name of poker player ) equal to ( kabul ) )",
    "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'": "( zip postcode ) that belongs to ( addresses ) , that have ( ( city ) equal to ( 'port chelsea' ) )",
    "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1": "( year ) that belongs to ( matches ) , grouped by ( year ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2": "( document id ) that belongs to ( paragraphs ) , grouped by ( document id ) , that have ( ( the number of ( all items ) ) between ( 1 ) and ( 2 ) )",
    "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs": "( first name ) that belongs to ( professionals ) and ( first name ) that belongs to ( owners ), and except that ( ( name ) that belongs to ( dogs ))",
    "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"": "( distinct ( name of model list ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of students ) equal to ( countrycode of ship ) ) ) , and ( ( city ) satisfied that ( ( code of students ) equal to ( countrycode of model list ) ) ) ) , that have ( ( ( isofficial of ship ) equal to ( 't' ) ) and ( ( language of ship ) equal to ( 'chinese' ) ) and ( ( continent of students ) equal to ( asia ) ) )",
    "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1": "( grade ) that belongs to ( highschooler ) , grouped by ( grade ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"": "( distinct ( countrycode ) ) that belongs to ( countrylanguage ) , that have ( ( language ) not equal to ( english ) )",
    "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC": "( name ) that belongs to ( visitor ) , that have ( ( level of membership ) greater than ( 4 ) ) , ordered by ( ( level of membership ) in descending order )",
    "SELECT count(*) ,  city FROM employee GROUP BY city": "( the number of ( all items ) ) , ( city ) that belongs to ( employee ) , grouped by ( city )",
    "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1": "( name ) that belongs to ( country ) , that have ( ( continent ) equal to ( asia ) ) , ordered by ( ( lifeexpectancy ) ) , limited to the top ( 1 )",
    "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1": "( degree program id of people ) , ( degree summary name of people ) that belongs to ( ( degree programs ) , and ( ( student enrolment ) satisfied that ( ( degree program id of people ) equal to ( degree program id of poker player ) ) ) ) , grouped by ( degree program id of people ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name": "( name of people ) , ( the sum of ( sales of poker player ) ) that belongs to ( ( singer ) , and ( ( song ) satisfied that ( ( singer id of people ) equal to ( singer id of poker player ) ) ) ) , grouped by ( name of people )",
    "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1": "( country code ) that belongs to ( players ) , grouped by ( country code ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"": "( grade ) that belongs to ( highschooler ) , that have ( ( name ) equal to ( kyle ) )",
    "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;": "( continent of people ) , ( the number of ( all items ) ) that belongs to ( ( continents ) , and ( ( countries ) satisfied that ( ( contid of people ) equal to ( continent of poker player ) ) ) , and ( ( car makers ) satisfied that ( ( countryid of poker player ) equal to ( country of car makers ) ) ) ) , grouped by ( continent of people )",
    "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"": "( airportcode ) , ( airportname ) that belongs to ( airports ) , that have ( ( city ) equal to ( anthony ) )",
    "SELECT avg(winner_rank) FROM matches": "( the average of ( winner rank ) ) that belongs to ( matches )",
    "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;": "( cylinders of people ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of people ) equal to ( makeid of poker player ) ) ) ) , that have ( ( model of poker player ) equal to ( 'volvo' ) ) , ordered by ( ( accelerate of people ) in ascending order ) , limited to the top ( 1 )",
    "select distinct year from cars_data where weight between 3000 and 4000;": "( distinct ( year ) ) that belongs to ( cars data ) , that have ( ( weight ) between ( 3000 ) and ( 4000 ) )",
    "SELECT count(*) FROM country WHERE continent  =  \"Asia\"": "( the number of ( all items ) ) that belongs to ( country ) , that have ( ( continent ) equal to ( asia ) )",
    "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1": "( first name ) , ( country code ) that belongs to ( players ) , ordered by ( ( birth date ) ) , limited to the top ( 1 )",
    "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;": "( countryname ) that belongs to ( countries ), and except that ( ( countryname of people ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of people ) equal to ( country of poker player ) ) ) ))",
    "SELECT count(*) FROM matches": "( the number of ( all items ) ) that belongs to ( matches )",
    "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'": "( first name ) , ( birth date ) that belongs to ( players ) , that have ( ( country code ) equal to ( 'usa' ) )",
    "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1": "( year ) that belongs to ( concert ) , grouped by ( year ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1": "( visitor id of ship ) , ( name of students ) , ( level of membership of students ) that belongs to ( ( visitor ) , and ( ( visit ) satisfied that ( ( id of students ) equal to ( visitor id of ship ) ) ) ) , grouped by ( visitor id of ship ) , ordered by ( ( the sum of ( total spent of ship ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";": "( the number of ( all items ) ) that belongs to ( cartoon ) , that have ( ( written by ) equal to ( joseph kuhr ) )",
    "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( destairport of people ) equal to ( airportcode of poker player ) ) ) , and ( ( airlines ) satisfied that ( ( uid of car makers ) equal to ( airline of people ) ) ) ) , that have ( ( ( city of poker player ) equal to ( aberdeen ) ) and ( ( airline of car makers ) equal to ( united airlines ) ) )",
    "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )": "( name ) that belongs to ( dogs ) , that have ( ( dog_id ) not in ( ( ( dog id ) that belongs to ( treatments ) , grouped by ( dog id ) , that have ( ( the sum of ( cost of treatment ) ) greater than ( 1000 ) ) ) ) )",
    "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )": "( the number of ( all items ) ) that belongs to ( dogs ) , that have ( ( age ) less than ( the average of ( age ) ) that belongs to ( dogs ) )",
    "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"": "( document id ) , ( template id ) , ( document description ) that belongs to ( documents ) , that have ( ( document name ) equal to ( robbin cv ) )",
    "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC": "( name ) , ( level of membership ) that belongs to ( visitor ) , that have ( ( level of membership ) greater than ( 4 ) ) , ordered by ( ( age ) in descending order )",
    "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2": "( first name of people ) , ( middle name of people ) , ( last name of people ) , ( student id of people ) that belongs to ( ( students ) , and ( ( student enrolment ) satisfied that ( ( student id of people ) equal to ( student id of poker player ) ) ) ) , grouped by ( student id of people ) , that have ( ( the number of ( all items ) ) equal to ( 2 ) )",
    "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015": "( name of poker player ) , ( location of poker player ) that belongs to ( ( concert ) , and ( ( stadium ) satisfied that ( ( stadium id of people ) equal to ( stadium id of poker player ) ) ) ) , that have ( ( year of people ) equal to ( 2014 ) ), and intersect with ( ( name of poker player ) , ( location of poker player ) that belongs to ( ( concert ) , and ( ( stadium ) satisfied that ( ( stadium id of people ) equal to ( stadium id of poker player ) ) ) ) , that have ( ( year of people ) equal to ( 2015 ) ))",
    "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code": "( property type description of poker player ) that belongs to ( ( properties ) , and ( ( ref property types ) satisfied that ( ( property type code of people ) equal to ( property type code of poker player ) ) ) ) , grouped by ( property type code of people )",
    "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1": "( transcript date ) , ( other details ) that belongs to ( transcripts ) , ordered by ( ( transcript date ) in ascending order ) , limited to the top ( 1 )",
    "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33": "( name ) that belongs to ( teacher ) , that have ( ( ( age ) equal to ( 32 ) ) or ( ( age ) equal to ( 33 ) ) )",
    "SELECT first_name ,  last_name FROM players ORDER BY birth_date": "( first name ) , ( last name ) that belongs to ( players ) , ordered by ( ( birth date ) )",
    "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"": "( flightno ) that belongs to ( flights ) , that have ( ( sourceairport ) equal to ( apg ) )",
    "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"": "( population ) , ( lifeexpectancy ) that belongs to ( country ) , that have ( ( name ) equal to ( brazil ) )",
    "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id": "( student id ) , ( the number of ( all items ) ) that belongs to ( likes ) , grouped by ( student id )",
    "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id": "( document id ) , ( the number of ( all items ) ) that belongs to ( paragraphs ) , grouped by ( document id ) , ordered by ( ( document id ) )",
    "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage": "( the number of ( distinct ( language ) ) ) that belongs to ( countrylanguage )",
    "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals": "( state ) that belongs to ( owners ), and intersect with ( ( state ) that belongs to ( professionals ))",
    "SELECT section_name ,  section_description FROM Sections": "( section name ) , ( section description ) that belongs to ( sections )",
    "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1": "( breed name of people ) that belongs to ( ( breeds ) , and ( ( dogs ) satisfied that ( ( breed code of people ) equal to ( breed code of poker player ) ) ) ) , grouped by ( breed name of people ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )": "( name of people ) , ( date of treatment of poker player ) that belongs to ( ( dogs ) , and ( ( treatments ) satisfied that ( ( dog id of people ) equal to ( dog id of poker player ) ) ) ) , that have ( ( breed code of people ) equal to ( breed code ) that belongs to ( dogs ) , grouped by ( breed code ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( 1 ) )",
    "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"": "( the average of ( lifeexpectancy ) ) that belongs to ( country ) , that have ( ( region ) equal to ( central africa ) )",
    "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"": "( id ) that belongs to ( highschooler ) , that have ( ( name ) equal to ( kyle ) )",
    "SELECT count(DISTINCT Nationality) FROM people": "( the number of ( distinct ( nationality ) ) ) that belongs to ( people )",
    "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"": "( airportname ) that belongs to ( airports ) , that have ( ( airportcode ) equal to ( ako ) )",
    "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1": "( name of students ) that belongs to ( ( employee ) , and ( ( evaluation ) satisfied that ( ( employee id of students ) equal to ( employee id of ship ) ) ) ) , ordered by ( ( bonus of ship ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"": "( paragraph text of people ) that belongs to ( ( paragraphs ) , and ( ( documents ) satisfied that ( ( document id of people ) equal to ( document id of poker player ) ) ) ) , that have ( ( document name of poker player ) equal to ( customer reviews ) )",
    "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1": "( template id ) that belongs to ( documents ) , grouped by ( template id ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT vote_id ,  phone_number ,  state FROM votes": "( vote id ) , ( phone number ) , ( state ) that belongs to ( votes )",
    "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"": "( the maximum of ( share ) ) , ( the minimum of ( share ) ) that belongs to ( performance ) , that have ( ( type ) not equal to ( live final ) )",
    "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR": "( the number of ( all items ) ) , ( year ) that belongs to ( matches ) , grouped by ( year )",
    "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1": "( semester name of people ) , ( semester id of people ) that belongs to ( ( semesters ) , and ( ( student enrolment ) satisfied that ( ( semester id of people ) equal to ( semester id of poker player ) ) ) ) , grouped by ( semester id of people ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'": "( distinct ( id of people ) ) , ( name of people ) that belongs to ( ( battle ) , and ( ( ship ) satisfied that ( ( id of people ) equal to ( lost in battle of poker player ) ) ) ) , that have ( ( ship type of poker player ) equal to ( 'brig' ) )",
    "SELECT Birth_Year ,  Citizenship FROM singer": "( birth year ) , ( citizenship ) that belongs to ( singer )",
    "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1": "( department name of poker player ) , ( department id of people ) that belongs to ( ( degree programs ) , and ( ( departments ) satisfied that ( ( department id of people ) equal to ( department id of poker player ) ) ) ) , grouped by ( department id of people ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"": "( feature type name of poker player ) that belongs to ( ( other available features ) , and ( ( ref feature types ) satisfied that ( ( feature type code of people ) equal to ( feature type code of poker player ) ) ) ) , that have ( ( feature name of people ) equal to ( aircon ) )",
    "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'": "( fname of people ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of people ) equal to ( stuid of poker player ) ) ) , and ( ( pets ) satisfied that ( ( petid of car makers ) equal to ( petid of poker player ) ) ) ) , that have ( ( pettype of car makers ) equal to ( 'cat' ) ), and intersect with ( ( fname of people ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of people ) equal to ( stuid of poker player ) ) ) , and ( ( pets ) satisfied that ( ( petid of car makers ) equal to ( petid of poker player ) ) ) ) , that have ( ( pettype of car makers ) equal to ( 'dog' ) ))",
    "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'": "( area code of car makers ) that belongs to ( ( contestants ) , and ( ( votes ) satisfied that ( ( contestant number of people ) equal to ( contestant number of poker player ) ) ) , and ( ( area code state ) satisfied that ( ( state of poker player ) equal to ( state of car makers ) ) ) ) , that have ( ( contestant name of people ) equal to ( 'tabatha gehling' ) ), and intersect with ( ( area code of car makers ) that belongs to ( ( contestants ) , and ( ( votes ) satisfied that ( ( contestant number of people ) equal to ( contestant number of poker player ) ) ) , and ( ( area code state ) satisfied that ( ( state of poker player ) equal to ( state of car makers ) ) ) ) , that have ( ( contestant name of people ) equal to ( 'kelly clauss' ) ))",
    "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")": "( name ) that belongs to ( country ) , that have ( ( ( continent ) equal to ( africa ) ) and ( ( population ) less than ( the maximum of ( population ) ) that belongs to ( country ) , that have ( ( continent ) equal to ( asia ) ) ) )",
    "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)": "( name ) that belongs to ( museum ) , that have ( ( num of staff ) greater than ( the minimum of ( num of staff ) ) that belongs to ( museum ) , that have ( ( open year ) greater than ( 2010 ) ) )",
    "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"": "( countrycode ) that belongs to ( countrylanguage ), and except that ( ( countrycode ) that belongs to ( countrylanguage ) , that have ( ( language ) equal to ( english ) ))",
    "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014": "( name ) that belongs to ( stadium ), and except that ( ( name of poker player ) that belongs to ( ( concert ) , and ( ( stadium ) satisfied that ( ( stadium id of people ) equal to ( stadium id of poker player ) ) ) ) , that have ( ( year of people ) equal to ( 2014 ) ))",
    "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1": "( transcript date of poker player ) , ( transcript id of people ) that belongs to ( ( transcript contents ) , and ( ( transcripts ) satisfied that ( ( transcript id of people ) equal to ( transcript id of poker player ) ) ) ) , grouped by ( transcript id of people ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( 1 )",
    "SELECT Final_Table_Made ,  Best_Finish FROM poker_player": "( final table made ) , ( best finish ) that belongs to ( poker player )",
    "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';": "( distinct ( model of people ) ) that belongs to ( ( model list ) , and ( ( car names ) satisfied that ( ( model of people ) equal to ( model of poker player ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of poker player ) equal to ( id of car makers ) ) ) , and ( ( car makers ) satisfied that ( ( maker of people ) equal to ( id of student enrolment ) ) ) ) , that have ( ( ( weight of car makers ) less than ( 3500 ) ) and ( ( fullname of student enrolment ) not equal to ( 'ford motor company' ) ) )",
    "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"": "( population ) , ( region ) that belongs to ( country ) , that have ( ( name ) equal to ( angola ) )",
    "SELECT name ,  grade FROM Highschooler": "( name ) , ( grade ) that belongs to ( highschooler )",
    "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'": "( name ) , ( country ) that belongs to ( singer ) , that have ( ( song_name ) like ( '%hey%' ) )",
    "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"": "( flightno of people ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( sourceairport of people ) equal to ( airportcode of poker player ) ) ) ) , that have ( ( city of poker player ) equal to ( aberdeen ) )",
    "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"": "( airline of people ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of people ) equal to ( airline of poker player ) ) ) ) , that have ( ( sourceairport of poker player ) equal to ( ahd ) )",
    "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id": "( professional id ) , ( role code ) , ( email address ) that belongs to ( professionals ), and except that ( ( professional id of people ) , ( role code of people ) , ( email address of people ) that belongs to ( ( professionals ) , and ( ( treatments ) satisfied that ( ( professional id of people ) equal to ( professional id of poker player ) ) ) ))",
    "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1": "( name of people ) that belongs to ( ( conductor ) , and ( ( orchestra ) satisfied that ( ( conductor id of people ) equal to ( conductor id of poker player ) ) ) ) , grouped by ( conductor id of poker player ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1": "( name ) , ( age ) , ( weight ) that belongs to ( dogs ) , that have ( ( abandoned yn ) equal to ( 1 ) )",
    "select name from city where population between 160000 and 900000": "( name ) that belongs to ( city ) , that have ( ( population ) between ( 160000 ) and ( 900000 ) )",
    "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;": "( countryname of poker player ) that belongs to ( ( car makers ) , and ( ( countries ) satisfied that ( ( country of people ) equal to ( countryid of poker player ) ) ) ) , grouped by ( country of people ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1": "( pettype ) , ( weight ) that belongs to ( pets ) , ordered by ( ( pet age ) ) , limited to the top ( 1 )",
    "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name": "( name of poker player ) , ( the number of ( all items ) ) that belongs to ( ( course arrange ) , and ( ( teacher ) satisfied that ( ( teacher id of people ) equal to ( teacher id of poker player ) ) ) ) , grouped by ( name of poker player )",
    "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'": "( cell mobile number ) that belongs to ( students ) , that have ( ( ( first name ) equal to ( 'timmothy' ) ) and ( ( last name ) equal to ( 'ward' ) ) )",
    "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"": "( name of car makers ) that belongs to ( ( course arrange ) , and ( ( course ) satisfied that ( ( course id of people ) equal to ( course id of poker player ) ) ) , and ( ( teacher ) satisfied that ( ( teacher id of people ) equal to ( teacher id of car makers ) ) ) ) , that have ( ( course of poker player ) equal to ( math ) )",
    "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011": "( name of students ) that belongs to ( ( visitor ) , and ( ( visit ) satisfied that ( ( id of students ) equal to ( visitor id of ship ) ) ) , and ( ( museum ) satisfied that ( ( museum id of model list ) equal to ( museum id of ship ) ) ) ) , that have ( ( open year of model list ) less than ( 2009 ) ), and intersect with ( ( name of students ) that belongs to ( ( visitor ) , and ( ( visit ) satisfied that ( ( id of students ) equal to ( visitor id of ship ) ) ) , and ( ( museum ) satisfied that ( ( museum id of model list ) equal to ( museum id of ship ) ) ) ) , that have ( ( open year of model list ) greater than ( 2011 ) ))",
    "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name": "( the sum of ( ranking points ) ) , ( first name of people ) that belongs to ( ( players ) , and ( ( rankings ) satisfied that ( ( player id of people ) equal to ( player id of poker player ) ) ) ) , grouped by ( first name of people )",
    "SELECT max(age) FROM Dogs": "( the maximum of ( age ) ) that belongs to ( dogs )",
    "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1": "( student id of people ) , ( first name of people ) , ( middle name of people ) , ( last name of people ) , ( the number of ( all items ) ) , ( student id of people ) that belongs to ( ( students ) , and ( ( student enrolment ) satisfied that ( ( student id of people ) equal to ( student id of poker player ) ) ) ) , grouped by ( student id of people ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"": "( the number of ( all items ) ) that belongs to ( ( flights ) , and ( ( airports ) satisfied that ( ( sourceairport of people ) equal to ( airportcode of poker player ) ) ) ) , that have ( ( city of poker player ) equal to ( aberdeen ) )",
    "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;": "( model ) that belongs to ( car names ) , grouped by ( model ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;": "( episode ) , ( rating ) that belongs to ( tv series ) , ordered by ( ( rating ) in descending order ) , limited to the top ( 3 )",
    "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC": "( name ) , ( birth date ) that belongs to ( people ) , ordered by ( ( name ) in ascending order )",
    "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"": "( the number of ( all items ) ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( airline of poker player ) equal to ( uid of people ) ) ) ) , that have ( ( ( airline of people ) equal to ( united airlines ) ) and ( ( destairport of poker player ) equal to ( asy ) ) )",
    "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1": "( name of poker player ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( student id of people ) equal to ( id of poker player ) ) ) ) , grouped by ( student id of people ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM Courses": "( the number of ( all items ) ) that belongs to ( courses )",
    "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"": "( airline ) that belongs to ( airlines ) , that have ( ( abbreviation ) equal to ( ual ) )",
    "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode": "( language ) , ( countrycode ) , ( the maximum of ( percentage ) ) that belongs to ( countrylanguage ) , grouped by ( countrycode )",
    "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"": "( distinct ( name of car makers ) ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of people ) equal to ( countrycode of poker player ) ) ) , and ( ( city ) satisfied that ( ( code of people ) equal to ( countrycode of car makers ) ) ) ) , that have ( ( ( isofficial of poker player ) equal to ( 't' ) ) and ( ( language of poker player ) equal to ( 'chinese' ) ) and ( ( continent of people ) equal to ( asia ) ) )",
    "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015": "( the number of ( all items ) ) that belongs to ( concert ) , that have ( ( ( year ) equal to ( 2014 ) ) or ( ( year ) equal to ( 2015 ) ) )",
    "SELECT charge_type ,  charge_amount FROM Charges": "( charge type ) , ( charge amount ) that belongs to ( charges )",
    "SELECT Episode FROM TV_series ORDER BY rating": "( episode ) that belongs to ( tv series ) , ordered by ( ( rating ) )",
    "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"": "( the sum of ( population ) ) that belongs to ( city ) , that have ( ( district ) equal to ( gelderland ) )",
    "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1": "( language of poker player ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of people ) equal to ( countrycode of poker player ) ) ) ) , that have ( ( continent of people ) equal to ( asia ) ) , grouped by ( language of poker player ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;": "( the average of ( weight ) ) , ( year ) that belongs to ( cars data ) , grouped by ( year )",
    "select contestant_name from contestants where contestant_name like \"%al%\"": "( contestant name ) that belongs to ( contestants ) , that have ( ( contestant_name ) like ( %al% ) )",
    "SELECT Name FROM country ORDER BY Population ASC LIMIT 3": "( name ) that belongs to ( country ) , ordered by ( ( population ) in ascending order ) , limited to the top ( 3 )",
    "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';": "( the number of ( all items ) ) that belongs to ( ( car makers ) , and ( ( countries ) satisfied that ( ( country of people ) equal to ( countryid of poker player ) ) ) ) , that have ( ( countryname of poker player ) equal to ( 'france' ) )",
    "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District": "( the number of ( all items ) ) , ( district ) that belongs to ( city ) , that have ( ( population ) greater than ( the average of ( population ) ) that belongs to ( city ) ) , grouped by ( district )",
    "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'": "( email address ) that belongs to ( professionals ) , that have ( ( ( state ) equal to ( 'hawaii' ) ) or ( ( state ) equal to ( 'wisconsin' ) ) )",
    "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)": "( name ) that belongs to ( employee ) , that have ( ( employee_id ) not in ( ( employee id ) that belongs to ( evaluation ) ) )",
    "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"": "( template id of poker player ) that belongs to ( ( ref template types ) , and ( ( templates ) satisfied that ( ( template type code of people ) equal to ( template type code of poker player ) ) ) ) , that have ( ( template type description of people ) equal to ( presentation ) )",
    "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1": "( first name of people ) , ( country code of people ) , ( birth date of people ) that belongs to ( ( players ) , and ( ( matches ) satisfied that ( ( player id of people ) equal to ( winner id of poker player ) ) ) ) , ordered by ( ( winner rank points of poker player ) in descending order ) , limited to the top ( 1 )",
    "SELECT DISTINCT template_type_code FROM Templates": "( distinct ( template type code ) ) that belongs to ( templates )",
    "SELECT Name FROM conductor ORDER BY Year_of_Work DESC": "( name ) that belongs to ( conductor ) , ordered by ( ( year of work ) in descending order )",
    "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'": "( name ) that belongs to ( battle ) , that have ( ( ( bulgarian commander ) equal to ( 'kaloyan' ) ) and ( ( latin commander ) equal to ( 'baldwin i' ) ) )",
    "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;": "( makeid of ship ) , ( make of ship ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of students ) equal to ( makeid of ship ) ) ) ) , that have ( ( ( horsepower of students ) greater than ( ( ( the minimum of ( horsepower ) ) that belongs to ( cars data ) ) ) ) and ( ( cylinders of students ) less than ( 4 ) ) )",
    "SELECT count(DISTINCT LOCATION) FROM shop": "( the number of ( distinct ( location ) ) ) that belongs to ( shop )",
    "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"": "( flightno of people ) that belongs to ( ( flights ) , and ( ( airlines ) satisfied that ( ( uid of poker player ) equal to ( airline of people ) ) ) ) , that have ( ( airline of poker player ) equal to ( united airlines ) )",
    "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1": "( museum id of ship ) , ( name of students ) that belongs to ( ( museum ) , and ( ( visit ) satisfied that ( ( museum id of students ) equal to ( museum id of ship ) ) ) ) , grouped by ( museum id of ship ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1": "( name of people ) that belongs to ( ( singer ) , and ( ( song ) satisfied that ( ( singer id of people ) equal to ( singer id of poker player ) ) ) ) , grouped by ( name of people ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1": "( the sum of ( total spent of ship ) ) that belongs to ( ( visitor ) , and ( ( visit ) satisfied that ( ( id of students ) equal to ( visitor id of ship ) ) ) ) , that have ( ( level of membership of students ) equal to ( 1 ) )",
    "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )": "( last name of people ) that belongs to ( ( owners ) , and ( ( dogs ) satisfied that ( ( owner id of people ) equal to ( owner id of poker player ) ) ) ) , that have ( ( age of poker player ) equal to ( the maximum of ( age ) ) that belongs to ( dogs ) )",
    "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC": "( name ) that belongs to ( singer ) , ordered by ( ( net worth millions ) in ascending order )",
    "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10": "( the number of ( all items ) ) that belongs to ( highschooler ) , that have ( ( ( grade ) equal to ( 9 ) ) or ( ( grade ) equal to ( 10 ) ) )",
    "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50": "( country code ) that belongs to ( players ) , grouped by ( country code ) , that have ( ( the number of ( all items ) ) greater than ( 50 ) )",
    "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"": "( airline ) , ( abbreviation ) that belongs to ( airlines ) , that have ( ( country ) equal to ( usa ) )",
    "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code": "( template type code of people ) , ( the number of ( all items ) ) that belongs to ( ( templates ) , and ( ( documents ) satisfied that ( ( template id of people ) equal to ( template id of poker player ) ) ) ) , grouped by ( template type code of people )",
    "SELECT count(DISTINCT country_code) FROM players": "( the number of ( distinct ( country code ) ) ) that belongs to ( players )",
    "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3": "( template type code ) that belongs to ( templates ) , grouped by ( template type code ) , that have ( ( the number of ( all items ) ) less than ( 3 ) )",
    "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1": "( city ) that belongs to ( employee ) , that have ( ( age ) less than ( 30 ) ) , grouped by ( city ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT Name FROM conductor WHERE Nationality != 'USA'": "( name ) that belongs to ( conductor ) , that have ( ( nationality ) not equal to ( 'usa' ) )",
    "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )": "( semester name ) that belongs to ( semesters ) , that have ( ( semester_id ) not in ( ( ( semester id ) that belongs to ( student enrolment ) ) ) )",
    "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )": "( the average of ( age ) ) that belongs to ( dogs ) , that have ( ( dog_id ) in ( ( dog id ) that belongs to ( treatments ) ) )",
    "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";": "( weekly rank ) that belongs to ( tv series ) , that have ( ( episode ) equal to ( a love of a lifetime ) )",
    "SELECT count(*) FROM employee": "( the number of ( all items ) ) that belongs to ( employee )",
    "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000": "( the maximum of ( final table made ) ) that belongs to ( poker player ) , that have ( ( earnings ) less than ( 200000 ) )",
    "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;": "( the number of ( all items ) ) , ( fullname of poker player ) , ( id of poker player ) that belongs to ( ( model list ) , and ( ( car makers ) satisfied that ( ( maker of people ) equal to ( id of poker player ) ) ) ) , grouped by ( id of poker player )",
    "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5": "( version number ) , ( template type code ) that belongs to ( templates ) , that have ( ( version number ) greater than ( 5 ) )",
    "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000": "( distinct ( name of people ) ) that belongs to ( ( singer ) , and ( ( song ) satisfied that ( ( singer id of people ) equal to ( singer id of poker player ) ) ) ) , that have ( ( sales of poker player ) greater than ( 300000 ) )",
    "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)": "( the number of ( all items ) ) that belongs to ( visitor ) , that have ( ( id ) not in ( ( visitor id of ship ) that belongs to ( ( museum ) , and ( ( visit ) satisfied that ( ( museum id of students ) equal to ( museum id of ship ) ) ) ) , that have ( ( open year of students ) greater than ( 2010 ) ) ) )",
    "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'": "( stuid ) that belongs to ( student ), and except that ( ( stuid of people ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of people ) equal to ( stuid of poker player ) ) ) , and ( ( pets ) satisfied that ( ( petid of car makers ) equal to ( petid of poker player ) ) ) ) , that have ( ( pettype of car makers ) equal to ( 'cat' ) ))",
    "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000": "( district ) that belongs to ( shop ) , that have ( ( number products ) less than ( 3000 ) ), and intersect with ( ( district ) that belongs to ( shop ) , that have ( ( number products ) greater than ( 10000 ) ))",
    "select production_code ,  channel from cartoon order by original_air_date desc limit 1": "( production code ) , ( channel ) that belongs to ( cartoon ) , ordered by ( ( original air date ) in descending order ) , limited to the top ( 1 )",
    "SELECT section_name FROM Sections ORDER BY section_name DESC": "( section name ) that belongs to ( sections ) , ordered by ( ( section name ) in descending order )",
    "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72": "( the sum of ( population ) ) , ( the average of ( lifeexpectancy ) ) , ( continent ) that belongs to ( country ) , grouped by ( continent ) , that have ( ( the average of ( lifeexpectancy ) ) less than ( 72 ) )",
    "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";": "( the number of ( all items ) ) that belongs to ( tv channel ) , that have ( ( language ) equal to ( english ) )",
    "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'": "( first name of people ) , ( name of poker player ) that belongs to ( ( owners ) , and ( ( dogs ) satisfied that ( ( owner id of people ) equal to ( owner id of poker player ) ) ) ) , that have ( ( state of people ) equal to ( 'virginia' ) )",
    "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000": "( the sum of ( population ) ) , ( the average of ( surfacearea ) ) that belongs to ( country ) , that have ( ( ( continent ) equal to ( north america ) ) and ( ( surfacearea ) greater than ( 3000 ) ) )",
    "SELECT grade FROM Highschooler": "( grade ) that belongs to ( highschooler )",
    "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id": "( name of poker player ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of people ) equal to ( id of poker player ) ) ) ), and intersect with ( ( name of poker player ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( liked id of people ) equal to ( id of poker player ) ) ) ))",
    "SELECT count(*) FROM conductor": "( the number of ( all items ) ) that belongs to ( conductor )",
    "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"": "( name of students ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of students ) equal to ( countrycode of ship ) ) ) ) , that have ( ( ( language of ship ) equal to ( english ) ) and ( ( isofficial ) equal to ( t ) ) ) and ( name of students ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of students ) equal to ( countrycode of ship ) ) ) ) , that have ( ( ( language of ship ) equal to ( dutch ) ) and ( ( isofficial ) equal to ( t ) ) )",
    "SELECT Earnings FROM poker_player ORDER BY Earnings DESC": "( earnings ) that belongs to ( poker player ) , ordered by ( ( earnings ) in descending order )",
    "SELECT count(*) FROM Templates": "( the number of ( all items ) ) that belongs to ( templates )",
    "SELECT avg(injured) FROM death": "( the average of ( injured ) ) that belongs to ( death )",
    "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )": "( the number of ( all items ) ) that belongs to ( dogs ) , that have ( ( dog_id ) not in ( ( dog id ) that belongs to ( treatments ) ) )",
    "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000": "( location ) , ( name ) that belongs to ( stadium ) , that have ( ( capacity ) between ( 5000 ) and ( 10000 ) )",
    "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10": "( airline of people ) that belongs to ( ( airlines ) , and ( ( flights ) satisfied that ( ( uid of people ) equal to ( airline of poker player ) ) ) ) , grouped by ( airline of people ) , that have ( ( the number of ( all items ) ) greater than ( 10 ) )",
    "SELECT sum(bonus) FROM evaluation": "( the sum of ( bonus ) ) that belongs to ( evaluation )",
    "SELECT count(DISTINCT loser_name) FROM matches": "( the number of ( distinct ( loser name ) ) ) that belongs to ( matches )",
    "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1": "( first name ) , ( middle name ) , ( last name ) that belongs to ( students ) , ordered by ( ( date first registered ) in ascending order ) , limited to the top ( 1 )",
    "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'": "( cell mobile number ) that belongs to ( students ) , that have ( ( ( first name ) equal to ( 'timmothy' ) ) and ( ( last name ) equal to ( 'ward' ) ) )",
    "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'": "( name ) , ( result ) , ( bulgarian commander ) that belongs to ( battle ), and except that ( ( name of people ) , ( result of people ) , ( bulgarian commander of people ) that belongs to ( ( battle ) , and ( ( ship ) satisfied that ( ( id of people ) equal to ( lost in battle of poker player ) ) ) ) , that have ( ( location of poker player ) equal to ( 'english channel' ) ))",
    "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC": "( name of people ) that belongs to ( ( people ) , and ( ( poker player ) satisfied that ( ( people id of people ) equal to ( people id of poker player ) ) ) ) , ordered by ( ( earnings of poker player ) in descending order )",
    "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1": "( hometown ) that belongs to ( teacher ) , ordered by ( ( age ) in ascending order ) , limited to the top ( 1 )",
    "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'": "( country code of people ) , ( first name of people ) that belongs to ( ( players ) , and ( ( matches ) satisfied that ( ( player id of people ) equal to ( winner id of poker player ) ) ) ) , that have ( ( tourney name of poker player ) equal to ( 'wta championships' ) ), and intersect with ( ( country code of people ) , ( first name of people ) that belongs to ( ( players ) , and ( ( matches ) satisfied that ( ( player id of people ) equal to ( winner id of poker player ) ) ) ) , that have ( ( tourney name of poker player ) equal to ( 'australian open' ) ))",
    "SELECT count(DISTINCT current_address_id) FROM Students": "( the number of ( distinct ( current address id ) ) ) that belongs to ( students )",
    "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;": "( model of people ) that belongs to ( ( car names ) , and ( ( cars data ) satisfied that ( ( makeid of people ) equal to ( id of poker player ) ) ) ) , ordered by ( ( horsepower of poker player ) in ascending order ) , limited to the top ( 1 )",
    "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;": "( fullname of people ) , ( id of people ) , ( the number of ( all items ) ) that belongs to ( ( car makers ) , and ( ( model list ) satisfied that ( ( id of people ) equal to ( maker of poker player ) ) ) ) , grouped by ( id of people )",
    "SELECT course_description FROM Courses WHERE course_name  =  'math'": "( course description ) that belongs to ( courses ) , that have ( ( course name ) equal to ( 'math' ) )",
    "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1": "( name of poker player ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of people ) equal to ( id of poker player ) ) ) ) , grouped by ( student id of people ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';": "( distinct ( maker of people ) ) that belongs to ( ( car makers ) , and ( ( model list ) satisfied that ( ( id of people ) equal to ( maker of poker player ) ) ) , and ( ( car names ) satisfied that ( ( model of poker player ) equal to ( model of car makers ) ) ) , and ( ( cars data ) satisfied that ( ( makeid of car makers ) equal to ( id of student enrolment ) ) ) ) , that have ( ( year of student enrolment ) equal to ( '1970' ) )",
    "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;": "( model of students ) that belongs to ( ( car names ) , and ( ( cars data ) satisfied that ( ( makeid of students ) equal to ( id of ship ) ) ) ) , ordered by ( ( mpg of ship ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM FLIGHTS": "( the number of ( all items ) ) that belongs to ( flights )",
    "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2": "( name of poker player ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( student id of people ) equal to ( id of poker player ) ) ) ) , grouped by ( student id of people ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"": "( the number of ( all items ) ) that belongs to ( ( likes ) , and ( ( highschooler ) satisfied that ( ( student id of people ) equal to ( id of poker player ) ) ) ) , that have ( ( name of poker player ) equal to ( kyle ) )",
    "SELECT avg(Earnings) FROM poker_player": "( the average of ( earnings ) ) that belongs to ( poker player )",
    "select name from teacher where hometown != \"little lever urban district\"": "( name ) that belongs to ( teacher ) , that have ( ( hometown ) not equal to ( little lever urban district ) )",
    "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)": "( name ) that belongs to ( people ) , that have ( ( people_id ) not in ( ( people id ) that belongs to ( poker player ) ) )",
    "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";": "( package option ) that belongs to ( tv channel ) , that have ( ( series name ) equal to ( sky radio ) )",
    "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")": "( the sum of ( population ) ) that belongs to ( country ) , that have ( ( name ) not in ( ( name of people ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of people ) equal to ( countrycode of poker player ) ) ) ) , that have ( ( language of poker player ) equal to ( english ) ) ) )",
    "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2": "( id ) that belongs to ( tv channel ) , grouped by ( country ) , that have ( ( the number of ( all items ) ) greater than ( 2 ) )",
    "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"": "( the number of ( all items ) ) that belongs to ( flights ) , that have ( ( sourceairport ) equal to ( apg ) )",
    "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid": "( the number of ( all items ) ) , ( stuid of people ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of people ) equal to ( stuid of poker player ) ) ) ) , grouped by ( stuid of people )",
    "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1": "( hometown ) that belongs to ( teacher ) , grouped by ( hometown ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;": "( the number of ( all items ) ) that belongs to ( cars data ) , that have ( ( cylinders ) greater than ( 6 ) )",
    "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;": "( horsepower of poker player ) , ( make of people ) that belongs to ( ( car names ) , and ( ( cars data ) satisfied that ( ( makeid of people ) equal to ( id of poker player ) ) ) ) , that have ( ( cylinders of poker player ) equal to ( 3 ) ) , ordered by ( ( horsepower of poker player ) in descending order ) , limited to the top ( 1 )",
    "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC": "( contestant number ) , ( contestant name ) that belongs to ( contestants ) , ordered by ( ( contestant name ) in descending order )",
    "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"": "( document name of poker player ) that belongs to ( ( templates ) , and ( ( documents ) satisfied that ( ( template id of people ) equal to ( template id of poker player ) ) ) ) , that have ( ( template type code of people ) equal to ( bk ) )",
    "select min(weight) from cars_data where cylinders  =  8 and year  =  1974": "( the minimum of ( weight ) ) that belongs to ( cars data ) , that have ( ( ( cylinders ) equal to ( 8 ) ) and ( ( year ) equal to ( 1974 ) ) )",
    "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')": "( distinct ( name of poker player ) ) that belongs to ( ( country ) , and ( ( city ) satisfied that ( ( countrycode of poker player ) equal to ( code of people ) ) ) ) , that have ( ( ( continent of people ) equal to ( 'europe' ) ) and ( ( t1.name ) not in ( ( name of car makers ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of car makers ) equal to ( countrycode of student enrolment ) ) ) ) , that have ( ( ( isofficial of student enrolment ) equal to ( 't' ) ) and ( ( language of student enrolment ) equal to ( 'english' ) ) ) ) ) )",
    "SELECT * FROM hiring": "all items that belongs to ( hiring )",
    "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)": "( name ) that belongs to ( shop ) , that have ( ( number products ) greater than ( the average of ( number products ) ) that belongs to ( shop ) )",
    "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008": "( name of people ) that belongs to ( ( conductor ) , and ( ( orchestra ) satisfied that ( ( conductor id of people ) equal to ( conductor id of poker player ) ) ) ) , that have ( ( year of founded ) greater than ( 2008 ) )",
    "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1": "( country code of people ) , ( first name of people ) that belongs to ( ( players ) , and ( ( rankings ) satisfied that ( ( player id of people ) equal to ( player id of poker player ) ) ) ) , ordered by ( ( tours of poker player ) in descending order ) , limited to the top ( 1 )",
    "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1": "( name ) , ( surfacearea ) , ( indepyear ) that belongs to ( country ) , ordered by ( ( population ) ) , limited to the top ( 1 )",
    "SELECT DISTINCT country FROM singer WHERE age  >  20": "( distinct ( country ) ) that belongs to ( singer ) , that have ( ( age ) greater than ( 20 ) )",
    "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship": "( citizenship ) , ( the number of ( all items ) ) that belongs to ( singer ) , grouped by ( citizenship )",
    "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id": "( document id of people ) , ( document name of poker player ) , ( the number of ( all items ) ) that belongs to ( ( paragraphs ) , and ( ( documents ) satisfied that ( ( document id of people ) equal to ( document id of poker player ) ) ) ) , grouped by ( document id of people )",
    "SELECT count(*) FROM AIRPORTS": "( the number of ( all items ) ) that belongs to ( airports )",
    "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1": "( name of poker player ) , ( capacity of poker player ) that belongs to ( ( concert ) , and ( ( stadium ) satisfied that ( ( stadium id of people ) equal to ( stadium id of poker player ) ) ) ) , that have ( ( year of people ) greater than or equal to ( 2014 ) ) , grouped by ( stadium id of poker player ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1": "( song name ) , ( song release year ) that belongs to ( singer ) , ordered by ( ( age ) ) , limited to the top ( 1 )",
    "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"": "all items that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of people ) equal to ( countrycode of poker player ) ) ) ) , that have ( ( ( language of poker player ) equal to ( english ) ) and ( ( isofficial ) equal to ( t ) ) ) and all items that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of people ) equal to ( countrycode of poker player ) ) ) ) , that have ( ( ( language of poker player ) equal to ( dutch ) ) and ( ( isofficial ) equal to ( t ) ) )",
    "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1": "( template type code ) that belongs to ( templates ) , grouped by ( template type code ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) ,  country_code FROM players GROUP BY country_code": "( the number of ( all items ) ) , ( country code ) that belongs to ( players ) , grouped by ( country code )",
    "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1": "( record company ) that belongs to ( orchestra ) , grouped by ( record company ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;": "( model of people ) that belongs to ( ( car names ) , and ( ( cars data ) satisfied that ( ( makeid of people ) equal to ( id of poker player ) ) ) ) , ordered by ( ( mpg of poker player ) in descending order ) , limited to the top ( 1 )",
    "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit": "( the average of ( num of ticket ) ) , ( the maximum of ( num of ticket ) ) that belongs to ( visit )",
    "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';": "( countryid of people ) , ( countryname of people ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of people ) equal to ( country of poker player ) ) ) ) , grouped by ( countryid of people ) , that have ( ( the number of ( all items ) ) greater than ( 3 ) ) and ( countryid of people ) , ( countryname of people ) that belongs to ( ( countries ) , and ( ( car makers ) satisfied that ( ( countryid of people ) equal to ( country of poker player ) ) ) , and ( ( model list ) satisfied that ( ( id of poker player ) equal to ( maker of car makers ) ) ) ) , that have ( ( model of car makers ) equal to ( 'fiat' ) )",
    "SELECT Name FROM singer WHERE Citizenship != \"France\"": "( name ) that belongs to ( singer ) , that have ( ( citizenship ) not equal to ( france ) )",
    "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"": "( language of poker player ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of people ) equal to ( countrycode of poker player ) ) ) ) , that have ( ( ( headofstate of people ) equal to ( beatrix ) ) and ( ( isofficial of poker player ) equal to ( t ) ) )",
    "SELECT line_1 ,  line_2 FROM addresses": "( line 1 ) , ( line 2 ) that belongs to ( addresses )",
    "SELECT count(*) FROM Other_Available_Features": "( the number of ( all items ) ) that belongs to ( other available features )",
    "select max(capacity), average from stadium": "( the maximum of ( capacity ) ) , ( average ) that belongs to ( stadium )",
    "SELECT count(*) FROM area_code_state": "( the number of ( all items ) ) that belongs to ( area code state )",
    "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;": "( contid of people ) , ( continent of people ) , ( the number of ( all items ) ) that belongs to ( ( continents ) , and ( ( countries ) satisfied that ( ( contid of people ) equal to ( continent of poker player ) ) ) ) , grouped by ( contid of people )",
    "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'": "( contestant name ) that belongs to ( contestants ) , that have ( ( contestant name ) not equal to ( 'jessie alloway' ) )",
    "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1": "( winner name ) , ( loser name ) that belongs to ( matches ) , ordered by ( ( minutes ) in descending order ) , limited to the top ( 1 )",
    "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )": "( the number of ( all items ) ) that belongs to ( professionals ) , that have ( ( professional_id ) not in ( ( professional id ) that belongs to ( treatments ) ) )",
    "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'": "( the number of ( all items ) ) that belongs to ( votes ) , that have ( ( ( state ) equal to ( 'ny' ) ) or ( ( state ) equal to ( 'ca' ) ) )",
    "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid": "( the number of ( all items ) ) , ( stuid of students ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of students ) equal to ( stuid of ship ) ) ) ) , grouped by ( stuid of students )",
    "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")": "( the average of ( lifeexpectancy ) ) that belongs to ( country ) , that have ( ( name ) not in ( ( name of people ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of people ) equal to ( countrycode of poker player ) ) ) ) , that have ( ( ( language of poker player ) equal to ( english ) ) and ( ( isofficial of poker player ) equal to ( t ) ) ) ) )",
    "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1": "( property name ) that belongs to ( properties ) , that have ( ( property type code ) equal to ( house ) ) and ( property name ) that belongs to ( properties ) , that have ( ( ( property type code ) equal to ( apartment ) ) and ( ( room count ) greater than ( 1 ) ) )",
    "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )": "( the number of ( all items ) ) that belongs to ( owners ) , that have ( ( owner_id ) not in ( ( owner id ) that belongs to ( dogs ) ) )",
    "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1": "( name of people ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of people ) equal to ( countrycode of poker player ) ) ) ) , grouped by ( name of people ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;": "( id of people ) , ( maker of people ) that belongs to ( ( car makers ) , and ( ( model list ) satisfied that ( ( id of people ) equal to ( maker of poker player ) ) ) ) , grouped by ( id of people ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) ), and intersect with ( ( id of people ) , ( maker of people ) that belongs to ( ( car makers ) , and ( ( model list ) satisfied that ( ( id of people ) equal to ( maker of poker player ) ) ) , and ( ( car names ) satisfied that ( ( model of poker player ) equal to ( model of car makers ) ) ) ) , grouped by ( id of people ) , that have ( ( the number of ( all items ) ) greater than ( 3 ) ))",
    "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'": "( series name of people ) , ( country of people ) that belongs to ( ( tv channel ) , and ( ( cartoon ) satisfied that ( ( id of people ) equal to ( channel of poker player ) ) ) ) , that have ( ( directed by of poker player ) equal to ( 'michael chang' ) ), and intersect with ( ( series name of people ) , ( country of people ) that belongs to ( ( tv channel ) , and ( ( cartoon ) satisfied that ( ( id of people ) equal to ( channel of poker player ) ) ) ) , that have ( ( directed by of poker player ) equal to ( 'ben jones' ) ))",
    "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"": "( the number of ( all items ) ) that belongs to ( templates ) , that have ( ( template type code ) equal to ( cv ) )",
    "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")": "( name ) that belongs to ( country ) , that have ( ( ( continent ) equal to ( asia ) ) and ( ( population ) greater than ( the minimum of ( population ) ) that belongs to ( country ) , that have ( ( continent ) equal to ( africa ) ) ) )",
    "SELECT name ,  date FROM battle": "( name ) , ( date ) that belongs to ( battle )",
    "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")": "( name ) that belongs to ( country ) , that have ( ( ( continent ) equal to ( africa ) ) and ( ( population ) less than ( the minimum of ( population ) ) that belongs to ( country ) , that have ( ( continent ) equal to ( asia ) ) ) )",
    "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3": "( distinct ( winner name ) ) , ( winner rank ) that belongs to ( matches ) , ordered by ( ( winner age ) ) , limited to the top ( 3 )",
    "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009": "( the average of ( num of staff ) ) that belongs to ( museum ) , that have ( ( open year ) less than ( 2009 ) )",
    "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name": "( the number of ( all items ) ) , ( name of ship ) that belongs to ( ( hiring ) , and ( ( shop ) satisfied that ( ( shop id of students ) equal to ( shop id of ship ) ) ) ) , grouped by ( name of ship )",
    "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"": "( name of people ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of people ) equal to ( countrycode of poker player ) ) ) ) , that have ( ( language of poker player ) equal to ( english ) ), and intersect with ( ( name of people ) that belongs to ( ( country ) , and ( ( countrylanguage ) satisfied that ( ( code of people ) equal to ( countrycode of poker player ) ) ) ) , that have ( ( language of poker player ) equal to ( french ) ))",
    "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id": "( concert name of ship ) , ( theme of ship ) , ( the number of ( all items ) ) that belongs to ( ( singer in concert ) , and ( ( concert ) satisfied that ( ( concert id of students ) equal to ( concert id of ship ) ) ) ) , grouped by ( concert id of ship )",
    "SELECT max(killed) ,  min(killed) FROM death": "( the maximum of ( killed ) ) , ( the minimum of ( killed ) ) that belongs to ( death )",
    "SELECT note FROM death WHERE note LIKE '%East%'": "( note ) that belongs to ( death ) , that have ( ( note ) like ( '%east%' ) )",
    "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;": "( makeid of poker player ) , ( make of poker player ) that belongs to ( ( cars data ) , and ( ( car names ) satisfied that ( ( id of people ) equal to ( makeid of poker player ) ) ) ) , that have ( ( ( horsepower of people ) greater than ( the minimum of ( horsepower ) ) that belongs to ( cars data ) ) and ( ( cylinders of people ) less than or equal to ( 3 ) ) )",
    "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2": "( name of poker player ) that belongs to ( ( friend ) , and ( ( highschooler ) satisfied that ( ( student id of people ) equal to ( id of poker player ) ) ) ) , that have ( ( grade of poker player ) greater than ( 5 ) ) , grouped by ( student id of people ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")": "( name ) that belongs to ( country ) , that have ( ( ( continent ) equal to ( asia ) ) and ( ( population ) greater than ( the maximum of ( population ) ) that belongs to ( country ) , that have ( ( continent ) equal to ( africa ) ) ) )",
    "SELECT name ,  tonnage FROM ship ORDER BY name DESC": "( name ) , ( tonnage ) that belongs to ( ship ) , ordered by ( ( name ) in descending order )",
    "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'": "( name ) , ( result ) that belongs to ( battle ) , that have ( ( bulgarian commander ) not equal to ( 'boril' ) )",
    "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents": "( template id ) that belongs to ( templates ), and except that ( ( template id ) that belongs to ( documents ))",
    "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4": "( grade ) that belongs to ( highschooler ) , grouped by ( grade ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 4 ) )",
    "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2": "( hometown ) that belongs to ( teacher ) , grouped by ( hometown ) , that have ( ( the number of ( all items ) ) greater than or equal to ( 2 ) )",
    "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1": "( id of students ) , ( name of students ) , ( age of students ) that belongs to ( ( visitor ) , and ( ( visit ) satisfied that ( ( id of students ) equal to ( visitor id of ship ) ) ) ) , grouped by ( id of students ) , that have ( ( the number of ( all items ) ) greater than ( 1 ) )",
    "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'": "( distinct ( fname of people ) ) that belongs to ( ( student ) , and ( ( has pet ) satisfied that ( ( stuid of people ) equal to ( stuid of poker player ) ) ) , and ( ( pets ) satisfied that ( ( petid of car makers ) equal to ( petid of poker player ) ) ) ) , that have ( ( ( pettype of car makers ) equal to ( 'cat' ) ) or ( ( pettype of car makers ) equal to ( 'dog' ) ) )",
    "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'": "( created of poker player ) , ( state of poker player ) , ( phone number of poker player ) that belongs to ( ( contestants ) , and ( ( votes ) satisfied that ( ( contestant number of people ) equal to ( contestant number of poker player ) ) ) ) , that have ( ( contestant name of people ) equal to ( 'tabatha gehling' ) )",
    "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1": "( document id of people ) , ( document name of poker player ) that belongs to ( ( paragraphs ) , and ( ( documents ) satisfied that ( ( document id of people ) equal to ( document id of poker player ) ) ) ) , grouped by ( document id of people ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( 1 )",
    "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id": "( concert name of poker player ) , ( theme of poker player ) , ( the number of ( all items ) ) that belongs to ( ( singer in concert ) , and ( ( concert ) satisfied that ( ( concert id of people ) equal to ( concert id of poker player ) ) ) ) , grouped by ( concert id of poker player )",
    "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )": "( the number of ( all items ) ) that belongs to ( contestants ) , that have ( ( contestant_number ) not in ( ( contestant number ) that belongs to ( votes ) ) )",
    "SELECT count(*) FROM Transcripts": "( the number of ( all items ) ) that belongs to ( transcripts )",
    "SELECT DISTINCT state ,  created FROM votes": "( distinct ( state ) ) , ( created ) that belongs to ( votes )",
    "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1": "( name of students ) , ( age of students ) that belongs to ( ( visitor ) , and ( ( visit ) satisfied that ( ( id of students ) equal to ( visitor id of ship ) ) ) ) , ordered by ( ( num of ticket of ship ) in descending order ) , limited to the top ( 1 )"
}